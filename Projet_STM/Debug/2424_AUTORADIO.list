
2424_AUTORADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007884  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08007a14  08007a14  00008a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d04  08007d04  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007d04  08007d04  00008d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d0c  08007d0c  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d0c  08007d0c  00008d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d10  08007d10  00008d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007d14  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001604  20000080  08007d94  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001684  08007d94  00009684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001391c  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cd  00000000  00000000  0001c9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8c  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294f7  00000000  00000000  00021cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b16  00000000  00000000  0004b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3fd4  00000000  00000000  00060cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154c95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a44  00000000  00000000  00154cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0015971c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079fc 	.word	0x080079fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080079fc 	.word	0x080079fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MCP23S17_SetBank1>:
// Prototypes des fonctions internes
static void Driver_LED_WriteRegister(Driver_LED_HandleTypeDef *dev, uint8_t reg, uint8_t value);
static uint8_t Driver_LED_ReadRegister(Driver_LED_HandleTypeDef *dev, uint8_t reg);

// Configuration en mode BANK 1
void MCP23S17_SetBank1(Driver_LED_HandleTypeDef *dev) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    // Lire la valeur actuelle de IOCON
    uint8_t iocon = Driver_LED_ReadRegister(dev, MCP23S17_IOCON);
 8000568:	210a      	movs	r1, #10
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f854 	bl	8000618 <Driver_LED_ReadRegister>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]

    // Activer le bit BANK (position 7)
    iocon |= (1 << 7);  // Mettre le bit BANK à 1
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800057a:	73fb      	strb	r3, [r7, #15]

    // Écrire la nouvelle valeur dans IOCON
    Driver_LED_WriteRegister(dev, MCP23S17_IOCON, iocon);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	461a      	mov	r2, r3
 8000580:	210a      	movs	r1, #10
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f824 	bl	80005d0 <Driver_LED_WriteRegister>
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <Driver_LED_Select>:

// Sélectionne le périphérique SPI
static void Driver_LED_Select(Driver_LED_HandleTypeDef *dev) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6858      	ldr	r0, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	891b      	ldrh	r3, [r3, #8]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	f001 fafc 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <Driver_LED_Deselect>:

// Désélectionne le périphérique SPI
static void Driver_LED_Deselect(Driver_LED_HandleTypeDef *dev) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6858      	ldr	r0, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	891b      	ldrh	r3, [r3, #8]
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	f001 faec 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Driver_LED_WriteRegister>:

// Écrit dans un registre du MCP23S17
static void Driver_LED_WriteRegister(Driver_LED_HandleTypeDef *dev, uint8_t reg, uint8_t value) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
 80005dc:	4613      	mov	r3, r2
 80005de:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3] = {MCP23S17_WRITE_OPCODE, reg, value};
 80005e0:	2340      	movs	r3, #64	@ 0x40
 80005e2:	733b      	strb	r3, [r7, #12]
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	737b      	strb	r3, [r7, #13]
 80005e8:	78bb      	ldrb	r3, [r7, #2]
 80005ea:	73bb      	strb	r3, [r7, #14]

    Driver_LED_Select(dev);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffcf 	bl	8000590 <Driver_LED_Select>
    HAL_SPI_Transmit(dev->hspi, data, 3, HAL_MAX_DELAY);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6818      	ldr	r0, [r3, #0]
 80005f6:	f107 010c 	add.w	r1, r7, #12
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	2203      	movs	r2, #3
 8000600:	f002 fea9 	bl	8003356 <HAL_SPI_Transmit>
    HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f000 ff6d 	bl	80014e4 <HAL_Delay>
    Driver_LED_Deselect(dev);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ffd0 	bl	80005b0 <Driver_LED_Deselect>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <Driver_LED_ReadRegister>:

// Lit un registre du MCP23S17
static uint8_t Driver_LED_ReadRegister(Driver_LED_HandleTypeDef *dev, uint8_t reg) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
    uint8_t txData[2] = {MCP23S17_WRITE_OPCODE | 0x01, reg};
 8000624:	2341      	movs	r3, #65	@ 0x41
 8000626:	733b      	strb	r3, [r7, #12]
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	737b      	strb	r3, [r7, #13]
    uint8_t rxData = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	72fb      	strb	r3, [r7, #11]

    Driver_LED_Select(dev);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ffad 	bl	8000590 <Driver_LED_Select>
    HAL_SPI_Transmit(dev->hspi, txData, 2, HAL_MAX_DELAY);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f107 010c 	add.w	r1, r7, #12
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	2202      	movs	r2, #2
 8000644:	f002 fe87 	bl	8003356 <HAL_SPI_Transmit>
    HAL_SPI_Receive(dev->hspi, &rxData, 1, HAL_MAX_DELAY);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	f107 010b 	add.w	r1, r7, #11
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	2201      	movs	r2, #1
 8000656:	f002 fff4 	bl	8003642 <HAL_SPI_Receive>
    HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 ff42 	bl	80014e4 <HAL_Delay>
    Driver_LED_Deselect(dev);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ffa5 	bl	80005b0 <Driver_LED_Deselect>

    return rxData;
 8000666:	7afb      	ldrb	r3, [r7, #11]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <Driver_LED_Init>:

// Initialisation du MCP23S17 pour piloter les LEDs
void Driver_LED_Init(Driver_LED_HandleTypeDef *dev) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    // Configurer le mode BANK 1
    MCP23S17_SetBank1(dev);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff71 	bl	8000560 <MCP23S17_SetBank1>

    // Configurer PORTA et PORTB comme sorties
    Driver_LED_WriteRegister(dev, MCP23S17_IODIRA, 0x00); // PORTA en sortie
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ffa4 	bl	80005d0 <Driver_LED_WriteRegister>
    Driver_LED_WriteRegister(dev, MCP23S17_IODIRB, 0x00); // PORTB en sortie
 8000688:	2200      	movs	r2, #0
 800068a:	2110      	movs	r1, #16
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff9f 	bl	80005d0 <Driver_LED_WriteRegister>

    // Initialiser PORTA et PORTB à 0xFF (LEDs éteintes)
    Driver_LED_WriteRegister(dev, MCP23S17_GPIOA, 0xFF);
 8000692:	22ff      	movs	r2, #255	@ 0xff
 8000694:	2109      	movs	r1, #9
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff9a 	bl	80005d0 <Driver_LED_WriteRegister>
    Driver_LED_WriteRegister(dev, MCP23S17_GPIOB, 0xFF);
 800069c:	22ff      	movs	r2, #255	@ 0xff
 800069e:	2119      	movs	r1, #25
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ff95 	bl	80005d0 <Driver_LED_WriteRegister>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <Driver_LED_SetLEDA>:

// Allume les LEDs sur PORTA
void Driver_LED_SetLEDA(Driver_LED_HandleTypeDef *dev, uint8_t value) {
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	70fb      	strb	r3, [r7, #3]
    Driver_LED_WriteRegister(dev, MCP23S17_GPIOA, value);
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	461a      	mov	r2, r3
 80006be:	2109      	movs	r1, #9
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff85 	bl	80005d0 <Driver_LED_WriteRegister>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <Driver_LED_SetLEDB>:

// Allume les LEDs sur PORTB
void Driver_LED_SetLEDB(Driver_LED_HandleTypeDef *dev, uint8_t value) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	460b      	mov	r3, r1
 80006d8:	70fb      	strb	r3, [r7, #3]
    Driver_LED_WriteRegister(dev, MCP23S17_GPIOB, value);
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	461a      	mov	r2, r3
 80006de:	2119      	movs	r1, #25
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff75 	bl	80005d0 <Driver_LED_WriteRegister>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <Driver_LED_ReadLEDA>:

// Lit l'état des LEDs sur PORTA
uint8_t Driver_LED_ReadLEDA(Driver_LED_HandleTypeDef *dev) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
    return Driver_LED_ReadRegister(dev, MCP23S17_GPIOA);
 80006f6:	2109      	movs	r1, #9
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff8d 	bl	8000618 <Driver_LED_ReadRegister>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Driver_LED_ReadLEDB>:

// Lit l'état des LEDs sur PORTB
uint8_t Driver_LED_ReadLEDB(Driver_LED_HandleTypeDef *dev) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
    return Driver_LED_ReadRegister(dev, MCP23S17_GPIOB);
 8000710:	2119      	movs	r1, #25
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ff80 	bl	8000618 <Driver_LED_ReadRegister>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4a07      	ldr	r2, [pc, #28]	@ (8000750 <vApplicationGetIdleTaskMemory+0x2c>)
 8000734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	4a06      	ldr	r2, [pc, #24]	@ (8000754 <vApplicationGetIdleTaskMemory+0x30>)
 800073a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	2000009c 	.word	0x2000009c
 8000754:	200000f0 	.word	0x200000f0

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b35      	ldr	r3, [pc, #212]	@ (8000844 <MX_GPIO_Init+0xec>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a34      	ldr	r2, [pc, #208]	@ (8000844 <MX_GPIO_Init+0xec>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_GPIO_Init+0xec>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_GPIO_Init+0xec>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a2e      	ldr	r2, [pc, #184]	@ (8000844 <MX_GPIO_Init+0xec>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_GPIO_Init+0xec>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_GPIO_Init+0xec>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	4a28      	ldr	r2, [pc, #160]	@ (8000844 <MX_GPIO_Init+0xec>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007aa:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_GPIO_Init+0xec>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_GPIO_Init+0xec>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <MX_GPIO_Init+0xec>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <MX_GPIO_Init+0xec>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2121      	movs	r1, #33	@ 0x21
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d6:	f001 f9e3 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	481a      	ldr	r0, [pc, #104]	@ (8000848 <MX_GPIO_Init+0xf0>)
 80007e0:	f001 f9de 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4814      	ldr	r0, [pc, #80]	@ (800084c <MX_GPIO_Init+0xf4>)
 80007fc:	f001 f826 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000800:	2321      	movs	r3, #33	@ 0x21
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081a:	f001 f817 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_GPIO_Init+0xf0>)
 8000836:	f001 f809 	bl	800184c <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	48000400 	.word	0x48000400
 800084c:	48000800 	.word	0x48000800

08000850 <__io_putchar>:
		.hspi = &hspi3,
		.cs_port = GPIOB,
		.cs_pin = GPIO_PIN_7
};/* Redirect printf to UART */

int __io_putchar(int ch) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	2201      	movs	r2, #1
 8000860:	4803      	ldr	r0, [pc, #12]	@ (8000870 <__io_putchar+0x20>)
 8000862:	f003 fd63 	bl	800432c <HAL_UART_Transmit>
	return ch;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200007a0 	.word	0x200007a0

08000874 <uart_write>:
static int uart_write(char *s, uint16_t size) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000880:	887a      	ldrh	r2, [r7, #2]
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <uart_write+0x24>)
 800088a:	f003 fd4f 	bl	800432c <HAL_UART_Transmit>
	return size;
 800088e:	887b      	ldrh	r3, [r7, #2]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200007a0 	.word	0x200007a0

0800089c <sh_led>:
static int sh_led(int argc, char **argv) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	@ 0x30
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	if (argc < 3) { // Vérifie si le nombre d'arguments est suffisant
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	dc0e      	bgt.n	80008ca <sh_led+0x2e>
		int size = snprintf(print_buffer, BUFFER_SIZE, "Usage: l <led_number> <state>\r\n");
 80008ac:	4a52      	ldr	r2, [pc, #328]	@ (80009f8 <sh_led+0x15c>)
 80008ae:	2140      	movs	r1, #64	@ 0x40
 80008b0:	4852      	ldr	r0, [pc, #328]	@ (80009fc <sh_led+0x160>)
 80008b2:	f006 f99f 	bl	8006bf4 <sniprintf>
 80008b6:	60f8      	str	r0, [r7, #12]
		uart_write(print_buffer, size);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	484f      	ldr	r0, [pc, #316]	@ (80009fc <sh_led+0x160>)
 80008c0:	f7ff ffd8 	bl	8000874 <uart_write>
		return -1;
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	e092      	b.n	80009f0 <sh_led+0x154>
	}

	int led_number = atoi(argv[1]); // Convertit le numéro de la LED en entier
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	3304      	adds	r3, #4
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f005 ffe7 	bl	80068a4 <atoi>
 80008d6:	6278      	str	r0, [r7, #36]	@ 0x24
	int state = atoi(argv[2]);      // Convertit l'état en entier
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3308      	adds	r3, #8
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 ffe0 	bl	80068a4 <atoi>
 80008e4:	6238      	str	r0, [r7, #32]

	if (led_number < 0 || led_number > 15) { // Vérifie si le numéro de LED est valide
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db02      	blt.n	80008f2 <sh_led+0x56>
 80008ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ee:	2b0f      	cmp	r3, #15
 80008f0:	dd0e      	ble.n	8000910 <sh_led+0x74>
		int size = snprintf(print_buffer, BUFFER_SIZE, "Error: Invalid LED number. Must be between 0 and 15.\r\n");
 80008f2:	4a43      	ldr	r2, [pc, #268]	@ (8000a00 <sh_led+0x164>)
 80008f4:	2140      	movs	r1, #64	@ 0x40
 80008f6:	4841      	ldr	r0, [pc, #260]	@ (80009fc <sh_led+0x160>)
 80008f8:	f006 f97c 	bl	8006bf4 <sniprintf>
 80008fc:	6138      	str	r0, [r7, #16]
		uart_write(print_buffer, size);
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	b29b      	uxth	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	483d      	ldr	r0, [pc, #244]	@ (80009fc <sh_led+0x160>)
 8000906:	f7ff ffb5 	bl	8000874 <uart_write>
		return -1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e06f      	b.n	80009f0 <sh_led+0x154>
	}

	if (state != 0 && state != 1) { // Vérifie si l'état est valide
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d011      	beq.n	800093a <sh_led+0x9e>
 8000916:	6a3b      	ldr	r3, [r7, #32]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d00e      	beq.n	800093a <sh_led+0x9e>
		int size = snprintf(print_buffer, BUFFER_SIZE, "Error: Invalid state. Must be 0 or 1.\r\n");
 800091c:	4a39      	ldr	r2, [pc, #228]	@ (8000a04 <sh_led+0x168>)
 800091e:	2140      	movs	r1, #64	@ 0x40
 8000920:	4836      	ldr	r0, [pc, #216]	@ (80009fc <sh_led+0x160>)
 8000922:	f006 f967 	bl	8006bf4 <sniprintf>
 8000926:	61f8      	str	r0, [r7, #28]
		uart_write(print_buffer, size);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	b29b      	uxth	r3, r3
 800092c:	4619      	mov	r1, r3
 800092e:	4833      	ldr	r0, [pc, #204]	@ (80009fc <sh_led+0x160>)
 8000930:	f7ff ffa0 	bl	8000874 <uart_write>
		return -1;
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	e05a      	b.n	80009f0 <sh_led+0x154>
	}

	// Détermine si la LED est sur GPIOA ou GPIOB
	if (led_number < 8) {
 800093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093c:	2b07      	cmp	r3, #7
 800093e:	dc23      	bgt.n	8000988 <sh_led+0xec>
		uint8_t mask = 1 << led_number;
 8000940:	2201      	movs	r2, #1
 8000942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	767b      	strb	r3, [r7, #25]
		uint8_t current_state = Driver_LED_ReadLEDA(&led_driver);
 800094a:	482f      	ldr	r0, [pc, #188]	@ (8000a08 <sh_led+0x16c>)
 800094c:	f7ff fecf 	bl	80006ee <Driver_LED_ReadLEDA>
 8000950:	4603      	mov	r3, r0
 8000952:	763b      	strb	r3, [r7, #24]

		if (state == 1) {
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d10d      	bne.n	8000976 <sh_led+0xda>
			Driver_LED_SetLEDA(&led_driver, current_state & ~mask); // Allume la LED
 800095a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800095e:	43db      	mvns	r3, r3
 8000960:	b25a      	sxtb	r2, r3
 8000962:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000966:	4013      	ands	r3, r2
 8000968:	b25b      	sxtb	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	4826      	ldr	r0, [pc, #152]	@ (8000a08 <sh_led+0x16c>)
 8000970:	f7ff fe9d 	bl	80006ae <Driver_LED_SetLEDA>
 8000974:	e02c      	b.n	80009d0 <sh_led+0x134>
		} else {
			Driver_LED_SetLEDA(&led_driver, current_state | mask);  // Éteint la LED
 8000976:	7e3a      	ldrb	r2, [r7, #24]
 8000978:	7e7b      	ldrb	r3, [r7, #25]
 800097a:	4313      	orrs	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4619      	mov	r1, r3
 8000980:	4821      	ldr	r0, [pc, #132]	@ (8000a08 <sh_led+0x16c>)
 8000982:	f7ff fe94 	bl	80006ae <Driver_LED_SetLEDA>
 8000986:	e023      	b.n	80009d0 <sh_led+0x134>
		}
	} else {
		uint8_t mask = 1 << (led_number - 8);
 8000988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098a:	3b08      	subs	r3, #8
 800098c:	2201      	movs	r2, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	76fb      	strb	r3, [r7, #27]
		uint8_t current_state = Driver_LED_ReadLEDB(&led_driver);
 8000994:	481c      	ldr	r0, [pc, #112]	@ (8000a08 <sh_led+0x16c>)
 8000996:	f7ff feb7 	bl	8000708 <Driver_LED_ReadLEDB>
 800099a:	4603      	mov	r3, r0
 800099c:	76bb      	strb	r3, [r7, #26]

		if (state == 1) {
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10d      	bne.n	80009c0 <sh_led+0x124>
			Driver_LED_SetLEDB(&led_driver, current_state & ~mask); // Allume la LED
 80009a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	b25a      	sxtb	r2, r3
 80009ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009b0:	4013      	ands	r3, r2
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	4813      	ldr	r0, [pc, #76]	@ (8000a08 <sh_led+0x16c>)
 80009ba:	f7ff fe88 	bl	80006ce <Driver_LED_SetLEDB>
 80009be:	e007      	b.n	80009d0 <sh_led+0x134>
		} else {
			Driver_LED_SetLEDB(&led_driver, current_state | mask);  // Éteint la LED
 80009c0:	7eba      	ldrb	r2, [r7, #26]
 80009c2:	7efb      	ldrb	r3, [r7, #27]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <sh_led+0x16c>)
 80009cc:	f7ff fe7f 	bl	80006ce <Driver_LED_SetLEDB>
		}
	}

	int size = snprintf(print_buffer, BUFFER_SIZE, "LED %d set to %d\r\n", led_number, state);
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d6:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <sh_led+0x170>)
 80009d8:	2140      	movs	r1, #64	@ 0x40
 80009da:	4808      	ldr	r0, [pc, #32]	@ (80009fc <sh_led+0x160>)
 80009dc:	f006 f90a 	bl	8006bf4 <sniprintf>
 80009e0:	6178      	str	r0, [r7, #20]
	uart_write(print_buffer, size);
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <sh_led+0x160>)
 80009ea:	f7ff ff43 	bl	8000874 <uart_write>

	return 0;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3728      	adds	r7, #40	@ 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	08007a14 	.word	0x08007a14
 80009fc:	200002f0 	.word	0x200002f0
 8000a00:	08007a34 	.word	0x08007a34
 8000a04:	08007a6c 	.word	0x08007a6c
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	08007a94 	.word	0x08007a94

08000a10 <sh_led_all_on>:

static int sh_led_all_on(int argc, char **argv) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	Driver_LED_SetLEDA(&led_driver, 0x00); // Allume toutes les LEDs sur PORTA
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <sh_led_all_on+0x3c>)
 8000a1e:	f7ff fe46 	bl	80006ae <Driver_LED_SetLEDA>
	Driver_LED_SetLEDB(&led_driver, 0x00); // Allume toutes les LEDs sur PORTB
 8000a22:	2100      	movs	r1, #0
 8000a24:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <sh_led_all_on+0x3c>)
 8000a26:	f7ff fe52 	bl	80006ce <Driver_LED_SetLEDB>

	int size = snprintf(print_buffer, BUFFER_SIZE, "All LEDs are ON\r\n");
 8000a2a:	4a09      	ldr	r2, [pc, #36]	@ (8000a50 <sh_led_all_on+0x40>)
 8000a2c:	2140      	movs	r1, #64	@ 0x40
 8000a2e:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <sh_led_all_on+0x44>)
 8000a30:	f006 f8e0 	bl	8006bf4 <sniprintf>
 8000a34:	60f8      	str	r0, [r7, #12]
	uart_write(print_buffer, size);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <sh_led_all_on+0x44>)
 8000a3e:	f7ff ff19 	bl	8000874 <uart_write>
	return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	08007aa8 	.word	0x08007aa8
 8000a54:	200002f0 	.word	0x200002f0

08000a58 <task_shell>:

void task_shell(void * unused)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	shell_init();
 8000a60:	f000 f90c 	bl	8000c7c <shell_init>
	shell_add('l', sh_led, "Led <led_number> <state> - Control LED");
 8000a64:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <task_shell+0x2c>)
 8000a66:	4908      	ldr	r1, [pc, #32]	@ (8000a88 <task_shell+0x30>)
 8000a68:	206c      	movs	r0, #108	@ 0x6c
 8000a6a:	f000 f929 	bl	8000cc0 <shell_add>
	shell_add('a', sh_led_all_on, "Allumer toutes les LEDs");
 8000a6e:	4a07      	ldr	r2, [pc, #28]	@ (8000a8c <task_shell+0x34>)
 8000a70:	4907      	ldr	r1, [pc, #28]	@ (8000a90 <task_shell+0x38>)
 8000a72:	2061      	movs	r0, #97	@ 0x61
 8000a74:	f000 f924 	bl	8000cc0 <shell_add>
	shell_run();	// boucle infinie
 8000a78:	f000 f9ce 	bl	8000e18 <shell_run>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08007abc 	.word	0x08007abc
 8000a88:	0800089d 	.word	0x0800089d
 8000a8c:	08007ae4 	.word	0x08007ae4
 8000a90:	08000a11 	.word	0x08000a11

08000a94 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/
	HAL_Init();
 8000a9a:	f000 fca7 	bl	80013ec <HAL_Init>
	SystemClock_Config();
 8000a9e:	f000 f831 	bl	8000b04 <SystemClock_Config>
	MX_GPIO_Init();
 8000aa2:	f7ff fe59 	bl	8000758 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000aa6:	f000 fbe3 	bl	8001270 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000aaa:	f000 fa1f 	bl	8000eec <MX_SPI3_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f001 f873 	bl	8001ba0 <HAL_GPIO_WritePin>



	// Initialiser le driver avant d'exécuter le shell
	Driver_LED_Init(&led_driver);
 8000aba:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <main+0x5c>)
 8000abc:	f7ff fdd8 	bl	8000670 <Driver_LED_Init>


	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS) {
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <main+0x60>)
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ace:	490a      	ldr	r1, [pc, #40]	@ (8000af8 <main+0x64>)
 8000ad0:	480a      	ldr	r0, [pc, #40]	@ (8000afc <main+0x68>)
 8000ad2:	f004 fe9b 	bl	800580c <xTaskCreate>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d004      	beq.n	8000ae6 <main+0x52>
		printf("Error creating task shell\r\n");
 8000adc:	4808      	ldr	r0, [pc, #32]	@ (8000b00 <main+0x6c>)
 8000ade:	f006 f881 	bl	8006be4 <puts>
		Error_Handler();
 8000ae2:	f000 f860 	bl	8000ba6 <Error_Handler>
	}

	vTaskStartScheduler();
 8000ae6:	f004 ffc9 	bl	8005a7c <vTaskStartScheduler>

	/* Infinite loop */
	while (1) {
 8000aea:	bf00      	nop
 8000aec:	e7fd      	b.n	8000aea <main+0x56>
 8000aee:	bf00      	nop
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000330 	.word	0x20000330
 8000af8:	08007afc 	.word	0x08007afc
 8000afc:	08000a59 	.word	0x08000a59
 8000b00:	08007b04 	.word	0x08007b04

08000b04 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b096      	sub	sp, #88	@ 0x58
 8000b08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2244      	movs	r2, #68	@ 0x44
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f006 f97a 	bl	8006e0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b26:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b2a:	f001 f85f 	bl	8001bec <HAL_PWREx_ControlVoltageScaling>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000b34:	f000 f837 	bl	8000ba6 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b40:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b42:	2310      	movs	r3, #16
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000b52:	230a      	movs	r3, #10
 8000b54:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b56:	2307      	movs	r3, #7
 8000b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f896 	bl	8001c98 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000b72:	f000 f818 	bl	8000ba6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fc5e 	bl	8002450 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000b9a:	f000 f804 	bl	8000ba6 <Error_Handler>
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3758      	adds	r7, #88	@ 0x58
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000baa:	b672      	cpsid	i
}
 8000bac:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bae:	bf00      	nop
 8000bb0:	e7fd      	b.n	8000bae <Error_Handler+0x8>
	...

08000bb4 <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

static char uart_read() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, HAL_MAX_DELAY);
 8000bba:	1df9      	adds	r1, r7, #7
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <uart_read+0x20>)
 8000bc4:	f003 fc3b 	bl	800443e <HAL_UART_Receive>

	return c;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200007a0 	.word	0x200007a0

08000bd8 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000be4:	887a      	ldrh	r2, [r7, #2]
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <uart_write+0x24>)
 8000bee:	f003 fb9d 	bl	800432c <HAL_UART_Transmit>
	return size;
 8000bf2:	887b      	ldrh	r3, [r7, #2]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200007a0 	.word	0x200007a0

08000c00 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e022      	b.n	8000c56 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000c10:	4916      	ldr	r1, [pc, #88]	@ (8000c6c <sh_help+0x6c>)
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	4912      	ldr	r1, [pc, #72]	@ (8000c6c <sh_help+0x6c>)
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	3308      	adds	r3, #8
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <sh_help+0x70>)
 8000c3a:	2180      	movs	r1, #128	@ 0x80
 8000c3c:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <sh_help+0x74>)
 8000c3e:	f005 ffd9 	bl	8006bf4 <sniprintf>
 8000c42:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480a      	ldr	r0, [pc, #40]	@ (8000c74 <sh_help+0x74>)
 8000c4c:	f7ff ffc4 	bl	8000bd8 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <sh_help+0x78>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbd7      	blt.n	8000c10 <sh_help+0x10>
	}

	return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200003b8 	.word	0x200003b8
 8000c70:	08007b20 	.word	0x08007b20
 8000c74:	20000334 	.word	0x20000334
 8000c78:	200003b4 	.word	0x200003b4

08000c7c <shell_init>:

void shell_init() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
    int size = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]

    size = snprintf(print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <shell_init+0x34>)
 8000c88:	2180      	movs	r1, #128	@ 0x80
 8000c8a:	480a      	ldr	r0, [pc, #40]	@ (8000cb4 <shell_init+0x38>)
 8000c8c:	f005 ffb2 	bl	8006bf4 <sniprintf>
 8000c90:	6078      	str	r0, [r7, #4]
    uart_write(print_buffer, size);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <shell_init+0x38>)
 8000c9a:	f7ff ff9d 	bl	8000bd8 <uart_write>

    shell_add('h', sh_help, "Help");
 8000c9e:	4a06      	ldr	r2, [pc, #24]	@ (8000cb8 <shell_init+0x3c>)
 8000ca0:	4906      	ldr	r1, [pc, #24]	@ (8000cbc <shell_init+0x40>)
 8000ca2:	2068      	movs	r0, #104	@ 0x68
 8000ca4:	f000 f80c 	bl	8000cc0 <shell_add>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	08007b2c 	.word	0x08007b2c
 8000cb4:	20000334 	.word	0x20000334
 8000cb8:	08007b54 	.word	0x08007b54
 8000cbc:	08000c01 	.word	0x08000c01

08000cc0 <shell_add>:


int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <shell_add+0x74>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cd4:	dc26      	bgt.n	8000d24 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <shell_add+0x74>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4917      	ldr	r1, [pc, #92]	@ (8000d38 <shell_add+0x78>)
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <shell_add+0x74>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4912      	ldr	r1, [pc, #72]	@ (8000d38 <shell_add+0x78>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <shell_add+0x74>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	490c      	ldr	r1, [pc, #48]	@ (8000d38 <shell_add+0x78>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	440b      	add	r3, r1
 8000d10:	3308      	adds	r3, #8
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <shell_add+0x74>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <shell_add+0x74>)
 8000d1e:	6013      	str	r3, [r2, #0]
		return 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e001      	b.n	8000d28 <shell_add+0x68>
	}

	return -1;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200003b4 	.word	0x200003b4
 8000d38:	200003b8 	.word	0x200003b8

08000d3c <shell_exec>:
int shell_exec(char * buf) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b090      	sub	sp, #64	@ 0x40
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d50:	e040      	b.n	8000dd4 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8000d52:	492d      	ldr	r1, [pc, #180]	@ (8000e08 <shell_exec+0xcc>)
 8000d54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d131      	bne.n	8000dce <shell_exec+0x92>
			argc = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d76:	e013      	b.n	8000da0 <shell_exec+0x64>
				if(*p == ' ') {
 8000d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b20      	cmp	r3, #32
 8000d7e:	d10c      	bne.n	8000d9a <shell_exec+0x5e>
					*p = '\0';
 8000d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000d8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d8e:	3201      	adds	r2, #1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	3340      	adds	r3, #64	@ 0x40
 8000d94:	443b      	add	r3, r7
 8000d96:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <shell_exec+0x72>
 8000da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000daa:	2b07      	cmp	r3, #7
 8000dac:	dde4      	ble.n	8000d78 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8000dae:	4916      	ldr	r1, [pc, #88]	@ (8000e08 <shell_exec+0xcc>)
 8000db0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f107 020c 	add.w	r2, r7, #12
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000dc8:	4798      	blx	r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	e017      	b.n	8000dfe <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <shell_exec+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbb9      	blt.n	8000d52 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000dde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000de2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e10 <shell_exec+0xd4>)
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <shell_exec+0xd8>)
 8000de8:	f005 ff04 	bl	8006bf4 <sniprintf>
 8000dec:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8000dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <shell_exec+0xd8>)
 8000df6:	f7ff feef 	bl	8000bd8 <uart_write>
	return -1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3740      	adds	r7, #64	@ 0x40
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200003b8 	.word	0x200003b8
 8000e0c:	200003b4 	.word	0x200003b4
 8000e10:	08007b5c 	.word	0x08007b5c
 8000e14:	20000334 	.word	0x20000334

08000e18 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
	int reading = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8000e26:	2102      	movs	r1, #2
 8000e28:	482a      	ldr	r0, [pc, #168]	@ (8000ed4 <shell_run+0xbc>)
 8000e2a:	f7ff fed5 	bl	8000bd8 <uart_write>
		reading = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8000e32:	e047      	b.n	8000ec4 <shell_run+0xac>
			char c = uart_read();
 8000e34:	f7ff febe 	bl	8000bb4 <uart_read>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d025      	beq.n	8000e8e <shell_run+0x76>
 8000e42:	2b0d      	cmp	r3, #13
 8000e44:	d12e      	bne.n	8000ea4 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8000e46:	4a24      	ldr	r2, [pc, #144]	@ (8000ed8 <shell_run+0xc0>)
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	4824      	ldr	r0, [pc, #144]	@ (8000edc <shell_run+0xc4>)
 8000e4c:	f005 fed2 	bl	8006bf4 <sniprintf>
 8000e50:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	4820      	ldr	r0, [pc, #128]	@ (8000edc <shell_run+0xc4>)
 8000e5a:	f7ff febd 	bl	8000bd8 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	60ba      	str	r2, [r7, #8]
 8000e64:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <shell_run+0xc8>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <shell_run+0xc8>)
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee4 <shell_run+0xcc>)
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	481a      	ldr	r0, [pc, #104]	@ (8000edc <shell_run+0xc4>)
 8000e72:	f005 febf 	bl	8006bf4 <sniprintf>
 8000e76:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4817      	ldr	r0, [pc, #92]	@ (8000edc <shell_run+0xc4>)
 8000e80:	f7ff feaa 	bl	8000bd8 <uart_write>
				reading = 0;        //exit read loop
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
				break;
 8000e8c:	e01a      	b.n	8000ec4 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dd16      	ble.n	8000ec2 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	4812      	ldr	r0, [pc, #72]	@ (8000ee8 <shell_run+0xd0>)
 8000e9e:	f7ff fe9b 	bl	8000bd8 <uart_write>
				}
				break;
 8000ea2:	e00e      	b.n	8000ec2 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ea8:	dc0c      	bgt.n	8000ec4 <shell_run+0xac>
					uart_write(&c, 1);
 8000eaa:	1cfb      	adds	r3, r7, #3
 8000eac:	2101      	movs	r1, #1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe92 	bl	8000bd8 <uart_write>
					cmd_buffer[pos++] = c; //store
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	78f9      	ldrb	r1, [r7, #3]
 8000ebc:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <shell_run+0xc8>)
 8000ebe:	54d1      	strb	r1, [r2, r3]
 8000ec0:	e000      	b.n	8000ec4 <shell_run+0xac>
				break;
 8000ec2:	bf00      	nop
		while(reading) {
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1b4      	bne.n	8000e34 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <shell_run+0xc8>)
 8000ecc:	f7ff ff36 	bl	8000d3c <shell_exec>
		uart_write(prompt, 2);
 8000ed0:	e7a9      	b.n	8000e26 <shell_run+0xe>
 8000ed2:	bf00      	nop
 8000ed4:	20000010 	.word	0x20000010
 8000ed8:	08007b74 	.word	0x08007b74
 8000edc:	20000334 	.word	0x20000334
 8000ee0:	200006b8 	.word	0x200006b8
 8000ee4:	08007b78 	.word	0x08007b78
 8000ee8:	2000000c 	.word	0x2000000c

08000eec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <MX_SPI3_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000ef8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000efc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f22:	2210      	movs	r2, #16
 8000f24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f46:	2208      	movs	r2, #8
 8000f48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_SPI3_Init+0x74>)
 8000f4c:	f002 f960 	bl	8003210 <HAL_SPI_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f7ff fe26 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000738 	.word	0x20000738
 8000f64:	40003c00 	.word	0x40003c00

08000f68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a29      	ldr	r2, [pc, #164]	@ (800102c <HAL_SPI_MspInit+0xc4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d14c      	bne.n	8001024 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f8a:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	4a28      	ldr	r2, [pc, #160]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <HAL_SPI_MspInit+0xc8>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fd2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4811      	ldr	r0, [pc, #68]	@ (8001034 <HAL_SPI_MspInit+0xcc>)
 8000ff0:	f000 fc2c 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001004:	2306      	movs	r3, #6
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	480a      	ldr	r0, [pc, #40]	@ (8001038 <HAL_SPI_MspInit+0xd0>)
 8001010:	f000 fc1c 	bl	800184c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2105      	movs	r1, #5
 8001018:	2033      	movs	r0, #51	@ 0x33
 800101a:	f000 fb62 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800101e:	2033      	movs	r0, #51	@ 0x33
 8001020:	f000 fb7b 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	@ 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40003c00 	.word	0x40003c00
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800
 8001038:	48000400 	.word	0x48000400

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_MspInit+0x4c>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001046:	4a10      	ldr	r2, [pc, #64]	@ (8001088 <HAL_MspInit+0x4c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6613      	str	r3, [r2, #96]	@ 0x60
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_MspInit+0x4c>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_MspInit+0x4c>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	6593      	str	r3, [r2, #88]	@ 0x58
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <HAL_MspInit+0x4c>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	210f      	movs	r1, #15
 8001076:	f06f 0001 	mvn.w	r0, #1
 800107a:	f000 fb32 	bl	80016e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c6:	f000 f9ed 	bl	80014a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010ca:	f004 ffd1 	bl	8006070 <xTaskGetSchedulerState>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d001      	beq.n	80010d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010d4:	f005 f9a8 	bl	8006428 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <USART2_IRQHandler+0x10>)
 80010e2:	f003 fa75 	bl	80045d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200007a0 	.word	0x200007a0

080010f0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <SPI3_IRQHandler+0x10>)
 80010f6:	f002 fdfb 	bl	8003cf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000738 	.word	0x20000738

08001104 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e00a      	b.n	800112c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001116:	f3af 8000 	nop.w
 800111a:	4601      	mov	r1, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	60ba      	str	r2, [r7, #8]
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf0      	blt.n	8001116 <_read+0x12>
  }

  return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e009      	b.n	8001164 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fb79 	bl	8000850 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbf1      	blt.n	8001150 <_write+0x12>
  }
  return len;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_close>:

int _close(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119e:	605a      	str	r2, [r3, #4]
  return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_isatty>:

int _isatty(int file)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	@ (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f005 fe4a 	bl	8006ea8 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20018000 	.word	0x20018000
 8001240:	00000400 	.word	0x00000400
 8001244:	2000079c 	.word	0x2000079c
 8001248:	20001688 	.word	0x20001688

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	@ (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001276:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <MX_USART2_UART_Init+0x5c>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012b4:	f002 ffec 	bl	8004290 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012be:	f7ff fc72 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200007a0 	.word	0x200007a0
 80012cc:	40004400 	.word	0x40004400

080012d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0ac      	sub	sp, #176	@ 0xb0
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2288      	movs	r2, #136	@ 0x88
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f005 fd8b 	bl	8006e0c <memset>
  if(uartHandle->Instance==USART2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a25      	ldr	r2, [pc, #148]	@ (8001390 <HAL_UART_MspInit+0xc0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d143      	bne.n	8001388 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001304:	2300      	movs	r3, #0
 8001306:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fac3 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001318:	f7ff fc45 	bl	8000ba6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <HAL_UART_MspInit+0xc4>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <HAL_UART_MspInit+0xc4>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001326:	6593      	str	r3, [r2, #88]	@ 0x58
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <HAL_UART_MspInit+0xc4>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_UART_MspInit+0xc4>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <HAL_UART_MspInit+0xc4>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_UART_MspInit+0xc4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 800134c:	230c      	movs	r3, #12
 800134e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001364:	2307      	movs	r3, #7
 8001366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001374:	f000 fa6a 	bl	800184c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2105      	movs	r1, #5
 800137c:	2026      	movs	r0, #38	@ 0x26
 800137e:	f000 f9b0 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001382:	2026      	movs	r0, #38	@ 0x26
 8001384:	f000 f9c9 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	37b0      	adds	r7, #176	@ 0xb0
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000

08001398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800139c:	f7ff ff56 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f005 fd75 	bl	8006eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ca:	f7ff fb63 	bl	8000a94 <main>

080013ce <LoopForever>:

LoopForever:
    b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80013dc:	08007d14 	.word	0x08007d14
  ldr r2, =_sbss
 80013e0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80013e4:	20001684 	.word	0x20001684

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <HAL_Init+0x3c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001428 <HAL_Init+0x3c>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001400:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001402:	2003      	movs	r0, #3
 8001404:	f000 f962 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001408:	200f      	movs	r0, #15
 800140a:	f000 f80f 	bl	800142c <HAL_InitTick>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	e001      	b.n	800141e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141a:	f7ff fe0f 	bl	800103c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141e:	79fb      	ldrb	r3, [r7, #7]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_InitTick+0x6c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d023      	beq.n	8001488 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_InitTick+0x70>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f96d 	bl	8001736 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10f      	bne.n	8001482 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d809      	bhi.n	800147c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f937 	bl	80016e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_InitTick+0x74>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e007      	b.n	800148c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e004      	b.n	800148c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e001      	b.n	800148c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000001c 	.word	0x2000001c
 800149c:	20000014 	.word	0x20000014
 80014a0:	20000018 	.word	0x20000018

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000001c 	.word	0x2000001c
 80014c8:	20000828 	.word	0x20000828

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000828 	.word	0x20000828

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000001c 	.word	0x2000001c

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	@ (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4907      	ldr	r1, [pc, #28]	@ (80015c8 <__NVIC_EnableIRQ+0x38>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	@ (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	@ (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	@ 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	@ 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff8e 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff29 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff3e 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff8e 	bl	8001620 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff31 	bl	8001590 <__NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffa2 	bl	8001688 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d008      	beq.n	8001778 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2204      	movs	r2, #4
 800176a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e022      	b.n	80017be <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 020e 	bic.w	r2, r2, #14
 8001786:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179c:	f003 021c 	and.w	r2, r3, #28
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d005      	beq.n	80017ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2204      	movs	r2, #4
 80017e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e029      	b.n	8001842 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 020e 	bic.w	r2, r2, #14
 80017fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f003 021c 	and.w	r2, r3, #28
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
    }
  }
  return status;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185a:	e17f      	b.n	8001b5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8171 	beq.w	8001b56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d005      	beq.n	800188c <HAL_GPIO_Init+0x40>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d130      	bne.n	80018ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c2:	2201      	movs	r2, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	f003 0201 	and.w	r2, r3, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d118      	bne.n	800192c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001900:	2201      	movs	r2, #1
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	f003 0201 	and.w	r2, r3, #1
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b03      	cmp	r3, #3
 8001936:	d017      	beq.n	8001968 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d123      	bne.n	80019bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	6939      	ldr	r1, [r7, #16]
 80019b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80ac 	beq.w	8001b56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001b7c <HAL_GPIO_Init+0x330>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	4a5e      	ldr	r2, [pc, #376]	@ (8001b7c <HAL_GPIO_Init+0x330>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b7c <HAL_GPIO_Init+0x330>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a16:	4a5a      	ldr	r2, [pc, #360]	@ (8001b80 <HAL_GPIO_Init+0x334>)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a40:	d025      	beq.n	8001a8e <HAL_GPIO_Init+0x242>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4f      	ldr	r2, [pc, #316]	@ (8001b84 <HAL_GPIO_Init+0x338>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01f      	beq.n	8001a8a <HAL_GPIO_Init+0x23e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b88 <HAL_GPIO_Init+0x33c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_Init+0x23a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4d      	ldr	r2, [pc, #308]	@ (8001b8c <HAL_GPIO_Init+0x340>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0x236>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b90 <HAL_GPIO_Init+0x344>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_Init+0x232>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4b      	ldr	r2, [pc, #300]	@ (8001b94 <HAL_GPIO_Init+0x348>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x22e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b98 <HAL_GPIO_Init+0x34c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_Init+0x22a>
 8001a72:	2306      	movs	r3, #6
 8001a74:	e00c      	b.n	8001a90 <HAL_GPIO_Init+0x244>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00a      	b.n	8001a90 <HAL_GPIO_Init+0x244>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x244>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x244>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x244>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x244>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x244>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa0:	4937      	ldr	r1, [pc, #220]	@ (8001b80 <HAL_GPIO_Init+0x334>)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <HAL_GPIO_Init+0x350>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad2:	4a32      	ldr	r2, [pc, #200]	@ (8001b9c <HAL_GPIO_Init+0x350>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ad8:	4b30      	ldr	r3, [pc, #192]	@ (8001b9c <HAL_GPIO_Init+0x350>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001afc:	4a27      	ldr	r2, [pc, #156]	@ (8001b9c <HAL_GPIO_Init+0x350>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b02:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <HAL_GPIO_Init+0x350>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b26:	4a1d      	ldr	r2, [pc, #116]	@ (8001b9c <HAL_GPIO_Init+0x350>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <HAL_GPIO_Init+0x350>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b50:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <HAL_GPIO_Init+0x350>)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f47f ae78 	bne.w	800185c <HAL_GPIO_Init+0x10>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	48000c00 	.word	0x48000c00
 8001b90:	48001000 	.word	0x48001000
 8001b94:	48001400 	.word	0x48001400
 8001b98:	48001800 	.word	0x48001800
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bd4:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40007000 	.word	0x40007000

08001bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bfa:	d130      	bne.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bfc:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c08:	d038      	beq.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c12:	4a1e      	ldr	r2, [pc, #120]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2232      	movs	r2, #50	@ 0x32
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	4a1b      	ldr	r2, [pc, #108]	@ (8001c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0c9b      	lsrs	r3, r3, #18
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c30:	e002      	b.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c44:	d102      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f2      	bne.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c58:	d110      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e00f      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6a:	d007      	beq.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c74:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000014 	.word	0x20000014
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e3ca      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001caa:	4b97      	ldr	r3, [pc, #604]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb4:	4b94      	ldr	r3, [pc, #592]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80e4 	beq.w	8001e94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4a>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	f040 808b 	bne.w	8001df0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	f040 8087 	bne.w	8001df0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ce2:	4b89      	ldr	r3, [pc, #548]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x62>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e3a2      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	4b82      	ldr	r3, [pc, #520]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <HAL_RCC_OscConfig+0x7c>
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d12:	e005      	b.n	8001d20 <HAL_RCC_OscConfig+0x88>
 8001d14:	4b7c      	ldr	r3, [pc, #496]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d223      	bcs.n	8001d6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fd55 	bl	80027d8 <RCC_SetFlashLatencyFromMSIRange>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e383      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d38:	4b73      	ldr	r3, [pc, #460]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a72      	ldr	r2, [pc, #456]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b70      	ldr	r3, [pc, #448]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	496d      	ldr	r1, [pc, #436]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d56:	4b6c      	ldr	r3, [pc, #432]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	4968      	ldr	r1, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
 8001d6a:	e025      	b.n	8001db8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6c:	4b66      	ldr	r3, [pc, #408]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a65      	ldr	r2, [pc, #404]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b63      	ldr	r3, [pc, #396]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4960      	ldr	r1, [pc, #384]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	495b      	ldr	r1, [pc, #364]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fd15 	bl	80027d8 <RCC_SetFlashLatencyFromMSIRange>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e343      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001db8:	f000 fc4a 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b52      	ldr	r3, [pc, #328]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	4950      	ldr	r1, [pc, #320]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001dd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fb25 	bl	800142c <HAL_InitTick>
 8001de2:	4603      	mov	r3, r0
 8001de4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d052      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	e327      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d032      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001df8:	4b43      	ldr	r3, [pc, #268]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a42      	ldr	r2, [pc, #264]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb62 	bl	80014cc <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb5e 	bl	80014cc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e310      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2a:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a36      	ldr	r2, [pc, #216]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4931      	ldr	r1, [pc, #196]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e48:	4b2f      	ldr	r3, [pc, #188]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	492c      	ldr	r1, [pc, #176]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e01a      	b.n	8001e94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a29      	ldr	r2, [pc, #164]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb2f 	bl	80014cc <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e72:	f7ff fb2b 	bl	80014cc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e2dd      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e84:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x1da>
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d074      	beq.n	8001f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x21a>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d10e      	bne.n	8001eca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d10b      	bne.n	8001eca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d064      	beq.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d160      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e2ba      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x24a>
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e026      	b.n	8001f30 <HAL_RCC_OscConfig+0x298>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eea:	d115      	bne.n	8001f18 <HAL_RCC_OscConfig+0x280>
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a02      	ldr	r2, [pc, #8]	@ (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x298>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08007b88 	.word	0x08007b88
 8001f10:	20000014 	.word	0x20000014
 8001f14:	20000018 	.word	0x20000018
 8001f18:	4ba0      	ldr	r3, [pc, #640]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a9f      	ldr	r2, [pc, #636]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b9d      	ldr	r3, [pc, #628]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a9c      	ldr	r2, [pc, #624]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fac8 	bl	80014cc <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fac4 	bl	80014cc <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e276      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4b92      	ldr	r3, [pc, #584]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2a8>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff fab4 	bl	80014cc <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fab0 	bl	80014cc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e262      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7a:	4b88      	ldr	r3, [pc, #544]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2d0>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d060      	beq.n	8002058 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x310>
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d119      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d116      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa8:	4b7c      	ldr	r3, [pc, #496]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x328>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e23f      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b76      	ldr	r3, [pc, #472]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	4973      	ldr	r1, [pc, #460]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd4:	e040      	b.n	8002058 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d023      	beq.n	8002026 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fde:	4b6f      	ldr	r3, [pc, #444]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff fa6f 	bl	80014cc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fa6b 	bl	80014cc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e21d      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002004:	4b65      	ldr	r3, [pc, #404]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b62      	ldr	r3, [pc, #392]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	495f      	ldr	r1, [pc, #380]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
 8002024:	e018      	b.n	8002058 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b5d      	ldr	r3, [pc, #372]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5c      	ldr	r2, [pc, #368]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 800202c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff fa4b 	bl	80014cc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203a:	f7ff fa47 	bl	80014cc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1f9      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800204c:	4b53      	ldr	r3, [pc, #332]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d03c      	beq.n	80020de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206c:	4b4b      	ldr	r3, [pc, #300]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 800206e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002072:	4a4a      	ldr	r2, [pc, #296]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fa26 	bl	80014cc <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fa22 	bl	80014cc <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1d4      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002096:	4b41      	ldr	r3, [pc, #260]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ef      	beq.n	8002084 <HAL_RCC_OscConfig+0x3ec>
 80020a4:	e01b      	b.n	80020de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a6:	4b3d      	ldr	r3, [pc, #244]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 80020a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ac:	4a3b      	ldr	r2, [pc, #236]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7ff fa09 	bl	80014cc <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020be:	f7ff fa05 	bl	80014cc <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e1b7      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d0:	4b32      	ldr	r3, [pc, #200]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 80020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ef      	bne.n	80020be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80a6 	beq.w	8002238 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020f0:	4b2a      	ldr	r3, [pc, #168]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10d      	bne.n	8002118 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b27      	ldr	r3, [pc, #156]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	4a26      	ldr	r2, [pc, #152]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	@ 0x58
 8002108:	4b24      	ldr	r3, [pc, #144]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002114:	2301      	movs	r3, #1
 8002116:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002118:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <HAL_RCC_OscConfig+0x508>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d118      	bne.n	8002156 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002124:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <HAL_RCC_OscConfig+0x508>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <HAL_RCC_OscConfig+0x508>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002130:	f7ff f9cc 	bl	80014cc <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002138:	f7ff f9c8 	bl	80014cc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e17a      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <HAL_RCC_OscConfig+0x508>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d108      	bne.n	8002170 <HAL_RCC_OscConfig+0x4d8>
 800215e:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800216e:	e029      	b.n	80021c4 <HAL_RCC_OscConfig+0x52c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d115      	bne.n	80021a4 <HAL_RCC_OscConfig+0x50c>
 8002178:	4b08      	ldr	r3, [pc, #32]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	4a07      	ldr	r2, [pc, #28]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218e:	4a03      	ldr	r2, [pc, #12]	@ (800219c <HAL_RCC_OscConfig+0x504>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x52c>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	40007000 	.word	0x40007000
 80021a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b4:	4b98      	ldr	r3, [pc, #608]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	4a97      	ldr	r2, [pc, #604]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d016      	beq.n	80021fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff f97e 	bl	80014cc <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7ff f97a 	bl	80014cc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e12a      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ed      	beq.n	80021d4 <HAL_RCC_OscConfig+0x53c>
 80021f8:	e015      	b.n	8002226 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7ff f967 	bl	80014cc <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7ff f963 	bl	80014cc <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e113      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002218:	4b7f      	ldr	r3, [pc, #508]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1ed      	bne.n	8002202 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	4b7a      	ldr	r3, [pc, #488]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002230:	4a79      	ldr	r2, [pc, #484]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002236:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80fe 	beq.w	800243e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	2b02      	cmp	r3, #2
 8002248:	f040 80d0 	bne.w	80023ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800224c:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	429a      	cmp	r2, r3
 800225e:	d130      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	3b01      	subs	r3, #1
 800226c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d127      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d11f      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800228c:	2a07      	cmp	r2, #7
 800228e:	bf14      	ite	ne
 8002290:	2201      	movne	r2, #1
 8002292:	2200      	moveq	r2, #0
 8002294:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	4293      	cmp	r3, r2
 8002298:	d113      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	3b01      	subs	r3, #1
 80022a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d06e      	beq.n	80023a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d069      	beq.n	800239c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022c8:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022d4:	4b50      	ldr	r3, [pc, #320]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0ad      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80022ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022f0:	f7ff f8ec 	bl	80014cc <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff f8e8 	bl	80014cc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e09a      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230a:	4b43      	ldr	r3, [pc, #268]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002316:	4b40      	ldr	r3, [pc, #256]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	4b40      	ldr	r3, [pc, #256]	@ (800241c <HAL_RCC_OscConfig+0x784>)
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002326:	3a01      	subs	r2, #1
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002330:	0212      	lsls	r2, r2, #8
 8002332:	4311      	orrs	r1, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002338:	0852      	lsrs	r2, r2, #1
 800233a:	3a01      	subs	r2, #1
 800233c:	0552      	lsls	r2, r2, #21
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002344:	0852      	lsrs	r2, r2, #1
 8002346:	3a01      	subs	r2, #1
 8002348:	0652      	lsls	r2, r2, #25
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002350:	0912      	lsrs	r2, r2, #4
 8002352:	0452      	lsls	r2, r2, #17
 8002354:	430a      	orrs	r2, r1
 8002356:	4930      	ldr	r1, [pc, #192]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 8002358:	4313      	orrs	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800235c:	4b2e      	ldr	r3, [pc, #184]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2d      	ldr	r2, [pc, #180]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002368:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a2a      	ldr	r2, [pc, #168]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002372:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002374:	f7ff f8aa 	bl	80014cc <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff f8a6 	bl	80014cc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e058      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800239a:	e050      	b.n	800243e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e04f      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d148      	bne.n	800243e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b8:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a16      	ldr	r2, [pc, #88]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023c4:	f7ff f882 	bl	80014cc <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff f87e 	bl	80014cc <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e030      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x734>
 80023ea:	e028      	b.n	800243e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d023      	beq.n	800243a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a08      	ldr	r2, [pc, #32]	@ (8002418 <HAL_RCC_OscConfig+0x780>)
 80023f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff f865 	bl	80014cc <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002404:	e00c      	b.n	8002420 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff f861 	bl	80014cc <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d905      	bls.n	8002420 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e013      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
 8002418:	40021000 	.word	0x40021000
 800241c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_RCC_OscConfig+0x7b0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ec      	bne.n	8002406 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_RCC_OscConfig+0x7b0>)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	4905      	ldr	r1, [pc, #20]	@ (8002448 <HAL_RCC_OscConfig+0x7b0>)
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_RCC_OscConfig+0x7b4>)
 8002434:	4013      	ands	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
 8002438:	e001      	b.n	800243e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	feeefffc 	.word	0xfeeefffc

08002450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0e7      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b75      	ldr	r3, [pc, #468]	@ (800263c <HAL_RCC_ClockConfig+0x1ec>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d910      	bls.n	8002494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b72      	ldr	r3, [pc, #456]	@ (800263c <HAL_RCC_ClockConfig+0x1ec>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0207 	bic.w	r2, r3, #7
 800247a:	4970      	ldr	r1, [pc, #448]	@ (800263c <HAL_RCC_ClockConfig+0x1ec>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b6e      	ldr	r3, [pc, #440]	@ (800263c <HAL_RCC_ClockConfig+0x1ec>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0cf      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d010      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b66      	ldr	r3, [pc, #408]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d908      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b63      	ldr	r3, [pc, #396]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4960      	ldr	r1, [pc, #384]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d04c      	beq.n	8002568 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d121      	bne.n	8002526 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0a6      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ee:	4b54      	ldr	r3, [pc, #336]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d115      	bne.n	8002526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e09a      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002506:	4b4e      	ldr	r3, [pc, #312]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e08e      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002516:	4b4a      	ldr	r3, [pc, #296]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e086      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002526:	4b46      	ldr	r3, [pc, #280]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 0203 	bic.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4943      	ldr	r1, [pc, #268]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002538:	f7fe ffc8 	bl	80014cc <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	e00a      	b.n	8002556 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7fe ffc4 	bl	80014cc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e06e      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	4b3a      	ldr	r3, [pc, #232]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 020c 	and.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	429a      	cmp	r2, r3
 8002566:	d1eb      	bne.n	8002540 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d010      	beq.n	8002596 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	4b31      	ldr	r3, [pc, #196]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002580:	429a      	cmp	r2, r3
 8002582:	d208      	bcs.n	8002596 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b2e      	ldr	r3, [pc, #184]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	492b      	ldr	r1, [pc, #172]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002596:	4b29      	ldr	r3, [pc, #164]	@ (800263c <HAL_RCC_ClockConfig+0x1ec>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d210      	bcs.n	80025c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <HAL_RCC_ClockConfig+0x1ec>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 0207 	bic.w	r2, r3, #7
 80025ac:	4923      	ldr	r1, [pc, #140]	@ (800263c <HAL_RCC_ClockConfig+0x1ec>)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b4:	4b21      	ldr	r3, [pc, #132]	@ (800263c <HAL_RCC_ClockConfig+0x1ec>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e036      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4918      	ldr	r1, [pc, #96]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f0:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4910      	ldr	r1, [pc, #64]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002604:	f000 f824 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	490b      	ldr	r1, [pc, #44]	@ (8002644 <HAL_RCC_ClockConfig+0x1f4>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	4a09      	ldr	r2, [pc, #36]	@ (8002648 <HAL_RCC_ClockConfig+0x1f8>)
 8002622:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <HAL_RCC_ClockConfig+0x1fc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe feff 	bl	800142c <HAL_InitTick>
 800262e:	4603      	mov	r3, r0
 8002630:	72fb      	strb	r3, [r7, #11]

  return status;
 8002632:	7afb      	ldrb	r3, [r7, #11]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40022000 	.word	0x40022000
 8002640:	40021000 	.word	0x40021000
 8002644:	08007b88 	.word	0x08007b88
 8002648:	20000014 	.word	0x20000014
 800264c:	20000018 	.word	0x20000018

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265e:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002668:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x34>
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d121      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d11e      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002684:	4b34      	ldr	r3, [pc, #208]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e005      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026ac:	4a2b      	ldr	r2, [pc, #172]	@ (800275c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d102      	bne.n	80026ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026c8:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	e004      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026d4:	4b23      	ldr	r3, [pc, #140]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x114>)
 80026d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d134      	bne.n	8002748 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026de:	4b1e      	ldr	r3, [pc, #120]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d003      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0xac>
 80026f4:	e005      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x110>)
 80026f8:	617b      	str	r3, [r7, #20]
      break;
 80026fa:	e005      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x114>)
 80026fe:	617b      	str	r3, [r7, #20]
      break;
 8002700:	e002      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	617b      	str	r3, [r7, #20]
      break;
 8002706:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	3301      	adds	r3, #1
 8002714:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	fb03 f202 	mul.w	r2, r3, r2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800272e:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x108>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	0e5b      	lsrs	r3, r3, #25
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	3301      	adds	r3, #1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002748:	69bb      	ldr	r3, [r7, #24]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	@ 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	08007ba0 	.word	0x08007ba0
 8002760:	00f42400 	.word	0x00f42400
 8002764:	007a1200 	.word	0x007a1200

08002768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000014 	.word	0x20000014

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4904      	ldr	r1, [pc, #16]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08007b98 	.word	0x08007b98

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027b0:	f7ff ffda 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0adb      	lsrs	r3, r3, #11
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4904      	ldr	r1, [pc, #16]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08007b98 	.word	0x08007b98

080027d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027f0:	f7ff f9ee 	bl	8001bd0 <HAL_PWREx_GetVoltageRange>
 80027f4:	6178      	str	r0, [r7, #20]
 80027f6:	e014      	b.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b25      	ldr	r3, [pc, #148]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	4a24      	ldr	r2, [pc, #144]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	@ 0x58
 8002804:	4b22      	ldr	r3, [pc, #136]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002810:	f7ff f9de 	bl	8001bd0 <HAL_PWREx_GetVoltageRange>
 8002814:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002816:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281a:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002820:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002828:	d10b      	bne.n	8002842 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b80      	cmp	r3, #128	@ 0x80
 800282e:	d919      	bls.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2ba0      	cmp	r3, #160	@ 0xa0
 8002834:	d902      	bls.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002836:	2302      	movs	r3, #2
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e013      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800283c:	2301      	movs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e010      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b80      	cmp	r3, #128	@ 0x80
 8002846:	d902      	bls.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002848:	2303      	movs	r3, #3
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	e00a      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b80      	cmp	r3, #128	@ 0x80
 8002852:	d102      	bne.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002854:	2302      	movs	r3, #2
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e004      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b70      	cmp	r3, #112	@ 0x70
 800285e:	d101      	bne.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 0207 	bic.w	r2, r3, #7
 800286c:	4909      	ldr	r1, [pc, #36]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002874:	4b07      	ldr	r3, [pc, #28]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40022000 	.word	0x40022000

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a0:	2300      	movs	r3, #0
 80028a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a4:	2300      	movs	r3, #0
 80028a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d041      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028bc:	d02a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028c2:	d824      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028c8:	d008      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028ce:	d81e      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028d8:	d010      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028da:	e018      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028dc:	4b86      	ldr	r3, [pc, #536]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a85      	ldr	r2, [pc, #532]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e8:	e015      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fabb 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028fa:	e00c      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3320      	adds	r3, #32
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fba6 	bl	8003054 <RCCEx_PLLSAI2_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800290c:	e003      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	74fb      	strb	r3, [r7, #19]
      break;
 8002912:	e000      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800291c:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002922:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800292a:	4973      	ldr	r1, [pc, #460]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002932:	e001      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d041      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002948:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800294c:	d02a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800294e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002952:	d824      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002954:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002958:	d008      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800295a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800295e:	d81e      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002968:	d010      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800296a:	e018      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800296c:	4b62      	ldr	r3, [pc, #392]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a61      	ldr	r2, [pc, #388]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002976:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002978:	e015      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fa73 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800298a:	e00c      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3320      	adds	r3, #32
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fb5e 	bl	8003054 <RCCEx_PLLSAI2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800299c:	e003      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	74fb      	strb	r3, [r7, #19]
      break;
 80029a2:	e000      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029ac:	4b52      	ldr	r3, [pc, #328]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ba:	494f      	ldr	r1, [pc, #316]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029c2:	e001      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80a0 	beq.w	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029da:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f0:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	4a40      	ldr	r2, [pc, #256]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80029fc:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a3a      	ldr	r2, [pc, #232]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fd58 	bl	80014cc <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a1e:	e009      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7fe fd54 	bl	80014cc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	74fb      	strb	r3, [r7, #19]
        break;
 8002a32:	e005      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a34:	4b31      	ldr	r3, [pc, #196]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ef      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d15c      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a46:	4b2c      	ldr	r3, [pc, #176]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01f      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d019      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a64:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a76:	4a20      	ldr	r2, [pc, #128]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a90:	4a19      	ldr	r2, [pc, #100]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fd13 	bl	80014cc <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa8:	e00b      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fd0f 	bl	80014cc <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d902      	bls.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	74fb      	strb	r3, [r7, #19]
            break;
 8002ac0:	e006      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ec      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002adc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae6:	4904      	ldr	r1, [pc, #16]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002aee:	e009      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
 8002af4:	e006      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b04:	7c7b      	ldrb	r3, [r7, #17]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0a:	4b9e      	ldr	r3, [pc, #632]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	4a9d      	ldr	r2, [pc, #628]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b22:	4b98      	ldr	r3, [pc, #608]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b28:	f023 0203 	bic.w	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b30:	4994      	ldr	r1, [pc, #592]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b44:	4b8f      	ldr	r3, [pc, #572]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f023 020c 	bic.w	r2, r3, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	498c      	ldr	r1, [pc, #560]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b66:	4b87      	ldr	r3, [pc, #540]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	4983      	ldr	r1, [pc, #524]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b88:	4b7e      	ldr	r3, [pc, #504]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	497b      	ldr	r1, [pc, #492]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002baa:	4b76      	ldr	r3, [pc, #472]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb8:	4972      	ldr	r1, [pc, #456]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	496a      	ldr	r1, [pc, #424]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bee:	4b65      	ldr	r3, [pc, #404]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	4961      	ldr	r1, [pc, #388]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c10:	4b5c      	ldr	r3, [pc, #368]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1e:	4959      	ldr	r1, [pc, #356]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c32:	4b54      	ldr	r3, [pc, #336]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c40:	4950      	ldr	r1, [pc, #320]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c54:	4b4b      	ldr	r3, [pc, #300]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	4948      	ldr	r1, [pc, #288]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c76:	4b43      	ldr	r3, [pc, #268]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	493f      	ldr	r1, [pc, #252]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d028      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c98:	4b3a      	ldr	r3, [pc, #232]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca6:	4937      	ldr	r1, [pc, #220]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b32      	ldr	r3, [pc, #200]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a31      	ldr	r2, [pc, #196]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
 8002cc4:	e011      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cce:	d10c      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f8c8 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d028      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cf6:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d04:	491f      	ldr	r1, [pc, #124]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d14:	d106      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d20:	60d3      	str	r3, [r2, #12]
 8002d22:	e011      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2101      	movs	r1, #1
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 f899 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02b      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d62:	4908      	ldr	r1, [pc, #32]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d72:	d109      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d74:	4b03      	ldr	r3, [pc, #12]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a02      	ldr	r2, [pc, #8]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d7e:	60d3      	str	r3, [r2, #12]
 8002d80:	e014      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f867 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02f      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dc6:	4928      	ldr	r1, [pc, #160]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dd6:	d10d      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f844 	bl	8002e6c <RCCEx_PLLSAI1_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d014      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dee:	7cfb      	ldrb	r3, [r7, #19]
 8002df0:	74bb      	strb	r3, [r7, #18]
 8002df2:	e011      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3320      	adds	r3, #32
 8002e02:	2102      	movs	r1, #2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f925 	bl	8003054 <RCCEx_PLLSAI2_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e24:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e32:	490d      	ldr	r1, [pc, #52]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e56:	4904      	ldr	r1, [pc, #16]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e7a:	4b75      	ldr	r3, [pc, #468]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d018      	beq.n	8002eb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e86:	4b72      	ldr	r3, [pc, #456]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d10d      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
       ||
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
       ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d047      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	e044      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d018      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x86>
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d825      	bhi.n	8002f10 <RCCEx_PLLSAI1_Config+0xa4>
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d002      	beq.n	8002ece <RCCEx_PLLSAI1_Config+0x62>
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d009      	beq.n	8002ee0 <RCCEx_PLLSAI1_Config+0x74>
 8002ecc:	e020      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ece:	4b60      	ldr	r3, [pc, #384]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11d      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ede:	e01a      	b.n	8002f16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d116      	bne.n	8002f1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef0:	e013      	b.n	8002f1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ef2:	4b57      	ldr	r3, [pc, #348]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002efe:	4b54      	ldr	r3, [pc, #336]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f0e:	e006      	b.n	8002f1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e004      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f26:	4b4a      	ldr	r3, [pc, #296]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	4944      	ldr	r1, [pc, #272]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d17d      	bne.n	8003044 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f48:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a40      	ldr	r2, [pc, #256]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fe faba 	bl	80014cc <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f5a:	e009      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f5c:	f7fe fab6 	bl	80014cc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6e:	e005      	b.n	8002f7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f70:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ef      	bne.n	8002f5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d160      	bne.n	8003044 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f88:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6892      	ldr	r2, [r2, #8]
 8002f98:	0211      	lsls	r1, r2, #8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	0912      	lsrs	r2, r2, #4
 8002fa0:	0452      	lsls	r2, r2, #17
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	492a      	ldr	r1, [pc, #168]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	610b      	str	r3, [r1, #16]
 8002faa:	e027      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d112      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002fba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	0211      	lsls	r1, r2, #8
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6912      	ldr	r2, [r2, #16]
 8002fc8:	0852      	lsrs	r2, r2, #1
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	0552      	lsls	r2, r2, #21
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	491f      	ldr	r1, [pc, #124]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	610b      	str	r3, [r1, #16]
 8002fd6:	e011      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fe0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6952      	ldr	r2, [r2, #20]
 8002fee:	0852      	lsrs	r2, r2, #1
 8002ff0:	3a01      	subs	r2, #1
 8002ff2:	0652      	lsls	r2, r2, #25
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	4916      	ldr	r1, [pc, #88]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ffc:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a13      	ldr	r2, [pc, #76]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003002:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003006:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fa60 	bl	80014cc <HAL_GetTick>
 800300c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800300e:	e009      	b.n	8003024 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003010:	f7fe fa5c 	bl	80014cc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d902      	bls.n	8003024 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	73fb      	strb	r3, [r7, #15]
          break;
 8003022:	e005      	b.n	8003030 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003024:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ef      	beq.n	8003010 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	4904      	ldr	r1, [pc, #16]	@ (8003050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000

08003054 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003062:	4b6a      	ldr	r3, [pc, #424]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d018      	beq.n	80030a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800306e:	4b67      	ldr	r3, [pc, #412]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0203 	and.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d10d      	bne.n	800309a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
       ||
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003086:	4b61      	ldr	r3, [pc, #388]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
       ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d047      	beq.n	800312a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	e044      	b.n	800312a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d018      	beq.n	80030da <RCCEx_PLLSAI2_Config+0x86>
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d825      	bhi.n	80030f8 <RCCEx_PLLSAI2_Config+0xa4>
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d002      	beq.n	80030b6 <RCCEx_PLLSAI2_Config+0x62>
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d009      	beq.n	80030c8 <RCCEx_PLLSAI2_Config+0x74>
 80030b4:	e020      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030b6:	4b55      	ldr	r3, [pc, #340]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11d      	bne.n	80030fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c6:	e01a      	b.n	80030fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030c8:	4b50      	ldr	r3, [pc, #320]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d116      	bne.n	8003102 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d8:	e013      	b.n	8003102 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030da:	4b4c      	ldr	r3, [pc, #304]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030e6:	4b49      	ldr	r3, [pc, #292]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030f6:	e006      	b.n	8003106 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      break;
 80030fc:	e004      	b.n	8003108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030fe:	bf00      	nop
 8003100:	e002      	b.n	8003108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003106:	bf00      	nop
    }

    if(status == HAL_OK)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800310e:	4b3f      	ldr	r3, [pc, #252]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	430b      	orrs	r3, r1
 8003124:	4939      	ldr	r1, [pc, #228]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	4313      	orrs	r3, r2
 8003128:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d167      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003130:	4b36      	ldr	r3, [pc, #216]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a35      	ldr	r2, [pc, #212]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313c:	f7fe f9c6 	bl	80014cc <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003142:	e009      	b.n	8003158 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003144:	f7fe f9c2 	bl	80014cc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	73fb      	strb	r3, [r7, #15]
        break;
 8003156:	e005      	b.n	8003164 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003158:	4b2c      	ldr	r3, [pc, #176]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ef      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d14a      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d111      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003170:	4b26      	ldr	r3, [pc, #152]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6892      	ldr	r2, [r2, #8]
 8003180:	0211      	lsls	r1, r2, #8
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68d2      	ldr	r2, [r2, #12]
 8003186:	0912      	lsrs	r2, r2, #4
 8003188:	0452      	lsls	r2, r2, #17
 800318a:	430a      	orrs	r2, r1
 800318c:	491f      	ldr	r1, [pc, #124]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	614b      	str	r3, [r1, #20]
 8003192:	e011      	b.n	80031b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003194:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800319c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	0211      	lsls	r1, r2, #8
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6912      	ldr	r2, [r2, #16]
 80031aa:	0852      	lsrs	r2, r2, #1
 80031ac:	3a01      	subs	r2, #1
 80031ae:	0652      	lsls	r2, r2, #25
 80031b0:	430a      	orrs	r2, r1
 80031b2:	4916      	ldr	r1, [pc, #88]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031b8:	4b14      	ldr	r3, [pc, #80]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a13      	ldr	r2, [pc, #76]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe f982 	bl	80014cc <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031cc:	f7fe f97e 	bl	80014cc <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
          break;
 80031de:	e005      	b.n	80031ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031e0:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ef      	beq.n	80031cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	4904      	ldr	r1, [pc, #16]	@ (800320c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000

08003210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e095      	b.n	800334e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d108      	bne.n	800323c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003232:	d009      	beq.n	8003248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
 800323a:	e005      	b.n	8003248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fe80 	bl	8000f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800327e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003288:	d902      	bls.n	8003290 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e002      	b.n	8003296 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003294:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800329e:	d007      	beq.n	80032b0 <HAL_SPI_Init+0xa0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f2:	ea42 0103 	orr.w	r1, r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	f003 0204 	and.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800332c:	ea42 0103 	orr.w	r1, r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b088      	sub	sp, #32
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003366:	f7fe f8b1 	bl	80014cc <HAL_GetTick>
 800336a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d001      	beq.n	8003380 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	e15c      	b.n	800363a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_SPI_Transmit+0x36>
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e154      	b.n	800363a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_SPI_Transmit+0x48>
 800339a:	2302      	movs	r3, #2
 800339c:	e14d      	b.n	800363a <HAL_SPI_Transmit+0x2e4>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2203      	movs	r2, #3
 80033aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f0:	d10f      	bne.n	8003412 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003400:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003410:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341c:	2b40      	cmp	r3, #64	@ 0x40
 800341e:	d007      	beq.n	8003430 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003438:	d952      	bls.n	80034e0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_SPI_Transmit+0xf2>
 8003442:	8b7b      	ldrh	r3, [r7, #26]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d145      	bne.n	80034d4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	881a      	ldrh	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800346c:	e032      	b.n	80034d4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	d112      	bne.n	80034a2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	1c9a      	adds	r2, r3, #2
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034a0:	e018      	b.n	80034d4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a2:	f7fe f813 	bl	80014cc <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d803      	bhi.n	80034ba <HAL_SPI_Transmit+0x164>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d102      	bne.n	80034c0 <HAL_SPI_Transmit+0x16a>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0b2      	b.n	800363a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1c7      	bne.n	800346e <HAL_SPI_Transmit+0x118>
 80034de:	e083      	b.n	80035e8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_SPI_Transmit+0x198>
 80034e8:	8b7b      	ldrh	r3, [r7, #26]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d177      	bne.n	80035de <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d912      	bls.n	800351e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b02      	subs	r3, #2
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800351c:	e05f      	b.n	80035de <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003544:	e04b      	b.n	80035de <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d12b      	bne.n	80035ac <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d912      	bls.n	8003584 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	881a      	ldrh	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b02      	subs	r3, #2
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003582:	e02c      	b.n	80035de <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035aa:	e018      	b.n	80035de <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ac:	f7fd ff8e 	bl	80014cc <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d803      	bhi.n	80035c4 <HAL_SPI_Transmit+0x26e>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d102      	bne.n	80035ca <HAL_SPI_Transmit+0x274>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e02d      	b.n	800363a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ae      	bne.n	8003546 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fe09 	bl	8004204 <SPI_EndRxTxTransaction>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003638:	2300      	movs	r3, #0
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b088      	sub	sp, #32
 8003646:	af02      	add	r7, sp, #8
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
 8003660:	e123      	b.n	80038aa <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800366a:	d112      	bne.n	8003692 <HAL_SPI_Receive+0x50>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10e      	bne.n	8003692 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2204      	movs	r2, #4
 8003678:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f912 	bl	80038b2 <HAL_SPI_TransmitReceive>
 800368e:	4603      	mov	r3, r0
 8003690:	e10b      	b.n	80038aa <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003692:	f7fd ff1b 	bl	80014cc <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_SPI_Receive+0x62>
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e100      	b.n	80038aa <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_SPI_Receive+0x74>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e0f9      	b.n	80038aa <HAL_SPI_Receive+0x268>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2204      	movs	r2, #4
 80036c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003708:	d908      	bls.n	800371c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e007      	b.n	800372c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800372a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003734:	d10f      	bne.n	8003756 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003744:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003760:	2b40      	cmp	r3, #64	@ 0x40
 8003762:	d007      	beq.n	8003774 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800377c:	d875      	bhi.n	800386a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800377e:	e037      	b.n	80037f0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d117      	bne.n	80037be <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f103 020c 	add.w	r2, r3, #12
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80037bc:	e018      	b.n	80037f0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037be:	f7fd fe85 	bl	80014cc <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d803      	bhi.n	80037d6 <HAL_SPI_Receive+0x194>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d102      	bne.n	80037dc <HAL_SPI_Receive+0x19a>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e05c      	b.n	80038aa <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1c1      	bne.n	8003780 <HAL_SPI_Receive+0x13e>
 80037fc:	e03b      	b.n	8003876 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d115      	bne.n	8003838 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	b292      	uxth	r2, r2
 8003818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003836:	e018      	b.n	800386a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003838:	f7fd fe48 	bl	80014cc <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d803      	bhi.n	8003850 <HAL_SPI_Receive+0x20e>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d102      	bne.n	8003856 <HAL_SPI_Receive+0x214>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e01f      	b.n	80038aa <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1c3      	bne.n	80037fe <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fc6a 	bl	8004154 <SPI_EndRxTransaction>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b08a      	sub	sp, #40	@ 0x28
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038c0:	2301      	movs	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c4:	f7fd fe02 	bl	80014cc <HAL_GetTick>
 80038c8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038d0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038d8:	887b      	ldrh	r3, [r7, #2]
 80038da:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038e0:	7ffb      	ldrb	r3, [r7, #31]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d00c      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x4e>
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038ec:	d106      	bne.n	80038fc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <HAL_SPI_TransmitReceive+0x4a>
 80038f6:	7ffb      	ldrb	r3, [r7, #31]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d001      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
 80038fe:	e1f3      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x60>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x60>
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1e8      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x72>
 8003920:	2302      	movs	r3, #2
 8003922:	e1e1      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x436>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b04      	cmp	r3, #4
 8003936:	d003      	beq.n	8003940 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2205      	movs	r2, #5
 800393c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	887a      	ldrh	r2, [r7, #2]
 8003966:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	887a      	ldrh	r2, [r7, #2]
 800396c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003982:	d802      	bhi.n	800398a <HAL_SPI_TransmitReceive+0xd8>
 8003984:	8abb      	ldrh	r3, [r7, #20]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d908      	bls.n	800399c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e007      	b.n	80039ac <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b6:	2b40      	cmp	r3, #64	@ 0x40
 80039b8:	d007      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039d2:	f240 8083 	bls.w	8003adc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x132>
 80039de:	8afb      	ldrh	r3, [r7, #22]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d16f      	bne.n	8003ac4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a08:	e05c      	b.n	8003ac4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d11b      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x19e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d016      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x19e>
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d113      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	1c9a      	adds	r2, r3, #2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d11c      	bne.n	8003a98 <HAL_SPI_TransmitReceive+0x1e6>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	b292      	uxth	r2, r2
 8003a76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	1c9a      	adds	r2, r3, #2
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a94:	2301      	movs	r3, #1
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a98:	f7fd fd18 	bl	80014cc <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d80d      	bhi.n	8003ac4 <HAL_SPI_TransmitReceive+0x212>
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d009      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e111      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d19d      	bne.n	8003a0a <HAL_SPI_TransmitReceive+0x158>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d197      	bne.n	8003a0a <HAL_SPI_TransmitReceive+0x158>
 8003ada:	e0e5      	b.n	8003ca8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_SPI_TransmitReceive+0x23a>
 8003ae4:	8afb      	ldrh	r3, [r7, #22]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	f040 80d1 	bne.w	8003c8e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d912      	bls.n	8003b1c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afa:	881a      	ldrh	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b06:	1c9a      	adds	r2, r3, #2
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b02      	subs	r3, #2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b1a:	e0b8      	b.n	8003c8e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b42:	e0a4      	b.n	8003c8e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d134      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x30a>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02f      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x30a>
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d12c      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d912      	bls.n	8003b92 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b02      	subs	r3, #2
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b90:	e012      	b.n	8003bb8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d148      	bne.n	8003c5c <HAL_SPI_TransmitReceive+0x3aa>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d042      	beq.n	8003c5c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d923      	bls.n	8003c2a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	b292      	uxth	r2, r2
 8003bee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b02      	subs	r3, #2
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d81f      	bhi.n	8003c58 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	e016      	b.n	8003c58 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f103 020c 	add.w	r2, r3, #12
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c5c:	f7fd fc36 	bl	80014cc <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d803      	bhi.n	8003c74 <HAL_SPI_TransmitReceive+0x3c2>
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_TransmitReceive+0x3c8>
 8003c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e02c      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f47f af55 	bne.w	8003b44 <HAL_SPI_TransmitReceive+0x292>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f47f af4e 	bne.w	8003b44 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 faa9 	bl	8004204 <SPI_EndRxTxTransaction>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00e      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3728      	adds	r7, #40	@ 0x28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10e      	bne.n	8003d30 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d004      	beq.n	8003d30 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
    return;
 8003d2e:	e0ce      	b.n	8003ece <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_SPI_IRQHandler+0x5e>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
    return;
 8003d4c:	e0bf      	b.n	8003ece <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_SPI_IRQHandler+0x7e>
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d105      	bne.n	8003d6e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80b0 	beq.w	8003ece <HAL_SPI_IRQHandler+0x1de>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80aa 	beq.w	8003ece <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d023      	beq.n	8003dcc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d011      	beq.n	8003db4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	e00b      	b.n	8003dcc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
        return;
 8003dca:	e080      	b.n	8003ece <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d014      	beq.n	8003e00 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dda:	f043 0201 	orr.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0e:	f043 0208 	orr.w	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d04f      	beq.n	8003ecc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e3a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_SPI_IRQHandler+0x168>
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d034      	beq.n	8003ec2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0203 	bic.w	r2, r2, #3
 8003e66:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d011      	beq.n	8003e94 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e74:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <HAL_SPI_IRQHandler+0x1e4>)
 8003e76:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd fca4 	bl	80017ca <HAL_DMA_Abort_IT>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d016      	beq.n	8003eca <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ed4 <HAL_SPI_IRQHandler+0x1e4>)
 8003ea2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd fc8e 	bl	80017ca <HAL_DMA_Abort_IT>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003ec0:	e003      	b.n	8003eca <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f808 	bl	8003ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ec8:	e000      	b.n	8003ecc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003eca:	bf00      	nop
    return;
 8003ecc:	bf00      	nop
  }
}
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	08003eed 	.word	0x08003eed

08003ed8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff ffe5 	bl	8003ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f28:	f7fd fad0 	bl	80014cc <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f38:	f7fd fac8 	bl	80014cc <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	015b      	lsls	r3, r3, #5
 8003f44:	0d1b      	lsrs	r3, r3, #20
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4e:	e054      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d050      	beq.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f58:	f7fd fab8 	bl	80014cc <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d902      	bls.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13d      	bne.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f86:	d111      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f90:	d004      	beq.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9a:	d107      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb4:	d10f      	bne.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e017      	b.n	800401a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d19b      	bne.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000014 	.word	0x20000014

08004028 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800403a:	f7fd fa47 	bl	80014cc <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	4413      	add	r3, r2
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800404a:	f7fd fa3f 	bl	80014cc <HAL_GetTick>
 800404e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004058:	4b3d      	ldr	r3, [pc, #244]	@ (8004150 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00da      	lsls	r2, r3, #3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	0d1b      	lsrs	r3, r3, #20
 8004068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004070:	e060      	b.n	8004134 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004078:	d107      	bne.n	800408a <SPI_WaitFifoStateUntilTimeout+0x62>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d104      	bne.n	800408a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004088:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d050      	beq.n	8004134 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004092:	f7fd fa1b 	bl	80014cc <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409e:	429a      	cmp	r2, r3
 80040a0:	d902      	bls.n	80040a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d13d      	bne.n	8004124 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040c0:	d111      	bne.n	80040e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ca:	d004      	beq.n	80040d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d4:	d107      	bne.n	80040e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ee:	d10f      	bne.n	8004110 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800410e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e010      	b.n	8004146 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	3b01      	subs	r3, #1
 8004132:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d196      	bne.n	8004072 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3728      	adds	r7, #40	@ 0x28
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000014 	.word	0x20000014

08004154 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004168:	d111      	bne.n	800418e <SPI_EndRxTransaction+0x3a>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004172:	d004      	beq.n	800417e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417c:	d107      	bne.n	800418e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2200      	movs	r2, #0
 8004196:	2180      	movs	r1, #128	@ 0x80
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff febd 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e023      	b.n	80041fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041bc:	d11d      	bne.n	80041fa <SPI_EndRxTransaction+0xa6>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c6:	d004      	beq.n	80041d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d0:	d113      	bne.n	80041fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff ff22 	bl	8004028 <SPI_WaitFifoStateUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e000      	b.n	80041fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2200      	movs	r2, #0
 8004218:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff03 	bl	8004028 <SPI_WaitFifoStateUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e027      	b.n	8004288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	2180      	movs	r1, #128	@ 0x80
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff fe68 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e014      	b.n	8004288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fedc 	bl	8004028 <SPI_WaitFifoStateUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e000      	b.n	8004288 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e040      	b.n	8004324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd f80c 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	@ 0x24
 80042bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 ff58 	bl	800518c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fc9d 	bl	8004c1c <UART_SetConfig>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e01b      	b.n	8004324 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800430a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 ffd7 	bl	80052d0 <UART_CheckIdleState>
 8004322:	4603      	mov	r3, r0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	@ 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004340:	2b20      	cmp	r3, #32
 8004342:	d177      	bne.n	8004434 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_UART_Transmit+0x24>
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e070      	b.n	8004436 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2221      	movs	r2, #33	@ 0x21
 8004360:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004362:	f7fd f8b3 	bl	80014cc <HAL_GetTick>
 8004366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004380:	d108      	bne.n	8004394 <HAL_UART_Transmit+0x68>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	e003      	b.n	800439c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800439c:	e02f      	b.n	80043fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	@ 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f001 f839 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e03b      	b.n	8004436 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d0:	b292      	uxth	r2, r2
 80043d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	3302      	adds	r3, #2
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e007      	b.n	80043ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1c9      	bne.n	800439e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	2140      	movs	r1, #64	@ 0x40
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f001 f803 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e005      	b.n	8004436 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b08a      	sub	sp, #40	@ 0x28
 8004442:	af02      	add	r7, sp, #8
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004454:	2b20      	cmp	r3, #32
 8004456:	f040 80b6 	bne.w	80045c6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_UART_Receive+0x28>
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0ae      	b.n	80045c8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2222      	movs	r2, #34	@ 0x22
 8004476:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004480:	f7fd f824 	bl	80014cc <HAL_GetTick>
 8004484:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449e:	d10e      	bne.n	80044be <HAL_UART_Receive+0x80>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <HAL_UART_Receive+0x76>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80044ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044b2:	e02d      	b.n	8004510 <HAL_UART_Receive+0xd2>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	22ff      	movs	r2, #255	@ 0xff
 80044b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044bc:	e028      	b.n	8004510 <HAL_UART_Receive+0xd2>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <HAL_UART_Receive+0xa4>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d104      	bne.n	80044d8 <HAL_UART_Receive+0x9a>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	@ 0xff
 80044d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044d6:	e01b      	b.n	8004510 <HAL_UART_Receive+0xd2>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	227f      	movs	r2, #127	@ 0x7f
 80044dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044e0:	e016      	b.n	8004510 <HAL_UART_Receive+0xd2>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044ea:	d10d      	bne.n	8004508 <HAL_UART_Receive+0xca>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_UART_Receive+0xc0>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	227f      	movs	r2, #127	@ 0x7f
 80044f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044fc:	e008      	b.n	8004510 <HAL_UART_Receive+0xd2>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	223f      	movs	r2, #63	@ 0x3f
 8004502:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004506:	e003      	b.n	8004510 <HAL_UART_Receive+0xd2>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004516:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004520:	d108      	bne.n	8004534 <HAL_UART_Receive+0xf6>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	e003      	b.n	800453c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800453c:	e037      	b.n	80045ae <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	2120      	movs	r1, #32
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 ff69 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e033      	b.n	80045c8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800456c:	b29a      	uxth	r2, r3
 800456e:	8a7b      	ldrh	r3, [r7, #18]
 8004570:	4013      	ands	r3, r2
 8004572:	b29a      	uxth	r2, r3
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	3302      	adds	r3, #2
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e00d      	b.n	800459c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004586:	b29b      	uxth	r3, r3
 8004588:	b2da      	uxtb	r2, r3
 800458a:	8a7b      	ldrh	r3, [r7, #18]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	4013      	ands	r3, r2
 8004590:	b2da      	uxtb	r2, r3
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	3301      	adds	r3, #1
 800459a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1c1      	bne.n	800453e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e000      	b.n	80045c8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80045c6:	2302      	movs	r3, #2
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b0ba      	sub	sp, #232	@ 0xe8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80045fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80045fe:	4013      	ands	r3, r2
 8004600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d115      	bne.n	8004638 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800460c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00f      	beq.n	8004638 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 82ca 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
      }
      return;
 8004636:	e2c4      	b.n	8004bc2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8117 	beq.w	8004870 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800464e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004652:	4b85      	ldr	r3, [pc, #532]	@ (8004868 <HAL_UART_IRQHandler+0x298>)
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 810a 	beq.w	8004870 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d011      	beq.n	800468c <HAL_UART_IRQHandler+0xbc>
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800466c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00b      	beq.n	800468c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2201      	movs	r2, #1
 800467a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d011      	beq.n	80046bc <HAL_UART_IRQHandler+0xec>
 8004698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2202      	movs	r2, #2
 80046aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046b2:	f043 0204 	orr.w	r2, r3, #4
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d011      	beq.n	80046ec <HAL_UART_IRQHandler+0x11c>
 80046c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00b      	beq.n	80046ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2204      	movs	r2, #4
 80046da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e2:	f043 0202 	orr.w	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d017      	beq.n	8004728 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004708:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800471e:	f043 0208 	orr.w	r2, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004730:	2b00      	cmp	r3, #0
 8004732:	d012      	beq.n	800475a <HAL_UART_IRQHandler+0x18a>
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004738:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00c      	beq.n	800475a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8230 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004794:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a2:	2b40      	cmp	r3, #64	@ 0x40
 80047a4:	d005      	beq.n	80047b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04f      	beq.n	8004852 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fea1 	bl	80054fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b40      	cmp	r3, #64	@ 0x40
 80047c4:	d141      	bne.n	800484a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3308      	adds	r3, #8
 80047cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800480a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1d9      	bne.n	80047c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004816:	2b00      	cmp	r3, #0
 8004818:	d013      	beq.n	8004842 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481e:	4a13      	ldr	r2, [pc, #76]	@ (800486c <HAL_UART_IRQHandler+0x29c>)
 8004820:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	4618      	mov	r0, r3
 8004828:	f7fc ffcf 	bl	80017ca <HAL_DMA_Abort_IT>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d017      	beq.n	8004862 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800483c:	4610      	mov	r0, r2
 800483e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e00f      	b.n	8004862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9d4 	bl	8004bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00b      	b.n	8004862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9d0 	bl	8004bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e007      	b.n	8004862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f9cc 	bl	8004bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004860:	e1b1      	b.n	8004bc6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004862:	bf00      	nop
    return;
 8004864:	e1af      	b.n	8004bc6 <HAL_UART_IRQHandler+0x5f6>
 8004866:	bf00      	nop
 8004868:	04000120 	.word	0x04000120
 800486c:	080055c3 	.word	0x080055c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004874:	2b01      	cmp	r3, #1
 8004876:	f040 816a 	bne.w	8004b4e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8163 	beq.w	8004b4e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 815c 	beq.w	8004b4e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a8:	2b40      	cmp	r3, #64	@ 0x40
 80048aa:	f040 80d4 	bne.w	8004a56 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80ad 	beq.w	8004a1e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ce:	429a      	cmp	r2, r3
 80048d0:	f080 80a5 	bcs.w	8004a1e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 8086 	bne.w	80049fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004904:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800490c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800491a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800491e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004926:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1da      	bne.n	80048f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800494a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3308      	adds	r3, #8
 800495a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800495e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004962:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004966:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e1      	bne.n	800493a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800498c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800499a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800499c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e3      	bne.n	8004976 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049cc:	f023 0310 	bic.w	r3, r3, #16
 80049d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e4      	bne.n	80049bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc fea9 	bl	800174e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f8f4 	bl	8004c04 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004a1c:	e0d5      	b.n	8004bca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	f040 80ce 	bne.w	8004bca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	f040 80c5 	bne.w	8004bca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8d8 	bl	8004c04 <HAL_UARTEx_RxEventCallback>
      return;
 8004a54:	e0b9      	b.n	8004bca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80ab 	beq.w	8004bce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80a6 	beq.w	8004bce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e4      	bne.n	8004a82 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004adc:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e3      	bne.n	8004ab8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f023 0310 	bic.w	r3, r3, #16
 8004b18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	69b9      	ldr	r1, [r7, #24]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	617b      	str	r3, [r7, #20]
   return(result);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e4      	bne.n	8004b04 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f85c 	bl	8004c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b4c:	e03f      	b.n	8004bce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00e      	beq.n	8004b78 <HAL_UART_IRQHandler+0x5a8>
 8004b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fd66 	bl	8005642 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b76:	e02d      	b.n	8004bd4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00e      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01c      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
    }
    return;
 8004ba0:	e017      	b.n	8004bd2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d012      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x604>
 8004bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fd17 	bl	80055ee <UART_EndTransmit_IT>
    return;
 8004bc0:	e008      	b.n	8004bd4 <HAL_UART_IRQHandler+0x604>
      return;
 8004bc2:	bf00      	nop
 8004bc4:	e006      	b.n	8004bd4 <HAL_UART_IRQHandler+0x604>
    return;
 8004bc6:	bf00      	nop
 8004bc8:	e004      	b.n	8004bd4 <HAL_UART_IRQHandler+0x604>
      return;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <HAL_UART_IRQHandler+0x604>
      return;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <HAL_UART_IRQHandler+0x604>
    return;
 8004bd2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004bd4:	37e8      	adds	r7, #232	@ 0xe8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop

08004bdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c20:	b08a      	sub	sp, #40	@ 0x28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4ba4      	ldr	r3, [pc, #656]	@ (8004edc <UART_SetConfig+0x2c0>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c54:	430b      	orrs	r3, r1
 8004c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a99      	ldr	r2, [pc, #612]	@ (8004ee0 <UART_SetConfig+0x2c4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c84:	4313      	orrs	r3, r2
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a90      	ldr	r2, [pc, #576]	@ (8004ee4 <UART_SetConfig+0x2c8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d126      	bne.n	8004cf4 <UART_SetConfig+0xd8>
 8004ca6:	4b90      	ldr	r3, [pc, #576]	@ (8004ee8 <UART_SetConfig+0x2cc>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d81b      	bhi.n	8004cec <UART_SetConfig+0xd0>
 8004cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <UART_SetConfig+0xa0>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004cdd 	.word	0x08004cdd
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004ce5 	.word	0x08004ce5
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd2:	e116      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cda:	e112      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce2:	e10e      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cea:	e10a      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf2:	e106      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a7c      	ldr	r2, [pc, #496]	@ (8004eec <UART_SetConfig+0x2d0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d138      	bne.n	8004d70 <UART_SetConfig+0x154>
 8004cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ee8 <UART_SetConfig+0x2cc>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b0c      	cmp	r3, #12
 8004d0a:	d82d      	bhi.n	8004d68 <UART_SetConfig+0x14c>
 8004d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <UART_SetConfig+0xf8>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d49 	.word	0x08004d49
 8004d18:	08004d69 	.word	0x08004d69
 8004d1c:	08004d69 	.word	0x08004d69
 8004d20:	08004d69 	.word	0x08004d69
 8004d24:	08004d59 	.word	0x08004d59
 8004d28:	08004d69 	.word	0x08004d69
 8004d2c:	08004d69 	.word	0x08004d69
 8004d30:	08004d69 	.word	0x08004d69
 8004d34:	08004d51 	.word	0x08004d51
 8004d38:	08004d69 	.word	0x08004d69
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d61 	.word	0x08004d61
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	e0d8      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004d50:	2302      	movs	r3, #2
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e0d4      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e0d0      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004d60:	2308      	movs	r3, #8
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d66:	e0cc      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6e:	e0c8      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a5e      	ldr	r2, [pc, #376]	@ (8004ef0 <UART_SetConfig+0x2d4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d125      	bne.n	8004dc6 <UART_SetConfig+0x1aa>
 8004d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee8 <UART_SetConfig+0x2cc>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d84:	2b30      	cmp	r3, #48	@ 0x30
 8004d86:	d016      	beq.n	8004db6 <UART_SetConfig+0x19a>
 8004d88:	2b30      	cmp	r3, #48	@ 0x30
 8004d8a:	d818      	bhi.n	8004dbe <UART_SetConfig+0x1a2>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d00a      	beq.n	8004da6 <UART_SetConfig+0x18a>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d814      	bhi.n	8004dbe <UART_SetConfig+0x1a2>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <UART_SetConfig+0x182>
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d008      	beq.n	8004dae <UART_SetConfig+0x192>
 8004d9c:	e00f      	b.n	8004dbe <UART_SetConfig+0x1a2>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da4:	e0ad      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004da6:	2302      	movs	r3, #2
 8004da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dac:	e0a9      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004dae:	2304      	movs	r3, #4
 8004db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db4:	e0a5      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004db6:	2308      	movs	r3, #8
 8004db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbc:	e0a1      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc4:	e09d      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a4a      	ldr	r2, [pc, #296]	@ (8004ef4 <UART_SetConfig+0x2d8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d125      	bne.n	8004e1c <UART_SetConfig+0x200>
 8004dd0:	4b45      	ldr	r3, [pc, #276]	@ (8004ee8 <UART_SetConfig+0x2cc>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004dda:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ddc:	d016      	beq.n	8004e0c <UART_SetConfig+0x1f0>
 8004dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8004de0:	d818      	bhi.n	8004e14 <UART_SetConfig+0x1f8>
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	d00a      	beq.n	8004dfc <UART_SetConfig+0x1e0>
 8004de6:	2b80      	cmp	r3, #128	@ 0x80
 8004de8:	d814      	bhi.n	8004e14 <UART_SetConfig+0x1f8>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <UART_SetConfig+0x1d8>
 8004dee:	2b40      	cmp	r3, #64	@ 0x40
 8004df0:	d008      	beq.n	8004e04 <UART_SetConfig+0x1e8>
 8004df2:	e00f      	b.n	8004e14 <UART_SetConfig+0x1f8>
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfa:	e082      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e02:	e07e      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e04:	2304      	movs	r3, #4
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0a:	e07a      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e12:	e076      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e14:	2310      	movs	r3, #16
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1a:	e072      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a35      	ldr	r2, [pc, #212]	@ (8004ef8 <UART_SetConfig+0x2dc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d12a      	bne.n	8004e7c <UART_SetConfig+0x260>
 8004e26:	4b30      	ldr	r3, [pc, #192]	@ (8004ee8 <UART_SetConfig+0x2cc>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e34:	d01a      	beq.n	8004e6c <UART_SetConfig+0x250>
 8004e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e3a:	d81b      	bhi.n	8004e74 <UART_SetConfig+0x258>
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e40:	d00c      	beq.n	8004e5c <UART_SetConfig+0x240>
 8004e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e46:	d815      	bhi.n	8004e74 <UART_SetConfig+0x258>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <UART_SetConfig+0x238>
 8004e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e50:	d008      	beq.n	8004e64 <UART_SetConfig+0x248>
 8004e52:	e00f      	b.n	8004e74 <UART_SetConfig+0x258>
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5a:	e052      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e62:	e04e      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e64:	2304      	movs	r3, #4
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	e04a      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e72:	e046      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e74:	2310      	movs	r3, #16
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7a:	e042      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <UART_SetConfig+0x2c4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d13a      	bne.n	8004efc <UART_SetConfig+0x2e0>
 8004e86:	4b18      	ldr	r3, [pc, #96]	@ (8004ee8 <UART_SetConfig+0x2cc>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e94:	d01a      	beq.n	8004ecc <UART_SetConfig+0x2b0>
 8004e96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e9a:	d81b      	bhi.n	8004ed4 <UART_SetConfig+0x2b8>
 8004e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea0:	d00c      	beq.n	8004ebc <UART_SetConfig+0x2a0>
 8004ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea6:	d815      	bhi.n	8004ed4 <UART_SetConfig+0x2b8>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <UART_SetConfig+0x298>
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb0:	d008      	beq.n	8004ec4 <UART_SetConfig+0x2a8>
 8004eb2:	e00f      	b.n	8004ed4 <UART_SetConfig+0x2b8>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eba:	e022      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec2:	e01e      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eca:	e01a      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004ecc:	2308      	movs	r3, #8
 8004ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed2:	e016      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eda:	e012      	b.n	8004f02 <UART_SetConfig+0x2e6>
 8004edc:	efff69f3 	.word	0xefff69f3
 8004ee0:	40008000 	.word	0x40008000
 8004ee4:	40013800 	.word	0x40013800
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40004400 	.word	0x40004400
 8004ef0:	40004800 	.word	0x40004800
 8004ef4:	40004c00 	.word	0x40004c00
 8004ef8:	40005000 	.word	0x40005000
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a9f      	ldr	r2, [pc, #636]	@ (8005184 <UART_SetConfig+0x568>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d17a      	bne.n	8005002 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d824      	bhi.n	8004f5e <UART_SetConfig+0x342>
 8004f14:	a201      	add	r2, pc, #4	@ (adr r2, 8004f1c <UART_SetConfig+0x300>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f5f 	.word	0x08004f5f
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f5f 	.word	0x08004f5f
 8004f2c:	08004f4f 	.word	0x08004f4f
 8004f30:	08004f5f 	.word	0x08004f5f
 8004f34:	08004f5f 	.word	0x08004f5f
 8004f38:	08004f5f 	.word	0x08004f5f
 8004f3c:	08004f57 	.word	0x08004f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7fd fc1e 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004f44:	61f8      	str	r0, [r7, #28]
        break;
 8004f46:	e010      	b.n	8004f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f48:	4b8f      	ldr	r3, [pc, #572]	@ (8005188 <UART_SetConfig+0x56c>)
 8004f4a:	61fb      	str	r3, [r7, #28]
        break;
 8004f4c:	e00d      	b.n	8004f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4e:	f7fd fb7f 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8004f52:	61f8      	str	r0, [r7, #28]
        break;
 8004f54:	e009      	b.n	8004f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5a:	61fb      	str	r3, [r7, #28]
        break;
 8004f5c:	e005      	b.n	8004f6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80fb 	beq.w	8005168 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d305      	bcc.n	8004f8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d903      	bls.n	8004f96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f94:	e0e8      	b.n	8005168 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	461c      	mov	r4, r3
 8004f9c:	4615      	mov	r5, r2
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	022b      	lsls	r3, r5, #8
 8004fa8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fac:	0222      	lsls	r2, r4, #8
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	6849      	ldr	r1, [r1, #4]
 8004fb2:	0849      	lsrs	r1, r1, #1
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	4688      	mov	r8, r1
 8004fb8:	4681      	mov	r9, r0
 8004fba:	eb12 0a08 	adds.w	sl, r2, r8
 8004fbe:	eb43 0b09 	adc.w	fp, r3, r9
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	4659      	mov	r1, fp
 8004fd4:	f7fb f94c 	bl	8000270 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4613      	mov	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe6:	d308      	bcc.n	8004ffa <UART_SetConfig+0x3de>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fee:	d204      	bcs.n	8004ffa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	e0b6      	b.n	8005168 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005000:	e0b2      	b.n	8005168 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500a:	d15e      	bne.n	80050ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800500c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005010:	2b08      	cmp	r3, #8
 8005012:	d828      	bhi.n	8005066 <UART_SetConfig+0x44a>
 8005014:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <UART_SetConfig+0x400>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	08005041 	.word	0x08005041
 8005020:	08005049 	.word	0x08005049
 8005024:	08005051 	.word	0x08005051
 8005028:	08005067 	.word	0x08005067
 800502c:	08005057 	.word	0x08005057
 8005030:	08005067 	.word	0x08005067
 8005034:	08005067 	.word	0x08005067
 8005038:	08005067 	.word	0x08005067
 800503c:	0800505f 	.word	0x0800505f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005040:	f7fd fb9e 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8005044:	61f8      	str	r0, [r7, #28]
        break;
 8005046:	e014      	b.n	8005072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7fd fbb0 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 800504c:	61f8      	str	r0, [r7, #28]
        break;
 800504e:	e010      	b.n	8005072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005050:	4b4d      	ldr	r3, [pc, #308]	@ (8005188 <UART_SetConfig+0x56c>)
 8005052:	61fb      	str	r3, [r7, #28]
        break;
 8005054:	e00d      	b.n	8005072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005056:	f7fd fafb 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800505a:	61f8      	str	r0, [r7, #28]
        break;
 800505c:	e009      	b.n	8005072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005062:	61fb      	str	r3, [r7, #28]
        break;
 8005064:	e005      	b.n	8005072 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d077      	beq.n	8005168 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	005a      	lsls	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	441a      	add	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b0f      	cmp	r3, #15
 8005092:	d916      	bls.n	80050c2 <UART_SetConfig+0x4a6>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509a:	d212      	bcs.n	80050c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f023 030f 	bic.w	r3, r3, #15
 80050a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	8afb      	ldrh	r3, [r7, #22]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	8afa      	ldrh	r2, [r7, #22]
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e052      	b.n	8005168 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050c8:	e04e      	b.n	8005168 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d827      	bhi.n	8005122 <UART_SetConfig+0x506>
 80050d2:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <UART_SetConfig+0x4bc>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	08005105 	.word	0x08005105
 80050e0:	0800510d 	.word	0x0800510d
 80050e4:	08005123 	.word	0x08005123
 80050e8:	08005113 	.word	0x08005113
 80050ec:	08005123 	.word	0x08005123
 80050f0:	08005123 	.word	0x08005123
 80050f4:	08005123 	.word	0x08005123
 80050f8:	0800511b 	.word	0x0800511b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fc:	f7fd fb40 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8005100:	61f8      	str	r0, [r7, #28]
        break;
 8005102:	e014      	b.n	800512e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7fd fb52 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8005108:	61f8      	str	r0, [r7, #28]
        break;
 800510a:	e010      	b.n	800512e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800510c:	4b1e      	ldr	r3, [pc, #120]	@ (8005188 <UART_SetConfig+0x56c>)
 800510e:	61fb      	str	r3, [r7, #28]
        break;
 8005110:	e00d      	b.n	800512e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005112:	f7fd fa9d 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8005116:	61f8      	str	r0, [r7, #28]
        break;
 8005118:	e009      	b.n	800512e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511e:	61fb      	str	r3, [r7, #28]
        break;
 8005120:	e005      	b.n	800512e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800512c:	bf00      	nop
    }

    if (pclk != 0U)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d019      	beq.n	8005168 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	085a      	lsrs	r2, r3, #1
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	441a      	add	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b0f      	cmp	r3, #15
 800514c:	d909      	bls.n	8005162 <UART_SetConfig+0x546>
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005154:	d205      	bcs.n	8005162 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60da      	str	r2, [r3, #12]
 8005160:	e002      	b.n	8005168 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005174:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005178:	4618      	mov	r0, r3
 800517a:	3728      	adds	r7, #40	@ 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005182:	bf00      	nop
 8005184:	40008000 	.word	0x40008000
 8005188:	00f42400 	.word	0x00f42400

0800518c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01a      	beq.n	80052a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800528a:	d10a      	bne.n	80052a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b098      	sub	sp, #96	@ 0x60
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052e0:	f7fc f8f4 	bl	80014cc <HAL_GetTick>
 80052e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d12e      	bne.n	8005352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fc:	2200      	movs	r2, #0
 80052fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f88c 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d021      	beq.n	8005352 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005322:	653b      	str	r3, [r7, #80]	@ 0x50
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800533a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e062      	b.n	8005418 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d149      	bne.n	80053f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005368:	2200      	movs	r2, #0
 800536a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f856 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d03c      	beq.n	80053f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	623b      	str	r3, [r7, #32]
   return(result);
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005398:	633b      	str	r3, [r7, #48]	@ 0x30
 800539a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800539e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	69b9      	ldr	r1, [r7, #24]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	617b      	str	r3, [r7, #20]
   return(result);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e011      	b.n	8005418 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3758      	adds	r7, #88	@ 0x58
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	e04f      	b.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d04b      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fc f847 	bl	80014cc <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <UART_WaitOnFlagUntilTimeout+0x30>
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e04e      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d037      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b80      	cmp	r3, #128	@ 0x80
 8005466:	d034      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d031      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b08      	cmp	r3, #8
 800547a:	d110      	bne.n	800549e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2208      	movs	r2, #8
 8005482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f838 	bl	80054fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2208      	movs	r2, #8
 800548e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e029      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ac:	d111      	bne.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f81e 	bl	80054fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e00f      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d0a0      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b095      	sub	sp, #84	@ 0x54
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005520:	643b      	str	r3, [r7, #64]	@ 0x40
 8005522:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005526:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800552e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e6      	bne.n	8005502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3308      	adds	r3, #8
 800553a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	61fb      	str	r3, [r7, #28]
   return(result);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f023 0301 	bic.w	r3, r3, #1
 800554a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005554:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800555a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e5      	bne.n	8005534 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556c:	2b01      	cmp	r3, #1
 800556e:	d118      	bne.n	80055a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	60bb      	str	r3, [r7, #8]
   return(result);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 0310 	bic.w	r3, r3, #16
 8005584:	647b      	str	r3, [r7, #68]	@ 0x44
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	613b      	str	r3, [r7, #16]
   return(result);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e6      	bne.n	8005570 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055b6:	bf00      	nop
 80055b8:	3754      	adds	r7, #84	@ 0x54
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff fb05 	bl	8004bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b088      	sub	sp, #32
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	60bb      	str	r3, [r7, #8]
   return(result);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6979      	ldr	r1, [r7, #20]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	613b      	str	r3, [r7, #16]
   return(result);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e6      	bne.n	80055f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fad1 	bl	8004bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800563a:	bf00      	nop
 800563c:	3720      	adds	r7, #32
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f103 0208 	add.w	r2, r3, #8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f04f 32ff 	mov.w	r2, #4294967295
 800566e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f103 0208 	add.w	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f103 0208 	add.w	r2, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6892      	ldr	r2, [r2, #8]
 800570e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6852      	ldr	r2, [r2, #4]
 8005718:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d103      	bne.n	800572c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	1e5a      	subs	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08e      	sub	sp, #56	@ 0x38
 8005750:	af04      	add	r7, sp, #16
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <xTaskCreateStatic+0x4a>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61fb      	str	r3, [r7, #28]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005796:	2354      	movs	r3, #84	@ 0x54
 8005798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b54      	cmp	r3, #84	@ 0x54
 800579e:	d00b      	beq.n	80057b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	61bb      	str	r3, [r7, #24]
}
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
 80057b6:	e7fd      	b.n	80057b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01e      	beq.n	80057fe <xTaskCreateStatic+0xb2>
 80057c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01b      	beq.n	80057fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057d8:	2300      	movs	r3, #0
 80057da:	9303      	str	r3, [sp, #12]
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	9302      	str	r3, [sp, #8]
 80057e0:	f107 0314 	add.w	r3, r7, #20
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f850 	bl	8005896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057f8:	f000 f8d6 	bl	80059a8 <prvAddNewTaskToReadyList>
 80057fc:	e001      	b.n	8005802 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005802:	697b      	ldr	r3, [r7, #20]
	}
 8005804:	4618      	mov	r0, r3
 8005806:	3728      	adds	r7, #40	@ 0x28
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08c      	sub	sp, #48	@ 0x30
 8005810:	af04      	add	r7, sp, #16
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fe51 	bl	80064c8 <pvPortMalloc>
 8005826:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800582e:	2054      	movs	r0, #84	@ 0x54
 8005830:	f000 fe4a 	bl	80064c8 <pvPortMalloc>
 8005834:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	631a      	str	r2, [r3, #48]	@ 0x30
 8005842:	e005      	b.n	8005850 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005844:	6978      	ldr	r0, [r7, #20]
 8005846:	f000 ff0d 	bl	8006664 <vPortFree>
 800584a:	e001      	b.n	8005850 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d017      	beq.n	8005886 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	2300      	movs	r3, #0
 8005862:	9303      	str	r3, [sp, #12]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	9302      	str	r3, [sp, #8]
 8005868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f80e 	bl	8005896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587a:	69f8      	ldr	r0, [r7, #28]
 800587c:	f000 f894 	bl	80059a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005880:	2301      	movs	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	e002      	b.n	800588c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800588c:	69bb      	ldr	r3, [r7, #24]
	}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b088      	sub	sp, #32
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ae:	3b01      	subs	r3, #1
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f023 0307 	bic.w	r3, r3, #7
 80058bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	617b      	str	r3, [r7, #20]
}
 80058da:	bf00      	nop
 80058dc:	bf00      	nop
 80058de:	e7fd      	b.n	80058dc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01f      	beq.n	8005926 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	e012      	b.n	8005912 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	7819      	ldrb	r1, [r3, #0]
 80058f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	3334      	adds	r3, #52	@ 0x34
 80058fc:	460a      	mov	r2, r1
 80058fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	3301      	adds	r3, #1
 8005910:	61fb      	str	r3, [r7, #28]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b0f      	cmp	r3, #15
 8005916:	d9e9      	bls.n	80058ec <prvInitialiseNewTask+0x56>
 8005918:	e000      	b.n	800591c <prvInitialiseNewTask+0x86>
			{
				break;
 800591a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800591c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005924:	e003      	b.n	800592e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	2b06      	cmp	r3, #6
 8005932:	d901      	bls.n	8005938 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005934:	2306      	movs	r3, #6
 8005936:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800593c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005942:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	2200      	movs	r2, #0
 8005948:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800594a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594c:	3304      	adds	r3, #4
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fea1 	bl	8005696 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	3318      	adds	r3, #24
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff fe9c 	bl	8005696 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005962:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005966:	f1c3 0207 	rsb	r2, r3, #7
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	2200      	movs	r2, #0
 8005978:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	69b8      	ldr	r0, [r7, #24]
 8005988:	f000 fb90 	bl	80060ac <pxPortInitialiseStack>
 800598c:	4602      	mov	r2, r0
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800599c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800599e:	bf00      	nop
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059b0:	f000 fcaa 	bl	8006308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005a60 <prvAddNewTaskToReadyList+0xb8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	4a29      	ldr	r2, [pc, #164]	@ (8005a60 <prvAddNewTaskToReadyList+0xb8>)
 80059bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059be:	4b29      	ldr	r3, [pc, #164]	@ (8005a64 <prvAddNewTaskToReadyList+0xbc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059c6:	4a27      	ldr	r2, [pc, #156]	@ (8005a64 <prvAddNewTaskToReadyList+0xbc>)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059cc:	4b24      	ldr	r3, [pc, #144]	@ (8005a60 <prvAddNewTaskToReadyList+0xb8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d110      	bne.n	80059f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059d4:	f000 fa8e 	bl	8005ef4 <prvInitialiseTaskLists>
 80059d8:	e00d      	b.n	80059f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059da:	4b23      	ldr	r3, [pc, #140]	@ (8005a68 <prvAddNewTaskToReadyList+0xc0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059e2:	4b20      	ldr	r3, [pc, #128]	@ (8005a64 <prvAddNewTaskToReadyList+0xbc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d802      	bhi.n	80059f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a64 <prvAddNewTaskToReadyList+0xbc>)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059f6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a6c <prvAddNewTaskToReadyList+0xc4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3301      	adds	r3, #1
 80059fc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a6c <prvAddNewTaskToReadyList+0xc4>)
 80059fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	2201      	movs	r2, #1
 8005a06:	409a      	lsls	r2, r3
 8005a08:	4b19      	ldr	r3, [pc, #100]	@ (8005a70 <prvAddNewTaskToReadyList+0xc8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	4a18      	ldr	r2, [pc, #96]	@ (8005a70 <prvAddNewTaskToReadyList+0xc8>)
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4a15      	ldr	r2, [pc, #84]	@ (8005a74 <prvAddNewTaskToReadyList+0xcc>)
 8005a20:	441a      	add	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7ff fe41 	bl	80056b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a2e:	f000 fc9d 	bl	800636c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a32:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <prvAddNewTaskToReadyList+0xc0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a64 <prvAddNewTaskToReadyList+0xbc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d207      	bcs.n	8005a58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a48:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <prvAddNewTaskToReadyList+0xd0>)
 8005a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	2000092c 	.word	0x2000092c
 8005a64:	2000082c 	.word	0x2000082c
 8005a68:	20000938 	.word	0x20000938
 8005a6c:	20000948 	.word	0x20000948
 8005a70:	20000934 	.word	0x20000934
 8005a74:	20000830 	.word	0x20000830
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	@ 0x28
 8005a80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a8a:	463a      	mov	r2, r7
 8005a8c:	1d39      	adds	r1, r7, #4
 8005a8e:	f107 0308 	add.w	r3, r7, #8
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fa fe46 	bl	8000724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	9202      	str	r2, [sp, #8]
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	491f      	ldr	r1, [pc, #124]	@ (8005b28 <vTaskStartScheduler+0xac>)
 8005aac:	481f      	ldr	r0, [pc, #124]	@ (8005b2c <vTaskStartScheduler+0xb0>)
 8005aae:	f7ff fe4d 	bl	800574c <xTaskCreateStatic>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b30 <vTaskStartScheduler+0xb4>)
 8005ab6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b30 <vTaskStartScheduler+0xb4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	e001      	b.n	8005aca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d116      	bne.n	8005afe <vTaskStartScheduler+0x82>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
}
 8005ae2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ae4:	4b13      	ldr	r3, [pc, #76]	@ (8005b34 <vTaskStartScheduler+0xb8>)
 8005ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aec:	4b12      	ldr	r3, [pc, #72]	@ (8005b38 <vTaskStartScheduler+0xbc>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005af2:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <vTaskStartScheduler+0xc0>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005af8:	f000 fb62 	bl	80061c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005afc:	e00f      	b.n	8005b1e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d10b      	bne.n	8005b1e <vTaskStartScheduler+0xa2>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	60fb      	str	r3, [r7, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <vTaskStartScheduler+0x9e>
}
 8005b1e:	bf00      	nop
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	08007b80 	.word	0x08007b80
 8005b2c:	08005ec5 	.word	0x08005ec5
 8005b30:	20000950 	.word	0x20000950
 8005b34:	2000094c 	.word	0x2000094c
 8005b38:	20000938 	.word	0x20000938
 8005b3c:	20000930 	.word	0x20000930

08005b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b44:	4b04      	ldr	r3, [pc, #16]	@ (8005b58 <vTaskSuspendAll+0x18>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	4a03      	ldr	r2, [pc, #12]	@ (8005b58 <vTaskSuspendAll+0x18>)
 8005b4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b4e:	bf00      	nop
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	20000954 	.word	0x20000954

08005b5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b6a:	4b42      	ldr	r3, [pc, #264]	@ (8005c74 <xTaskResumeAll+0x118>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <xTaskResumeAll+0x2e>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	603b      	str	r3, [r7, #0]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b8a:	f000 fbbd 	bl	8006308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b8e:	4b39      	ldr	r3, [pc, #228]	@ (8005c74 <xTaskResumeAll+0x118>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	4a37      	ldr	r2, [pc, #220]	@ (8005c74 <xTaskResumeAll+0x118>)
 8005b96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b98:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <xTaskResumeAll+0x118>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d161      	bne.n	8005c64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ba0:	4b35      	ldr	r3, [pc, #212]	@ (8005c78 <xTaskResumeAll+0x11c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d05d      	beq.n	8005c64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ba8:	e02e      	b.n	8005c08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005baa:	4b34      	ldr	r3, [pc, #208]	@ (8005c7c <xTaskResumeAll+0x120>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3318      	adds	r3, #24
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff fd9e 	bl	80056f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fd99 	bl	80056f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	2201      	movs	r2, #1
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	4b2c      	ldr	r3, [pc, #176]	@ (8005c80 <xTaskResumeAll+0x124>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8005c80 <xTaskResumeAll+0x124>)
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4a27      	ldr	r2, [pc, #156]	@ (8005c84 <xTaskResumeAll+0x128>)
 8005be6:	441a      	add	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f7ff fd5e 	bl	80056b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf8:	4b23      	ldr	r3, [pc, #140]	@ (8005c88 <xTaskResumeAll+0x12c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d302      	bcc.n	8005c08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c02:	4b22      	ldr	r3, [pc, #136]	@ (8005c8c <xTaskResumeAll+0x130>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c08:	4b1c      	ldr	r3, [pc, #112]	@ (8005c7c <xTaskResumeAll+0x120>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1cc      	bne.n	8005baa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c16:	f000 fa0b 	bl	8006030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c90 <xTaskResumeAll+0x134>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d010      	beq.n	8005c48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c26:	f000 f837 	bl	8005c98 <xTaskIncrementTick>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c30:	4b16      	ldr	r3, [pc, #88]	@ (8005c8c <xTaskResumeAll+0x130>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f1      	bne.n	8005c26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c42:	4b13      	ldr	r3, [pc, #76]	@ (8005c90 <xTaskResumeAll+0x134>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c48:	4b10      	ldr	r3, [pc, #64]	@ (8005c8c <xTaskResumeAll+0x130>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c54:	4b0f      	ldr	r3, [pc, #60]	@ (8005c94 <xTaskResumeAll+0x138>)
 8005c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c64:	f000 fb82 	bl	800636c <vPortExitCritical>

	return xAlreadyYielded;
 8005c68:	68bb      	ldr	r3, [r7, #8]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000954 	.word	0x20000954
 8005c78:	2000092c 	.word	0x2000092c
 8005c7c:	200008ec 	.word	0x200008ec
 8005c80:	20000934 	.word	0x20000934
 8005c84:	20000830 	.word	0x20000830
 8005c88:	2000082c 	.word	0x2000082c
 8005c8c:	20000940 	.word	0x20000940
 8005c90:	2000093c 	.word	0x2000093c
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8005de0 <xTaskIncrementTick+0x148>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f040 808f 	bne.w	8005dca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cac:	4b4d      	ldr	r3, [pc, #308]	@ (8005de4 <xTaskIncrementTick+0x14c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cb4:	4a4b      	ldr	r2, [pc, #300]	@ (8005de4 <xTaskIncrementTick+0x14c>)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d121      	bne.n	8005d04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cc0:	4b49      	ldr	r3, [pc, #292]	@ (8005de8 <xTaskIncrementTick+0x150>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	603b      	str	r3, [r7, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	e7fd      	b.n	8005cde <xTaskIncrementTick+0x46>
 8005ce2:	4b41      	ldr	r3, [pc, #260]	@ (8005de8 <xTaskIncrementTick+0x150>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	4b40      	ldr	r3, [pc, #256]	@ (8005dec <xTaskIncrementTick+0x154>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3e      	ldr	r2, [pc, #248]	@ (8005de8 <xTaskIncrementTick+0x150>)
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8005dec <xTaskIncrementTick+0x154>)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8005df0 <xTaskIncrementTick+0x158>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8005df0 <xTaskIncrementTick+0x158>)
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	f000 f996 	bl	8006030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d04:	4b3b      	ldr	r3, [pc, #236]	@ (8005df4 <xTaskIncrementTick+0x15c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d348      	bcc.n	8005da0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d0e:	4b36      	ldr	r3, [pc, #216]	@ (8005de8 <xTaskIncrementTick+0x150>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d18:	4b36      	ldr	r3, [pc, #216]	@ (8005df4 <xTaskIncrementTick+0x15c>)
 8005d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1e:	601a      	str	r2, [r3, #0]
					break;
 8005d20:	e03e      	b.n	8005da0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d22:	4b31      	ldr	r3, [pc, #196]	@ (8005de8 <xTaskIncrementTick+0x150>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d203      	bcs.n	8005d42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8005df4 <xTaskIncrementTick+0x15c>)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d40:	e02e      	b.n	8005da0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fcd6 	bl	80056f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	3318      	adds	r3, #24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff fccd 	bl	80056f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d62:	2201      	movs	r2, #1
 8005d64:	409a      	lsls	r2, r3
 8005d66:	4b24      	ldr	r3, [pc, #144]	@ (8005df8 <xTaskIncrementTick+0x160>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	4a22      	ldr	r2, [pc, #136]	@ (8005df8 <xTaskIncrementTick+0x160>)
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dfc <xTaskIncrementTick+0x164>)
 8005d7e:	441a      	add	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7ff fc92 	bl	80056b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d90:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <xTaskIncrementTick+0x168>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d3b9      	bcc.n	8005d0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9e:	e7b6      	b.n	8005d0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005da0:	4b17      	ldr	r3, [pc, #92]	@ (8005e00 <xTaskIncrementTick+0x168>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da6:	4915      	ldr	r1, [pc, #84]	@ (8005dfc <xTaskIncrementTick+0x164>)
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d901      	bls.n	8005dbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dbc:	4b11      	ldr	r3, [pc, #68]	@ (8005e04 <xTaskIncrementTick+0x16c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e004      	b.n	8005dd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dca:	4b0f      	ldr	r3, [pc, #60]	@ (8005e08 <xTaskIncrementTick+0x170>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005e08 <xTaskIncrementTick+0x170>)
 8005dd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005dd4:	697b      	ldr	r3, [r7, #20]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000954 	.word	0x20000954
 8005de4:	20000930 	.word	0x20000930
 8005de8:	200008e4 	.word	0x200008e4
 8005dec:	200008e8 	.word	0x200008e8
 8005df0:	20000944 	.word	0x20000944
 8005df4:	2000094c 	.word	0x2000094c
 8005df8:	20000934 	.word	0x20000934
 8005dfc:	20000830 	.word	0x20000830
 8005e00:	2000082c 	.word	0x2000082c
 8005e04:	20000940 	.word	0x20000940
 8005e08:	2000093c 	.word	0x2000093c

08005e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e12:	4b27      	ldr	r3, [pc, #156]	@ (8005eb0 <vTaskSwitchContext+0xa4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e1a:	4b26      	ldr	r3, [pc, #152]	@ (8005eb4 <vTaskSwitchContext+0xa8>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e20:	e040      	b.n	8005ea4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005e22:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <vTaskSwitchContext+0xa8>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e28:	4b23      	ldr	r3, [pc, #140]	@ (8005eb8 <vTaskSwitchContext+0xac>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	fab3 f383 	clz	r3, r3
 8005e34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e36:	7afb      	ldrb	r3, [r7, #11]
 8005e38:	f1c3 031f 	rsb	r3, r3, #31
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	491f      	ldr	r1, [pc, #124]	@ (8005ebc <vTaskSwitchContext+0xb0>)
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	607b      	str	r3, [r7, #4]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <vTaskSwitchContext+0x5a>
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4a11      	ldr	r2, [pc, #68]	@ (8005ebc <vTaskSwitchContext+0xb0>)
 8005e76:	4413      	add	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	605a      	str	r2, [r3, #4]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d104      	bne.n	8005e9a <vTaskSwitchContext+0x8e>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4a07      	ldr	r2, [pc, #28]	@ (8005ec0 <vTaskSwitchContext+0xb4>)
 8005ea2:	6013      	str	r3, [r2, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20000954 	.word	0x20000954
 8005eb4:	20000940 	.word	0x20000940
 8005eb8:	20000934 	.word	0x20000934
 8005ebc:	20000830 	.word	0x20000830
 8005ec0:	2000082c 	.word	0x2000082c

08005ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ecc:	f000 f852 	bl	8005f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ed0:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <prvIdleTask+0x28>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d9f9      	bls.n	8005ecc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <prvIdleTask+0x2c>)
 8005eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ee8:	e7f0      	b.n	8005ecc <prvIdleTask+0x8>
 8005eea:	bf00      	nop
 8005eec:	20000830 	.word	0x20000830
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005efa:	2300      	movs	r3, #0
 8005efc:	607b      	str	r3, [r7, #4]
 8005efe:	e00c      	b.n	8005f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4a12      	ldr	r2, [pc, #72]	@ (8005f54 <prvInitialiseTaskLists+0x60>)
 8005f0c:	4413      	add	r3, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fba1 	bl	8005656 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3301      	adds	r3, #1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d9ef      	bls.n	8005f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f20:	480d      	ldr	r0, [pc, #52]	@ (8005f58 <prvInitialiseTaskLists+0x64>)
 8005f22:	f7ff fb98 	bl	8005656 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f26:	480d      	ldr	r0, [pc, #52]	@ (8005f5c <prvInitialiseTaskLists+0x68>)
 8005f28:	f7ff fb95 	bl	8005656 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f2c:	480c      	ldr	r0, [pc, #48]	@ (8005f60 <prvInitialiseTaskLists+0x6c>)
 8005f2e:	f7ff fb92 	bl	8005656 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f32:	480c      	ldr	r0, [pc, #48]	@ (8005f64 <prvInitialiseTaskLists+0x70>)
 8005f34:	f7ff fb8f 	bl	8005656 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f38:	480b      	ldr	r0, [pc, #44]	@ (8005f68 <prvInitialiseTaskLists+0x74>)
 8005f3a:	f7ff fb8c 	bl	8005656 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <prvInitialiseTaskLists+0x78>)
 8005f40:	4a05      	ldr	r2, [pc, #20]	@ (8005f58 <prvInitialiseTaskLists+0x64>)
 8005f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f44:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <prvInitialiseTaskLists+0x7c>)
 8005f46:	4a05      	ldr	r2, [pc, #20]	@ (8005f5c <prvInitialiseTaskLists+0x68>)
 8005f48:	601a      	str	r2, [r3, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000830 	.word	0x20000830
 8005f58:	200008bc 	.word	0x200008bc
 8005f5c:	200008d0 	.word	0x200008d0
 8005f60:	200008ec 	.word	0x200008ec
 8005f64:	20000900 	.word	0x20000900
 8005f68:	20000918 	.word	0x20000918
 8005f6c:	200008e4 	.word	0x200008e4
 8005f70:	200008e8 	.word	0x200008e8

08005f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f7a:	e019      	b.n	8005fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f7c:	f000 f9c4 	bl	8006308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f80:	4b10      	ldr	r3, [pc, #64]	@ (8005fc4 <prvCheckTasksWaitingTermination+0x50>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fbb3 	bl	80056f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f92:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc8 <prvCheckTasksWaitingTermination+0x54>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc8 <prvCheckTasksWaitingTermination+0x54>)
 8005f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <prvCheckTasksWaitingTermination+0x58>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8005fcc <prvCheckTasksWaitingTermination+0x58>)
 8005fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fa6:	f000 f9e1 	bl	800636c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f810 	bl	8005fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fb0:	4b06      	ldr	r3, [pc, #24]	@ (8005fcc <prvCheckTasksWaitingTermination+0x58>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e1      	bne.n	8005f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000900 	.word	0x20000900
 8005fc8:	2000092c 	.word	0x2000092c
 8005fcc:	20000914 	.word	0x20000914

08005fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d108      	bne.n	8005ff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fb3c 	bl	8006664 <vPortFree>
				vPortFree( pxTCB );
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fb39 	bl	8006664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ff2:	e019      	b.n	8006028 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d103      	bne.n	8006006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fb30 	bl	8006664 <vPortFree>
	}
 8006004:	e010      	b.n	8006028 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800600c:	2b02      	cmp	r3, #2
 800600e:	d00b      	beq.n	8006028 <prvDeleteTCB+0x58>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <prvDeleteTCB+0x54>
	}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006036:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <prvResetNextTaskUnblockTime+0x38>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006040:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <prvResetNextTaskUnblockTime+0x3c>)
 8006042:	f04f 32ff 	mov.w	r2, #4294967295
 8006046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006048:	e008      	b.n	800605c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604a:	4b07      	ldr	r3, [pc, #28]	@ (8006068 <prvResetNextTaskUnblockTime+0x38>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4a04      	ldr	r2, [pc, #16]	@ (800606c <prvResetNextTaskUnblockTime+0x3c>)
 800605a:	6013      	str	r3, [r2, #0]
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	200008e4 	.word	0x200008e4
 800606c:	2000094c 	.word	0x2000094c

08006070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006076:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <xTaskGetSchedulerState+0x34>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800607e:	2301      	movs	r3, #1
 8006080:	607b      	str	r3, [r7, #4]
 8006082:	e008      	b.n	8006096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006084:	4b08      	ldr	r3, [pc, #32]	@ (80060a8 <xTaskGetSchedulerState+0x38>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800608c:	2302      	movs	r3, #2
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	e001      	b.n	8006096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006092:	2300      	movs	r3, #0
 8006094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006096:	687b      	ldr	r3, [r7, #4]
	}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	20000938 	.word	0x20000938
 80060a8:	20000954 	.word	0x20000954

080060ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3b04      	subs	r3, #4
 80060bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3b04      	subs	r3, #4
 80060ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3b04      	subs	r3, #4
 80060da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006110 <pxPortInitialiseStack+0x64>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3b14      	subs	r3, #20
 80060e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f06f 0202 	mvn.w	r2, #2
 80060fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3b20      	subs	r3, #32
 8006100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006102:	68fb      	ldr	r3, [r7, #12]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	08006115 	.word	0x08006115

08006114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800611e:	4b13      	ldr	r3, [pc, #76]	@ (800616c <prvTaskExitError+0x58>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d00b      	beq.n	8006140 <prvTaskExitError+0x2c>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60fb      	str	r3, [r7, #12]
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <prvTaskExitError+0x28>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60bb      	str	r3, [r7, #8]
}
 8006152:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006154:	bf00      	nop
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0fc      	beq.n	8006156 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000020 	.word	0x20000020

08006170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <pxCurrentTCBConst2>)
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	6808      	ldr	r0, [r1, #0]
 8006176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	f380 8809 	msr	PSP, r0
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	4770      	bx	lr
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst2>:
 8006190:	2000082c 	.word	0x2000082c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006198:	4808      	ldr	r0, [pc, #32]	@ (80061bc <prvPortStartFirstTask+0x24>)
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f380 8808 	msr	MSP, r0
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8814 	msr	CONTROL, r0
 80061aa:	b662      	cpsie	i
 80061ac:	b661      	cpsie	f
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	df00      	svc	0
 80061b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ba:	bf00      	nop
 80061bc:	e000ed08 	.word	0xe000ed08

080061c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061c6:	4b47      	ldr	r3, [pc, #284]	@ (80062e4 <xPortStartScheduler+0x124>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a47      	ldr	r2, [pc, #284]	@ (80062e8 <xPortStartScheduler+0x128>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10b      	bne.n	80061e8 <xPortStartScheduler+0x28>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	e7fd      	b.n	80061e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061e8:	4b3e      	ldr	r3, [pc, #248]	@ (80062e4 <xPortStartScheduler+0x124>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a3f      	ldr	r2, [pc, #252]	@ (80062ec <xPortStartScheduler+0x12c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10b      	bne.n	800620a <xPortStartScheduler+0x4a>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60fb      	str	r3, [r7, #12]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800620a:	4b39      	ldr	r3, [pc, #228]	@ (80062f0 <xPortStartScheduler+0x130>)
 800620c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	22ff      	movs	r2, #255	@ 0xff
 800621a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800622c:	b2da      	uxtb	r2, r3
 800622e:	4b31      	ldr	r3, [pc, #196]	@ (80062f4 <xPortStartScheduler+0x134>)
 8006230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006232:	4b31      	ldr	r3, [pc, #196]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006234:	2207      	movs	r2, #7
 8006236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006238:	e009      	b.n	800624e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800623a:	4b2f      	ldr	r3, [pc, #188]	@ (80062f8 <xPortStartScheduler+0x138>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3b01      	subs	r3, #1
 8006240:	4a2d      	ldr	r2, [pc, #180]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006256:	2b80      	cmp	r3, #128	@ 0x80
 8006258:	d0ef      	beq.n	800623a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800625a:	4b27      	ldr	r3, [pc, #156]	@ (80062f8 <xPortStartScheduler+0x138>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1c3 0307 	rsb	r3, r3, #7
 8006262:	2b04      	cmp	r3, #4
 8006264:	d00b      	beq.n	800627e <xPortStartScheduler+0xbe>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60bb      	str	r3, [r7, #8]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800627e:	4b1e      	ldr	r3, [pc, #120]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	4a1c      	ldr	r2, [pc, #112]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006288:	4b1b      	ldr	r3, [pc, #108]	@ (80062f8 <xPortStartScheduler+0x138>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006290:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800629c:	4b17      	ldr	r3, [pc, #92]	@ (80062fc <xPortStartScheduler+0x13c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062a8:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a13      	ldr	r2, [pc, #76]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062b4:	f000 f8da 	bl	800646c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062b8:	4b11      	ldr	r3, [pc, #68]	@ (8006300 <xPortStartScheduler+0x140>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062be:	f000 f8f9 	bl	80064b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062c2:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <xPortStartScheduler+0x144>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006304 <xPortStartScheduler+0x144>)
 80062c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80062cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062ce:	f7ff ff63 	bl	8006198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062d2:	f7ff fd9b 	bl	8005e0c <vTaskSwitchContext>
	prvTaskExitError();
 80062d6:	f7ff ff1d 	bl	8006114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	e000ed00 	.word	0xe000ed00
 80062e8:	410fc271 	.word	0x410fc271
 80062ec:	410fc270 	.word	0x410fc270
 80062f0:	e000e400 	.word	0xe000e400
 80062f4:	20000958 	.word	0x20000958
 80062f8:	2000095c 	.word	0x2000095c
 80062fc:	e000ed20 	.word	0xe000ed20
 8006300:	20000020 	.word	0x20000020
 8006304:	e000ef34 	.word	0xe000ef34

08006308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <vPortEnterCritical+0x5c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a0e      	ldr	r2, [pc, #56]	@ (8006364 <vPortEnterCritical+0x5c>)
 800632a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800632c:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <vPortEnterCritical+0x5c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d110      	bne.n	8006356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006334:	4b0c      	ldr	r3, [pc, #48]	@ (8006368 <vPortEnterCritical+0x60>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <vPortEnterCritical+0x4e>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	603b      	str	r3, [r7, #0]
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	e7fd      	b.n	8006352 <vPortEnterCritical+0x4a>
	}
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000020 	.word	0x20000020
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006372:	4b12      	ldr	r3, [pc, #72]	@ (80063bc <vPortExitCritical+0x50>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <vPortExitCritical+0x26>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006392:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <vPortExitCritical+0x50>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3b01      	subs	r3, #1
 8006398:	4a08      	ldr	r2, [pc, #32]	@ (80063bc <vPortExitCritical+0x50>)
 800639a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800639c:	4b07      	ldr	r3, [pc, #28]	@ (80063bc <vPortExitCritical+0x50>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <vPortExitCritical+0x44>
 80063a4:	2300      	movs	r3, #0
 80063a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20000020 	.word	0x20000020

080063c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063c0:	f3ef 8009 	mrs	r0, PSP
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <pxCurrentTCBConst>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	f01e 0f10 	tst.w	lr, #16
 80063d0:	bf08      	it	eq
 80063d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063e4:	f380 8811 	msr	BASEPRI, r0
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f7ff fd0c 	bl	8005e0c <vTaskSwitchContext>
 80063f4:	f04f 0000 	mov.w	r0, #0
 80063f8:	f380 8811 	msr	BASEPRI, r0
 80063fc:	bc09      	pop	{r0, r3}
 80063fe:	6819      	ldr	r1, [r3, #0]
 8006400:	6808      	ldr	r0, [r1, #0]
 8006402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006406:	f01e 0f10 	tst.w	lr, #16
 800640a:	bf08      	it	eq
 800640c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006410:	f380 8809 	msr	PSP, r0
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst>:
 8006420:	2000082c 	.word	0x2000082c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	607b      	str	r3, [r7, #4]
}
 8006440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006442:	f7ff fc29 	bl	8005c98 <xTaskIncrementTick>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800644c:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <xPortSysTickHandler+0x40>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f383 8811 	msr	BASEPRI, r3
}
 800645e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006470:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006476:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <vPortSetupTimerInterrupt+0x38>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800647c:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <vPortSetupTimerInterrupt+0x3c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <vPortSetupTimerInterrupt+0x40>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <vPortSetupTimerInterrupt+0x44>)
 800648a:	3b01      	subs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800648e:	4b04      	ldr	r3, [pc, #16]	@ (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006490:	2207      	movs	r2, #7
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000e010 	.word	0xe000e010
 80064a4:	e000e018 	.word	0xe000e018
 80064a8:	20000014 	.word	0x20000014
 80064ac:	10624dd3 	.word	0x10624dd3
 80064b0:	e000e014 	.word	0xe000e014

080064b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80064c4 <vPortEnableVFP+0x10>
 80064b8:	6801      	ldr	r1, [r0, #0]
 80064ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064be:	6001      	str	r1, [r0, #0]
 80064c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064c2:	bf00      	nop
 80064c4:	e000ed88 	.word	0xe000ed88

080064c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	@ 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064d4:	f7ff fb34 	bl	8005b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064d8:	4b5c      	ldr	r3, [pc, #368]	@ (800664c <pvPortMalloc+0x184>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064e0:	f000 f924 	bl	800672c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006650 <pvPortMalloc+0x188>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 8095 	bne.w	800661c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01e      	beq.n	8006536 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80064f8:	2208      	movs	r2, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b00      	cmp	r3, #0
 8006508:	d015      	beq.n	8006536 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	3308      	adds	r3, #8
 8006512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <pvPortMalloc+0x6e>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	617b      	str	r3, [r7, #20]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d06f      	beq.n	800661c <pvPortMalloc+0x154>
 800653c:	4b45      	ldr	r3, [pc, #276]	@ (8006654 <pvPortMalloc+0x18c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	429a      	cmp	r2, r3
 8006544:	d86a      	bhi.n	800661c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006546:	4b44      	ldr	r3, [pc, #272]	@ (8006658 <pvPortMalloc+0x190>)
 8006548:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800654a:	4b43      	ldr	r3, [pc, #268]	@ (8006658 <pvPortMalloc+0x190>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006550:	e004      	b.n	800655c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d903      	bls.n	800656e <pvPortMalloc+0xa6>
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f1      	bne.n	8006552 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800656e:	4b37      	ldr	r3, [pc, #220]	@ (800664c <pvPortMalloc+0x184>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006574:	429a      	cmp	r2, r3
 8006576:	d051      	beq.n	800661c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2208      	movs	r2, #8
 800657e:	4413      	add	r3, r2
 8006580:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	1ad2      	subs	r2, r2, r3
 8006592:	2308      	movs	r3, #8
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	429a      	cmp	r2, r3
 8006598:	d920      	bls.n	80065dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800659a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4413      	add	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <pvPortMalloc+0xfc>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	613b      	str	r3, [r7, #16]
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065d6:	69b8      	ldr	r0, [r7, #24]
 80065d8:	f000 f90a 	bl	80067f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006654 <pvPortMalloc+0x18c>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006654 <pvPortMalloc+0x18c>)
 80065e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006654 <pvPortMalloc+0x18c>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b1b      	ldr	r3, [pc, #108]	@ (800665c <pvPortMalloc+0x194>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d203      	bcs.n	80065fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065f6:	4b17      	ldr	r3, [pc, #92]	@ (8006654 <pvPortMalloc+0x18c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a18      	ldr	r2, [pc, #96]	@ (800665c <pvPortMalloc+0x194>)
 80065fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	4b13      	ldr	r3, [pc, #76]	@ (8006650 <pvPortMalloc+0x188>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	431a      	orrs	r2, r3
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006612:	4b13      	ldr	r3, [pc, #76]	@ (8006660 <pvPortMalloc+0x198>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	4a11      	ldr	r2, [pc, #68]	@ (8006660 <pvPortMalloc+0x198>)
 800661a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800661c:	f7ff fa9e 	bl	8005b5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <pvPortMalloc+0x17a>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60fb      	str	r3, [r7, #12]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <pvPortMalloc+0x176>
	return pvReturn;
 8006642:	69fb      	ldr	r3, [r7, #28]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3728      	adds	r7, #40	@ 0x28
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20001520 	.word	0x20001520
 8006650:	20001534 	.word	0x20001534
 8006654:	20001524 	.word	0x20001524
 8006658:	20001518 	.word	0x20001518
 800665c:	20001528 	.word	0x20001528
 8006660:	2000152c 	.word	0x2000152c

08006664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04f      	beq.n	8006716 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006676:	2308      	movs	r3, #8
 8006678:	425b      	negs	r3, r3
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	4b25      	ldr	r3, [pc, #148]	@ (8006720 <vPortFree+0xbc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <vPortFree+0x46>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	60fb      	str	r3, [r7, #12]
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <vPortFree+0x66>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60bb      	str	r3, [r7, #8]
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	e7fd      	b.n	80066c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <vPortFree+0xbc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01e      	beq.n	8006716 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d11a      	bne.n	8006716 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <vPortFree+0xbc>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	401a      	ands	r2, r3
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066f0:	f7ff fa26 	bl	8005b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <vPortFree+0xc0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4413      	add	r3, r2
 80066fe:	4a09      	ldr	r2, [pc, #36]	@ (8006724 <vPortFree+0xc0>)
 8006700:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006702:	6938      	ldr	r0, [r7, #16]
 8006704:	f000 f874 	bl	80067f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006708:	4b07      	ldr	r3, [pc, #28]	@ (8006728 <vPortFree+0xc4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	4a06      	ldr	r2, [pc, #24]	@ (8006728 <vPortFree+0xc4>)
 8006710:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006712:	f7ff fa23 	bl	8005b5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006716:	bf00      	nop
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20001534 	.word	0x20001534
 8006724:	20001524 	.word	0x20001524
 8006728:	20001530 	.word	0x20001530

0800672c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006732:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006736:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006738:	4b27      	ldr	r3, [pc, #156]	@ (80067d8 <prvHeapInit+0xac>)
 800673a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3307      	adds	r3, #7
 800674a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0307 	bic.w	r3, r3, #7
 8006752:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	4a1f      	ldr	r2, [pc, #124]	@ (80067d8 <prvHeapInit+0xac>)
 800675c:	4413      	add	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <prvHeapInit+0xb0>)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800676a:	4b1c      	ldr	r3, [pc, #112]	@ (80067dc <prvHeapInit+0xb0>)
 800676c:	2200      	movs	r2, #0
 800676e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4413      	add	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006778:	2208      	movs	r2, #8
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a15      	ldr	r2, [pc, #84]	@ (80067e0 <prvHeapInit+0xb4>)
 800678c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800678e:	4b14      	ldr	r3, [pc, #80]	@ (80067e0 <prvHeapInit+0xb4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2200      	movs	r2, #0
 8006794:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006796:	4b12      	ldr	r3, [pc, #72]	@ (80067e0 <prvHeapInit+0xb4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067ac:	4b0c      	ldr	r3, [pc, #48]	@ (80067e0 <prvHeapInit+0xb4>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4a0a      	ldr	r2, [pc, #40]	@ (80067e4 <prvHeapInit+0xb8>)
 80067ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4a09      	ldr	r2, [pc, #36]	@ (80067e8 <prvHeapInit+0xbc>)
 80067c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067c4:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <prvHeapInit+0xc0>)
 80067c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067ca:	601a      	str	r2, [r3, #0]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	20000960 	.word	0x20000960
 80067dc:	20001518 	.word	0x20001518
 80067e0:	20001520 	.word	0x20001520
 80067e4:	20001528 	.word	0x20001528
 80067e8:	20001524 	.word	0x20001524
 80067ec:	20001534 	.word	0x20001534

080067f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067f8:	4b28      	ldr	r3, [pc, #160]	@ (800689c <prvInsertBlockIntoFreeList+0xac>)
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e002      	b.n	8006804 <prvInsertBlockIntoFreeList+0x14>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d8f7      	bhi.n	80067fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	4413      	add	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	429a      	cmp	r2, r3
 800681e:	d108      	bne.n	8006832 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	441a      	add	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d118      	bne.n	8006878 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <prvInsertBlockIntoFreeList+0xb0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d00d      	beq.n	800686e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	441a      	add	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	e008      	b.n	8006880 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800686e:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <prvInsertBlockIntoFreeList+0xb0>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e003      	b.n	8006880 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d002      	beq.n	800688e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	20001518 	.word	0x20001518
 80068a0:	20001520 	.word	0x20001520

080068a4 <atoi>:
 80068a4:	220a      	movs	r2, #10
 80068a6:	2100      	movs	r1, #0
 80068a8:	f000 b87a 	b.w	80069a0 <strtol>

080068ac <_strtol_l.constprop.0>:
 80068ac:	2b24      	cmp	r3, #36	@ 0x24
 80068ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b2:	4686      	mov	lr, r0
 80068b4:	4690      	mov	r8, r2
 80068b6:	d801      	bhi.n	80068bc <_strtol_l.constprop.0+0x10>
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d106      	bne.n	80068ca <_strtol_l.constprop.0+0x1e>
 80068bc:	f000 faf4 	bl	8006ea8 <__errno>
 80068c0:	2316      	movs	r3, #22
 80068c2:	6003      	str	r3, [r0, #0]
 80068c4:	2000      	movs	r0, #0
 80068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ca:	4834      	ldr	r0, [pc, #208]	@ (800699c <_strtol_l.constprop.0+0xf0>)
 80068cc:	460d      	mov	r5, r1
 80068ce:	462a      	mov	r2, r5
 80068d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068d4:	5d06      	ldrb	r6, [r0, r4]
 80068d6:	f016 0608 	ands.w	r6, r6, #8
 80068da:	d1f8      	bne.n	80068ce <_strtol_l.constprop.0+0x22>
 80068dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80068de:	d12d      	bne.n	800693c <_strtol_l.constprop.0+0x90>
 80068e0:	782c      	ldrb	r4, [r5, #0]
 80068e2:	2601      	movs	r6, #1
 80068e4:	1c95      	adds	r5, r2, #2
 80068e6:	f033 0210 	bics.w	r2, r3, #16
 80068ea:	d109      	bne.n	8006900 <_strtol_l.constprop.0+0x54>
 80068ec:	2c30      	cmp	r4, #48	@ 0x30
 80068ee:	d12a      	bne.n	8006946 <_strtol_l.constprop.0+0x9a>
 80068f0:	782a      	ldrb	r2, [r5, #0]
 80068f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068f6:	2a58      	cmp	r2, #88	@ 0x58
 80068f8:	d125      	bne.n	8006946 <_strtol_l.constprop.0+0x9a>
 80068fa:	786c      	ldrb	r4, [r5, #1]
 80068fc:	2310      	movs	r3, #16
 80068fe:	3502      	adds	r5, #2
 8006900:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006904:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006908:	2200      	movs	r2, #0
 800690a:	fbbc f9f3 	udiv	r9, ip, r3
 800690e:	4610      	mov	r0, r2
 8006910:	fb03 ca19 	mls	sl, r3, r9, ip
 8006914:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006918:	2f09      	cmp	r7, #9
 800691a:	d81b      	bhi.n	8006954 <_strtol_l.constprop.0+0xa8>
 800691c:	463c      	mov	r4, r7
 800691e:	42a3      	cmp	r3, r4
 8006920:	dd27      	ble.n	8006972 <_strtol_l.constprop.0+0xc6>
 8006922:	1c57      	adds	r7, r2, #1
 8006924:	d007      	beq.n	8006936 <_strtol_l.constprop.0+0x8a>
 8006926:	4581      	cmp	r9, r0
 8006928:	d320      	bcc.n	800696c <_strtol_l.constprop.0+0xc0>
 800692a:	d101      	bne.n	8006930 <_strtol_l.constprop.0+0x84>
 800692c:	45a2      	cmp	sl, r4
 800692e:	db1d      	blt.n	800696c <_strtol_l.constprop.0+0xc0>
 8006930:	fb00 4003 	mla	r0, r0, r3, r4
 8006934:	2201      	movs	r2, #1
 8006936:	f815 4b01 	ldrb.w	r4, [r5], #1
 800693a:	e7eb      	b.n	8006914 <_strtol_l.constprop.0+0x68>
 800693c:	2c2b      	cmp	r4, #43	@ 0x2b
 800693e:	bf04      	itt	eq
 8006940:	782c      	ldrbeq	r4, [r5, #0]
 8006942:	1c95      	addeq	r5, r2, #2
 8006944:	e7cf      	b.n	80068e6 <_strtol_l.constprop.0+0x3a>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1da      	bne.n	8006900 <_strtol_l.constprop.0+0x54>
 800694a:	2c30      	cmp	r4, #48	@ 0x30
 800694c:	bf0c      	ite	eq
 800694e:	2308      	moveq	r3, #8
 8006950:	230a      	movne	r3, #10
 8006952:	e7d5      	b.n	8006900 <_strtol_l.constprop.0+0x54>
 8006954:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006958:	2f19      	cmp	r7, #25
 800695a:	d801      	bhi.n	8006960 <_strtol_l.constprop.0+0xb4>
 800695c:	3c37      	subs	r4, #55	@ 0x37
 800695e:	e7de      	b.n	800691e <_strtol_l.constprop.0+0x72>
 8006960:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006964:	2f19      	cmp	r7, #25
 8006966:	d804      	bhi.n	8006972 <_strtol_l.constprop.0+0xc6>
 8006968:	3c57      	subs	r4, #87	@ 0x57
 800696a:	e7d8      	b.n	800691e <_strtol_l.constprop.0+0x72>
 800696c:	f04f 32ff 	mov.w	r2, #4294967295
 8006970:	e7e1      	b.n	8006936 <_strtol_l.constprop.0+0x8a>
 8006972:	1c53      	adds	r3, r2, #1
 8006974:	d108      	bne.n	8006988 <_strtol_l.constprop.0+0xdc>
 8006976:	2322      	movs	r3, #34	@ 0x22
 8006978:	f8ce 3000 	str.w	r3, [lr]
 800697c:	4660      	mov	r0, ip
 800697e:	f1b8 0f00 	cmp.w	r8, #0
 8006982:	d0a0      	beq.n	80068c6 <_strtol_l.constprop.0+0x1a>
 8006984:	1e69      	subs	r1, r5, #1
 8006986:	e006      	b.n	8006996 <_strtol_l.constprop.0+0xea>
 8006988:	b106      	cbz	r6, 800698c <_strtol_l.constprop.0+0xe0>
 800698a:	4240      	negs	r0, r0
 800698c:	f1b8 0f00 	cmp.w	r8, #0
 8006990:	d099      	beq.n	80068c6 <_strtol_l.constprop.0+0x1a>
 8006992:	2a00      	cmp	r2, #0
 8006994:	d1f6      	bne.n	8006984 <_strtol_l.constprop.0+0xd8>
 8006996:	f8c8 1000 	str.w	r1, [r8]
 800699a:	e794      	b.n	80068c6 <_strtol_l.constprop.0+0x1a>
 800699c:	08007bd1 	.word	0x08007bd1

080069a0 <strtol>:
 80069a0:	4613      	mov	r3, r2
 80069a2:	460a      	mov	r2, r1
 80069a4:	4601      	mov	r1, r0
 80069a6:	4802      	ldr	r0, [pc, #8]	@ (80069b0 <strtol+0x10>)
 80069a8:	6800      	ldr	r0, [r0, #0]
 80069aa:	f7ff bf7f 	b.w	80068ac <_strtol_l.constprop.0>
 80069ae:	bf00      	nop
 80069b0:	20000030 	.word	0x20000030

080069b4 <std>:
 80069b4:	2300      	movs	r3, #0
 80069b6:	b510      	push	{r4, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	e9c0 3300 	strd	r3, r3, [r0]
 80069be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069c2:	6083      	str	r3, [r0, #8]
 80069c4:	8181      	strh	r1, [r0, #12]
 80069c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80069c8:	81c2      	strh	r2, [r0, #14]
 80069ca:	6183      	str	r3, [r0, #24]
 80069cc:	4619      	mov	r1, r3
 80069ce:	2208      	movs	r2, #8
 80069d0:	305c      	adds	r0, #92	@ 0x5c
 80069d2:	f000 fa1b 	bl	8006e0c <memset>
 80069d6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a0c <std+0x58>)
 80069d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <std+0x5c>)
 80069dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069de:	4b0d      	ldr	r3, [pc, #52]	@ (8006a14 <std+0x60>)
 80069e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <std+0x64>)
 80069e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80069e6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <std+0x68>)
 80069e8:	6224      	str	r4, [r4, #32]
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d006      	beq.n	80069fc <std+0x48>
 80069ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069f2:	4294      	cmp	r4, r2
 80069f4:	d002      	beq.n	80069fc <std+0x48>
 80069f6:	33d0      	adds	r3, #208	@ 0xd0
 80069f8:	429c      	cmp	r4, r3
 80069fa:	d105      	bne.n	8006a08 <std+0x54>
 80069fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a04:	f000 ba7a 	b.w	8006efc <__retarget_lock_init_recursive>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08006c5d 	.word	0x08006c5d
 8006a10:	08006c7f 	.word	0x08006c7f
 8006a14:	08006cb7 	.word	0x08006cb7
 8006a18:	08006cdb 	.word	0x08006cdb
 8006a1c:	20001538 	.word	0x20001538

08006a20 <stdio_exit_handler>:
 8006a20:	4a02      	ldr	r2, [pc, #8]	@ (8006a2c <stdio_exit_handler+0xc>)
 8006a22:	4903      	ldr	r1, [pc, #12]	@ (8006a30 <stdio_exit_handler+0x10>)
 8006a24:	4803      	ldr	r0, [pc, #12]	@ (8006a34 <stdio_exit_handler+0x14>)
 8006a26:	f000 b869 	b.w	8006afc <_fwalk_sglue>
 8006a2a:	bf00      	nop
 8006a2c:	20000024 	.word	0x20000024
 8006a30:	080077e5 	.word	0x080077e5
 8006a34:	20000034 	.word	0x20000034

08006a38 <cleanup_stdio>:
 8006a38:	6841      	ldr	r1, [r0, #4]
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <cleanup_stdio+0x34>)
 8006a3c:	4299      	cmp	r1, r3
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	4604      	mov	r4, r0
 8006a42:	d001      	beq.n	8006a48 <cleanup_stdio+0x10>
 8006a44:	f000 fece 	bl	80077e4 <_fflush_r>
 8006a48:	68a1      	ldr	r1, [r4, #8]
 8006a4a:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <cleanup_stdio+0x38>)
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	d002      	beq.n	8006a56 <cleanup_stdio+0x1e>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 fec7 	bl	80077e4 <_fflush_r>
 8006a56:	68e1      	ldr	r1, [r4, #12]
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <cleanup_stdio+0x3c>)
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d004      	beq.n	8006a68 <cleanup_stdio+0x30>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f000 bebe 	b.w	80077e4 <_fflush_r>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20001538 	.word	0x20001538
 8006a70:	200015a0 	.word	0x200015a0
 8006a74:	20001608 	.word	0x20001608

08006a78 <global_stdio_init.part.0>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <global_stdio_init.part.0+0x30>)
 8006a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8006aac <global_stdio_init.part.0+0x34>)
 8006a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab0 <global_stdio_init.part.0+0x38>)
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	4620      	mov	r0, r4
 8006a84:	2200      	movs	r2, #0
 8006a86:	2104      	movs	r1, #4
 8006a88:	f7ff ff94 	bl	80069b4 <std>
 8006a8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a90:	2201      	movs	r2, #1
 8006a92:	2109      	movs	r1, #9
 8006a94:	f7ff ff8e 	bl	80069b4 <std>
 8006a98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	f7ff bf86 	b.w	80069b4 <std>
 8006aa8:	20001670 	.word	0x20001670
 8006aac:	20001538 	.word	0x20001538
 8006ab0:	08006a21 	.word	0x08006a21

08006ab4 <__sfp_lock_acquire>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__sfp_lock_acquire+0x8>)
 8006ab6:	f000 ba22 	b.w	8006efe <__retarget_lock_acquire_recursive>
 8006aba:	bf00      	nop
 8006abc:	20001679 	.word	0x20001679

08006ac0 <__sfp_lock_release>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	@ (8006ac8 <__sfp_lock_release+0x8>)
 8006ac2:	f000 ba1d 	b.w	8006f00 <__retarget_lock_release_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	20001679 	.word	0x20001679

08006acc <__sinit>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	f7ff fff0 	bl	8006ab4 <__sfp_lock_acquire>
 8006ad4:	6a23      	ldr	r3, [r4, #32]
 8006ad6:	b11b      	cbz	r3, 8006ae0 <__sinit+0x14>
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f7ff bff0 	b.w	8006ac0 <__sfp_lock_release>
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <__sinit+0x28>)
 8006ae2:	6223      	str	r3, [r4, #32]
 8006ae4:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <__sinit+0x2c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f5      	bne.n	8006ad8 <__sinit+0xc>
 8006aec:	f7ff ffc4 	bl	8006a78 <global_stdio_init.part.0>
 8006af0:	e7f2      	b.n	8006ad8 <__sinit+0xc>
 8006af2:	bf00      	nop
 8006af4:	08006a39 	.word	0x08006a39
 8006af8:	20001670 	.word	0x20001670

08006afc <_fwalk_sglue>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	4607      	mov	r7, r0
 8006b02:	4688      	mov	r8, r1
 8006b04:	4614      	mov	r4, r2
 8006b06:	2600      	movs	r6, #0
 8006b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b10:	d505      	bpl.n	8006b1e <_fwalk_sglue+0x22>
 8006b12:	6824      	ldr	r4, [r4, #0]
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	d1f7      	bne.n	8006b08 <_fwalk_sglue+0xc>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d907      	bls.n	8006b34 <_fwalk_sglue+0x38>
 8006b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	d003      	beq.n	8006b34 <_fwalk_sglue+0x38>
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	4306      	orrs	r6, r0
 8006b34:	3568      	adds	r5, #104	@ 0x68
 8006b36:	e7e9      	b.n	8006b0c <_fwalk_sglue+0x10>

08006b38 <_puts_r>:
 8006b38:	6a03      	ldr	r3, [r0, #32]
 8006b3a:	b570      	push	{r4, r5, r6, lr}
 8006b3c:	6884      	ldr	r4, [r0, #8]
 8006b3e:	4605      	mov	r5, r0
 8006b40:	460e      	mov	r6, r1
 8006b42:	b90b      	cbnz	r3, 8006b48 <_puts_r+0x10>
 8006b44:	f7ff ffc2 	bl	8006acc <__sinit>
 8006b48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b4a:	07db      	lsls	r3, r3, #31
 8006b4c:	d405      	bmi.n	8006b5a <_puts_r+0x22>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	0598      	lsls	r0, r3, #22
 8006b52:	d402      	bmi.n	8006b5a <_puts_r+0x22>
 8006b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b56:	f000 f9d2 	bl	8006efe <__retarget_lock_acquire_recursive>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	0719      	lsls	r1, r3, #28
 8006b5e:	d502      	bpl.n	8006b66 <_puts_r+0x2e>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d135      	bne.n	8006bd2 <_puts_r+0x9a>
 8006b66:	4621      	mov	r1, r4
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f000 f8f9 	bl	8006d60 <__swsetup_r>
 8006b6e:	b380      	cbz	r0, 8006bd2 <_puts_r+0x9a>
 8006b70:	f04f 35ff 	mov.w	r5, #4294967295
 8006b74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b76:	07da      	lsls	r2, r3, #31
 8006b78:	d405      	bmi.n	8006b86 <_puts_r+0x4e>
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	059b      	lsls	r3, r3, #22
 8006b7e:	d402      	bmi.n	8006b86 <_puts_r+0x4e>
 8006b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b82:	f000 f9bd 	bl	8006f00 <__retarget_lock_release_recursive>
 8006b86:	4628      	mov	r0, r5
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	da04      	bge.n	8006b98 <_puts_r+0x60>
 8006b8e:	69a2      	ldr	r2, [r4, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	dc17      	bgt.n	8006bc4 <_puts_r+0x8c>
 8006b94:	290a      	cmp	r1, #10
 8006b96:	d015      	beq.n	8006bc4 <_puts_r+0x8c>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	6022      	str	r2, [r4, #0]
 8006b9e:	7019      	strb	r1, [r3, #0]
 8006ba0:	68a3      	ldr	r3, [r4, #8]
 8006ba2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	60a3      	str	r3, [r4, #8]
 8006baa:	2900      	cmp	r1, #0
 8006bac:	d1ed      	bne.n	8006b8a <_puts_r+0x52>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da11      	bge.n	8006bd6 <_puts_r+0x9e>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	210a      	movs	r1, #10
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 f893 	bl	8006ce2 <__swbuf_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d0d7      	beq.n	8006b70 <_puts_r+0x38>
 8006bc0:	250a      	movs	r5, #10
 8006bc2:	e7d7      	b.n	8006b74 <_puts_r+0x3c>
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 f88b 	bl	8006ce2 <__swbuf_r>
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d1e7      	bne.n	8006ba0 <_puts_r+0x68>
 8006bd0:	e7ce      	b.n	8006b70 <_puts_r+0x38>
 8006bd2:	3e01      	subs	r6, #1
 8006bd4:	e7e4      	b.n	8006ba0 <_puts_r+0x68>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	220a      	movs	r2, #10
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	e7ee      	b.n	8006bc0 <_puts_r+0x88>
	...

08006be4 <puts>:
 8006be4:	4b02      	ldr	r3, [pc, #8]	@ (8006bf0 <puts+0xc>)
 8006be6:	4601      	mov	r1, r0
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	f7ff bfa5 	b.w	8006b38 <_puts_r>
 8006bee:	bf00      	nop
 8006bf0:	20000030 	.word	0x20000030

08006bf4 <sniprintf>:
 8006bf4:	b40c      	push	{r2, r3}
 8006bf6:	b530      	push	{r4, r5, lr}
 8006bf8:	4b17      	ldr	r3, [pc, #92]	@ (8006c58 <sniprintf+0x64>)
 8006bfa:	1e0c      	subs	r4, r1, #0
 8006bfc:	681d      	ldr	r5, [r3, #0]
 8006bfe:	b09d      	sub	sp, #116	@ 0x74
 8006c00:	da08      	bge.n	8006c14 <sniprintf+0x20>
 8006c02:	238b      	movs	r3, #139	@ 0x8b
 8006c04:	602b      	str	r3, [r5, #0]
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	b01d      	add	sp, #116	@ 0x74
 8006c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c10:	b002      	add	sp, #8
 8006c12:	4770      	bx	lr
 8006c14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c1c:	bf14      	ite	ne
 8006c1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c22:	4623      	moveq	r3, r4
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	9307      	str	r3, [sp, #28]
 8006c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c2c:	9002      	str	r0, [sp, #8]
 8006c2e:	9006      	str	r0, [sp, #24]
 8006c30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c36:	ab21      	add	r3, sp, #132	@ 0x84
 8006c38:	a902      	add	r1, sp, #8
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	9301      	str	r3, [sp, #4]
 8006c3e:	f000 fac3 	bl	80071c8 <_svfiprintf_r>
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	bfbc      	itt	lt
 8006c46:	238b      	movlt	r3, #139	@ 0x8b
 8006c48:	602b      	strlt	r3, [r5, #0]
 8006c4a:	2c00      	cmp	r4, #0
 8006c4c:	d0dd      	beq.n	8006c0a <sniprintf+0x16>
 8006c4e:	9b02      	ldr	r3, [sp, #8]
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	e7d9      	b.n	8006c0a <sniprintf+0x16>
 8006c56:	bf00      	nop
 8006c58:	20000030 	.word	0x20000030

08006c5c <__sread>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	460c      	mov	r4, r1
 8006c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c64:	f000 f8fc 	bl	8006e60 <_read_r>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	bfab      	itete	ge
 8006c6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c70:	181b      	addge	r3, r3, r0
 8006c72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c76:	bfac      	ite	ge
 8006c78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c7a:	81a3      	strhlt	r3, [r4, #12]
 8006c7c:	bd10      	pop	{r4, pc}

08006c7e <__swrite>:
 8006c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c82:	461f      	mov	r7, r3
 8006c84:	898b      	ldrh	r3, [r1, #12]
 8006c86:	05db      	lsls	r3, r3, #23
 8006c88:	4605      	mov	r5, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	d505      	bpl.n	8006c9c <__swrite+0x1e>
 8006c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c94:	2302      	movs	r3, #2
 8006c96:	2200      	movs	r2, #0
 8006c98:	f000 f8d0 	bl	8006e3c <_lseek_r>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	4632      	mov	r2, r6
 8006caa:	463b      	mov	r3, r7
 8006cac:	4628      	mov	r0, r5
 8006cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb2:	f000 b8e7 	b.w	8006e84 <_write_r>

08006cb6 <__sseek>:
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	460c      	mov	r4, r1
 8006cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbe:	f000 f8bd 	bl	8006e3c <_lseek_r>
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	bf15      	itete	ne
 8006cc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cd2:	81a3      	strheq	r3, [r4, #12]
 8006cd4:	bf18      	it	ne
 8006cd6:	81a3      	strhne	r3, [r4, #12]
 8006cd8:	bd10      	pop	{r4, pc}

08006cda <__sclose>:
 8006cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cde:	f000 b89d 	b.w	8006e1c <_close_r>

08006ce2 <__swbuf_r>:
 8006ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce4:	460e      	mov	r6, r1
 8006ce6:	4614      	mov	r4, r2
 8006ce8:	4605      	mov	r5, r0
 8006cea:	b118      	cbz	r0, 8006cf4 <__swbuf_r+0x12>
 8006cec:	6a03      	ldr	r3, [r0, #32]
 8006cee:	b90b      	cbnz	r3, 8006cf4 <__swbuf_r+0x12>
 8006cf0:	f7ff feec 	bl	8006acc <__sinit>
 8006cf4:	69a3      	ldr	r3, [r4, #24]
 8006cf6:	60a3      	str	r3, [r4, #8]
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	071a      	lsls	r2, r3, #28
 8006cfc:	d501      	bpl.n	8006d02 <__swbuf_r+0x20>
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	b943      	cbnz	r3, 8006d14 <__swbuf_r+0x32>
 8006d02:	4621      	mov	r1, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 f82b 	bl	8006d60 <__swsetup_r>
 8006d0a:	b118      	cbz	r0, 8006d14 <__swbuf_r+0x32>
 8006d0c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d10:	4638      	mov	r0, r7
 8006d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	6922      	ldr	r2, [r4, #16]
 8006d18:	1a98      	subs	r0, r3, r2
 8006d1a:	6963      	ldr	r3, [r4, #20]
 8006d1c:	b2f6      	uxtb	r6, r6
 8006d1e:	4283      	cmp	r3, r0
 8006d20:	4637      	mov	r7, r6
 8006d22:	dc05      	bgt.n	8006d30 <__swbuf_r+0x4e>
 8006d24:	4621      	mov	r1, r4
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 fd5c 	bl	80077e4 <_fflush_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d1ed      	bne.n	8006d0c <__swbuf_r+0x2a>
 8006d30:	68a3      	ldr	r3, [r4, #8]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	60a3      	str	r3, [r4, #8]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	6022      	str	r2, [r4, #0]
 8006d3c:	701e      	strb	r6, [r3, #0]
 8006d3e:	6962      	ldr	r2, [r4, #20]
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d004      	beq.n	8006d50 <__swbuf_r+0x6e>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	07db      	lsls	r3, r3, #31
 8006d4a:	d5e1      	bpl.n	8006d10 <__swbuf_r+0x2e>
 8006d4c:	2e0a      	cmp	r6, #10
 8006d4e:	d1df      	bne.n	8006d10 <__swbuf_r+0x2e>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4628      	mov	r0, r5
 8006d54:	f000 fd46 	bl	80077e4 <_fflush_r>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d0d9      	beq.n	8006d10 <__swbuf_r+0x2e>
 8006d5c:	e7d6      	b.n	8006d0c <__swbuf_r+0x2a>
	...

08006d60 <__swsetup_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4b29      	ldr	r3, [pc, #164]	@ (8006e08 <__swsetup_r+0xa8>)
 8006d64:	4605      	mov	r5, r0
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	460c      	mov	r4, r1
 8006d6a:	b118      	cbz	r0, 8006d74 <__swsetup_r+0x14>
 8006d6c:	6a03      	ldr	r3, [r0, #32]
 8006d6e:	b90b      	cbnz	r3, 8006d74 <__swsetup_r+0x14>
 8006d70:	f7ff feac 	bl	8006acc <__sinit>
 8006d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d78:	0719      	lsls	r1, r3, #28
 8006d7a:	d422      	bmi.n	8006dc2 <__swsetup_r+0x62>
 8006d7c:	06da      	lsls	r2, r3, #27
 8006d7e:	d407      	bmi.n	8006d90 <__swsetup_r+0x30>
 8006d80:	2209      	movs	r2, #9
 8006d82:	602a      	str	r2, [r5, #0]
 8006d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d88:	81a3      	strh	r3, [r4, #12]
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	e033      	b.n	8006df8 <__swsetup_r+0x98>
 8006d90:	0758      	lsls	r0, r3, #29
 8006d92:	d512      	bpl.n	8006dba <__swsetup_r+0x5a>
 8006d94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d96:	b141      	cbz	r1, 8006daa <__swsetup_r+0x4a>
 8006d98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d9c:	4299      	cmp	r1, r3
 8006d9e:	d002      	beq.n	8006da6 <__swsetup_r+0x46>
 8006da0:	4628      	mov	r0, r5
 8006da2:	f000 f8bd 	bl	8006f20 <_free_r>
 8006da6:	2300      	movs	r3, #0
 8006da8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	2300      	movs	r3, #0
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f043 0308 	orr.w	r3, r3, #8
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	b94b      	cbnz	r3, 8006dda <__swsetup_r+0x7a>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd0:	d003      	beq.n	8006dda <__swsetup_r+0x7a>
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	f000 fd53 	bl	8007880 <__smakebuf_r>
 8006dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dde:	f013 0201 	ands.w	r2, r3, #1
 8006de2:	d00a      	beq.n	8006dfa <__swsetup_r+0x9a>
 8006de4:	2200      	movs	r2, #0
 8006de6:	60a2      	str	r2, [r4, #8]
 8006de8:	6962      	ldr	r2, [r4, #20]
 8006dea:	4252      	negs	r2, r2
 8006dec:	61a2      	str	r2, [r4, #24]
 8006dee:	6922      	ldr	r2, [r4, #16]
 8006df0:	b942      	cbnz	r2, 8006e04 <__swsetup_r+0xa4>
 8006df2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006df6:	d1c5      	bne.n	8006d84 <__swsetup_r+0x24>
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	0799      	lsls	r1, r3, #30
 8006dfc:	bf58      	it	pl
 8006dfe:	6962      	ldrpl	r2, [r4, #20]
 8006e00:	60a2      	str	r2, [r4, #8]
 8006e02:	e7f4      	b.n	8006dee <__swsetup_r+0x8e>
 8006e04:	2000      	movs	r0, #0
 8006e06:	e7f7      	b.n	8006df8 <__swsetup_r+0x98>
 8006e08:	20000030 	.word	0x20000030

08006e0c <memset>:
 8006e0c:	4402      	add	r2, r0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d100      	bne.n	8006e16 <memset+0xa>
 8006e14:	4770      	bx	lr
 8006e16:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1a:	e7f9      	b.n	8006e10 <memset+0x4>

08006e1c <_close_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	@ (8006e38 <_close_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fa f9a5 	bl	8001176 <_close>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_close_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_close_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20001674 	.word	0x20001674

08006e3c <_lseek_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d07      	ldr	r5, [pc, #28]	@ (8006e5c <_lseek_r+0x20>)
 8006e40:	4604      	mov	r4, r0
 8006e42:	4608      	mov	r0, r1
 8006e44:	4611      	mov	r1, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	602a      	str	r2, [r5, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f7fa f9ba 	bl	80011c4 <_lseek>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_lseek_r+0x1e>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_lseek_r+0x1e>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	20001674 	.word	0x20001674

08006e60 <_read_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4d07      	ldr	r5, [pc, #28]	@ (8006e80 <_read_r+0x20>)
 8006e64:	4604      	mov	r4, r0
 8006e66:	4608      	mov	r0, r1
 8006e68:	4611      	mov	r1, r2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	602a      	str	r2, [r5, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f7fa f948 	bl	8001104 <_read>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_read_r+0x1e>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_read_r+0x1e>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	20001674 	.word	0x20001674

08006e84 <_write_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d07      	ldr	r5, [pc, #28]	@ (8006ea4 <_write_r+0x20>)
 8006e88:	4604      	mov	r4, r0
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	2200      	movs	r2, #0
 8006e90:	602a      	str	r2, [r5, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f7fa f953 	bl	800113e <_write>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_write_r+0x1e>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_write_r+0x1e>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	20001674 	.word	0x20001674

08006ea8 <__errno>:
 8006ea8:	4b01      	ldr	r3, [pc, #4]	@ (8006eb0 <__errno+0x8>)
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20000030 	.word	0x20000030

08006eb4 <__libc_init_array>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8006eec <__libc_init_array+0x38>)
 8006eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ef0 <__libc_init_array+0x3c>)
 8006eba:	1b64      	subs	r4, r4, r5
 8006ebc:	10a4      	asrs	r4, r4, #2
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	42a6      	cmp	r6, r4
 8006ec2:	d109      	bne.n	8006ed8 <__libc_init_array+0x24>
 8006ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ef4 <__libc_init_array+0x40>)
 8006ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ef8 <__libc_init_array+0x44>)
 8006ec8:	f000 fd98 	bl	80079fc <_init>
 8006ecc:	1b64      	subs	r4, r4, r5
 8006ece:	10a4      	asrs	r4, r4, #2
 8006ed0:	2600      	movs	r6, #0
 8006ed2:	42a6      	cmp	r6, r4
 8006ed4:	d105      	bne.n	8006ee2 <__libc_init_array+0x2e>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006edc:	4798      	blx	r3
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7ee      	b.n	8006ec0 <__libc_init_array+0xc>
 8006ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee6:	4798      	blx	r3
 8006ee8:	3601      	adds	r6, #1
 8006eea:	e7f2      	b.n	8006ed2 <__libc_init_array+0x1e>
 8006eec:	08007d0c 	.word	0x08007d0c
 8006ef0:	08007d0c 	.word	0x08007d0c
 8006ef4:	08007d0c 	.word	0x08007d0c
 8006ef8:	08007d10 	.word	0x08007d10

08006efc <__retarget_lock_init_recursive>:
 8006efc:	4770      	bx	lr

08006efe <__retarget_lock_acquire_recursive>:
 8006efe:	4770      	bx	lr

08006f00 <__retarget_lock_release_recursive>:
 8006f00:	4770      	bx	lr

08006f02 <memcpy>:
 8006f02:	440a      	add	r2, r1
 8006f04:	4291      	cmp	r1, r2
 8006f06:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f0a:	d100      	bne.n	8006f0e <memcpy+0xc>
 8006f0c:	4770      	bx	lr
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f18:	4291      	cmp	r1, r2
 8006f1a:	d1f9      	bne.n	8006f10 <memcpy+0xe>
 8006f1c:	bd10      	pop	{r4, pc}
	...

08006f20 <_free_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4605      	mov	r5, r0
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d041      	beq.n	8006fac <_free_r+0x8c>
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f0c      	subs	r4, r1, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfb8      	it	lt
 8006f32:	18e4      	addlt	r4, r4, r3
 8006f34:	f000 f8e0 	bl	80070f8 <__malloc_lock>
 8006f38:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb0 <_free_r+0x90>)
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	b933      	cbnz	r3, 8006f4c <_free_r+0x2c>
 8006f3e:	6063      	str	r3, [r4, #4]
 8006f40:	6014      	str	r4, [r2, #0]
 8006f42:	4628      	mov	r0, r5
 8006f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f48:	f000 b8dc 	b.w	8007104 <__malloc_unlock>
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d908      	bls.n	8006f62 <_free_r+0x42>
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	1821      	adds	r1, r4, r0
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf01      	itttt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	1809      	addeq	r1, r1, r0
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	e7ed      	b.n	8006f3e <_free_r+0x1e>
 8006f62:	461a      	mov	r2, r3
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	b10b      	cbz	r3, 8006f6c <_free_r+0x4c>
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d9fa      	bls.n	8006f62 <_free_r+0x42>
 8006f6c:	6811      	ldr	r1, [r2, #0]
 8006f6e:	1850      	adds	r0, r2, r1
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	d10b      	bne.n	8006f8c <_free_r+0x6c>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	4401      	add	r1, r0
 8006f78:	1850      	adds	r0, r2, r1
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	d1e0      	bne.n	8006f42 <_free_r+0x22>
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	6053      	str	r3, [r2, #4]
 8006f86:	4408      	add	r0, r1
 8006f88:	6010      	str	r0, [r2, #0]
 8006f8a:	e7da      	b.n	8006f42 <_free_r+0x22>
 8006f8c:	d902      	bls.n	8006f94 <_free_r+0x74>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	e7d6      	b.n	8006f42 <_free_r+0x22>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	1821      	adds	r1, r4, r0
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	bf04      	itt	eq
 8006f9c:	6819      	ldreq	r1, [r3, #0]
 8006f9e:	685b      	ldreq	r3, [r3, #4]
 8006fa0:	6063      	str	r3, [r4, #4]
 8006fa2:	bf04      	itt	eq
 8006fa4:	1809      	addeq	r1, r1, r0
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	6054      	str	r4, [r2, #4]
 8006faa:	e7ca      	b.n	8006f42 <_free_r+0x22>
 8006fac:	bd38      	pop	{r3, r4, r5, pc}
 8006fae:	bf00      	nop
 8006fb0:	20001680 	.word	0x20001680

08006fb4 <sbrk_aligned>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8006ff4 <sbrk_aligned+0x40>)
 8006fb8:	460c      	mov	r4, r1
 8006fba:	6831      	ldr	r1, [r6, #0]
 8006fbc:	4605      	mov	r5, r0
 8006fbe:	b911      	cbnz	r1, 8006fc6 <sbrk_aligned+0x12>
 8006fc0:	f000 fcd6 	bl	8007970 <_sbrk_r>
 8006fc4:	6030      	str	r0, [r6, #0]
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f000 fcd1 	bl	8007970 <_sbrk_r>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	d103      	bne.n	8006fda <sbrk_aligned+0x26>
 8006fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	bd70      	pop	{r4, r5, r6, pc}
 8006fda:	1cc4      	adds	r4, r0, #3
 8006fdc:	f024 0403 	bic.w	r4, r4, #3
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	d0f8      	beq.n	8006fd6 <sbrk_aligned+0x22>
 8006fe4:	1a21      	subs	r1, r4, r0
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 fcc2 	bl	8007970 <_sbrk_r>
 8006fec:	3001      	adds	r0, #1
 8006fee:	d1f2      	bne.n	8006fd6 <sbrk_aligned+0x22>
 8006ff0:	e7ef      	b.n	8006fd2 <sbrk_aligned+0x1e>
 8006ff2:	bf00      	nop
 8006ff4:	2000167c 	.word	0x2000167c

08006ff8 <_malloc_r>:
 8006ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ffc:	1ccd      	adds	r5, r1, #3
 8006ffe:	f025 0503 	bic.w	r5, r5, #3
 8007002:	3508      	adds	r5, #8
 8007004:	2d0c      	cmp	r5, #12
 8007006:	bf38      	it	cc
 8007008:	250c      	movcc	r5, #12
 800700a:	2d00      	cmp	r5, #0
 800700c:	4606      	mov	r6, r0
 800700e:	db01      	blt.n	8007014 <_malloc_r+0x1c>
 8007010:	42a9      	cmp	r1, r5
 8007012:	d904      	bls.n	800701e <_malloc_r+0x26>
 8007014:	230c      	movs	r3, #12
 8007016:	6033      	str	r3, [r6, #0]
 8007018:	2000      	movs	r0, #0
 800701a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070f4 <_malloc_r+0xfc>
 8007022:	f000 f869 	bl	80070f8 <__malloc_lock>
 8007026:	f8d8 3000 	ldr.w	r3, [r8]
 800702a:	461c      	mov	r4, r3
 800702c:	bb44      	cbnz	r4, 8007080 <_malloc_r+0x88>
 800702e:	4629      	mov	r1, r5
 8007030:	4630      	mov	r0, r6
 8007032:	f7ff ffbf 	bl	8006fb4 <sbrk_aligned>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	4604      	mov	r4, r0
 800703a:	d158      	bne.n	80070ee <_malloc_r+0xf6>
 800703c:	f8d8 4000 	ldr.w	r4, [r8]
 8007040:	4627      	mov	r7, r4
 8007042:	2f00      	cmp	r7, #0
 8007044:	d143      	bne.n	80070ce <_malloc_r+0xd6>
 8007046:	2c00      	cmp	r4, #0
 8007048:	d04b      	beq.n	80070e2 <_malloc_r+0xea>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	4639      	mov	r1, r7
 800704e:	4630      	mov	r0, r6
 8007050:	eb04 0903 	add.w	r9, r4, r3
 8007054:	f000 fc8c 	bl	8007970 <_sbrk_r>
 8007058:	4581      	cmp	r9, r0
 800705a:	d142      	bne.n	80070e2 <_malloc_r+0xea>
 800705c:	6821      	ldr	r1, [r4, #0]
 800705e:	1a6d      	subs	r5, r5, r1
 8007060:	4629      	mov	r1, r5
 8007062:	4630      	mov	r0, r6
 8007064:	f7ff ffa6 	bl	8006fb4 <sbrk_aligned>
 8007068:	3001      	adds	r0, #1
 800706a:	d03a      	beq.n	80070e2 <_malloc_r+0xea>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	442b      	add	r3, r5
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	f8d8 3000 	ldr.w	r3, [r8]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	bb62      	cbnz	r2, 80070d4 <_malloc_r+0xdc>
 800707a:	f8c8 7000 	str.w	r7, [r8]
 800707e:	e00f      	b.n	80070a0 <_malloc_r+0xa8>
 8007080:	6822      	ldr	r2, [r4, #0]
 8007082:	1b52      	subs	r2, r2, r5
 8007084:	d420      	bmi.n	80070c8 <_malloc_r+0xd0>
 8007086:	2a0b      	cmp	r2, #11
 8007088:	d917      	bls.n	80070ba <_malloc_r+0xc2>
 800708a:	1961      	adds	r1, r4, r5
 800708c:	42a3      	cmp	r3, r4
 800708e:	6025      	str	r5, [r4, #0]
 8007090:	bf18      	it	ne
 8007092:	6059      	strne	r1, [r3, #4]
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	bf08      	it	eq
 8007098:	f8c8 1000 	streq.w	r1, [r8]
 800709c:	5162      	str	r2, [r4, r5]
 800709e:	604b      	str	r3, [r1, #4]
 80070a0:	4630      	mov	r0, r6
 80070a2:	f000 f82f 	bl	8007104 <__malloc_unlock>
 80070a6:	f104 000b 	add.w	r0, r4, #11
 80070aa:	1d23      	adds	r3, r4, #4
 80070ac:	f020 0007 	bic.w	r0, r0, #7
 80070b0:	1ac2      	subs	r2, r0, r3
 80070b2:	bf1c      	itt	ne
 80070b4:	1a1b      	subne	r3, r3, r0
 80070b6:	50a3      	strne	r3, [r4, r2]
 80070b8:	e7af      	b.n	800701a <_malloc_r+0x22>
 80070ba:	6862      	ldr	r2, [r4, #4]
 80070bc:	42a3      	cmp	r3, r4
 80070be:	bf0c      	ite	eq
 80070c0:	f8c8 2000 	streq.w	r2, [r8]
 80070c4:	605a      	strne	r2, [r3, #4]
 80070c6:	e7eb      	b.n	80070a0 <_malloc_r+0xa8>
 80070c8:	4623      	mov	r3, r4
 80070ca:	6864      	ldr	r4, [r4, #4]
 80070cc:	e7ae      	b.n	800702c <_malloc_r+0x34>
 80070ce:	463c      	mov	r4, r7
 80070d0:	687f      	ldr	r7, [r7, #4]
 80070d2:	e7b6      	b.n	8007042 <_malloc_r+0x4a>
 80070d4:	461a      	mov	r2, r3
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d1fb      	bne.n	80070d4 <_malloc_r+0xdc>
 80070dc:	2300      	movs	r3, #0
 80070de:	6053      	str	r3, [r2, #4]
 80070e0:	e7de      	b.n	80070a0 <_malloc_r+0xa8>
 80070e2:	230c      	movs	r3, #12
 80070e4:	6033      	str	r3, [r6, #0]
 80070e6:	4630      	mov	r0, r6
 80070e8:	f000 f80c 	bl	8007104 <__malloc_unlock>
 80070ec:	e794      	b.n	8007018 <_malloc_r+0x20>
 80070ee:	6005      	str	r5, [r0, #0]
 80070f0:	e7d6      	b.n	80070a0 <_malloc_r+0xa8>
 80070f2:	bf00      	nop
 80070f4:	20001680 	.word	0x20001680

080070f8 <__malloc_lock>:
 80070f8:	4801      	ldr	r0, [pc, #4]	@ (8007100 <__malloc_lock+0x8>)
 80070fa:	f7ff bf00 	b.w	8006efe <__retarget_lock_acquire_recursive>
 80070fe:	bf00      	nop
 8007100:	20001678 	.word	0x20001678

08007104 <__malloc_unlock>:
 8007104:	4801      	ldr	r0, [pc, #4]	@ (800710c <__malloc_unlock+0x8>)
 8007106:	f7ff befb 	b.w	8006f00 <__retarget_lock_release_recursive>
 800710a:	bf00      	nop
 800710c:	20001678 	.word	0x20001678

08007110 <__ssputs_r>:
 8007110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007114:	688e      	ldr	r6, [r1, #8]
 8007116:	461f      	mov	r7, r3
 8007118:	42be      	cmp	r6, r7
 800711a:	680b      	ldr	r3, [r1, #0]
 800711c:	4682      	mov	sl, r0
 800711e:	460c      	mov	r4, r1
 8007120:	4690      	mov	r8, r2
 8007122:	d82d      	bhi.n	8007180 <__ssputs_r+0x70>
 8007124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800712c:	d026      	beq.n	800717c <__ssputs_r+0x6c>
 800712e:	6965      	ldr	r5, [r4, #20]
 8007130:	6909      	ldr	r1, [r1, #16]
 8007132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007136:	eba3 0901 	sub.w	r9, r3, r1
 800713a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800713e:	1c7b      	adds	r3, r7, #1
 8007140:	444b      	add	r3, r9
 8007142:	106d      	asrs	r5, r5, #1
 8007144:	429d      	cmp	r5, r3
 8007146:	bf38      	it	cc
 8007148:	461d      	movcc	r5, r3
 800714a:	0553      	lsls	r3, r2, #21
 800714c:	d527      	bpl.n	800719e <__ssputs_r+0x8e>
 800714e:	4629      	mov	r1, r5
 8007150:	f7ff ff52 	bl	8006ff8 <_malloc_r>
 8007154:	4606      	mov	r6, r0
 8007156:	b360      	cbz	r0, 80071b2 <__ssputs_r+0xa2>
 8007158:	6921      	ldr	r1, [r4, #16]
 800715a:	464a      	mov	r2, r9
 800715c:	f7ff fed1 	bl	8006f02 <memcpy>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	6126      	str	r6, [r4, #16]
 800716e:	6165      	str	r5, [r4, #20]
 8007170:	444e      	add	r6, r9
 8007172:	eba5 0509 	sub.w	r5, r5, r9
 8007176:	6026      	str	r6, [r4, #0]
 8007178:	60a5      	str	r5, [r4, #8]
 800717a:	463e      	mov	r6, r7
 800717c:	42be      	cmp	r6, r7
 800717e:	d900      	bls.n	8007182 <__ssputs_r+0x72>
 8007180:	463e      	mov	r6, r7
 8007182:	6820      	ldr	r0, [r4, #0]
 8007184:	4632      	mov	r2, r6
 8007186:	4641      	mov	r1, r8
 8007188:	f000 fbb6 	bl	80078f8 <memmove>
 800718c:	68a3      	ldr	r3, [r4, #8]
 800718e:	1b9b      	subs	r3, r3, r6
 8007190:	60a3      	str	r3, [r4, #8]
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	4433      	add	r3, r6
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	2000      	movs	r0, #0
 800719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719e:	462a      	mov	r2, r5
 80071a0:	f000 fbf6 	bl	8007990 <_realloc_r>
 80071a4:	4606      	mov	r6, r0
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d1e0      	bne.n	800716c <__ssputs_r+0x5c>
 80071aa:	6921      	ldr	r1, [r4, #16]
 80071ac:	4650      	mov	r0, sl
 80071ae:	f7ff feb7 	bl	8006f20 <_free_r>
 80071b2:	230c      	movs	r3, #12
 80071b4:	f8ca 3000 	str.w	r3, [sl]
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	e7e9      	b.n	800719a <__ssputs_r+0x8a>
	...

080071c8 <_svfiprintf_r>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	4698      	mov	r8, r3
 80071ce:	898b      	ldrh	r3, [r1, #12]
 80071d0:	061b      	lsls	r3, r3, #24
 80071d2:	b09d      	sub	sp, #116	@ 0x74
 80071d4:	4607      	mov	r7, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	d510      	bpl.n	80071fe <_svfiprintf_r+0x36>
 80071dc:	690b      	ldr	r3, [r1, #16]
 80071de:	b973      	cbnz	r3, 80071fe <_svfiprintf_r+0x36>
 80071e0:	2140      	movs	r1, #64	@ 0x40
 80071e2:	f7ff ff09 	bl	8006ff8 <_malloc_r>
 80071e6:	6028      	str	r0, [r5, #0]
 80071e8:	6128      	str	r0, [r5, #16]
 80071ea:	b930      	cbnz	r0, 80071fa <_svfiprintf_r+0x32>
 80071ec:	230c      	movs	r3, #12
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	b01d      	add	sp, #116	@ 0x74
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fa:	2340      	movs	r3, #64	@ 0x40
 80071fc:	616b      	str	r3, [r5, #20]
 80071fe:	2300      	movs	r3, #0
 8007200:	9309      	str	r3, [sp, #36]	@ 0x24
 8007202:	2320      	movs	r3, #32
 8007204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007208:	f8cd 800c 	str.w	r8, [sp, #12]
 800720c:	2330      	movs	r3, #48	@ 0x30
 800720e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073ac <_svfiprintf_r+0x1e4>
 8007212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007216:	f04f 0901 	mov.w	r9, #1
 800721a:	4623      	mov	r3, r4
 800721c:	469a      	mov	sl, r3
 800721e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007222:	b10a      	cbz	r2, 8007228 <_svfiprintf_r+0x60>
 8007224:	2a25      	cmp	r2, #37	@ 0x25
 8007226:	d1f9      	bne.n	800721c <_svfiprintf_r+0x54>
 8007228:	ebba 0b04 	subs.w	fp, sl, r4
 800722c:	d00b      	beq.n	8007246 <_svfiprintf_r+0x7e>
 800722e:	465b      	mov	r3, fp
 8007230:	4622      	mov	r2, r4
 8007232:	4629      	mov	r1, r5
 8007234:	4638      	mov	r0, r7
 8007236:	f7ff ff6b 	bl	8007110 <__ssputs_r>
 800723a:	3001      	adds	r0, #1
 800723c:	f000 80a7 	beq.w	800738e <_svfiprintf_r+0x1c6>
 8007240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007242:	445a      	add	r2, fp
 8007244:	9209      	str	r2, [sp, #36]	@ 0x24
 8007246:	f89a 3000 	ldrb.w	r3, [sl]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 809f 	beq.w	800738e <_svfiprintf_r+0x1c6>
 8007250:	2300      	movs	r3, #0
 8007252:	f04f 32ff 	mov.w	r2, #4294967295
 8007256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800725a:	f10a 0a01 	add.w	sl, sl, #1
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	9307      	str	r3, [sp, #28]
 8007262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007266:	931a      	str	r3, [sp, #104]	@ 0x68
 8007268:	4654      	mov	r4, sl
 800726a:	2205      	movs	r2, #5
 800726c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007270:	484e      	ldr	r0, [pc, #312]	@ (80073ac <_svfiprintf_r+0x1e4>)
 8007272:	f7f8 ffad 	bl	80001d0 <memchr>
 8007276:	9a04      	ldr	r2, [sp, #16]
 8007278:	b9d8      	cbnz	r0, 80072b2 <_svfiprintf_r+0xea>
 800727a:	06d0      	lsls	r0, r2, #27
 800727c:	bf44      	itt	mi
 800727e:	2320      	movmi	r3, #32
 8007280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007284:	0711      	lsls	r1, r2, #28
 8007286:	bf44      	itt	mi
 8007288:	232b      	movmi	r3, #43	@ 0x2b
 800728a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800728e:	f89a 3000 	ldrb.w	r3, [sl]
 8007292:	2b2a      	cmp	r3, #42	@ 0x2a
 8007294:	d015      	beq.n	80072c2 <_svfiprintf_r+0xfa>
 8007296:	9a07      	ldr	r2, [sp, #28]
 8007298:	4654      	mov	r4, sl
 800729a:	2000      	movs	r0, #0
 800729c:	f04f 0c0a 	mov.w	ip, #10
 80072a0:	4621      	mov	r1, r4
 80072a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a6:	3b30      	subs	r3, #48	@ 0x30
 80072a8:	2b09      	cmp	r3, #9
 80072aa:	d94b      	bls.n	8007344 <_svfiprintf_r+0x17c>
 80072ac:	b1b0      	cbz	r0, 80072dc <_svfiprintf_r+0x114>
 80072ae:	9207      	str	r2, [sp, #28]
 80072b0:	e014      	b.n	80072dc <_svfiprintf_r+0x114>
 80072b2:	eba0 0308 	sub.w	r3, r0, r8
 80072b6:	fa09 f303 	lsl.w	r3, r9, r3
 80072ba:	4313      	orrs	r3, r2
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	46a2      	mov	sl, r4
 80072c0:	e7d2      	b.n	8007268 <_svfiprintf_r+0xa0>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	1d19      	adds	r1, r3, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	9103      	str	r1, [sp, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bfbb      	ittet	lt
 80072ce:	425b      	neglt	r3, r3
 80072d0:	f042 0202 	orrlt.w	r2, r2, #2
 80072d4:	9307      	strge	r3, [sp, #28]
 80072d6:	9307      	strlt	r3, [sp, #28]
 80072d8:	bfb8      	it	lt
 80072da:	9204      	strlt	r2, [sp, #16]
 80072dc:	7823      	ldrb	r3, [r4, #0]
 80072de:	2b2e      	cmp	r3, #46	@ 0x2e
 80072e0:	d10a      	bne.n	80072f8 <_svfiprintf_r+0x130>
 80072e2:	7863      	ldrb	r3, [r4, #1]
 80072e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e6:	d132      	bne.n	800734e <_svfiprintf_r+0x186>
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	1d1a      	adds	r2, r3, #4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	9203      	str	r2, [sp, #12]
 80072f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072f4:	3402      	adds	r4, #2
 80072f6:	9305      	str	r3, [sp, #20]
 80072f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073bc <_svfiprintf_r+0x1f4>
 80072fc:	7821      	ldrb	r1, [r4, #0]
 80072fe:	2203      	movs	r2, #3
 8007300:	4650      	mov	r0, sl
 8007302:	f7f8 ff65 	bl	80001d0 <memchr>
 8007306:	b138      	cbz	r0, 8007318 <_svfiprintf_r+0x150>
 8007308:	9b04      	ldr	r3, [sp, #16]
 800730a:	eba0 000a 	sub.w	r0, r0, sl
 800730e:	2240      	movs	r2, #64	@ 0x40
 8007310:	4082      	lsls	r2, r0
 8007312:	4313      	orrs	r3, r2
 8007314:	3401      	adds	r4, #1
 8007316:	9304      	str	r3, [sp, #16]
 8007318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731c:	4824      	ldr	r0, [pc, #144]	@ (80073b0 <_svfiprintf_r+0x1e8>)
 800731e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007322:	2206      	movs	r2, #6
 8007324:	f7f8 ff54 	bl	80001d0 <memchr>
 8007328:	2800      	cmp	r0, #0
 800732a:	d036      	beq.n	800739a <_svfiprintf_r+0x1d2>
 800732c:	4b21      	ldr	r3, [pc, #132]	@ (80073b4 <_svfiprintf_r+0x1ec>)
 800732e:	bb1b      	cbnz	r3, 8007378 <_svfiprintf_r+0x1b0>
 8007330:	9b03      	ldr	r3, [sp, #12]
 8007332:	3307      	adds	r3, #7
 8007334:	f023 0307 	bic.w	r3, r3, #7
 8007338:	3308      	adds	r3, #8
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733e:	4433      	add	r3, r6
 8007340:	9309      	str	r3, [sp, #36]	@ 0x24
 8007342:	e76a      	b.n	800721a <_svfiprintf_r+0x52>
 8007344:	fb0c 3202 	mla	r2, ip, r2, r3
 8007348:	460c      	mov	r4, r1
 800734a:	2001      	movs	r0, #1
 800734c:	e7a8      	b.n	80072a0 <_svfiprintf_r+0xd8>
 800734e:	2300      	movs	r3, #0
 8007350:	3401      	adds	r4, #1
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	4619      	mov	r1, r3
 8007356:	f04f 0c0a 	mov.w	ip, #10
 800735a:	4620      	mov	r0, r4
 800735c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007360:	3a30      	subs	r2, #48	@ 0x30
 8007362:	2a09      	cmp	r2, #9
 8007364:	d903      	bls.n	800736e <_svfiprintf_r+0x1a6>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0c6      	beq.n	80072f8 <_svfiprintf_r+0x130>
 800736a:	9105      	str	r1, [sp, #20]
 800736c:	e7c4      	b.n	80072f8 <_svfiprintf_r+0x130>
 800736e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007372:	4604      	mov	r4, r0
 8007374:	2301      	movs	r3, #1
 8007376:	e7f0      	b.n	800735a <_svfiprintf_r+0x192>
 8007378:	ab03      	add	r3, sp, #12
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	462a      	mov	r2, r5
 800737e:	4b0e      	ldr	r3, [pc, #56]	@ (80073b8 <_svfiprintf_r+0x1f0>)
 8007380:	a904      	add	r1, sp, #16
 8007382:	4638      	mov	r0, r7
 8007384:	f3af 8000 	nop.w
 8007388:	1c42      	adds	r2, r0, #1
 800738a:	4606      	mov	r6, r0
 800738c:	d1d6      	bne.n	800733c <_svfiprintf_r+0x174>
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	065b      	lsls	r3, r3, #25
 8007392:	f53f af2d 	bmi.w	80071f0 <_svfiprintf_r+0x28>
 8007396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007398:	e72c      	b.n	80071f4 <_svfiprintf_r+0x2c>
 800739a:	ab03      	add	r3, sp, #12
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	462a      	mov	r2, r5
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <_svfiprintf_r+0x1f0>)
 80073a2:	a904      	add	r1, sp, #16
 80073a4:	4638      	mov	r0, r7
 80073a6:	f000 f879 	bl	800749c <_printf_i>
 80073aa:	e7ed      	b.n	8007388 <_svfiprintf_r+0x1c0>
 80073ac:	08007cd1 	.word	0x08007cd1
 80073b0:	08007cdb 	.word	0x08007cdb
 80073b4:	00000000 	.word	0x00000000
 80073b8:	08007111 	.word	0x08007111
 80073bc:	08007cd7 	.word	0x08007cd7

080073c0 <_printf_common>:
 80073c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c4:	4616      	mov	r6, r2
 80073c6:	4698      	mov	r8, r3
 80073c8:	688a      	ldr	r2, [r1, #8]
 80073ca:	690b      	ldr	r3, [r1, #16]
 80073cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073d0:	4293      	cmp	r3, r2
 80073d2:	bfb8      	it	lt
 80073d4:	4613      	movlt	r3, r2
 80073d6:	6033      	str	r3, [r6, #0]
 80073d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073dc:	4607      	mov	r7, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	b10a      	cbz	r2, 80073e6 <_printf_common+0x26>
 80073e2:	3301      	adds	r3, #1
 80073e4:	6033      	str	r3, [r6, #0]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	0699      	lsls	r1, r3, #26
 80073ea:	bf42      	ittt	mi
 80073ec:	6833      	ldrmi	r3, [r6, #0]
 80073ee:	3302      	addmi	r3, #2
 80073f0:	6033      	strmi	r3, [r6, #0]
 80073f2:	6825      	ldr	r5, [r4, #0]
 80073f4:	f015 0506 	ands.w	r5, r5, #6
 80073f8:	d106      	bne.n	8007408 <_printf_common+0x48>
 80073fa:	f104 0a19 	add.w	sl, r4, #25
 80073fe:	68e3      	ldr	r3, [r4, #12]
 8007400:	6832      	ldr	r2, [r6, #0]
 8007402:	1a9b      	subs	r3, r3, r2
 8007404:	42ab      	cmp	r3, r5
 8007406:	dc26      	bgt.n	8007456 <_printf_common+0x96>
 8007408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	3b00      	subs	r3, #0
 8007410:	bf18      	it	ne
 8007412:	2301      	movne	r3, #1
 8007414:	0692      	lsls	r2, r2, #26
 8007416:	d42b      	bmi.n	8007470 <_printf_common+0xb0>
 8007418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800741c:	4641      	mov	r1, r8
 800741e:	4638      	mov	r0, r7
 8007420:	47c8      	blx	r9
 8007422:	3001      	adds	r0, #1
 8007424:	d01e      	beq.n	8007464 <_printf_common+0xa4>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	6922      	ldr	r2, [r4, #16]
 800742a:	f003 0306 	and.w	r3, r3, #6
 800742e:	2b04      	cmp	r3, #4
 8007430:	bf02      	ittt	eq
 8007432:	68e5      	ldreq	r5, [r4, #12]
 8007434:	6833      	ldreq	r3, [r6, #0]
 8007436:	1aed      	subeq	r5, r5, r3
 8007438:	68a3      	ldr	r3, [r4, #8]
 800743a:	bf0c      	ite	eq
 800743c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007440:	2500      	movne	r5, #0
 8007442:	4293      	cmp	r3, r2
 8007444:	bfc4      	itt	gt
 8007446:	1a9b      	subgt	r3, r3, r2
 8007448:	18ed      	addgt	r5, r5, r3
 800744a:	2600      	movs	r6, #0
 800744c:	341a      	adds	r4, #26
 800744e:	42b5      	cmp	r5, r6
 8007450:	d11a      	bne.n	8007488 <_printf_common+0xc8>
 8007452:	2000      	movs	r0, #0
 8007454:	e008      	b.n	8007468 <_printf_common+0xa8>
 8007456:	2301      	movs	r3, #1
 8007458:	4652      	mov	r2, sl
 800745a:	4641      	mov	r1, r8
 800745c:	4638      	mov	r0, r7
 800745e:	47c8      	blx	r9
 8007460:	3001      	adds	r0, #1
 8007462:	d103      	bne.n	800746c <_printf_common+0xac>
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800746c:	3501      	adds	r5, #1
 800746e:	e7c6      	b.n	80073fe <_printf_common+0x3e>
 8007470:	18e1      	adds	r1, r4, r3
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	2030      	movs	r0, #48	@ 0x30
 8007476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800747a:	4422      	add	r2, r4
 800747c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007484:	3302      	adds	r3, #2
 8007486:	e7c7      	b.n	8007418 <_printf_common+0x58>
 8007488:	2301      	movs	r3, #1
 800748a:	4622      	mov	r2, r4
 800748c:	4641      	mov	r1, r8
 800748e:	4638      	mov	r0, r7
 8007490:	47c8      	blx	r9
 8007492:	3001      	adds	r0, #1
 8007494:	d0e6      	beq.n	8007464 <_printf_common+0xa4>
 8007496:	3601      	adds	r6, #1
 8007498:	e7d9      	b.n	800744e <_printf_common+0x8e>
	...

0800749c <_printf_i>:
 800749c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	7e0f      	ldrb	r7, [r1, #24]
 80074a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074a4:	2f78      	cmp	r7, #120	@ 0x78
 80074a6:	4691      	mov	r9, r2
 80074a8:	4680      	mov	r8, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	469a      	mov	sl, r3
 80074ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074b2:	d807      	bhi.n	80074c4 <_printf_i+0x28>
 80074b4:	2f62      	cmp	r7, #98	@ 0x62
 80074b6:	d80a      	bhi.n	80074ce <_printf_i+0x32>
 80074b8:	2f00      	cmp	r7, #0
 80074ba:	f000 80d2 	beq.w	8007662 <_printf_i+0x1c6>
 80074be:	2f58      	cmp	r7, #88	@ 0x58
 80074c0:	f000 80b9 	beq.w	8007636 <_printf_i+0x19a>
 80074c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074cc:	e03a      	b.n	8007544 <_printf_i+0xa8>
 80074ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074d2:	2b15      	cmp	r3, #21
 80074d4:	d8f6      	bhi.n	80074c4 <_printf_i+0x28>
 80074d6:	a101      	add	r1, pc, #4	@ (adr r1, 80074dc <_printf_i+0x40>)
 80074d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074dc:	08007535 	.word	0x08007535
 80074e0:	08007549 	.word	0x08007549
 80074e4:	080074c5 	.word	0x080074c5
 80074e8:	080074c5 	.word	0x080074c5
 80074ec:	080074c5 	.word	0x080074c5
 80074f0:	080074c5 	.word	0x080074c5
 80074f4:	08007549 	.word	0x08007549
 80074f8:	080074c5 	.word	0x080074c5
 80074fc:	080074c5 	.word	0x080074c5
 8007500:	080074c5 	.word	0x080074c5
 8007504:	080074c5 	.word	0x080074c5
 8007508:	08007649 	.word	0x08007649
 800750c:	08007573 	.word	0x08007573
 8007510:	08007603 	.word	0x08007603
 8007514:	080074c5 	.word	0x080074c5
 8007518:	080074c5 	.word	0x080074c5
 800751c:	0800766b 	.word	0x0800766b
 8007520:	080074c5 	.word	0x080074c5
 8007524:	08007573 	.word	0x08007573
 8007528:	080074c5 	.word	0x080074c5
 800752c:	080074c5 	.word	0x080074c5
 8007530:	0800760b 	.word	0x0800760b
 8007534:	6833      	ldr	r3, [r6, #0]
 8007536:	1d1a      	adds	r2, r3, #4
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6032      	str	r2, [r6, #0]
 800753c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007544:	2301      	movs	r3, #1
 8007546:	e09d      	b.n	8007684 <_printf_i+0x1e8>
 8007548:	6833      	ldr	r3, [r6, #0]
 800754a:	6820      	ldr	r0, [r4, #0]
 800754c:	1d19      	adds	r1, r3, #4
 800754e:	6031      	str	r1, [r6, #0]
 8007550:	0606      	lsls	r6, r0, #24
 8007552:	d501      	bpl.n	8007558 <_printf_i+0xbc>
 8007554:	681d      	ldr	r5, [r3, #0]
 8007556:	e003      	b.n	8007560 <_printf_i+0xc4>
 8007558:	0645      	lsls	r5, r0, #25
 800755a:	d5fb      	bpl.n	8007554 <_printf_i+0xb8>
 800755c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007560:	2d00      	cmp	r5, #0
 8007562:	da03      	bge.n	800756c <_printf_i+0xd0>
 8007564:	232d      	movs	r3, #45	@ 0x2d
 8007566:	426d      	negs	r5, r5
 8007568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800756c:	4859      	ldr	r0, [pc, #356]	@ (80076d4 <_printf_i+0x238>)
 800756e:	230a      	movs	r3, #10
 8007570:	e011      	b.n	8007596 <_printf_i+0xfa>
 8007572:	6821      	ldr	r1, [r4, #0]
 8007574:	6833      	ldr	r3, [r6, #0]
 8007576:	0608      	lsls	r0, r1, #24
 8007578:	f853 5b04 	ldr.w	r5, [r3], #4
 800757c:	d402      	bmi.n	8007584 <_printf_i+0xe8>
 800757e:	0649      	lsls	r1, r1, #25
 8007580:	bf48      	it	mi
 8007582:	b2ad      	uxthmi	r5, r5
 8007584:	2f6f      	cmp	r7, #111	@ 0x6f
 8007586:	4853      	ldr	r0, [pc, #332]	@ (80076d4 <_printf_i+0x238>)
 8007588:	6033      	str	r3, [r6, #0]
 800758a:	bf14      	ite	ne
 800758c:	230a      	movne	r3, #10
 800758e:	2308      	moveq	r3, #8
 8007590:	2100      	movs	r1, #0
 8007592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007596:	6866      	ldr	r6, [r4, #4]
 8007598:	60a6      	str	r6, [r4, #8]
 800759a:	2e00      	cmp	r6, #0
 800759c:	bfa2      	ittt	ge
 800759e:	6821      	ldrge	r1, [r4, #0]
 80075a0:	f021 0104 	bicge.w	r1, r1, #4
 80075a4:	6021      	strge	r1, [r4, #0]
 80075a6:	b90d      	cbnz	r5, 80075ac <_printf_i+0x110>
 80075a8:	2e00      	cmp	r6, #0
 80075aa:	d04b      	beq.n	8007644 <_printf_i+0x1a8>
 80075ac:	4616      	mov	r6, r2
 80075ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80075b2:	fb03 5711 	mls	r7, r3, r1, r5
 80075b6:	5dc7      	ldrb	r7, [r0, r7]
 80075b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075bc:	462f      	mov	r7, r5
 80075be:	42bb      	cmp	r3, r7
 80075c0:	460d      	mov	r5, r1
 80075c2:	d9f4      	bls.n	80075ae <_printf_i+0x112>
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d10b      	bne.n	80075e0 <_printf_i+0x144>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	07df      	lsls	r7, r3, #31
 80075cc:	d508      	bpl.n	80075e0 <_printf_i+0x144>
 80075ce:	6923      	ldr	r3, [r4, #16]
 80075d0:	6861      	ldr	r1, [r4, #4]
 80075d2:	4299      	cmp	r1, r3
 80075d4:	bfde      	ittt	le
 80075d6:	2330      	movle	r3, #48	@ 0x30
 80075d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075e0:	1b92      	subs	r2, r2, r6
 80075e2:	6122      	str	r2, [r4, #16]
 80075e4:	f8cd a000 	str.w	sl, [sp]
 80075e8:	464b      	mov	r3, r9
 80075ea:	aa03      	add	r2, sp, #12
 80075ec:	4621      	mov	r1, r4
 80075ee:	4640      	mov	r0, r8
 80075f0:	f7ff fee6 	bl	80073c0 <_printf_common>
 80075f4:	3001      	adds	r0, #1
 80075f6:	d14a      	bne.n	800768e <_printf_i+0x1f2>
 80075f8:	f04f 30ff 	mov.w	r0, #4294967295
 80075fc:	b004      	add	sp, #16
 80075fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	f043 0320 	orr.w	r3, r3, #32
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	4833      	ldr	r0, [pc, #204]	@ (80076d8 <_printf_i+0x23c>)
 800760c:	2778      	movs	r7, #120	@ 0x78
 800760e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	6831      	ldr	r1, [r6, #0]
 8007616:	061f      	lsls	r7, r3, #24
 8007618:	f851 5b04 	ldr.w	r5, [r1], #4
 800761c:	d402      	bmi.n	8007624 <_printf_i+0x188>
 800761e:	065f      	lsls	r7, r3, #25
 8007620:	bf48      	it	mi
 8007622:	b2ad      	uxthmi	r5, r5
 8007624:	6031      	str	r1, [r6, #0]
 8007626:	07d9      	lsls	r1, r3, #31
 8007628:	bf44      	itt	mi
 800762a:	f043 0320 	orrmi.w	r3, r3, #32
 800762e:	6023      	strmi	r3, [r4, #0]
 8007630:	b11d      	cbz	r5, 800763a <_printf_i+0x19e>
 8007632:	2310      	movs	r3, #16
 8007634:	e7ac      	b.n	8007590 <_printf_i+0xf4>
 8007636:	4827      	ldr	r0, [pc, #156]	@ (80076d4 <_printf_i+0x238>)
 8007638:	e7e9      	b.n	800760e <_printf_i+0x172>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f023 0320 	bic.w	r3, r3, #32
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	e7f6      	b.n	8007632 <_printf_i+0x196>
 8007644:	4616      	mov	r6, r2
 8007646:	e7bd      	b.n	80075c4 <_printf_i+0x128>
 8007648:	6833      	ldr	r3, [r6, #0]
 800764a:	6825      	ldr	r5, [r4, #0]
 800764c:	6961      	ldr	r1, [r4, #20]
 800764e:	1d18      	adds	r0, r3, #4
 8007650:	6030      	str	r0, [r6, #0]
 8007652:	062e      	lsls	r6, r5, #24
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	d501      	bpl.n	800765c <_printf_i+0x1c0>
 8007658:	6019      	str	r1, [r3, #0]
 800765a:	e002      	b.n	8007662 <_printf_i+0x1c6>
 800765c:	0668      	lsls	r0, r5, #25
 800765e:	d5fb      	bpl.n	8007658 <_printf_i+0x1bc>
 8007660:	8019      	strh	r1, [r3, #0]
 8007662:	2300      	movs	r3, #0
 8007664:	6123      	str	r3, [r4, #16]
 8007666:	4616      	mov	r6, r2
 8007668:	e7bc      	b.n	80075e4 <_printf_i+0x148>
 800766a:	6833      	ldr	r3, [r6, #0]
 800766c:	1d1a      	adds	r2, r3, #4
 800766e:	6032      	str	r2, [r6, #0]
 8007670:	681e      	ldr	r6, [r3, #0]
 8007672:	6862      	ldr	r2, [r4, #4]
 8007674:	2100      	movs	r1, #0
 8007676:	4630      	mov	r0, r6
 8007678:	f7f8 fdaa 	bl	80001d0 <memchr>
 800767c:	b108      	cbz	r0, 8007682 <_printf_i+0x1e6>
 800767e:	1b80      	subs	r0, r0, r6
 8007680:	6060      	str	r0, [r4, #4]
 8007682:	6863      	ldr	r3, [r4, #4]
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	2300      	movs	r3, #0
 8007688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800768c:	e7aa      	b.n	80075e4 <_printf_i+0x148>
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	4632      	mov	r2, r6
 8007692:	4649      	mov	r1, r9
 8007694:	4640      	mov	r0, r8
 8007696:	47d0      	blx	sl
 8007698:	3001      	adds	r0, #1
 800769a:	d0ad      	beq.n	80075f8 <_printf_i+0x15c>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	079b      	lsls	r3, r3, #30
 80076a0:	d413      	bmi.n	80076ca <_printf_i+0x22e>
 80076a2:	68e0      	ldr	r0, [r4, #12]
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	4298      	cmp	r0, r3
 80076a8:	bfb8      	it	lt
 80076aa:	4618      	movlt	r0, r3
 80076ac:	e7a6      	b.n	80075fc <_printf_i+0x160>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4632      	mov	r2, r6
 80076b2:	4649      	mov	r1, r9
 80076b4:	4640      	mov	r0, r8
 80076b6:	47d0      	blx	sl
 80076b8:	3001      	adds	r0, #1
 80076ba:	d09d      	beq.n	80075f8 <_printf_i+0x15c>
 80076bc:	3501      	adds	r5, #1
 80076be:	68e3      	ldr	r3, [r4, #12]
 80076c0:	9903      	ldr	r1, [sp, #12]
 80076c2:	1a5b      	subs	r3, r3, r1
 80076c4:	42ab      	cmp	r3, r5
 80076c6:	dcf2      	bgt.n	80076ae <_printf_i+0x212>
 80076c8:	e7eb      	b.n	80076a2 <_printf_i+0x206>
 80076ca:	2500      	movs	r5, #0
 80076cc:	f104 0619 	add.w	r6, r4, #25
 80076d0:	e7f5      	b.n	80076be <_printf_i+0x222>
 80076d2:	bf00      	nop
 80076d4:	08007ce2 	.word	0x08007ce2
 80076d8:	08007cf3 	.word	0x08007cf3

080076dc <__sflush_r>:
 80076dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e4:	0716      	lsls	r6, r2, #28
 80076e6:	4605      	mov	r5, r0
 80076e8:	460c      	mov	r4, r1
 80076ea:	d454      	bmi.n	8007796 <__sflush_r+0xba>
 80076ec:	684b      	ldr	r3, [r1, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	dc02      	bgt.n	80076f8 <__sflush_r+0x1c>
 80076f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd48      	ble.n	800778a <__sflush_r+0xae>
 80076f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	d045      	beq.n	800778a <__sflush_r+0xae>
 80076fe:	2300      	movs	r3, #0
 8007700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007704:	682f      	ldr	r7, [r5, #0]
 8007706:	6a21      	ldr	r1, [r4, #32]
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	d030      	beq.n	800776e <__sflush_r+0x92>
 800770c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	0759      	lsls	r1, r3, #29
 8007712:	d505      	bpl.n	8007720 <__sflush_r+0x44>
 8007714:	6863      	ldr	r3, [r4, #4]
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800771a:	b10b      	cbz	r3, 8007720 <__sflush_r+0x44>
 800771c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	2300      	movs	r3, #0
 8007722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007724:	6a21      	ldr	r1, [r4, #32]
 8007726:	4628      	mov	r0, r5
 8007728:	47b0      	blx	r6
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	d106      	bne.n	800773e <__sflush_r+0x62>
 8007730:	6829      	ldr	r1, [r5, #0]
 8007732:	291d      	cmp	r1, #29
 8007734:	d82b      	bhi.n	800778e <__sflush_r+0xb2>
 8007736:	4a2a      	ldr	r2, [pc, #168]	@ (80077e0 <__sflush_r+0x104>)
 8007738:	410a      	asrs	r2, r1
 800773a:	07d6      	lsls	r6, r2, #31
 800773c:	d427      	bmi.n	800778e <__sflush_r+0xb2>
 800773e:	2200      	movs	r2, #0
 8007740:	6062      	str	r2, [r4, #4]
 8007742:	04d9      	lsls	r1, r3, #19
 8007744:	6922      	ldr	r2, [r4, #16]
 8007746:	6022      	str	r2, [r4, #0]
 8007748:	d504      	bpl.n	8007754 <__sflush_r+0x78>
 800774a:	1c42      	adds	r2, r0, #1
 800774c:	d101      	bne.n	8007752 <__sflush_r+0x76>
 800774e:	682b      	ldr	r3, [r5, #0]
 8007750:	b903      	cbnz	r3, 8007754 <__sflush_r+0x78>
 8007752:	6560      	str	r0, [r4, #84]	@ 0x54
 8007754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007756:	602f      	str	r7, [r5, #0]
 8007758:	b1b9      	cbz	r1, 800778a <__sflush_r+0xae>
 800775a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800775e:	4299      	cmp	r1, r3
 8007760:	d002      	beq.n	8007768 <__sflush_r+0x8c>
 8007762:	4628      	mov	r0, r5
 8007764:	f7ff fbdc 	bl	8006f20 <_free_r>
 8007768:	2300      	movs	r3, #0
 800776a:	6363      	str	r3, [r4, #52]	@ 0x34
 800776c:	e00d      	b.n	800778a <__sflush_r+0xae>
 800776e:	2301      	movs	r3, #1
 8007770:	4628      	mov	r0, r5
 8007772:	47b0      	blx	r6
 8007774:	4602      	mov	r2, r0
 8007776:	1c50      	adds	r0, r2, #1
 8007778:	d1c9      	bne.n	800770e <__sflush_r+0x32>
 800777a:	682b      	ldr	r3, [r5, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0c6      	beq.n	800770e <__sflush_r+0x32>
 8007780:	2b1d      	cmp	r3, #29
 8007782:	d001      	beq.n	8007788 <__sflush_r+0xac>
 8007784:	2b16      	cmp	r3, #22
 8007786:	d11e      	bne.n	80077c6 <__sflush_r+0xea>
 8007788:	602f      	str	r7, [r5, #0]
 800778a:	2000      	movs	r0, #0
 800778c:	e022      	b.n	80077d4 <__sflush_r+0xf8>
 800778e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007792:	b21b      	sxth	r3, r3
 8007794:	e01b      	b.n	80077ce <__sflush_r+0xf2>
 8007796:	690f      	ldr	r7, [r1, #16]
 8007798:	2f00      	cmp	r7, #0
 800779a:	d0f6      	beq.n	800778a <__sflush_r+0xae>
 800779c:	0793      	lsls	r3, r2, #30
 800779e:	680e      	ldr	r6, [r1, #0]
 80077a0:	bf08      	it	eq
 80077a2:	694b      	ldreq	r3, [r1, #20]
 80077a4:	600f      	str	r7, [r1, #0]
 80077a6:	bf18      	it	ne
 80077a8:	2300      	movne	r3, #0
 80077aa:	eba6 0807 	sub.w	r8, r6, r7
 80077ae:	608b      	str	r3, [r1, #8]
 80077b0:	f1b8 0f00 	cmp.w	r8, #0
 80077b4:	dde9      	ble.n	800778a <__sflush_r+0xae>
 80077b6:	6a21      	ldr	r1, [r4, #32]
 80077b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077ba:	4643      	mov	r3, r8
 80077bc:	463a      	mov	r2, r7
 80077be:	4628      	mov	r0, r5
 80077c0:	47b0      	blx	r6
 80077c2:	2800      	cmp	r0, #0
 80077c4:	dc08      	bgt.n	80077d8 <__sflush_r+0xfc>
 80077c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ce:	81a3      	strh	r3, [r4, #12]
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d8:	4407      	add	r7, r0
 80077da:	eba8 0800 	sub.w	r8, r8, r0
 80077de:	e7e7      	b.n	80077b0 <__sflush_r+0xd4>
 80077e0:	dfbffffe 	.word	0xdfbffffe

080077e4 <_fflush_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	690b      	ldr	r3, [r1, #16]
 80077e8:	4605      	mov	r5, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	b913      	cbnz	r3, 80077f4 <_fflush_r+0x10>
 80077ee:	2500      	movs	r5, #0
 80077f0:	4628      	mov	r0, r5
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	b118      	cbz	r0, 80077fe <_fflush_r+0x1a>
 80077f6:	6a03      	ldr	r3, [r0, #32]
 80077f8:	b90b      	cbnz	r3, 80077fe <_fflush_r+0x1a>
 80077fa:	f7ff f967 	bl	8006acc <__sinit>
 80077fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0f3      	beq.n	80077ee <_fflush_r+0xa>
 8007806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007808:	07d0      	lsls	r0, r2, #31
 800780a:	d404      	bmi.n	8007816 <_fflush_r+0x32>
 800780c:	0599      	lsls	r1, r3, #22
 800780e:	d402      	bmi.n	8007816 <_fflush_r+0x32>
 8007810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007812:	f7ff fb74 	bl	8006efe <__retarget_lock_acquire_recursive>
 8007816:	4628      	mov	r0, r5
 8007818:	4621      	mov	r1, r4
 800781a:	f7ff ff5f 	bl	80076dc <__sflush_r>
 800781e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007820:	07da      	lsls	r2, r3, #31
 8007822:	4605      	mov	r5, r0
 8007824:	d4e4      	bmi.n	80077f0 <_fflush_r+0xc>
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	059b      	lsls	r3, r3, #22
 800782a:	d4e1      	bmi.n	80077f0 <_fflush_r+0xc>
 800782c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800782e:	f7ff fb67 	bl	8006f00 <__retarget_lock_release_recursive>
 8007832:	e7dd      	b.n	80077f0 <_fflush_r+0xc>

08007834 <__swhatbuf_r>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	460c      	mov	r4, r1
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	2900      	cmp	r1, #0
 800783e:	b096      	sub	sp, #88	@ 0x58
 8007840:	4615      	mov	r5, r2
 8007842:	461e      	mov	r6, r3
 8007844:	da0d      	bge.n	8007862 <__swhatbuf_r+0x2e>
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800784c:	f04f 0100 	mov.w	r1, #0
 8007850:	bf14      	ite	ne
 8007852:	2340      	movne	r3, #64	@ 0x40
 8007854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007858:	2000      	movs	r0, #0
 800785a:	6031      	str	r1, [r6, #0]
 800785c:	602b      	str	r3, [r5, #0]
 800785e:	b016      	add	sp, #88	@ 0x58
 8007860:	bd70      	pop	{r4, r5, r6, pc}
 8007862:	466a      	mov	r2, sp
 8007864:	f000 f862 	bl	800792c <_fstat_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	dbec      	blt.n	8007846 <__swhatbuf_r+0x12>
 800786c:	9901      	ldr	r1, [sp, #4]
 800786e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007876:	4259      	negs	r1, r3
 8007878:	4159      	adcs	r1, r3
 800787a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800787e:	e7eb      	b.n	8007858 <__swhatbuf_r+0x24>

08007880 <__smakebuf_r>:
 8007880:	898b      	ldrh	r3, [r1, #12]
 8007882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007884:	079d      	lsls	r5, r3, #30
 8007886:	4606      	mov	r6, r0
 8007888:	460c      	mov	r4, r1
 800788a:	d507      	bpl.n	800789c <__smakebuf_r+0x1c>
 800788c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	6123      	str	r3, [r4, #16]
 8007894:	2301      	movs	r3, #1
 8007896:	6163      	str	r3, [r4, #20]
 8007898:	b003      	add	sp, #12
 800789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789c:	ab01      	add	r3, sp, #4
 800789e:	466a      	mov	r2, sp
 80078a0:	f7ff ffc8 	bl	8007834 <__swhatbuf_r>
 80078a4:	9f00      	ldr	r7, [sp, #0]
 80078a6:	4605      	mov	r5, r0
 80078a8:	4639      	mov	r1, r7
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7ff fba4 	bl	8006ff8 <_malloc_r>
 80078b0:	b948      	cbnz	r0, 80078c6 <__smakebuf_r+0x46>
 80078b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b6:	059a      	lsls	r2, r3, #22
 80078b8:	d4ee      	bmi.n	8007898 <__smakebuf_r+0x18>
 80078ba:	f023 0303 	bic.w	r3, r3, #3
 80078be:	f043 0302 	orr.w	r3, r3, #2
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	e7e2      	b.n	800788c <__smakebuf_r+0xc>
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	6020      	str	r0, [r4, #0]
 80078ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ce:	81a3      	strh	r3, [r4, #12]
 80078d0:	9b01      	ldr	r3, [sp, #4]
 80078d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078d6:	b15b      	cbz	r3, 80078f0 <__smakebuf_r+0x70>
 80078d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078dc:	4630      	mov	r0, r6
 80078de:	f000 f837 	bl	8007950 <_isatty_r>
 80078e2:	b128      	cbz	r0, 80078f0 <__smakebuf_r+0x70>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f023 0303 	bic.w	r3, r3, #3
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	431d      	orrs	r5, r3
 80078f4:	81a5      	strh	r5, [r4, #12]
 80078f6:	e7cf      	b.n	8007898 <__smakebuf_r+0x18>

080078f8 <memmove>:
 80078f8:	4288      	cmp	r0, r1
 80078fa:	b510      	push	{r4, lr}
 80078fc:	eb01 0402 	add.w	r4, r1, r2
 8007900:	d902      	bls.n	8007908 <memmove+0x10>
 8007902:	4284      	cmp	r4, r0
 8007904:	4623      	mov	r3, r4
 8007906:	d807      	bhi.n	8007918 <memmove+0x20>
 8007908:	1e43      	subs	r3, r0, #1
 800790a:	42a1      	cmp	r1, r4
 800790c:	d008      	beq.n	8007920 <memmove+0x28>
 800790e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007916:	e7f8      	b.n	800790a <memmove+0x12>
 8007918:	4402      	add	r2, r0
 800791a:	4601      	mov	r1, r0
 800791c:	428a      	cmp	r2, r1
 800791e:	d100      	bne.n	8007922 <memmove+0x2a>
 8007920:	bd10      	pop	{r4, pc}
 8007922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800792a:	e7f7      	b.n	800791c <memmove+0x24>

0800792c <_fstat_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d07      	ldr	r5, [pc, #28]	@ (800794c <_fstat_r+0x20>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	4611      	mov	r1, r2
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	f7f9 fc28 	bl	800118e <_fstat>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	d102      	bne.n	8007948 <_fstat_r+0x1c>
 8007942:	682b      	ldr	r3, [r5, #0]
 8007944:	b103      	cbz	r3, 8007948 <_fstat_r+0x1c>
 8007946:	6023      	str	r3, [r4, #0]
 8007948:	bd38      	pop	{r3, r4, r5, pc}
 800794a:	bf00      	nop
 800794c:	20001674 	.word	0x20001674

08007950 <_isatty_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d06      	ldr	r5, [pc, #24]	@ (800796c <_isatty_r+0x1c>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	602b      	str	r3, [r5, #0]
 800795c:	f7f9 fc27 	bl	80011ae <_isatty>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_isatty_r+0x1a>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_isatty_r+0x1a>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20001674 	.word	0x20001674

08007970 <_sbrk_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d06      	ldr	r5, [pc, #24]	@ (800798c <_sbrk_r+0x1c>)
 8007974:	2300      	movs	r3, #0
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	602b      	str	r3, [r5, #0]
 800797c:	f7f9 fc30 	bl	80011e0 <_sbrk>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_sbrk_r+0x1a>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_sbrk_r+0x1a>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20001674 	.word	0x20001674

08007990 <_realloc_r>:
 8007990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007994:	4680      	mov	r8, r0
 8007996:	4615      	mov	r5, r2
 8007998:	460c      	mov	r4, r1
 800799a:	b921      	cbnz	r1, 80079a6 <_realloc_r+0x16>
 800799c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	4611      	mov	r1, r2
 80079a2:	f7ff bb29 	b.w	8006ff8 <_malloc_r>
 80079a6:	b92a      	cbnz	r2, 80079b4 <_realloc_r+0x24>
 80079a8:	f7ff faba 	bl	8006f20 <_free_r>
 80079ac:	2400      	movs	r4, #0
 80079ae:	4620      	mov	r0, r4
 80079b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b4:	f000 f81a 	bl	80079ec <_malloc_usable_size_r>
 80079b8:	4285      	cmp	r5, r0
 80079ba:	4606      	mov	r6, r0
 80079bc:	d802      	bhi.n	80079c4 <_realloc_r+0x34>
 80079be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079c2:	d8f4      	bhi.n	80079ae <_realloc_r+0x1e>
 80079c4:	4629      	mov	r1, r5
 80079c6:	4640      	mov	r0, r8
 80079c8:	f7ff fb16 	bl	8006ff8 <_malloc_r>
 80079cc:	4607      	mov	r7, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d0ec      	beq.n	80079ac <_realloc_r+0x1c>
 80079d2:	42b5      	cmp	r5, r6
 80079d4:	462a      	mov	r2, r5
 80079d6:	4621      	mov	r1, r4
 80079d8:	bf28      	it	cs
 80079da:	4632      	movcs	r2, r6
 80079dc:	f7ff fa91 	bl	8006f02 <memcpy>
 80079e0:	4621      	mov	r1, r4
 80079e2:	4640      	mov	r0, r8
 80079e4:	f7ff fa9c 	bl	8006f20 <_free_r>
 80079e8:	463c      	mov	r4, r7
 80079ea:	e7e0      	b.n	80079ae <_realloc_r+0x1e>

080079ec <_malloc_usable_size_r>:
 80079ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f0:	1f18      	subs	r0, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bfbc      	itt	lt
 80079f6:	580b      	ldrlt	r3, [r1, r0]
 80079f8:	18c0      	addlt	r0, r0, r3
 80079fa:	4770      	bx	lr

080079fc <_init>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr

08007a08 <_fini>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr
