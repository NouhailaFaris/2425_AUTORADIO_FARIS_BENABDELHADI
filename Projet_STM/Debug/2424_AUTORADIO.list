
2424_AUTORADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005794  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005924  08005924  00006924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e4  080059e4  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059ec  080059ec  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059ec  080059ec  000069ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059f0  080059f0  000069f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080059f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000115c  2000006c  08005a60  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011c8  08005a60  000071c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116f0  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003026  00000000  00000000  0001878c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc9  00000000  00000000  0001c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288f1  00000000  00000000  0001d309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f2f  00000000  00000000  00045bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2244  00000000  00000000  00058b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ad6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e0  00000000  00000000  0014adb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0014f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800590c 	.word	0x0800590c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800590c 	.word	0x0800590c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000008c 	.word	0x2000008c
 80004f0:	200000e0 	.word	0x200000e0

080004f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000524 <MX_FREERTOS_Init+0x30>)
 80004fc:	1d3c      	adds	r4, r7, #4
 80004fe:	461d      	mov	r5, r3
 8000500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f003 faf3 	bl	8003afc <osThreadCreate>
 8000516:	4603      	mov	r3, r0
 8000518:	4a03      	ldr	r2, [pc, #12]	@ (8000528 <MX_FREERTOS_Init+0x34>)
 800051a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bdb0      	pop	{r4, r5, r7, pc}
 8000524:	08005930 	.word	0x08005930
 8000528:	20000088 	.word	0x20000088

0800052c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f003 fb2d 	bl	8003b94 <osDelay>
 800053a:	e7fb      	b.n	8000534 <StartDefaultTask+0x8>

0800053c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b2b      	ldr	r3, [pc, #172]	@ (8000600 <MX_GPIO_Init+0xc4>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a2a      	ldr	r2, [pc, #168]	@ (8000600 <MX_GPIO_Init+0xc4>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <MX_GPIO_Init+0xc4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056a:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <MX_GPIO_Init+0xc4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a24      	ldr	r2, [pc, #144]	@ (8000600 <MX_GPIO_Init+0xc4>)
 8000570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a1e      	ldr	r2, [pc, #120]	@ (8000600 <MX_GPIO_Init+0xc4>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a18      	ldr	r2, [pc, #96]	@ (8000600 <MX_GPIO_Init+0xc4>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ba:	f000 fe2d 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <MX_GPIO_Init+0xc8>)
 80005d6:	f000 fc75 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005da:	2320      	movs	r3, #32
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f4:	f000 fc66 	bl	8000ec4 <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	@ 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	48000800 	.word	0x48000800

08000608 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000610:	1d39      	adds	r1, r7, #4
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	2201      	movs	r2, #1
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <__io_putchar+0x20>)
 800061a:	f002 f983 	bl	8002924 <HAL_UART_Transmit>

return ch;
 800061e:	687b      	ldr	r3, [r7, #4]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200002e4 	.word	0x200002e4

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fa3c 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f814 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ff80 	bl	800053c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f978 	bl	8000930 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  vTaskStartScheduler();
 8000640:	f003 fd3e 	bl	80040c0 <vTaskStartScheduler>
  MX_FREERTOS_Init();
 8000644:	f7ff ff56 	bl	80004f4 <MX_FREERTOS_Init>
  osKernelStart();
 8000648:	f003 fa51 	bl	8003aee <osKernelStart>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800064c:	f7ff ff52 	bl	80004f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000650:	f003 fa4d 	bl	8003aee <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("Hello, Tera Term!\r\n");
 8000654:	4801      	ldr	r0, [pc, #4]	@ (800065c <main+0x30>)
 8000656:	f004 fdc5 	bl	80051e4 <puts>
 800065a:	e7fb      	b.n	8000654 <main+0x28>
 800065c:	08005980 	.word	0x08005980

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	@ 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	@ 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fe98 	bl	80053a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000686:	f000 fded 	bl	8001264 <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000690:	f000 f837 	bl	8000702 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800069c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ae:	230a      	movs	r3, #10
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fe24 	bl	8001310 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ce:	f000 f818 	bl	8000702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2303      	movs	r3, #3
 80006d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	2104      	movs	r1, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9ec 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006f6:	f000 f804 	bl	8000702 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3758      	adds	r7, #88	@ 0x58
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000706:	b672      	cpsid	i
}
 8000708:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070a:	bf00      	nop
 800070c:	e7fd      	b.n	800070a <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <HAL_MspInit+0x4c>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800071a:	4a10      	ldr	r2, [pc, #64]	@ (800075c <HAL_MspInit+0x4c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6613      	str	r3, [r2, #96]	@ 0x60
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_MspInit+0x4c>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <HAL_MspInit+0x4c>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000732:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <HAL_MspInit+0x4c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000738:	6593      	str	r3, [r2, #88]	@ 0x58
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <HAL_MspInit+0x4c>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	210f      	movs	r1, #15
 800074a:	f06f 0001 	mvn.w	r0, #1
 800074e:	f000 fb04 	bl	8000d5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <MemManage_Handler+0x4>

08000778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <UsageFault_Handler+0x4>

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079a:	f000 f9e3 	bl	8000b64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800079e:	f003 ff89 	bl	80046b4 <xTaskGetSchedulerState>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d001      	beq.n	80007ac <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007a8:	f004 f9c6 	bl	8004b38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <USART2_IRQHandler+0x10>)
 80007b6:	f002 f93f 	bl	8002a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200002e4 	.word	0x200002e4

080007c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e00a      	b.n	80007ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007d6:	f3af 8000 	nop.w
 80007da:	4601      	mov	r1, r0
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	b2ca      	uxtb	r2, r1
 80007e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbf0      	blt.n	80007d6 <_read+0x12>
  }

  return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e009      	b.n	8000824 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60ba      	str	r2, [r7, #8]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fef5 	bl	8000608 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf1      	blt.n	8000810 <_write+0x12>
  }
  return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_close>:

int _close(int file)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800085e:	605a      	str	r2, [r3, #4]
  return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_isatty>:

int _isatty(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f004 fdb6 	bl	8005440 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20018000 	.word	0x20018000
 8000900:	00000400 	.word	0x00000400
 8000904:	200002e0 	.word	0x200002e0
 8000908:	200011c8 	.word	0x200011c8

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	@ (800098c <MX_USART2_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_USART2_UART_Init+0x58>)
 8000974:	f001 ff88 	bl	8002888 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f7ff fec0 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200002e4 	.word	0x200002e4
 800098c:	40004400 	.word	0x40004400

08000990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0ac      	sub	sp, #176	@ 0xb0
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2288      	movs	r2, #136	@ 0x88
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 fcf7 	bl	80053a4 <memset>
  if(uartHandle->Instance==USART2)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a25      	ldr	r2, [pc, #148]	@ (8000a50 <HAL_UART_MspInit+0xc0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d143      	bne.n	8000a48 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fa9f 	bl	8001f10 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d8:	f7ff fe93 	bl	8000702 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <HAL_UART_MspInit+0xc4>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a54 <HAL_UART_MspInit+0xc4>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <HAL_UART_MspInit+0xc4>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_UART_MspInit+0xc4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a16      	ldr	r2, [pc, #88]	@ (8000a54 <HAL_UART_MspInit+0xc4>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <HAL_UART_MspInit+0xc4>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a24:	2307      	movs	r3, #7
 8000a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a34:	f000 fa46 	bl	8000ec4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	2026      	movs	r0, #38	@ 0x26
 8000a3e:	f000 f98c 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a42:	2026      	movs	r0, #38	@ 0x26
 8000a44:	f000 f9a5 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	37b0      	adds	r7, #176	@ 0xb0
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40021000 	.word	0x40021000

08000a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a5c:	f7ff ff56 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	@ (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a86:	f004 fce1 	bl	800544c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8a:	f7ff fdcf 	bl	800062c <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a9c:	080059f4 	.word	0x080059f4
  ldr r2, =_sbss
 8000aa0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000aa4:	200011c8 	.word	0x200011c8

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_Init+0x3c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <HAL_Init+0x3c>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f000 f93e 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac8:	200f      	movs	r0, #15
 8000aca:	f000 f80f 	bl	8000aec <HAL_InitTick>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	e001      	b.n	8000ade <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ada:	f7ff fe19 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_InitTick+0x6c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d023      	beq.n	8000b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b00:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_InitTick+0x70>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <HAL_InitTick+0x6c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f949 	bl	8000dae <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10f      	bne.n	8000b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d809      	bhi.n	8000b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f913 	bl	8000d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_InitTick+0x74>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e007      	b.n	8000b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e001      	b.n	8000b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	2000036c 	.word	0x2000036c

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000036c 	.word	0x2000036c

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	@ (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	@ 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff3e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff31 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d008      	beq.n	8000df0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2204      	movs	r2, #4
 8000de2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e022      	b.n	8000e36 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 020e 	bic.w	r2, r2, #14
 8000dfe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0201 	bic.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e14:	f003 021c 	and.w	r2, r3, #28
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e22:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d005      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e029      	b.n	8000eba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 020e 	bic.w	r2, r2, #14
 8000e74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0201 	bic.w	r2, r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f003 021c 	and.w	r2, r3, #28
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	4798      	blx	r3
    }
  }
  return status;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed2:	e17f      	b.n	80011d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8171 	beq.w	80011ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d005      	beq.n	8000f04 <HAL_GPIO_Init+0x40>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d130      	bne.n	8000f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	091b      	lsrs	r3, r3, #4
 8000f50:	f003 0201 	and.w	r2, r3, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d118      	bne.n	8000fa4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	6939      	ldr	r1, [r7, #16]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80ac 	beq.w	80011ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b5f      	ldr	r3, [pc, #380]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	4a5e      	ldr	r2, [pc, #376]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6613      	str	r3, [r2, #96]	@ 0x60
 8001082:	4b5c      	ldr	r3, [pc, #368]	@ (80011f4 <HAL_GPIO_Init+0x330>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800108e:	4a5a      	ldr	r2, [pc, #360]	@ (80011f8 <HAL_GPIO_Init+0x334>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010b8:	d025      	beq.n	8001106 <HAL_GPIO_Init+0x242>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4f      	ldr	r2, [pc, #316]	@ (80011fc <HAL_GPIO_Init+0x338>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01f      	beq.n	8001102 <HAL_GPIO_Init+0x23e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001200 <HAL_GPIO_Init+0x33c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x23a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001204 <HAL_GPIO_Init+0x340>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x236>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001208 <HAL_GPIO_Init+0x344>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x232>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4b      	ldr	r2, [pc, #300]	@ (800120c <HAL_GPIO_Init+0x348>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x22e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001210 <HAL_GPIO_Init+0x34c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x22a>
 80010ea:	2306      	movs	r3, #6
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x244>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x244>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x244>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x244>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x244>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x244>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x244>
 8001106:	2300      	movs	r3, #0
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001118:	4937      	ldr	r1, [pc, #220]	@ (80011f8 <HAL_GPIO_Init+0x334>)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001126:	4b3b      	ldr	r3, [pc, #236]	@ (8001214 <HAL_GPIO_Init+0x350>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800114a:	4a32      	ldr	r2, [pc, #200]	@ (8001214 <HAL_GPIO_Init+0x350>)
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001150:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <HAL_GPIO_Init+0x350>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001174:	4a27      	ldr	r2, [pc, #156]	@ (8001214 <HAL_GPIO_Init+0x350>)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <HAL_GPIO_Init+0x350>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119e:	4a1d      	ldr	r2, [pc, #116]	@ (8001214 <HAL_GPIO_Init+0x350>)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <HAL_GPIO_Init+0x350>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c8:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <HAL_GPIO_Init+0x350>)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa22 f303 	lsr.w	r3, r2, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f47f ae78 	bne.w	8000ed4 <HAL_GPIO_Init+0x10>
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	371c      	adds	r7, #28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800
 8001204:	48000c00 	.word	0x48000c00
 8001208:	48001000 	.word	0x48001000
 800120c:	48001400 	.word	0x48001400
 8001210:	48001800 	.word	0x48001800
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001234:	e002      	b.n	800123c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_PWREx_GetVoltageRange+0x18>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40007000 	.word	0x40007000

08001264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001272:	d130      	bne.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001274:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800127c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001280:	d038      	beq.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800128a:	4a1e      	ldr	r2, [pc, #120]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2232      	movs	r2, #50	@ 0x32
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4a1b      	ldr	r2, [pc, #108]	@ (800130c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0c9b      	lsrs	r3, r3, #18
 80012a4:	3301      	adds	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a8:	e002      	b.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012bc:	d102      	bne.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f2      	bne.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d0:	d110      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e00f      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e2:	d007      	beq.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ec:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000
 8001308:	20000000 	.word	0x20000000
 800130c:	431bde83 	.word	0x431bde83

08001310 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e3ca      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001322:	4b97      	ldr	r3, [pc, #604]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132c:	4b94      	ldr	r3, [pc, #592]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80e4 	beq.w	800150c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_RCC_OscConfig+0x4a>
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b0c      	cmp	r3, #12
 800134e:	f040 808b 	bne.w	8001468 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b01      	cmp	r3, #1
 8001356:	f040 8087 	bne.w	8001468 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800135a:	4b89      	ldr	r3, [pc, #548]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x62>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e3a2      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1a      	ldr	r2, [r3, #32]
 8001376:	4b82      	ldr	r3, [pc, #520]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_RCC_OscConfig+0x7c>
 8001382:	4b7f      	ldr	r3, [pc, #508]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800138a:	e005      	b.n	8001398 <HAL_RCC_OscConfig+0x88>
 800138c:	4b7c      	ldr	r3, [pc, #496]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800138e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001398:	4293      	cmp	r3, r2
 800139a:	d223      	bcs.n	80013e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fd55 	bl	8001e50 <RCC_SetFlashLatencyFromMSIRange>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e383      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b0:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a72      	ldr	r2, [pc, #456]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b70      	ldr	r3, [pc, #448]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	496d      	ldr	r1, [pc, #436]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	4968      	ldr	r1, [pc, #416]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
 80013e2:	e025      	b.n	8001430 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e4:	4b66      	ldr	r3, [pc, #408]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a65      	ldr	r2, [pc, #404]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4960      	ldr	r1, [pc, #384]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001402:	4b5f      	ldr	r3, [pc, #380]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	495b      	ldr	r1, [pc, #364]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001412:	4313      	orrs	r3, r2
 8001414:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fd15 	bl	8001e50 <RCC_SetFlashLatencyFromMSIRange>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e343      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001430:	f000 fc4a 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b52      	ldr	r3, [pc, #328]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	4950      	ldr	r1, [pc, #320]	@ (8001584 <HAL_RCC_OscConfig+0x274>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	4a4e      	ldr	r2, [pc, #312]	@ (8001588 <HAL_RCC_OscConfig+0x278>)
 800144e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001450:	4b4e      	ldr	r3, [pc, #312]	@ (800158c <HAL_RCC_OscConfig+0x27c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb49 	bl	8000aec <HAL_InitTick>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d052      	beq.n	800150a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	e327      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d032      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001470:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a42      	ldr	r2, [pc, #264]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147c:	f7ff fb86 	bl	8000b8c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001484:	f7ff fb82 	bl	8000b8c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e310      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001496:	4b3a      	ldr	r3, [pc, #232]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a2:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a36      	ldr	r2, [pc, #216]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4931      	ldr	r1, [pc, #196]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	492c      	ldr	r1, [pc, #176]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
 80014d4:	e01a      	b.n	800150c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a29      	ldr	r2, [pc, #164]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb53 	bl	8000b8c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb4f 	bl	8000b8c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e2dd      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x1da>
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d074      	beq.n	8001602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b08      	cmp	r3, #8
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x21a>
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2b0c      	cmp	r3, #12
 8001522:	d10e      	bne.n	8001542 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d10b      	bne.n	8001542 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d064      	beq.n	8001600 <HAL_RCC_OscConfig+0x2f0>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d160      	bne.n	8001600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e2ba      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x24a>
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e026      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001562:	d115      	bne.n	8001590 <HAL_RCC_OscConfig+0x280>
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800156a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a02      	ldr	r2, [pc, #8]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e014      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	0800599c 	.word	0x0800599c
 8001588:	20000000 	.word	0x20000000
 800158c:	20000004 	.word	0x20000004
 8001590:	4ba0      	ldr	r3, [pc, #640]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a9f      	ldr	r2, [pc, #636]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b9d      	ldr	r3, [pc, #628]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a9c      	ldr	r2, [pc, #624]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff faec 	bl	8000b8c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fae8 	bl	8000b8c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e276      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	4b92      	ldr	r3, [pc, #584]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2a8>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fad8 	bl	8000b8c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fad4 	bl	8000b8c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e262      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2d0>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d060      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x310>
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d119      	bne.n	800164e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d116      	bne.n	800164e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	4b7c      	ldr	r3, [pc, #496]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x328>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e23f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b76      	ldr	r3, [pc, #472]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	4973      	ldr	r1, [pc, #460]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	e040      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d023      	beq.n	800169e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001656:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6e      	ldr	r2, [pc, #440]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fa93 	bl	8000b8c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fa8f 	bl	8000b8c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e21d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b62      	ldr	r3, [pc, #392]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	495f      	ldr	r1, [pc, #380]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e018      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff fa6f 	bl	8000b8c <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff fa6b 	bl	8000b8c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1f9      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d03c      	beq.n	8001756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01c      	beq.n	800171e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff fa4a 	bl	8000b8c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff fa46 	bl	8000b8c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1d4      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ef      	beq.n	80016fc <HAL_RCC_OscConfig+0x3ec>
 800171c:	e01b      	b.n	8001756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001724:	4a3b      	ldr	r2, [pc, #236]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff fa2d 	bl	8000b8c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff fa29 	bl	8000b8c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1b7      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001748:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ef      	bne.n	8001736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80a6 	beq.w	80018b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10d      	bne.n	8001790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	4a26      	ldr	r2, [pc, #152]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001780:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178c:	2301      	movs	r3, #1
 800178e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d118      	bne.n	80017ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a8:	f7ff f9f0 	bl	8000b8c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b0:	f7ff f9ec 	bl	8000b8c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e17a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e6:	e029      	b.n	800183c <HAL_RCC_OscConfig+0x52c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d115      	bne.n	800181c <HAL_RCC_OscConfig+0x50c>
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f6:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001806:	4a03      	ldr	r2, [pc, #12]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x52c>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	4b9c      	ldr	r3, [pc, #624]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	4a9b      	ldr	r2, [pc, #620]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800182c:	4b98      	ldr	r3, [pc, #608]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001832:	4a97      	ldr	r2, [pc, #604]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d016      	beq.n	8001872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f9a2 	bl	8000b8c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f99e 	bl	8000b8c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e12a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001862:	4b8b      	ldr	r3, [pc, #556]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ed      	beq.n	800184c <HAL_RCC_OscConfig+0x53c>
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff f98b 	bl	8000b8c <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff f987 	bl	8000b8c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e113      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001890:	4b7f      	ldr	r3, [pc, #508]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ed      	bne.n	800187a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	4a79      	ldr	r2, [pc, #484]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80fe 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	2b02      	cmp	r3, #2
 80018c0:	f040 80d0 	bne.w	8001a64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018c4:	4b72      	ldr	r3, [pc, #456]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d130      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	3b01      	subs	r3, #1
 80018e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d127      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d11f      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001904:	2a07      	cmp	r2, #7
 8001906:	bf14      	ite	ne
 8001908:	2201      	movne	r2, #1
 800190a:	2200      	moveq	r2, #0
 800190c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190e:	4293      	cmp	r3, r2
 8001910:	d113      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d109      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d06e      	beq.n	8001a18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d069      	beq.n	8001a14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001940:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800194c:	4b50      	ldr	r3, [pc, #320]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0ad      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800195c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a4b      	ldr	r2, [pc, #300]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001968:	f7ff f910 	bl	8000b8c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f90c 	bl	8000b8c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e09a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001982:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198e:	4b40      	ldr	r3, [pc, #256]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001994:	4013      	ands	r3, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800199e:	3a01      	subs	r2, #1
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	4311      	orrs	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019a8:	0212      	lsls	r2, r2, #8
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019b0:	0852      	lsrs	r2, r2, #1
 80019b2:	3a01      	subs	r2, #1
 80019b4:	0552      	lsls	r2, r2, #21
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019bc:	0852      	lsrs	r2, r2, #1
 80019be:	3a01      	subs	r2, #1
 80019c0:	0652      	lsls	r2, r2, #25
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019c8:	0912      	lsrs	r2, r2, #4
 80019ca:	0452      	lsls	r2, r2, #17
 80019cc:	430a      	orrs	r2, r1
 80019ce:	4930      	ldr	r1, [pc, #192]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ec:	f7ff f8ce 	bl	8000b8c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f8ca 	bl	8000b8c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e058      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a12:	e050      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e04f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d148      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a24:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a30:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a16      	ldr	r2, [pc, #88]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a3c:	f7ff f8a6 	bl	8000b8c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f8a2 	bl	8000b8c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e030      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x734>
 8001a62:	e028      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d023      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a08      	ldr	r2, [pc, #32]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f889 	bl	8000b8c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	e00c      	b.n	8001a98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f885 	bl	8000b8c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d905      	bls.n	8001a98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e013      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
 8001a90:	40021000 	.word	0x40021000
 8001a94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_RCC_OscConfig+0x7b0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ec      	bne.n	8001a7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_RCC_OscConfig+0x7b0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4905      	ldr	r1, [pc, #20]	@ (8001ac0 <HAL_RCC_OscConfig+0x7b0>)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_RCC_OscConfig+0x7b4>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e001      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	feeefffc 	.word	0xfeeefffc

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0e7      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b75      	ldr	r3, [pc, #468]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b72      	ldr	r3, [pc, #456]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4970      	ldr	r1, [pc, #448]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0cf      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b66      	ldr	r3, [pc, #408]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d908      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b63      	ldr	r3, [pc, #396]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4960      	ldr	r1, [pc, #384]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d04c      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0a6      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b66:	4b54      	ldr	r3, [pc, #336]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e09a      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e08e      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e086      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4943      	ldr	r1, [pc, #268]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb0:	f7fe ffec 	bl	8000b8c <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7fe ffe8 	bl	8000b8c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e06e      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d208      	bcs.n	8001c0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	492b      	ldr	r1, [pc, #172]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0e:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d210      	bcs.n	8001c3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 0207 	bic.w	r2, r3, #7
 8001c24:	4923      	ldr	r1, [pc, #140]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e036      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4918      	ldr	r1, [pc, #96]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4910      	ldr	r1, [pc, #64]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7c:	f000 f824 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	490b      	ldr	r1, [pc, #44]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f4>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
 8001c98:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe ff23 	bl	8000aec <HAL_InitTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001caa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	0800599c 	.word	0x0800599c
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d121      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d11e      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d08:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d24:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	e004      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d134      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d56:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d003      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0xac>
 8001d6c:	e005      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d70:	617b      	str	r3, [r7, #20]
      break;
 8001d72:	e005      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d76:	617b      	str	r3, [r7, #20]
      break;
 8001d78:	e002      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	617b      	str	r3, [r7, #20]
      break;
 8001d7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	fb03 f202 	mul.w	r2, r3, r2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	0e5b      	lsrs	r3, r3, #25
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	3301      	adds	r3, #1
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	080059b4 	.word	0x080059b4
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4904      	ldr	r1, [pc, #16]	@ (8001e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	080059ac 	.word	0x080059ac

08001e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e28:	f7ff ffda 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	0adb      	lsrs	r3, r3, #11
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	4904      	ldr	r1, [pc, #16]	@ (8001e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	080059ac 	.word	0x080059ac

08001e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e68:	f7ff f9ee 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 8001e6c:	6178      	str	r0, [r7, #20]
 8001e6e:	e014      	b.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7c:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e88:	f7ff f9de 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 8001e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	4a1d      	ldr	r2, [pc, #116]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea0:	d10b      	bne.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	@ 0x80
 8001ea6:	d919      	bls.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eac:	d902      	bls.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eae:	2302      	movs	r3, #2
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e013      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	e010      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b80      	cmp	r3, #128	@ 0x80
 8001ebe:	d902      	bls.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e00a      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	@ 0x80
 8001eca:	d102      	bne.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ecc:	2302      	movs	r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e004      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b70      	cmp	r3, #112	@ 0x70
 8001ed6:	d101      	bne.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 0207 	bic.w	r2, r3, #7
 8001ee4:	4909      	ldr	r1, [pc, #36]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40022000 	.word	0x40022000

08001f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d041      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f34:	d02a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f3a:	d824      	bhi.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f40:	d008      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f46:	d81e      	bhi.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f50:	d010      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f52:	e018      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f54:	4b86      	ldr	r3, [pc, #536]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a85      	ldr	r2, [pc, #532]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f60:	e015      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fabb 	bl	80024e4 <RCCEx_PLLSAI1_Config>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f72:	e00c      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3320      	adds	r3, #32
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fba6 	bl	80026cc <RCCEx_PLLSAI2_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f84:	e003      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	74fb      	strb	r3, [r7, #19]
      break;
 8001f8a:	e000      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f8e:	7cfb      	ldrb	r3, [r7, #19]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f94:	4b76      	ldr	r3, [pc, #472]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fa2:	4973      	ldr	r1, [pc, #460]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001faa:	e001      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d041      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fc4:	d02a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fca:	d824      	bhi.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fd0:	d008      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fd6:	d81e      	bhi.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe0:	d010      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fe2:	e018      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fe4:	4b62      	ldr	r3, [pc, #392]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a61      	ldr	r2, [pc, #388]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ff0:	e015      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fa73 	bl	80024e4 <RCCEx_PLLSAI1_Config>
 8001ffe:	4603      	mov	r3, r0
 8002000:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002002:	e00c      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3320      	adds	r3, #32
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fb5e 	bl	80026cc <RCCEx_PLLSAI2_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002014:	e003      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	74fb      	strb	r3, [r7, #19]
      break;
 800201a:	e000      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800201c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800201e:	7cfb      	ldrb	r3, [r7, #19]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10b      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002024:	4b52      	ldr	r3, [pc, #328]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002032:	494f      	ldr	r1, [pc, #316]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800203a:	e001      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a0 	beq.w	800218e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002062:	2300      	movs	r3, #0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002068:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	4a40      	ldr	r2, [pc, #256]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002072:	6593      	str	r3, [r2, #88]	@ 0x58
 8002074:	4b3e      	ldr	r3, [pc, #248]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002080:	2301      	movs	r3, #1
 8002082:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002084:	4b3b      	ldr	r3, [pc, #236]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a3a      	ldr	r2, [pc, #232]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002090:	f7fe fd7c 	bl	8000b8c <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002096:	e009      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002098:	f7fe fd78 	bl	8000b8c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d902      	bls.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	74fb      	strb	r3, [r7, #19]
        break;
 80020aa:	e005      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ac:	4b31      	ldr	r3, [pc, #196]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ef      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d15c      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020be:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01f      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d019      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	4a20      	ldr	r2, [pc, #128]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002108:	4a19      	ldr	r2, [pc, #100]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d016      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fd37 	bl	8000b8c <HAL_GetTick>
 800211e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002120:	e00b      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7fe fd33 	bl	8000b8c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d902      	bls.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	74fb      	strb	r3, [r7, #19]
            break;
 8002138:	e006      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ec      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214e:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002154:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800215e:	4904      	ldr	r1, [pc, #16]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002166:	e009      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	74bb      	strb	r3, [r7, #18]
 800216c:	e006      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217c:	7c7b      	ldrb	r3, [r7, #17]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4b9e      	ldr	r3, [pc, #632]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	4a9d      	ldr	r2, [pc, #628]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800219a:	4b98      	ldr	r3, [pc, #608]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a0:	f023 0203 	bic.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a8:	4994      	ldr	r1, [pc, #592]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021bc:	4b8f      	ldr	r3, [pc, #572]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f023 020c 	bic.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ca:	498c      	ldr	r1, [pc, #560]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021de:	4b87      	ldr	r3, [pc, #540]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	4983      	ldr	r1, [pc, #524]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002200:	4b7e      	ldr	r3, [pc, #504]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	497b      	ldr	r1, [pc, #492]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002222:	4b76      	ldr	r3, [pc, #472]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002230:	4972      	ldr	r1, [pc, #456]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002244:	4b6d      	ldr	r3, [pc, #436]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	496a      	ldr	r1, [pc, #424]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002266:	4b65      	ldr	r3, [pc, #404]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	4961      	ldr	r1, [pc, #388]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002288:	4b5c      	ldr	r3, [pc, #368]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002296:	4959      	ldr	r1, [pc, #356]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022aa:	4b54      	ldr	r3, [pc, #336]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b8:	4950      	ldr	r1, [pc, #320]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022cc:	4b4b      	ldr	r3, [pc, #300]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022da:	4948      	ldr	r1, [pc, #288]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ee:	4b43      	ldr	r3, [pc, #268]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	493f      	ldr	r1, [pc, #252]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d028      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002310:	4b3a      	ldr	r3, [pc, #232]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800231e:	4937      	ldr	r1, [pc, #220]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800232a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800232e:	d106      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a31      	ldr	r2, [pc, #196]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
 800233c:	e011      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002342:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002346:	d10c      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	2101      	movs	r1, #1
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f8c8 	bl	80024e4 <RCCEx_PLLSAI1_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d028      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800236e:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002374:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237c:	491f      	ldr	r1, [pc, #124]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800238c:	d106      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238e:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4a1a      	ldr	r2, [pc, #104]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002398:	60d3      	str	r3, [r2, #12]
 800239a:	e011      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2101      	movs	r1, #1
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f899 	bl	80024e4 <RCCEx_PLLSAI1_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d02b      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023da:	4908      	ldr	r1, [pc, #32]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ea:	d109      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a02      	ldr	r2, [pc, #8]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f6:	60d3      	str	r3, [r2, #12]
 80023f8:	e014      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002404:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002408:	d10c      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3304      	adds	r3, #4
 800240e:	2101      	movs	r1, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f867 	bl	80024e4 <RCCEx_PLLSAI1_Config>
 8002416:	4603      	mov	r3, r0
 8002418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02f      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002430:	4b2b      	ldr	r3, [pc, #172]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002436:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800243e:	4928      	ldr	r1, [pc, #160]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800244a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800244e:	d10d      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f844 	bl	80024e4 <RCCEx_PLLSAI1_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d014      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	74bb      	strb	r3, [r7, #18]
 800246a:	e011      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002474:	d10c      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3320      	adds	r3, #32
 800247a:	2102      	movs	r1, #2
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f925 	bl	80026cc <RCCEx_PLLSAI2_Config>
 8002482:	4603      	mov	r3, r0
 8002484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024aa:	490d      	ldr	r1, [pc, #52]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024be:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ce:	4904      	ldr	r1, [pc, #16]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000

080024e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024f2:	4b75      	ldr	r3, [pc, #468]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d018      	beq.n	8002530 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024fe:	4b72      	ldr	r3, [pc, #456]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0203 	and.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d10d      	bne.n	800252a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
       ||
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002516:	4b6c      	ldr	r3, [pc, #432]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
       ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d047      	beq.n	80025ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	e044      	b.n	80025ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d018      	beq.n	800256a <RCCEx_PLLSAI1_Config+0x86>
 8002538:	2b03      	cmp	r3, #3
 800253a:	d825      	bhi.n	8002588 <RCCEx_PLLSAI1_Config+0xa4>
 800253c:	2b01      	cmp	r3, #1
 800253e:	d002      	beq.n	8002546 <RCCEx_PLLSAI1_Config+0x62>
 8002540:	2b02      	cmp	r3, #2
 8002542:	d009      	beq.n	8002558 <RCCEx_PLLSAI1_Config+0x74>
 8002544:	e020      	b.n	8002588 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002546:	4b60      	ldr	r3, [pc, #384]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11d      	bne.n	800258e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002556:	e01a      	b.n	800258e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002558:	4b5b      	ldr	r3, [pc, #364]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d116      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e013      	b.n	8002592 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800256a:	4b57      	ldr	r3, [pc, #348]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002576:	4b54      	ldr	r3, [pc, #336]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002586:	e006      	b.n	8002596 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e004      	b.n	8002598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258e:	bf00      	nop
 8002590:	e002      	b.n	8002598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002592:	bf00      	nop
 8002594:	e000      	b.n	8002598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002596:	bf00      	nop
    }

    if(status == HAL_OK)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10d      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800259e:	4b4a      	ldr	r3, [pc, #296]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	430b      	orrs	r3, r1
 80025b4:	4944      	ldr	r1, [pc, #272]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d17d      	bne.n	80026bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025c0:	4b41      	ldr	r3, [pc, #260]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a40      	ldr	r2, [pc, #256]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025cc:	f7fe fade 	bl	8000b8c <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025d2:	e009      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d4:	f7fe fada 	bl	8000b8c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d902      	bls.n	80025e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	73fb      	strb	r3, [r7, #15]
        break;
 80025e6:	e005      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e8:	4b37      	ldr	r3, [pc, #220]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ef      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d160      	bne.n	80026bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d111      	bne.n	8002624 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002600:	4b31      	ldr	r3, [pc, #196]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6892      	ldr	r2, [r2, #8]
 8002610:	0211      	lsls	r1, r2, #8
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68d2      	ldr	r2, [r2, #12]
 8002616:	0912      	lsrs	r2, r2, #4
 8002618:	0452      	lsls	r2, r2, #17
 800261a:	430a      	orrs	r2, r1
 800261c:	492a      	ldr	r1, [pc, #168]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	610b      	str	r3, [r1, #16]
 8002622:	e027      	b.n	8002674 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d112      	bne.n	8002650 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800262a:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002632:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	0211      	lsls	r1, r2, #8
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6912      	ldr	r2, [r2, #16]
 8002640:	0852      	lsrs	r2, r2, #1
 8002642:	3a01      	subs	r2, #1
 8002644:	0552      	lsls	r2, r2, #21
 8002646:	430a      	orrs	r2, r1
 8002648:	491f      	ldr	r1, [pc, #124]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	610b      	str	r3, [r1, #16]
 800264e:	e011      	b.n	8002674 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002650:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002658:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6892      	ldr	r2, [r2, #8]
 8002660:	0211      	lsls	r1, r2, #8
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6952      	ldr	r2, [r2, #20]
 8002666:	0852      	lsrs	r2, r2, #1
 8002668:	3a01      	subs	r2, #1
 800266a:	0652      	lsls	r2, r2, #25
 800266c:	430a      	orrs	r2, r1
 800266e:	4916      	ldr	r1, [pc, #88]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002670:	4313      	orrs	r3, r2
 8002672:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002674:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a13      	ldr	r2, [pc, #76]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800267e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fa84 	bl	8000b8c <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002686:	e009      	b.n	800269c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002688:	f7fe fa80 	bl	8000b8c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	73fb      	strb	r3, [r7, #15]
          break;
 800269a:	e005      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800269c:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ef      	beq.n	8002688 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	4904      	ldr	r1, [pc, #16]	@ (80026c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000

080026cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026da:	4b6a      	ldr	r3, [pc, #424]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d018      	beq.n	8002718 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026e6:	4b67      	ldr	r3, [pc, #412]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0203 	and.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d10d      	bne.n	8002712 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
       ||
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026fe:	4b61      	ldr	r3, [pc, #388]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
       ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d047      	beq.n	80027a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e044      	b.n	80027a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d018      	beq.n	8002752 <RCCEx_PLLSAI2_Config+0x86>
 8002720:	2b03      	cmp	r3, #3
 8002722:	d825      	bhi.n	8002770 <RCCEx_PLLSAI2_Config+0xa4>
 8002724:	2b01      	cmp	r3, #1
 8002726:	d002      	beq.n	800272e <RCCEx_PLLSAI2_Config+0x62>
 8002728:	2b02      	cmp	r3, #2
 800272a:	d009      	beq.n	8002740 <RCCEx_PLLSAI2_Config+0x74>
 800272c:	e020      	b.n	8002770 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800272e:	4b55      	ldr	r3, [pc, #340]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11d      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273e:	e01a      	b.n	8002776 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002740:	4b50      	ldr	r3, [pc, #320]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d116      	bne.n	800277a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002750:	e013      	b.n	800277a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002752:	4b4c      	ldr	r3, [pc, #304]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800275e:	4b49      	ldr	r3, [pc, #292]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800276e:	e006      	b.n	800277e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	e004      	b.n	8002780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800277e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002786:	4b3f      	ldr	r3, [pc, #252]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6819      	ldr	r1, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	430b      	orrs	r3, r1
 800279c:	4939      	ldr	r1, [pc, #228]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d167      	bne.n	8002878 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027a8:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a35      	ldr	r2, [pc, #212]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7fe f9ea 	bl	8000b8c <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ba:	e009      	b.n	80027d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027bc:	f7fe f9e6 	bl	8000b8c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d902      	bls.n	80027d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	73fb      	strb	r3, [r7, #15]
        break;
 80027ce:	e005      	b.n	80027dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ef      	bne.n	80027bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d14a      	bne.n	8002878 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d111      	bne.n	800280c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027e8:	4b26      	ldr	r3, [pc, #152]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6892      	ldr	r2, [r2, #8]
 80027f8:	0211      	lsls	r1, r2, #8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68d2      	ldr	r2, [r2, #12]
 80027fe:	0912      	lsrs	r2, r2, #4
 8002800:	0452      	lsls	r2, r2, #17
 8002802:	430a      	orrs	r2, r1
 8002804:	491f      	ldr	r1, [pc, #124]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002806:	4313      	orrs	r3, r2
 8002808:	614b      	str	r3, [r1, #20]
 800280a:	e011      	b.n	8002830 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002814:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6892      	ldr	r2, [r2, #8]
 800281c:	0211      	lsls	r1, r2, #8
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6912      	ldr	r2, [r2, #16]
 8002822:	0852      	lsrs	r2, r2, #1
 8002824:	3a01      	subs	r2, #1
 8002826:	0652      	lsls	r2, r2, #25
 8002828:	430a      	orrs	r2, r1
 800282a:	4916      	ldr	r1, [pc, #88]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a13      	ldr	r2, [pc, #76]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800283a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fe f9a6 	bl	8000b8c <HAL_GetTick>
 8002840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002842:	e009      	b.n	8002858 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002844:	f7fe f9a2 	bl	8000b8c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d902      	bls.n	8002858 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	73fb      	strb	r3, [r7, #15]
          break;
 8002856:	e005      	b.n	8002864 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ef      	beq.n	8002844 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4904      	ldr	r1, [pc, #16]	@ (8002884 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002874:	4313      	orrs	r3, r2
 8002876:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e040      	b.n	800291c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe f870 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	@ 0x24
 80028b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fe90 	bl	80035f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fbd5 	bl	8003084 <UART_SetConfig>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e01b      	b.n	800291c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 ff0f 	bl	8003738 <UART_CheckIdleState>
 800291a:	4603      	mov	r3, r0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	@ 0x28
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002938:	2b20      	cmp	r3, #32
 800293a:	d177      	bne.n	8002a2c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_UART_Transmit+0x24>
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e070      	b.n	8002a2e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2221      	movs	r2, #33	@ 0x21
 8002958:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800295a:	f7fe f917 	bl	8000b8c <HAL_GetTick>
 800295e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002978:	d108      	bne.n	800298c <HAL_UART_Transmit+0x68>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	e003      	b.n	8002994 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002994:	e02f      	b.n	80029f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	2180      	movs	r1, #128	@ 0x80
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 ff71 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e03b      	b.n	8002a2e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c8:	b292      	uxth	r2, r2
 80029ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	3302      	adds	r3, #2
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e007      	b.n	80029e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1c9      	bne.n	8002996 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2140      	movs	r1, #64	@ 0x40
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 ff3b 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e005      	b.n	8002a2e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002a62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002a66:	4013      	ands	r3, r2
 8002a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d115      	bne.n	8002aa0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00f      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 82ca 	beq.w	800302a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
      }
      return;
 8002a9e:	e2c4      	b.n	800302a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8117 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ab6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002aba:	4b85      	ldr	r3, [pc, #532]	@ (8002cd0 <HAL_UART_IRQHandler+0x298>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 810a 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d011      	beq.n	8002af4 <HAL_UART_IRQHandler+0xbc>
 8002ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d011      	beq.n	8002b24 <HAL_UART_IRQHandler+0xec>
 8002b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2202      	movs	r2, #2
 8002b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b1a:	f043 0204 	orr.w	r2, r3, #4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d011      	beq.n	8002b54 <HAL_UART_IRQHandler+0x11c>
 8002b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2204      	movs	r2, #4
 8002b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b4a:	f043 0202 	orr.w	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d017      	beq.n	8002b90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00b      	beq.n	8002b90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b86:	f043 0208 	orr.w	r2, r3, #8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x18a>
 8002b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8230 	beq.w	800302e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0a:	2b40      	cmp	r3, #64	@ 0x40
 8002c0c:	d005      	beq.n	8002c1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d04f      	beq.n	8002cba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fea1 	bl	8003962 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2a:	2b40      	cmp	r3, #64	@ 0x40
 8002c2c:	d141      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3308      	adds	r3, #8
 8002c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3308      	adds	r3, #8
 8002c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1d9      	bne.n	8002c2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d013      	beq.n	8002caa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c86:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <HAL_UART_IRQHandler+0x29c>)
 8002c88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe f8d7 	bl	8000e42 <HAL_DMA_Abort_IT>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d017      	beq.n	8002cca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	e00f      	b.n	8002cca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f9d4 	bl	8003058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e00b      	b.n	8002cca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9d0 	bl	8003058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e007      	b.n	8002cca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9cc 	bl	8003058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002cc8:	e1b1      	b.n	800302e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cca:	bf00      	nop
    return;
 8002ccc:	e1af      	b.n	800302e <HAL_UART_IRQHandler+0x5f6>
 8002cce:	bf00      	nop
 8002cd0:	04000120 	.word	0x04000120
 8002cd4:	08003a2b 	.word	0x08003a2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	f040 816a 	bne.w	8002fb6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8163 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 815c 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2210      	movs	r2, #16
 8002d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b40      	cmp	r3, #64	@ 0x40
 8002d12:	f040 80d4 	bne.w	8002ebe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80ad 	beq.w	8002e86 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d36:	429a      	cmp	r2, r3
 8002d38:	f080 80a5 	bcs.w	8002e86 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 8086 	bne.w	8002e64 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1da      	bne.n	8002d58 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3308      	adds	r3, #8
 8002da8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e1      	bne.n	8002da2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3308      	adds	r3, #8
 8002de4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002de8:	e853 3f00 	ldrex	r3, [r3]
 8002dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002dee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e3      	bne.n	8002dde <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e34:	f023 0310 	bic.w	r3, r3, #16
 8002e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e4      	bne.n	8002e24 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd ffb1 	bl	8000dc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8f4 	bl	800306c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002e84:	e0d5      	b.n	8003032 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e90:	429a      	cmp	r2, r3
 8002e92:	f040 80ce 	bne.w	8003032 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	f040 80c5 	bne.w	8003032 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f8d8 	bl	800306c <HAL_UARTEx_RxEventCallback>
      return;
 8002ebc:	e0b9      	b.n	8003032 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80ab 	beq.w	8003036 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80a6 	beq.w	8003036 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002efa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002efe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e4      	bne.n	8002eea <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3308      	adds	r3, #8
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f44:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e3      	bne.n	8002f20 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	69b9      	ldr	r1, [r7, #24]
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e4      	bne.n	8002f6c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f85c 	bl	800306c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fb4:	e03f      	b.n	8003036 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x5a8>
 8002fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002fd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fd66 	bl	8003aaa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fde:	e02d      	b.n	800303c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01c      	beq.n	800303a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
    }
    return;
 8003008:	e017      	b.n	800303a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800300a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800300e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d012      	beq.n	800303c <HAL_UART_IRQHandler+0x604>
 8003016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800301a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fd17 	bl	8003a56 <UART_EndTransmit_IT>
    return;
 8003028:	e008      	b.n	800303c <HAL_UART_IRQHandler+0x604>
      return;
 800302a:	bf00      	nop
 800302c:	e006      	b.n	800303c <HAL_UART_IRQHandler+0x604>
    return;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <HAL_UART_IRQHandler+0x604>
      return;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <HAL_UART_IRQHandler+0x604>
      return;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <HAL_UART_IRQHandler+0x604>
    return;
 800303a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800303c:	37e8      	adds	r7, #232	@ 0xe8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop

08003044 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003088:	b08a      	sub	sp, #40	@ 0x28
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4ba4      	ldr	r3, [pc, #656]	@ (8003344 <UART_SetConfig+0x2c0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030bc:	430b      	orrs	r3, r1
 80030be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a99      	ldr	r2, [pc, #612]	@ (8003348 <UART_SetConfig+0x2c4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ec:	4313      	orrs	r3, r2
 80030ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a90      	ldr	r2, [pc, #576]	@ (800334c <UART_SetConfig+0x2c8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d126      	bne.n	800315c <UART_SetConfig+0xd8>
 800310e:	4b90      	ldr	r3, [pc, #576]	@ (8003350 <UART_SetConfig+0x2cc>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b03      	cmp	r3, #3
 800311a:	d81b      	bhi.n	8003154 <UART_SetConfig+0xd0>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <UART_SetConfig+0xa0>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003135 	.word	0x08003135
 8003128:	08003145 	.word	0x08003145
 800312c:	0800313d 	.word	0x0800313d
 8003130:	0800314d 	.word	0x0800314d
 8003134:	2301      	movs	r3, #1
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313a:	e116      	b.n	800336a <UART_SetConfig+0x2e6>
 800313c:	2302      	movs	r3, #2
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003142:	e112      	b.n	800336a <UART_SetConfig+0x2e6>
 8003144:	2304      	movs	r3, #4
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314a:	e10e      	b.n	800336a <UART_SetConfig+0x2e6>
 800314c:	2308      	movs	r3, #8
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003152:	e10a      	b.n	800336a <UART_SetConfig+0x2e6>
 8003154:	2310      	movs	r3, #16
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315a:	e106      	b.n	800336a <UART_SetConfig+0x2e6>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a7c      	ldr	r2, [pc, #496]	@ (8003354 <UART_SetConfig+0x2d0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d138      	bne.n	80031d8 <UART_SetConfig+0x154>
 8003166:	4b7a      	ldr	r3, [pc, #488]	@ (8003350 <UART_SetConfig+0x2cc>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d82d      	bhi.n	80031d0 <UART_SetConfig+0x14c>
 8003174:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <UART_SetConfig+0xf8>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031b1 	.word	0x080031b1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031d1 	.word	0x080031d1
 8003188:	080031d1 	.word	0x080031d1
 800318c:	080031c1 	.word	0x080031c1
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031d1 	.word	0x080031d1
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	080031d1 	.word	0x080031d1
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031d1 	.word	0x080031d1
 80031ac:	080031c9 	.word	0x080031c9
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b6:	e0d8      	b.n	800336a <UART_SetConfig+0x2e6>
 80031b8:	2302      	movs	r3, #2
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031be:	e0d4      	b.n	800336a <UART_SetConfig+0x2e6>
 80031c0:	2304      	movs	r3, #4
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c6:	e0d0      	b.n	800336a <UART_SetConfig+0x2e6>
 80031c8:	2308      	movs	r3, #8
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ce:	e0cc      	b.n	800336a <UART_SetConfig+0x2e6>
 80031d0:	2310      	movs	r3, #16
 80031d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d6:	e0c8      	b.n	800336a <UART_SetConfig+0x2e6>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003358 <UART_SetConfig+0x2d4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d125      	bne.n	800322e <UART_SetConfig+0x1aa>
 80031e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003350 <UART_SetConfig+0x2cc>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031ec:	2b30      	cmp	r3, #48	@ 0x30
 80031ee:	d016      	beq.n	800321e <UART_SetConfig+0x19a>
 80031f0:	2b30      	cmp	r3, #48	@ 0x30
 80031f2:	d818      	bhi.n	8003226 <UART_SetConfig+0x1a2>
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d00a      	beq.n	800320e <UART_SetConfig+0x18a>
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d814      	bhi.n	8003226 <UART_SetConfig+0x1a2>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <UART_SetConfig+0x182>
 8003200:	2b10      	cmp	r3, #16
 8003202:	d008      	beq.n	8003216 <UART_SetConfig+0x192>
 8003204:	e00f      	b.n	8003226 <UART_SetConfig+0x1a2>
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320c:	e0ad      	b.n	800336a <UART_SetConfig+0x2e6>
 800320e:	2302      	movs	r3, #2
 8003210:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003214:	e0a9      	b.n	800336a <UART_SetConfig+0x2e6>
 8003216:	2304      	movs	r3, #4
 8003218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321c:	e0a5      	b.n	800336a <UART_SetConfig+0x2e6>
 800321e:	2308      	movs	r3, #8
 8003220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003224:	e0a1      	b.n	800336a <UART_SetConfig+0x2e6>
 8003226:	2310      	movs	r3, #16
 8003228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322c:	e09d      	b.n	800336a <UART_SetConfig+0x2e6>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a4a      	ldr	r2, [pc, #296]	@ (800335c <UART_SetConfig+0x2d8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d125      	bne.n	8003284 <UART_SetConfig+0x200>
 8003238:	4b45      	ldr	r3, [pc, #276]	@ (8003350 <UART_SetConfig+0x2cc>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003242:	2bc0      	cmp	r3, #192	@ 0xc0
 8003244:	d016      	beq.n	8003274 <UART_SetConfig+0x1f0>
 8003246:	2bc0      	cmp	r3, #192	@ 0xc0
 8003248:	d818      	bhi.n	800327c <UART_SetConfig+0x1f8>
 800324a:	2b80      	cmp	r3, #128	@ 0x80
 800324c:	d00a      	beq.n	8003264 <UART_SetConfig+0x1e0>
 800324e:	2b80      	cmp	r3, #128	@ 0x80
 8003250:	d814      	bhi.n	800327c <UART_SetConfig+0x1f8>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <UART_SetConfig+0x1d8>
 8003256:	2b40      	cmp	r3, #64	@ 0x40
 8003258:	d008      	beq.n	800326c <UART_SetConfig+0x1e8>
 800325a:	e00f      	b.n	800327c <UART_SetConfig+0x1f8>
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003262:	e082      	b.n	800336a <UART_SetConfig+0x2e6>
 8003264:	2302      	movs	r3, #2
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326a:	e07e      	b.n	800336a <UART_SetConfig+0x2e6>
 800326c:	2304      	movs	r3, #4
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003272:	e07a      	b.n	800336a <UART_SetConfig+0x2e6>
 8003274:	2308      	movs	r3, #8
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327a:	e076      	b.n	800336a <UART_SetConfig+0x2e6>
 800327c:	2310      	movs	r3, #16
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003282:	e072      	b.n	800336a <UART_SetConfig+0x2e6>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a35      	ldr	r2, [pc, #212]	@ (8003360 <UART_SetConfig+0x2dc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d12a      	bne.n	80032e4 <UART_SetConfig+0x260>
 800328e:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <UART_SetConfig+0x2cc>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800329c:	d01a      	beq.n	80032d4 <UART_SetConfig+0x250>
 800329e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032a2:	d81b      	bhi.n	80032dc <UART_SetConfig+0x258>
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a8:	d00c      	beq.n	80032c4 <UART_SetConfig+0x240>
 80032aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ae:	d815      	bhi.n	80032dc <UART_SetConfig+0x258>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <UART_SetConfig+0x238>
 80032b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b8:	d008      	beq.n	80032cc <UART_SetConfig+0x248>
 80032ba:	e00f      	b.n	80032dc <UART_SetConfig+0x258>
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c2:	e052      	b.n	800336a <UART_SetConfig+0x2e6>
 80032c4:	2302      	movs	r3, #2
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ca:	e04e      	b.n	800336a <UART_SetConfig+0x2e6>
 80032cc:	2304      	movs	r3, #4
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d2:	e04a      	b.n	800336a <UART_SetConfig+0x2e6>
 80032d4:	2308      	movs	r3, #8
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032da:	e046      	b.n	800336a <UART_SetConfig+0x2e6>
 80032dc:	2310      	movs	r3, #16
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e2:	e042      	b.n	800336a <UART_SetConfig+0x2e6>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a17      	ldr	r2, [pc, #92]	@ (8003348 <UART_SetConfig+0x2c4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d13a      	bne.n	8003364 <UART_SetConfig+0x2e0>
 80032ee:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <UART_SetConfig+0x2cc>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032fc:	d01a      	beq.n	8003334 <UART_SetConfig+0x2b0>
 80032fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003302:	d81b      	bhi.n	800333c <UART_SetConfig+0x2b8>
 8003304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003308:	d00c      	beq.n	8003324 <UART_SetConfig+0x2a0>
 800330a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800330e:	d815      	bhi.n	800333c <UART_SetConfig+0x2b8>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <UART_SetConfig+0x298>
 8003314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003318:	d008      	beq.n	800332c <UART_SetConfig+0x2a8>
 800331a:	e00f      	b.n	800333c <UART_SetConfig+0x2b8>
 800331c:	2300      	movs	r3, #0
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003322:	e022      	b.n	800336a <UART_SetConfig+0x2e6>
 8003324:	2302      	movs	r3, #2
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800332a:	e01e      	b.n	800336a <UART_SetConfig+0x2e6>
 800332c:	2304      	movs	r3, #4
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003332:	e01a      	b.n	800336a <UART_SetConfig+0x2e6>
 8003334:	2308      	movs	r3, #8
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333a:	e016      	b.n	800336a <UART_SetConfig+0x2e6>
 800333c:	2310      	movs	r3, #16
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003342:	e012      	b.n	800336a <UART_SetConfig+0x2e6>
 8003344:	efff69f3 	.word	0xefff69f3
 8003348:	40008000 	.word	0x40008000
 800334c:	40013800 	.word	0x40013800
 8003350:	40021000 	.word	0x40021000
 8003354:	40004400 	.word	0x40004400
 8003358:	40004800 	.word	0x40004800
 800335c:	40004c00 	.word	0x40004c00
 8003360:	40005000 	.word	0x40005000
 8003364:	2310      	movs	r3, #16
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a9f      	ldr	r2, [pc, #636]	@ (80035ec <UART_SetConfig+0x568>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d17a      	bne.n	800346a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003374:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003378:	2b08      	cmp	r3, #8
 800337a:	d824      	bhi.n	80033c6 <UART_SetConfig+0x342>
 800337c:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <UART_SetConfig+0x300>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033c7 	.word	0x080033c7
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033c7 	.word	0x080033c7
 8003394:	080033b7 	.word	0x080033b7
 8003398:	080033c7 	.word	0x080033c7
 800339c:	080033c7 	.word	0x080033c7
 80033a0:	080033c7 	.word	0x080033c7
 80033a4:	080033bf 	.word	0x080033bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a8:	f7fe fd26 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 80033ac:	61f8      	str	r0, [r7, #28]
        break;
 80033ae:	e010      	b.n	80033d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b0:	4b8f      	ldr	r3, [pc, #572]	@ (80035f0 <UART_SetConfig+0x56c>)
 80033b2:	61fb      	str	r3, [r7, #28]
        break;
 80033b4:	e00d      	b.n	80033d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b6:	f7fe fc87 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80033ba:	61f8      	str	r0, [r7, #28]
        break;
 80033bc:	e009      	b.n	80033d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c2:	61fb      	str	r3, [r7, #28]
        break;
 80033c4:	e005      	b.n	80033d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80fb 	beq.w	80035d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d305      	bcc.n	80033f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d903      	bls.n	80033fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033fc:	e0e8      	b.n	80035d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2200      	movs	r2, #0
 8003402:	461c      	mov	r4, r3
 8003404:	4615      	mov	r5, r2
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	022b      	lsls	r3, r5, #8
 8003410:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003414:	0222      	lsls	r2, r4, #8
 8003416:	68f9      	ldr	r1, [r7, #12]
 8003418:	6849      	ldr	r1, [r1, #4]
 800341a:	0849      	lsrs	r1, r1, #1
 800341c:	2000      	movs	r0, #0
 800341e:	4688      	mov	r8, r1
 8003420:	4681      	mov	r9, r0
 8003422:	eb12 0a08 	adds.w	sl, r2, r8
 8003426:	eb43 0b09 	adc.w	fp, r3, r9
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003438:	4650      	mov	r0, sl
 800343a:	4659      	mov	r1, fp
 800343c:	f7fc fec8 	bl	80001d0 <__aeabi_uldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4613      	mov	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800344e:	d308      	bcc.n	8003462 <UART_SetConfig+0x3de>
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003456:	d204      	bcs.n	8003462 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	e0b6      	b.n	80035d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003468:	e0b2      	b.n	80035d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003472:	d15e      	bne.n	8003532 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003478:	2b08      	cmp	r3, #8
 800347a:	d828      	bhi.n	80034ce <UART_SetConfig+0x44a>
 800347c:	a201      	add	r2, pc, #4	@ (adr r2, 8003484 <UART_SetConfig+0x400>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034b9 	.word	0x080034b9
 8003490:	080034cf 	.word	0x080034cf
 8003494:	080034bf 	.word	0x080034bf
 8003498:	080034cf 	.word	0x080034cf
 800349c:	080034cf 	.word	0x080034cf
 80034a0:	080034cf 	.word	0x080034cf
 80034a4:	080034c7 	.word	0x080034c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a8:	f7fe fca6 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 80034ac:	61f8      	str	r0, [r7, #28]
        break;
 80034ae:	e014      	b.n	80034da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7fe fcb8 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 80034b4:	61f8      	str	r0, [r7, #28]
        break;
 80034b6:	e010      	b.n	80034da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b8:	4b4d      	ldr	r3, [pc, #308]	@ (80035f0 <UART_SetConfig+0x56c>)
 80034ba:	61fb      	str	r3, [r7, #28]
        break;
 80034bc:	e00d      	b.n	80034da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034be:	f7fe fc03 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80034c2:	61f8      	str	r0, [r7, #28]
        break;
 80034c4:	e009      	b.n	80034da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ca:	61fb      	str	r3, [r7, #28]
        break;
 80034cc:	e005      	b.n	80034da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d077      	beq.n	80035d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005a      	lsls	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	441a      	add	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d916      	bls.n	800352a <UART_SetConfig+0x4a6>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003502:	d212      	bcs.n	800352a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f023 030f 	bic.w	r3, r3, #15
 800350c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	b29b      	uxth	r3, r3
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	b29a      	uxth	r2, r3
 800351a:	8afb      	ldrh	r3, [r7, #22]
 800351c:	4313      	orrs	r3, r2
 800351e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	8afa      	ldrh	r2, [r7, #22]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e052      	b.n	80035d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003530:	e04e      	b.n	80035d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003532:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003536:	2b08      	cmp	r3, #8
 8003538:	d827      	bhi.n	800358a <UART_SetConfig+0x506>
 800353a:	a201      	add	r2, pc, #4	@ (adr r2, 8003540 <UART_SetConfig+0x4bc>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003565 	.word	0x08003565
 8003544:	0800356d 	.word	0x0800356d
 8003548:	08003575 	.word	0x08003575
 800354c:	0800358b 	.word	0x0800358b
 8003550:	0800357b 	.word	0x0800357b
 8003554:	0800358b 	.word	0x0800358b
 8003558:	0800358b 	.word	0x0800358b
 800355c:	0800358b 	.word	0x0800358b
 8003560:	08003583 	.word	0x08003583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003564:	f7fe fc48 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8003568:	61f8      	str	r0, [r7, #28]
        break;
 800356a:	e014      	b.n	8003596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800356c:	f7fe fc5a 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 8003570:	61f8      	str	r0, [r7, #28]
        break;
 8003572:	e010      	b.n	8003596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003574:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <UART_SetConfig+0x56c>)
 8003576:	61fb      	str	r3, [r7, #28]
        break;
 8003578:	e00d      	b.n	8003596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357a:	f7fe fba5 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 800357e:	61f8      	str	r0, [r7, #28]
        break;
 8003580:	e009      	b.n	8003596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003586:	61fb      	str	r3, [r7, #28]
        break;
 8003588:	e005      	b.n	8003596 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003594:	bf00      	nop
    }

    if (pclk != 0U)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d019      	beq.n	80035d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	085a      	lsrs	r2, r3, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	441a      	add	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b0f      	cmp	r3, #15
 80035b4:	d909      	bls.n	80035ca <UART_SetConfig+0x546>
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035bc:	d205      	bcs.n	80035ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	e002      	b.n	80035d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3728      	adds	r7, #40	@ 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop
 80035ec:	40008000 	.word	0x40008000
 80035f0:	00f42400 	.word	0x00f42400

080035f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01a      	beq.n	800370a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f2:	d10a      	bne.n	800370a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	605a      	str	r2, [r3, #4]
  }
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b098      	sub	sp, #96	@ 0x60
 800373c:	af02      	add	r7, sp, #8
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003748:	f7fd fa20 	bl	8000b8c <HAL_GetTick>
 800374c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d12e      	bne.n	80037ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f88c 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d021      	beq.n	80037ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800378a:	653b      	str	r3, [r7, #80]	@ 0x50
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003794:	647b      	str	r3, [r7, #68]	@ 0x44
 8003796:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800379a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e6      	bne.n	8003776 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e062      	b.n	8003880 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d149      	bne.n	800385c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d0:	2200      	movs	r2, #0
 80037d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f856 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03c      	beq.n	800385c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	623b      	str	r3, [r7, #32]
   return(result);
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
 8003802:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800380e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e6      	bne.n	80037e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3308      	adds	r3, #8
 800381a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	60fb      	str	r3, [r7, #12]
   return(result);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003834:	61fa      	str	r2, [r7, #28]
 8003836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	617b      	str	r3, [r7, #20]
   return(result);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e011      	b.n	8003880 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3758      	adds	r7, #88	@ 0x58
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003898:	e04f      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d04b      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fd f973 	bl	8000b8c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e04e      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d037      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b80      	cmp	r3, #128	@ 0x80
 80038ce:	d034      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d031      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d110      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2208      	movs	r2, #8
 80038ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f838 	bl	8003962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2208      	movs	r2, #8
 80038f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e029      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003914:	d111      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800391e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f81e 	bl	8003962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e00f      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0a0      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003962:	b480      	push	{r7}
 8003964:	b095      	sub	sp, #84	@ 0x54
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800397e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003988:	643b      	str	r3, [r7, #64]	@ 0x40
 800398a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800398e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e6      	bne.n	800396a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3308      	adds	r3, #8
 80039a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e5      	bne.n	800399c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d118      	bne.n	8003a0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f023 0310 	bic.w	r3, r3, #16
 80039ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	613b      	str	r3, [r7, #16]
   return(result);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e6      	bne.n	80039d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a1e:	bf00      	nop
 8003a20:	3754      	adds	r7, #84	@ 0x54
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7ff fb05 	bl	8003058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6979      	ldr	r1, [r7, #20]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e6      	bne.n	8003a5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fad1 	bl	8003044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa2:	bf00      	nop
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ad0:	2b84      	cmp	r3, #132	@ 0x84
 8003ad2:	d005      	beq.n	8003ae0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ad4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	3303      	adds	r3, #3
 8003ade:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003af2:	f000 fae5 	bl	80040c0 <vTaskStartScheduler>
  
  return osOK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}

08003afc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afe:	b089      	sub	sp, #36	@ 0x24
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d020      	beq.n	8003b50 <osThreadCreate+0x54>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01c      	beq.n	8003b50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685c      	ldr	r4, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691e      	ldr	r6, [r3, #16]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ffc8 	bl	8003abe <makeFreeRtosPriority>
 8003b2e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b38:	9202      	str	r2, [sp, #8]
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	9100      	str	r1, [sp, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4632      	mov	r2, r6
 8003b42:	4629      	mov	r1, r5
 8003b44:	4620      	mov	r0, r4
 8003b46:	f000 f8ed 	bl	8003d24 <xTaskCreateStatic>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	e01c      	b.n	8003b8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685c      	ldr	r4, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b5c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ffaa 	bl	8003abe <makeFreeRtosPriority>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	9200      	str	r2, [sp, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4632      	mov	r2, r6
 8003b78:	4629      	mov	r1, r5
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 f932 	bl	8003de4 <xTaskCreate>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d001      	beq.n	8003b8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <osDelay+0x16>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	e000      	b.n	8003bac <osDelay+0x18>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fa51 	bl	8004054 <vTaskDelay>
  
  return osOK;
 8003bb2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f103 0208 	add.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f103 0208 	add.w	r2, r3, #8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f103 0208 	add.w	r2, r3, #8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d103      	bne.n	8003c7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e00c      	b.n	8003c98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3308      	adds	r3, #8
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e002      	b.n	8003c8c <vListInsert+0x2e>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d2f6      	bcs.n	8003c86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	601a      	str	r2, [r3, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6892      	ldr	r2, [r2, #8]
 8003ce6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6852      	ldr	r2, [r2, #4]
 8003cf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d103      	bne.n	8003d04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1e5a      	subs	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	@ 0x38
 8003d28:	af04      	add	r7, sp, #16
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	61fb      	str	r3, [r7, #28]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d6e:	2354      	movs	r3, #84	@ 0x54
 8003d70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b54      	cmp	r3, #84	@ 0x54
 8003d76:	d00b      	beq.n	8003d90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	61bb      	str	r3, [r7, #24]
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d01e      	beq.n	8003dd6 <xTaskCreateStatic+0xb2>
 8003d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01b      	beq.n	8003dd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003da6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003db0:	2300      	movs	r3, #0
 8003db2:	9303      	str	r3, [sp, #12]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	9302      	str	r3, [sp, #8]
 8003db8:	f107 0314 	add.w	r3, r7, #20
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f850 	bl	8003e6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dd0:	f000 f8d6 	bl	8003f80 <prvAddNewTaskToReadyList>
 8003dd4:	e001      	b.n	8003dda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dda:	697b      	ldr	r3, [r7, #20]
	}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3728      	adds	r7, #40	@ 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	@ 0x30
 8003de8:	af04      	add	r7, sp, #16
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 feed 	bl	8004bd8 <pvPortMalloc>
 8003dfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e06:	2054      	movs	r0, #84	@ 0x54
 8003e08:	f000 fee6 	bl	8004bd8 <pvPortMalloc>
 8003e0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e1a:	e005      	b.n	8003e28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e1c:	6978      	ldr	r0, [r7, #20]
 8003e1e:	f000 ffa9 	bl	8004d74 <vPortFree>
 8003e22:	e001      	b.n	8003e28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d017      	beq.n	8003e5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9303      	str	r3, [sp, #12]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	9302      	str	r3, [sp, #8]
 8003e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f80e 	bl	8003e6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e52:	69f8      	ldr	r0, [r7, #28]
 8003e54:	f000 f894 	bl	8003f80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e002      	b.n	8003e64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e64:	69bb      	ldr	r3, [r7, #24]
	}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b088      	sub	sp, #32
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e86:	3b01      	subs	r3, #1
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f023 0307 	bic.w	r3, r3, #7
 8003e94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	617b      	str	r3, [r7, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01f      	beq.n	8003efe <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e012      	b.n	8003eea <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	7819      	ldrb	r1, [r3, #0]
 8003ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3334      	adds	r3, #52	@ 0x34
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2b0f      	cmp	r3, #15
 8003eee:	d9e9      	bls.n	8003ec4 <prvInitialiseNewTask+0x56>
 8003ef0:	e000      	b.n	8003ef4 <prvInitialiseNewTask+0x86>
			{
				break;
 8003ef2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003efc:	e003      	b.n	8003f06 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	2b06      	cmp	r3, #6
 8003f0a:	d901      	bls.n	8003f10 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f0c:	2306      	movs	r3, #6
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f14:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f1a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	2200      	movs	r2, #0
 8003f20:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	3304      	adds	r3, #4
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fe68 	bl	8003bfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	3318      	adds	r3, #24
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fe63 	bl	8003bfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3e:	f1c3 0207 	rsb	r2, r3, #7
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4e:	2200      	movs	r2, #0
 8003f50:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	69b8      	ldr	r0, [r7, #24]
 8003f60:	f000 fc2c 	bl	80047bc <pxPortInitialiseStack>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f76:	bf00      	nop
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f88:	f000 fd46 	bl	8004a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004038 <prvAddNewTaskToReadyList+0xb8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	4a29      	ldr	r2, [pc, #164]	@ (8004038 <prvAddNewTaskToReadyList+0xb8>)
 8003f94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f96:	4b29      	ldr	r3, [pc, #164]	@ (800403c <prvAddNewTaskToReadyList+0xbc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f9e:	4a27      	ldr	r2, [pc, #156]	@ (800403c <prvAddNewTaskToReadyList+0xbc>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fa4:	4b24      	ldr	r3, [pc, #144]	@ (8004038 <prvAddNewTaskToReadyList+0xb8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d110      	bne.n	8003fce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fac:	f000 fac4 	bl	8004538 <prvInitialiseTaskLists>
 8003fb0:	e00d      	b.n	8003fce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fb2:	4b23      	ldr	r3, [pc, #140]	@ (8004040 <prvAddNewTaskToReadyList+0xc0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fba:	4b20      	ldr	r3, [pc, #128]	@ (800403c <prvAddNewTaskToReadyList+0xbc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d802      	bhi.n	8003fce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <prvAddNewTaskToReadyList+0xbc>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fce:	4b1d      	ldr	r3, [pc, #116]	@ (8004044 <prvAddNewTaskToReadyList+0xc4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <prvAddNewTaskToReadyList+0xc4>)
 8003fd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	2201      	movs	r2, #1
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	4b19      	ldr	r3, [pc, #100]	@ (8004048 <prvAddNewTaskToReadyList+0xc8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <prvAddNewTaskToReadyList+0xc8>)
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4a15      	ldr	r2, [pc, #84]	@ (800404c <prvAddNewTaskToReadyList+0xcc>)
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7ff fe08 	bl	8003c16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004006:	f000 fd39 	bl	8004a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <prvAddNewTaskToReadyList+0xc0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00e      	beq.n	8004030 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004012:	4b0a      	ldr	r3, [pc, #40]	@ (800403c <prvAddNewTaskToReadyList+0xbc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	429a      	cmp	r2, r3
 800401e:	d207      	bcs.n	8004030 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <prvAddNewTaskToReadyList+0xd0>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000470 	.word	0x20000470
 800403c:	20000370 	.word	0x20000370
 8004040:	2000047c 	.word	0x2000047c
 8004044:	2000048c 	.word	0x2000048c
 8004048:	20000478 	.word	0x20000478
 800404c:	20000374 	.word	0x20000374
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d018      	beq.n	8004098 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004066:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <vTaskDelay+0x64>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <vTaskDelay+0x32>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60bb      	str	r3, [r7, #8]
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	e7fd      	b.n	8004082 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004086:	f000 f87d 	bl	8004184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800408a:	2100      	movs	r1, #0
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fb2f 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004092:	f000 f885 	bl	80041a0 <xTaskResumeAll>
 8004096:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800409e:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <vTaskDelay+0x68>)
 80040a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000498 	.word	0x20000498
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	@ 0x28
 80040c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040ce:	463a      	mov	r2, r7
 80040d0:	1d39      	adds	r1, r7, #4
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fc f9f2 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	9202      	str	r2, [sp, #8]
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	460a      	mov	r2, r1
 80040ee:	491f      	ldr	r1, [pc, #124]	@ (800416c <vTaskStartScheduler+0xac>)
 80040f0:	481f      	ldr	r0, [pc, #124]	@ (8004170 <vTaskStartScheduler+0xb0>)
 80040f2:	f7ff fe17 	bl	8003d24 <xTaskCreateStatic>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004174 <vTaskStartScheduler+0xb4>)
 80040fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <vTaskStartScheduler+0xb4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004104:	2301      	movs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	e001      	b.n	800410e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d116      	bne.n	8004142 <vTaskStartScheduler+0x82>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	613b      	str	r3, [r7, #16]
}
 8004126:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004128:	4b13      	ldr	r3, [pc, #76]	@ (8004178 <vTaskStartScheduler+0xb8>)
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004130:	4b12      	ldr	r3, [pc, #72]	@ (800417c <vTaskStartScheduler+0xbc>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004136:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <vTaskStartScheduler+0xc0>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800413c:	f000 fbc8 	bl	80048d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004140:	e00f      	b.n	8004162 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d10b      	bne.n	8004162 <vTaskStartScheduler+0xa2>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	60fb      	str	r3, [r7, #12]
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	e7fd      	b.n	800415e <vTaskStartScheduler+0x9e>
}
 8004162:	bf00      	nop
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	08005994 	.word	0x08005994
 8004170:	08004509 	.word	0x08004509
 8004174:	20000494 	.word	0x20000494
 8004178:	20000490 	.word	0x20000490
 800417c:	2000047c 	.word	0x2000047c
 8004180:	20000474 	.word	0x20000474

08004184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <vTaskSuspendAll+0x18>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	4a03      	ldr	r2, [pc, #12]	@ (800419c <vTaskSuspendAll+0x18>)
 8004190:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	20000498 	.word	0x20000498

080041a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041ae:	4b42      	ldr	r3, [pc, #264]	@ (80042b8 <xTaskResumeAll+0x118>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10b      	bne.n	80041ce <xTaskResumeAll+0x2e>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	603b      	str	r3, [r7, #0]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041ce:	f000 fc23 	bl	8004a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041d2:	4b39      	ldr	r3, [pc, #228]	@ (80042b8 <xTaskResumeAll+0x118>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	4a37      	ldr	r2, [pc, #220]	@ (80042b8 <xTaskResumeAll+0x118>)
 80041da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041dc:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <xTaskResumeAll+0x118>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d161      	bne.n	80042a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041e4:	4b35      	ldr	r3, [pc, #212]	@ (80042bc <xTaskResumeAll+0x11c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05d      	beq.n	80042a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ec:	e02e      	b.n	800424c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ee:	4b34      	ldr	r3, [pc, #208]	@ (80042c0 <xTaskResumeAll+0x120>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3318      	adds	r3, #24
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fd68 	bl	8003cd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3304      	adds	r3, #4
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fd63 	bl	8003cd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	2201      	movs	r2, #1
 8004210:	409a      	lsls	r2, r3
 8004212:	4b2c      	ldr	r3, [pc, #176]	@ (80042c4 <xTaskResumeAll+0x124>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4313      	orrs	r3, r2
 8004218:	4a2a      	ldr	r2, [pc, #168]	@ (80042c4 <xTaskResumeAll+0x124>)
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4a27      	ldr	r2, [pc, #156]	@ (80042c8 <xTaskResumeAll+0x128>)
 800422a:	441a      	add	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7ff fcef 	bl	8003c16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423c:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <xTaskResumeAll+0x12c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004246:	4b22      	ldr	r3, [pc, #136]	@ (80042d0 <xTaskResumeAll+0x130>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800424c:	4b1c      	ldr	r3, [pc, #112]	@ (80042c0 <xTaskResumeAll+0x120>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1cc      	bne.n	80041ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800425a:	f000 fa0b 	bl	8004674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800425e:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <xTaskResumeAll+0x134>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800426a:	f000 f837 	bl	80042dc <xTaskIncrementTick>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004274:	4b16      	ldr	r3, [pc, #88]	@ (80042d0 <xTaskResumeAll+0x130>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3b01      	subs	r3, #1
 800427e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f1      	bne.n	800426a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004286:	4b13      	ldr	r3, [pc, #76]	@ (80042d4 <xTaskResumeAll+0x134>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800428c:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <xTaskResumeAll+0x130>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004298:	4b0f      	ldr	r3, [pc, #60]	@ (80042d8 <xTaskResumeAll+0x138>)
 800429a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042a8:	f000 fbe8 	bl	8004a7c <vPortExitCritical>

	return xAlreadyYielded;
 80042ac:	68bb      	ldr	r3, [r7, #8]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000498 	.word	0x20000498
 80042bc:	20000470 	.word	0x20000470
 80042c0:	20000430 	.word	0x20000430
 80042c4:	20000478 	.word	0x20000478
 80042c8:	20000374 	.word	0x20000374
 80042cc:	20000370 	.word	0x20000370
 80042d0:	20000484 	.word	0x20000484
 80042d4:	20000480 	.word	0x20000480
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004424 <xTaskIncrementTick+0x148>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 808f 	bne.w	800440e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004428 <xTaskIncrementTick+0x14c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004428 <xTaskIncrementTick+0x14c>)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d121      	bne.n	8004348 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004304:	4b49      	ldr	r3, [pc, #292]	@ (800442c <xTaskIncrementTick+0x150>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <xTaskIncrementTick+0x4a>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	603b      	str	r3, [r7, #0]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <xTaskIncrementTick+0x46>
 8004326:	4b41      	ldr	r3, [pc, #260]	@ (800442c <xTaskIncrementTick+0x150>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	4b40      	ldr	r3, [pc, #256]	@ (8004430 <xTaskIncrementTick+0x154>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3e      	ldr	r2, [pc, #248]	@ (800442c <xTaskIncrementTick+0x150>)
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4a3e      	ldr	r2, [pc, #248]	@ (8004430 <xTaskIncrementTick+0x154>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b3e      	ldr	r3, [pc, #248]	@ (8004434 <xTaskIncrementTick+0x158>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	4a3c      	ldr	r2, [pc, #240]	@ (8004434 <xTaskIncrementTick+0x158>)
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	f000 f996 	bl	8004674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004348:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <xTaskIncrementTick+0x15c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	d348      	bcc.n	80043e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004352:	4b36      	ldr	r3, [pc, #216]	@ (800442c <xTaskIncrementTick+0x150>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435c:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <xTaskIncrementTick+0x15c>)
 800435e:	f04f 32ff 	mov.w	r2, #4294967295
 8004362:	601a      	str	r2, [r3, #0]
					break;
 8004364:	e03e      	b.n	80043e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004366:	4b31      	ldr	r3, [pc, #196]	@ (800442c <xTaskIncrementTick+0x150>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d203      	bcs.n	8004386 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800437e:	4a2e      	ldr	r2, [pc, #184]	@ (8004438 <xTaskIncrementTick+0x15c>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004384:	e02e      	b.n	80043e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3304      	adds	r3, #4
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fca0 	bl	8003cd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	3318      	adds	r3, #24
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fc97 	bl	8003cd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	2201      	movs	r2, #1
 80043a8:	409a      	lsls	r2, r3
 80043aa:	4b24      	ldr	r3, [pc, #144]	@ (800443c <xTaskIncrementTick+0x160>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	4a22      	ldr	r2, [pc, #136]	@ (800443c <xTaskIncrementTick+0x160>)
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004440 <xTaskIncrementTick+0x164>)
 80043c2:	441a      	add	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7ff fc23 	bl	8003c16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004444 <xTaskIncrementTick+0x168>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3b9      	bcc.n	8004352 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e2:	e7b6      	b.n	8004352 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043e4:	4b17      	ldr	r3, [pc, #92]	@ (8004444 <xTaskIncrementTick+0x168>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ea:	4915      	ldr	r1, [pc, #84]	@ (8004440 <xTaskIncrementTick+0x164>)
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d901      	bls.n	8004400 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <xTaskIncrementTick+0x16c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e004      	b.n	8004418 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800440e:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <xTaskIncrementTick+0x170>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	4a0d      	ldr	r2, [pc, #52]	@ (800444c <xTaskIncrementTick+0x170>)
 8004416:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004418:	697b      	ldr	r3, [r7, #20]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000498 	.word	0x20000498
 8004428:	20000474 	.word	0x20000474
 800442c:	20000428 	.word	0x20000428
 8004430:	2000042c 	.word	0x2000042c
 8004434:	20000488 	.word	0x20000488
 8004438:	20000490 	.word	0x20000490
 800443c:	20000478 	.word	0x20000478
 8004440:	20000374 	.word	0x20000374
 8004444:	20000370 	.word	0x20000370
 8004448:	20000484 	.word	0x20000484
 800444c:	20000480 	.word	0x20000480

08004450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004456:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <vTaskSwitchContext+0xa4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800445e:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <vTaskSwitchContext+0xa8>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004464:	e040      	b.n	80044e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004466:	4b24      	ldr	r3, [pc, #144]	@ (80044f8 <vTaskSwitchContext+0xa8>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446c:	4b23      	ldr	r3, [pc, #140]	@ (80044fc <vTaskSwitchContext+0xac>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	f1c3 031f 	rsb	r3, r3, #31
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	491f      	ldr	r1, [pc, #124]	@ (8004500 <vTaskSwitchContext+0xb0>)
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	607b      	str	r3, [r7, #4]
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	e7fd      	b.n	80044aa <vTaskSwitchContext+0x5a>
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4a11      	ldr	r2, [pc, #68]	@ (8004500 <vTaskSwitchContext+0xb0>)
 80044ba:	4413      	add	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3308      	adds	r3, #8
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d104      	bne.n	80044de <vTaskSwitchContext+0x8e>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	605a      	str	r2, [r3, #4]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a07      	ldr	r2, [pc, #28]	@ (8004504 <vTaskSwitchContext+0xb4>)
 80044e6:	6013      	str	r3, [r2, #0]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000498 	.word	0x20000498
 80044f8:	20000484 	.word	0x20000484
 80044fc:	20000478 	.word	0x20000478
 8004500:	20000374 	.word	0x20000374
 8004504:	20000370 	.word	0x20000370

08004508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004510:	f000 f852 	bl	80045b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004514:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <prvIdleTask+0x28>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d9f9      	bls.n	8004510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <prvIdleTask+0x2c>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800452c:	e7f0      	b.n	8004510 <prvIdleTask+0x8>
 800452e:	bf00      	nop
 8004530:	20000374 	.word	0x20000374
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800453e:	2300      	movs	r3, #0
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	e00c      	b.n	800455e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <prvInitialiseTaskLists+0x60>)
 8004550:	4413      	add	r3, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fb32 	bl	8003bbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3301      	adds	r3, #1
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b06      	cmp	r3, #6
 8004562:	d9ef      	bls.n	8004544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004564:	480d      	ldr	r0, [pc, #52]	@ (800459c <prvInitialiseTaskLists+0x64>)
 8004566:	f7ff fb29 	bl	8003bbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800456a:	480d      	ldr	r0, [pc, #52]	@ (80045a0 <prvInitialiseTaskLists+0x68>)
 800456c:	f7ff fb26 	bl	8003bbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004570:	480c      	ldr	r0, [pc, #48]	@ (80045a4 <prvInitialiseTaskLists+0x6c>)
 8004572:	f7ff fb23 	bl	8003bbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004576:	480c      	ldr	r0, [pc, #48]	@ (80045a8 <prvInitialiseTaskLists+0x70>)
 8004578:	f7ff fb20 	bl	8003bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800457c:	480b      	ldr	r0, [pc, #44]	@ (80045ac <prvInitialiseTaskLists+0x74>)
 800457e:	f7ff fb1d 	bl	8003bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <prvInitialiseTaskLists+0x78>)
 8004584:	4a05      	ldr	r2, [pc, #20]	@ (800459c <prvInitialiseTaskLists+0x64>)
 8004586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004588:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <prvInitialiseTaskLists+0x7c>)
 800458a:	4a05      	ldr	r2, [pc, #20]	@ (80045a0 <prvInitialiseTaskLists+0x68>)
 800458c:	601a      	str	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000374 	.word	0x20000374
 800459c:	20000400 	.word	0x20000400
 80045a0:	20000414 	.word	0x20000414
 80045a4:	20000430 	.word	0x20000430
 80045a8:	20000444 	.word	0x20000444
 80045ac:	2000045c 	.word	0x2000045c
 80045b0:	20000428 	.word	0x20000428
 80045b4:	2000042c 	.word	0x2000042c

080045b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045be:	e019      	b.n	80045f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045c0:	f000 fa2a 	bl	8004a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c4:	4b10      	ldr	r3, [pc, #64]	@ (8004608 <prvCheckTasksWaitingTermination+0x50>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fb7d 	bl	8003cd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045d6:	4b0d      	ldr	r3, [pc, #52]	@ (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	4a0b      	ldr	r2, [pc, #44]	@ (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <prvCheckTasksWaitingTermination+0x58>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004610 <prvCheckTasksWaitingTermination+0x58>)
 80045e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045ea:	f000 fa47 	bl	8004a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f810 	bl	8004614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <prvCheckTasksWaitingTermination+0x58>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e1      	bne.n	80045c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000444 	.word	0x20000444
 800460c:	20000470 	.word	0x20000470
 8004610:	20000458 	.word	0x20000458

08004614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004622:	2b00      	cmp	r3, #0
 8004624:	d108      	bne.n	8004638 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fba2 	bl	8004d74 <vPortFree>
				vPortFree( pxTCB );
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fb9f 	bl	8004d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004636:	e019      	b.n	800466c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800463e:	2b01      	cmp	r3, #1
 8004640:	d103      	bne.n	800464a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fb96 	bl	8004d74 <vPortFree>
	}
 8004648:	e010      	b.n	800466c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004650:	2b02      	cmp	r3, #2
 8004652:	d00b      	beq.n	800466c <prvDeleteTCB+0x58>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	60fb      	str	r3, [r7, #12]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <prvDeleteTCB+0x54>
	}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800467a:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <prvResetNextTaskUnblockTime+0x38>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004684:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004686:	f04f 32ff 	mov.w	r2, #4294967295
 800468a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800468c:	e008      	b.n	80046a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800468e:	4b07      	ldr	r3, [pc, #28]	@ (80046ac <prvResetNextTaskUnblockTime+0x38>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4a04      	ldr	r2, [pc, #16]	@ (80046b0 <prvResetNextTaskUnblockTime+0x3c>)
 800469e:	6013      	str	r3, [r2, #0]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	20000428 	.word	0x20000428
 80046b0:	20000490 	.word	0x20000490

080046b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046ba:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <xTaskGetSchedulerState+0x34>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046c2:	2301      	movs	r3, #1
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	e008      	b.n	80046da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c8:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <xTaskGetSchedulerState+0x38>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046d0:	2302      	movs	r3, #2
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e001      	b.n	80046da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046da:	687b      	ldr	r3, [r7, #4]
	}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	2000047c 	.word	0x2000047c
 80046ec:	20000498 	.word	0x20000498

080046f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046fa:	4b29      	ldr	r3, [pc, #164]	@ (80047a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004700:	4b28      	ldr	r3, [pc, #160]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fae2 	bl	8003cd0 <uxListRemove>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004712:	4b24      	ldr	r3, [pc, #144]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	2201      	movs	r2, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	4b21      	ldr	r3, [pc, #132]	@ (80047a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4013      	ands	r3, r2
 8004726:	4a20      	ldr	r2, [pc, #128]	@ (80047a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004728:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d10a      	bne.n	8004748 <prvAddCurrentTaskToDelayedList+0x58>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004738:	4b1a      	ldr	r3, [pc, #104]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3304      	adds	r3, #4
 800473e:	4619      	mov	r1, r3
 8004740:	481a      	ldr	r0, [pc, #104]	@ (80047ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8004742:	f7ff fa68 	bl	8003c16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004746:	e026      	b.n	8004796 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004750:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	429a      	cmp	r2, r3
 800475e:	d209      	bcs.n	8004774 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004760:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b0f      	ldr	r3, [pc, #60]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7ff fa76 	bl	8003c5e <vListInsert>
}
 8004772:	e010      	b.n	8004796 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7ff fa6c 	bl	8003c5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	429a      	cmp	r2, r3
 800478e:	d202      	bcs.n	8004796 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004790:	4a09      	ldr	r2, [pc, #36]	@ (80047b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6013      	str	r3, [r2, #0]
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000474 	.word	0x20000474
 80047a4:	20000370 	.word	0x20000370
 80047a8:	20000478 	.word	0x20000478
 80047ac:	2000045c 	.word	0x2000045c
 80047b0:	2000042c 	.word	0x2000042c
 80047b4:	20000428 	.word	0x20000428
 80047b8:	20000490 	.word	0x20000490

080047bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3b04      	subs	r3, #4
 80047cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3b04      	subs	r3, #4
 80047da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3b04      	subs	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004820 <pxPortInitialiseStack+0x64>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3b14      	subs	r3, #20
 80047f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3b04      	subs	r3, #4
 8004802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f06f 0202 	mvn.w	r2, #2
 800480a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3b20      	subs	r3, #32
 8004810:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004812:	68fb      	ldr	r3, [r7, #12]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	08004825 	.word	0x08004825

08004824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800482e:	4b13      	ldr	r3, [pc, #76]	@ (800487c <prvTaskExitError+0x58>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d00b      	beq.n	8004850 <prvTaskExitError+0x2c>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <prvTaskExitError+0x28>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60bb      	str	r3, [r7, #8]
}
 8004862:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004864:	bf00      	nop
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0fc      	beq.n	8004866 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	2000000c 	.word	0x2000000c

08004880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004880:	4b07      	ldr	r3, [pc, #28]	@ (80048a0 <pxCurrentTCBConst2>)
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	6808      	ldr	r0, [r1, #0]
 8004886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488a:	f380 8809 	msr	PSP, r0
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8811 	msr	BASEPRI, r0
 800489a:	4770      	bx	lr
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst2>:
 80048a0:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048a8:	4808      	ldr	r0, [pc, #32]	@ (80048cc <prvPortStartFirstTask+0x24>)
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	6800      	ldr	r0, [r0, #0]
 80048ae:	f380 8808 	msr	MSP, r0
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8814 	msr	CONTROL, r0
 80048ba:	b662      	cpsie	i
 80048bc:	b661      	cpsie	f
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	df00      	svc	0
 80048c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048ca:	bf00      	nop
 80048cc:	e000ed08 	.word	0xe000ed08

080048d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048d6:	4b47      	ldr	r3, [pc, #284]	@ (80049f4 <xPortStartScheduler+0x124>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a47      	ldr	r2, [pc, #284]	@ (80049f8 <xPortStartScheduler+0x128>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10b      	bne.n	80048f8 <xPortStartScheduler+0x28>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	613b      	str	r3, [r7, #16]
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048f8:	4b3e      	ldr	r3, [pc, #248]	@ (80049f4 <xPortStartScheduler+0x124>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a3f      	ldr	r2, [pc, #252]	@ (80049fc <xPortStartScheduler+0x12c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d10b      	bne.n	800491a <xPortStartScheduler+0x4a>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	60fb      	str	r3, [r7, #12]
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	e7fd      	b.n	8004916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800491a:	4b39      	ldr	r3, [pc, #228]	@ (8004a00 <xPortStartScheduler+0x130>)
 800491c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	22ff      	movs	r2, #255	@ 0xff
 800492a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4b31      	ldr	r3, [pc, #196]	@ (8004a04 <xPortStartScheduler+0x134>)
 8004940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004942:	4b31      	ldr	r3, [pc, #196]	@ (8004a08 <xPortStartScheduler+0x138>)
 8004944:	2207      	movs	r2, #7
 8004946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004948:	e009      	b.n	800495e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800494a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a08 <xPortStartScheduler+0x138>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3b01      	subs	r3, #1
 8004950:	4a2d      	ldr	r2, [pc, #180]	@ (8004a08 <xPortStartScheduler+0x138>)
 8004952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	b2db      	uxtb	r3, r3
 800495c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b80      	cmp	r3, #128	@ 0x80
 8004968:	d0ef      	beq.n	800494a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800496a:	4b27      	ldr	r3, [pc, #156]	@ (8004a08 <xPortStartScheduler+0x138>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f1c3 0307 	rsb	r3, r3, #7
 8004972:	2b04      	cmp	r3, #4
 8004974:	d00b      	beq.n	800498e <xPortStartScheduler+0xbe>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	60bb      	str	r3, [r7, #8]
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	e7fd      	b.n	800498a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800498e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a08 <xPortStartScheduler+0x138>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	4a1c      	ldr	r2, [pc, #112]	@ (8004a08 <xPortStartScheduler+0x138>)
 8004996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004998:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <xPortStartScheduler+0x138>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049a0:	4a19      	ldr	r2, [pc, #100]	@ (8004a08 <xPortStartScheduler+0x138>)
 80049a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049ac:	4b17      	ldr	r3, [pc, #92]	@ (8004a0c <xPortStartScheduler+0x13c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a16      	ldr	r2, [pc, #88]	@ (8004a0c <xPortStartScheduler+0x13c>)
 80049b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049b8:	4b14      	ldr	r3, [pc, #80]	@ (8004a0c <xPortStartScheduler+0x13c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a13      	ldr	r2, [pc, #76]	@ (8004a0c <xPortStartScheduler+0x13c>)
 80049be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049c4:	f000 f8da 	bl	8004b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049c8:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <xPortStartScheduler+0x140>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049ce:	f000 f8f9 	bl	8004bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049d2:	4b10      	ldr	r3, [pc, #64]	@ (8004a14 <xPortStartScheduler+0x144>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004a14 <xPortStartScheduler+0x144>)
 80049d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049de:	f7ff ff63 	bl	80048a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049e2:	f7ff fd35 	bl	8004450 <vTaskSwitchContext>
	prvTaskExitError();
 80049e6:	f7ff ff1d 	bl	8004824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	e000ed00 	.word	0xe000ed00
 80049f8:	410fc271 	.word	0x410fc271
 80049fc:	410fc270 	.word	0x410fc270
 8004a00:	e000e400 	.word	0xe000e400
 8004a04:	2000049c 	.word	0x2000049c
 8004a08:	200004a0 	.word	0x200004a0
 8004a0c:	e000ed20 	.word	0xe000ed20
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	e000ef34 	.word	0xe000ef34

08004a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
}
 8004a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a32:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <vPortEnterCritical+0x5c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3301      	adds	r3, #1
 8004a38:	4a0e      	ldr	r2, [pc, #56]	@ (8004a74 <vPortEnterCritical+0x5c>)
 8004a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <vPortEnterCritical+0x5c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d110      	bne.n	8004a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a44:	4b0c      	ldr	r3, [pc, #48]	@ (8004a78 <vPortEnterCritical+0x60>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	603b      	str	r3, [r7, #0]
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	e7fd      	b.n	8004a62 <vPortEnterCritical+0x4a>
	}
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a82:	4b12      	ldr	r3, [pc, #72]	@ (8004acc <vPortExitCritical+0x50>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10b      	bne.n	8004aa2 <vPortExitCritical+0x26>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	607b      	str	r3, [r7, #4]
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	e7fd      	b.n	8004a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <vPortExitCritical+0x50>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	4a08      	ldr	r2, [pc, #32]	@ (8004acc <vPortExitCritical+0x50>)
 8004aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aac:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <vPortExitCritical+0x50>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <vPortExitCritical+0x44>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	2000000c 	.word	0x2000000c

08004ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ad0:	f3ef 8009 	mrs	r0, PSP
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4b15      	ldr	r3, [pc, #84]	@ (8004b30 <pxCurrentTCBConst>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f01e 0f10 	tst.w	lr, #16
 8004ae0:	bf08      	it	eq
 8004ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004af4:	f380 8811 	msr	BASEPRI, r0
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f7ff fca6 	bl	8004450 <vTaskSwitchContext>
 8004b04:	f04f 0000 	mov.w	r0, #0
 8004b08:	f380 8811 	msr	BASEPRI, r0
 8004b0c:	bc09      	pop	{r0, r3}
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	6808      	ldr	r0, [r1, #0]
 8004b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b16:	f01e 0f10 	tst.w	lr, #16
 8004b1a:	bf08      	it	eq
 8004b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b20:	f380 8809 	msr	PSP, r0
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst>:
 8004b30:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	607b      	str	r3, [r7, #4]
}
 8004b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b52:	f7ff fbc3 	bl	80042dc <xTaskIncrementTick>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <xPortSysTickHandler+0x40>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	2300      	movs	r3, #0
 8004b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f383 8811 	msr	BASEPRI, r3
}
 8004b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b86:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <vPortSetupTimerInterrupt+0x38>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <vPortSetupTimerInterrupt+0x3c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0a      	ldr	r2, [pc, #40]	@ (8004bbc <vPortSetupTimerInterrupt+0x40>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	4a09      	ldr	r2, [pc, #36]	@ (8004bc0 <vPortSetupTimerInterrupt+0x44>)
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b9e:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	601a      	str	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e010 	.word	0xe000e010
 8004bb4:	e000e018 	.word	0xe000e018
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	10624dd3 	.word	0x10624dd3
 8004bc0:	e000e014 	.word	0xe000e014

08004bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004bd4 <vPortEnableVFP+0x10>
 8004bc8:	6801      	ldr	r1, [r0, #0]
 8004bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004bce:	6001      	str	r1, [r0, #0]
 8004bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bd2:	bf00      	nop
 8004bd4:	e000ed88 	.word	0xe000ed88

08004bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	@ 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004be4:	f7ff face 	bl	8004184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004be8:	4b5c      	ldr	r3, [pc, #368]	@ (8004d5c <pvPortMalloc+0x184>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bf0:	f000 f924 	bl	8004e3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d60 <pvPortMalloc+0x188>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 8095 	bne.w	8004d2c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01e      	beq.n	8004c46 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004c08:	2208      	movs	r2, #8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d015      	beq.n	8004c46 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f023 0307 	bic.w	r3, r3, #7
 8004c20:	3308      	adds	r3, #8
 8004c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <pvPortMalloc+0x6e>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	617b      	str	r3, [r7, #20]
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	e7fd      	b.n	8004c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d06f      	beq.n	8004d2c <pvPortMalloc+0x154>
 8004c4c:	4b45      	ldr	r3, [pc, #276]	@ (8004d64 <pvPortMalloc+0x18c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d86a      	bhi.n	8004d2c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c56:	4b44      	ldr	r3, [pc, #272]	@ (8004d68 <pvPortMalloc+0x190>)
 8004c58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c5a:	4b43      	ldr	r3, [pc, #268]	@ (8004d68 <pvPortMalloc+0x190>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c60:	e004      	b.n	8004c6c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d903      	bls.n	8004c7e <pvPortMalloc+0xa6>
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f1      	bne.n	8004c62 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c7e:	4b37      	ldr	r3, [pc, #220]	@ (8004d5c <pvPortMalloc+0x184>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d051      	beq.n	8004d2c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	4413      	add	r3, r2
 8004c90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	1ad2      	subs	r2, r2, r3
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d920      	bls.n	8004cec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00b      	beq.n	8004cd4 <pvPortMalloc+0xfc>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	613b      	str	r3, [r7, #16]
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ce6:	69b8      	ldr	r0, [r7, #24]
 8004ce8:	f000 f90a 	bl	8004f00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cec:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <pvPortMalloc+0x18c>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <pvPortMalloc+0x18c>)
 8004cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8004d64 <pvPortMalloc+0x18c>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004d6c <pvPortMalloc+0x194>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d203      	bcs.n	8004d0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d06:	4b17      	ldr	r3, [pc, #92]	@ (8004d64 <pvPortMalloc+0x18c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	@ (8004d6c <pvPortMalloc+0x194>)
 8004d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <pvPortMalloc+0x188>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d22:	4b13      	ldr	r3, [pc, #76]	@ (8004d70 <pvPortMalloc+0x198>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	4a11      	ldr	r2, [pc, #68]	@ (8004d70 <pvPortMalloc+0x198>)
 8004d2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d2c:	f7ff fa38 	bl	80041a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <pvPortMalloc+0x17a>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	60fb      	str	r3, [r7, #12]
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	e7fd      	b.n	8004d4e <pvPortMalloc+0x176>
	return pvReturn;
 8004d52:	69fb      	ldr	r3, [r7, #28]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3728      	adds	r7, #40	@ 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20001064 	.word	0x20001064
 8004d60:	20001078 	.word	0x20001078
 8004d64:	20001068 	.word	0x20001068
 8004d68:	2000105c 	.word	0x2000105c
 8004d6c:	2000106c 	.word	0x2000106c
 8004d70:	20001070 	.word	0x20001070

08004d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04f      	beq.n	8004e26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d86:	2308      	movs	r3, #8
 8004d88:	425b      	negs	r3, r3
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	4b25      	ldr	r3, [pc, #148]	@ (8004e30 <vPortFree+0xbc>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <vPortFree+0x46>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60fb      	str	r3, [r7, #12]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <vPortFree+0x66>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60bb      	str	r3, [r7, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <vPortFree+0xbc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01e      	beq.n	8004e26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11a      	bne.n	8004e26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e30 <vPortFree+0xbc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e00:	f7ff f9c0 	bl	8004184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <vPortFree+0xc0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	4a09      	ldr	r2, [pc, #36]	@ (8004e34 <vPortFree+0xc0>)
 8004e10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e12:	6938      	ldr	r0, [r7, #16]
 8004e14:	f000 f874 	bl	8004f00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e18:	4b07      	ldr	r3, [pc, #28]	@ (8004e38 <vPortFree+0xc4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	4a06      	ldr	r2, [pc, #24]	@ (8004e38 <vPortFree+0xc4>)
 8004e20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e22:	f7ff f9bd 	bl	80041a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e26:	bf00      	nop
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20001078 	.word	0x20001078
 8004e34:	20001068 	.word	0x20001068
 8004e38:	20001074 	.word	0x20001074

08004e3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e42:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004e46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e48:	4b27      	ldr	r3, [pc, #156]	@ (8004ee8 <prvHeapInit+0xac>)
 8004e4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3307      	adds	r3, #7
 8004e5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee8 <prvHeapInit+0xac>)
 8004e6c:	4413      	add	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e74:	4a1d      	ldr	r2, [pc, #116]	@ (8004eec <prvHeapInit+0xb0>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <prvHeapInit+0xb0>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	4413      	add	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e88:	2208      	movs	r2, #8
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0307 	bic.w	r3, r3, #7
 8004e96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ef0 <prvHeapInit+0xb4>)
 8004e9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e9e:	4b14      	ldr	r3, [pc, #80]	@ (8004ef0 <prvHeapInit+0xb4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ea6:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <prvHeapInit+0xb4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	1ad2      	subs	r2, r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef0 <prvHeapInit+0xb4>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef4 <prvHeapInit+0xb8>)
 8004eca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a09      	ldr	r2, [pc, #36]	@ (8004ef8 <prvHeapInit+0xbc>)
 8004ed2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ed4:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <prvHeapInit+0xc0>)
 8004ed6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004eda:	601a      	str	r2, [r3, #0]
}
 8004edc:	bf00      	nop
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	200004a4 	.word	0x200004a4
 8004eec:	2000105c 	.word	0x2000105c
 8004ef0:	20001064 	.word	0x20001064
 8004ef4:	2000106c 	.word	0x2000106c
 8004ef8:	20001068 	.word	0x20001068
 8004efc:	20001078 	.word	0x20001078

08004f00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f08:	4b28      	ldr	r3, [pc, #160]	@ (8004fac <prvInsertBlockIntoFreeList+0xac>)
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e002      	b.n	8004f14 <prvInsertBlockIntoFreeList+0x14>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d8f7      	bhi.n	8004f0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	4413      	add	r3, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d108      	bne.n	8004f42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	441a      	add	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d118      	bne.n	8004f88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d00d      	beq.n	8004f7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	e008      	b.n	8004f90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e003      	b.n	8004f90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d002      	beq.n	8004f9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	2000105c 	.word	0x2000105c
 8004fb0:	20001064 	.word	0x20001064

08004fb4 <std>:
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	b510      	push	{r4, lr}
 8004fb8:	4604      	mov	r4, r0
 8004fba:	e9c0 3300 	strd	r3, r3, [r0]
 8004fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fc2:	6083      	str	r3, [r0, #8]
 8004fc4:	8181      	strh	r1, [r0, #12]
 8004fc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fc8:	81c2      	strh	r2, [r0, #14]
 8004fca:	6183      	str	r3, [r0, #24]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	2208      	movs	r2, #8
 8004fd0:	305c      	adds	r0, #92	@ 0x5c
 8004fd2:	f000 f9e7 	bl	80053a4 <memset>
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800500c <std+0x58>)
 8004fd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fda:	4b0d      	ldr	r3, [pc, #52]	@ (8005010 <std+0x5c>)
 8004fdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fde:	4b0d      	ldr	r3, [pc, #52]	@ (8005014 <std+0x60>)
 8004fe0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <std+0x64>)
 8004fe4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800501c <std+0x68>)
 8004fe8:	6224      	str	r4, [r4, #32]
 8004fea:	429c      	cmp	r4, r3
 8004fec:	d006      	beq.n	8004ffc <std+0x48>
 8004fee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ff2:	4294      	cmp	r4, r2
 8004ff4:	d002      	beq.n	8004ffc <std+0x48>
 8004ff6:	33d0      	adds	r3, #208	@ 0xd0
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	d105      	bne.n	8005008 <std+0x54>
 8004ffc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005004:	f000 ba46 	b.w	8005494 <__retarget_lock_init_recursive>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	bf00      	nop
 800500c:	080051f5 	.word	0x080051f5
 8005010:	08005217 	.word	0x08005217
 8005014:	0800524f 	.word	0x0800524f
 8005018:	08005273 	.word	0x08005273
 800501c:	2000107c 	.word	0x2000107c

08005020 <stdio_exit_handler>:
 8005020:	4a02      	ldr	r2, [pc, #8]	@ (800502c <stdio_exit_handler+0xc>)
 8005022:	4903      	ldr	r1, [pc, #12]	@ (8005030 <stdio_exit_handler+0x10>)
 8005024:	4803      	ldr	r0, [pc, #12]	@ (8005034 <stdio_exit_handler+0x14>)
 8005026:	f000 b869 	b.w	80050fc <_fwalk_sglue>
 800502a:	bf00      	nop
 800502c:	20000010 	.word	0x20000010
 8005030:	08005795 	.word	0x08005795
 8005034:	20000020 	.word	0x20000020

08005038 <cleanup_stdio>:
 8005038:	6841      	ldr	r1, [r0, #4]
 800503a:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <cleanup_stdio+0x34>)
 800503c:	4299      	cmp	r1, r3
 800503e:	b510      	push	{r4, lr}
 8005040:	4604      	mov	r4, r0
 8005042:	d001      	beq.n	8005048 <cleanup_stdio+0x10>
 8005044:	f000 fba6 	bl	8005794 <_fflush_r>
 8005048:	68a1      	ldr	r1, [r4, #8]
 800504a:	4b09      	ldr	r3, [pc, #36]	@ (8005070 <cleanup_stdio+0x38>)
 800504c:	4299      	cmp	r1, r3
 800504e:	d002      	beq.n	8005056 <cleanup_stdio+0x1e>
 8005050:	4620      	mov	r0, r4
 8005052:	f000 fb9f 	bl	8005794 <_fflush_r>
 8005056:	68e1      	ldr	r1, [r4, #12]
 8005058:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <cleanup_stdio+0x3c>)
 800505a:	4299      	cmp	r1, r3
 800505c:	d004      	beq.n	8005068 <cleanup_stdio+0x30>
 800505e:	4620      	mov	r0, r4
 8005060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005064:	f000 bb96 	b.w	8005794 <_fflush_r>
 8005068:	bd10      	pop	{r4, pc}
 800506a:	bf00      	nop
 800506c:	2000107c 	.word	0x2000107c
 8005070:	200010e4 	.word	0x200010e4
 8005074:	2000114c 	.word	0x2000114c

08005078 <global_stdio_init.part.0>:
 8005078:	b510      	push	{r4, lr}
 800507a:	4b0b      	ldr	r3, [pc, #44]	@ (80050a8 <global_stdio_init.part.0+0x30>)
 800507c:	4c0b      	ldr	r4, [pc, #44]	@ (80050ac <global_stdio_init.part.0+0x34>)
 800507e:	4a0c      	ldr	r2, [pc, #48]	@ (80050b0 <global_stdio_init.part.0+0x38>)
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	4620      	mov	r0, r4
 8005084:	2200      	movs	r2, #0
 8005086:	2104      	movs	r1, #4
 8005088:	f7ff ff94 	bl	8004fb4 <std>
 800508c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005090:	2201      	movs	r2, #1
 8005092:	2109      	movs	r1, #9
 8005094:	f7ff ff8e 	bl	8004fb4 <std>
 8005098:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800509c:	2202      	movs	r2, #2
 800509e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a2:	2112      	movs	r1, #18
 80050a4:	f7ff bf86 	b.w	8004fb4 <std>
 80050a8:	200011b4 	.word	0x200011b4
 80050ac:	2000107c 	.word	0x2000107c
 80050b0:	08005021 	.word	0x08005021

080050b4 <__sfp_lock_acquire>:
 80050b4:	4801      	ldr	r0, [pc, #4]	@ (80050bc <__sfp_lock_acquire+0x8>)
 80050b6:	f000 b9ee 	b.w	8005496 <__retarget_lock_acquire_recursive>
 80050ba:	bf00      	nop
 80050bc:	200011bd 	.word	0x200011bd

080050c0 <__sfp_lock_release>:
 80050c0:	4801      	ldr	r0, [pc, #4]	@ (80050c8 <__sfp_lock_release+0x8>)
 80050c2:	f000 b9e9 	b.w	8005498 <__retarget_lock_release_recursive>
 80050c6:	bf00      	nop
 80050c8:	200011bd 	.word	0x200011bd

080050cc <__sinit>:
 80050cc:	b510      	push	{r4, lr}
 80050ce:	4604      	mov	r4, r0
 80050d0:	f7ff fff0 	bl	80050b4 <__sfp_lock_acquire>
 80050d4:	6a23      	ldr	r3, [r4, #32]
 80050d6:	b11b      	cbz	r3, 80050e0 <__sinit+0x14>
 80050d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050dc:	f7ff bff0 	b.w	80050c0 <__sfp_lock_release>
 80050e0:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <__sinit+0x28>)
 80050e2:	6223      	str	r3, [r4, #32]
 80050e4:	4b04      	ldr	r3, [pc, #16]	@ (80050f8 <__sinit+0x2c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f5      	bne.n	80050d8 <__sinit+0xc>
 80050ec:	f7ff ffc4 	bl	8005078 <global_stdio_init.part.0>
 80050f0:	e7f2      	b.n	80050d8 <__sinit+0xc>
 80050f2:	bf00      	nop
 80050f4:	08005039 	.word	0x08005039
 80050f8:	200011b4 	.word	0x200011b4

080050fc <_fwalk_sglue>:
 80050fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005100:	4607      	mov	r7, r0
 8005102:	4688      	mov	r8, r1
 8005104:	4614      	mov	r4, r2
 8005106:	2600      	movs	r6, #0
 8005108:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800510c:	f1b9 0901 	subs.w	r9, r9, #1
 8005110:	d505      	bpl.n	800511e <_fwalk_sglue+0x22>
 8005112:	6824      	ldr	r4, [r4, #0]
 8005114:	2c00      	cmp	r4, #0
 8005116:	d1f7      	bne.n	8005108 <_fwalk_sglue+0xc>
 8005118:	4630      	mov	r0, r6
 800511a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800511e:	89ab      	ldrh	r3, [r5, #12]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d907      	bls.n	8005134 <_fwalk_sglue+0x38>
 8005124:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005128:	3301      	adds	r3, #1
 800512a:	d003      	beq.n	8005134 <_fwalk_sglue+0x38>
 800512c:	4629      	mov	r1, r5
 800512e:	4638      	mov	r0, r7
 8005130:	47c0      	blx	r8
 8005132:	4306      	orrs	r6, r0
 8005134:	3568      	adds	r5, #104	@ 0x68
 8005136:	e7e9      	b.n	800510c <_fwalk_sglue+0x10>

08005138 <_puts_r>:
 8005138:	6a03      	ldr	r3, [r0, #32]
 800513a:	b570      	push	{r4, r5, r6, lr}
 800513c:	6884      	ldr	r4, [r0, #8]
 800513e:	4605      	mov	r5, r0
 8005140:	460e      	mov	r6, r1
 8005142:	b90b      	cbnz	r3, 8005148 <_puts_r+0x10>
 8005144:	f7ff ffc2 	bl	80050cc <__sinit>
 8005148:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800514a:	07db      	lsls	r3, r3, #31
 800514c:	d405      	bmi.n	800515a <_puts_r+0x22>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	0598      	lsls	r0, r3, #22
 8005152:	d402      	bmi.n	800515a <_puts_r+0x22>
 8005154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005156:	f000 f99e 	bl	8005496 <__retarget_lock_acquire_recursive>
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	0719      	lsls	r1, r3, #28
 800515e:	d502      	bpl.n	8005166 <_puts_r+0x2e>
 8005160:	6923      	ldr	r3, [r4, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d135      	bne.n	80051d2 <_puts_r+0x9a>
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 f8c5 	bl	80052f8 <__swsetup_r>
 800516e:	b380      	cbz	r0, 80051d2 <_puts_r+0x9a>
 8005170:	f04f 35ff 	mov.w	r5, #4294967295
 8005174:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005176:	07da      	lsls	r2, r3, #31
 8005178:	d405      	bmi.n	8005186 <_puts_r+0x4e>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	059b      	lsls	r3, r3, #22
 800517e:	d402      	bmi.n	8005186 <_puts_r+0x4e>
 8005180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005182:	f000 f989 	bl	8005498 <__retarget_lock_release_recursive>
 8005186:	4628      	mov	r0, r5
 8005188:	bd70      	pop	{r4, r5, r6, pc}
 800518a:	2b00      	cmp	r3, #0
 800518c:	da04      	bge.n	8005198 <_puts_r+0x60>
 800518e:	69a2      	ldr	r2, [r4, #24]
 8005190:	429a      	cmp	r2, r3
 8005192:	dc17      	bgt.n	80051c4 <_puts_r+0x8c>
 8005194:	290a      	cmp	r1, #10
 8005196:	d015      	beq.n	80051c4 <_puts_r+0x8c>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	6022      	str	r2, [r4, #0]
 800519e:	7019      	strb	r1, [r3, #0]
 80051a0:	68a3      	ldr	r3, [r4, #8]
 80051a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051a6:	3b01      	subs	r3, #1
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	2900      	cmp	r1, #0
 80051ac:	d1ed      	bne.n	800518a <_puts_r+0x52>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	da11      	bge.n	80051d6 <_puts_r+0x9e>
 80051b2:	4622      	mov	r2, r4
 80051b4:	210a      	movs	r1, #10
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 f85f 	bl	800527a <__swbuf_r>
 80051bc:	3001      	adds	r0, #1
 80051be:	d0d7      	beq.n	8005170 <_puts_r+0x38>
 80051c0:	250a      	movs	r5, #10
 80051c2:	e7d7      	b.n	8005174 <_puts_r+0x3c>
 80051c4:	4622      	mov	r2, r4
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f857 	bl	800527a <__swbuf_r>
 80051cc:	3001      	adds	r0, #1
 80051ce:	d1e7      	bne.n	80051a0 <_puts_r+0x68>
 80051d0:	e7ce      	b.n	8005170 <_puts_r+0x38>
 80051d2:	3e01      	subs	r6, #1
 80051d4:	e7e4      	b.n	80051a0 <_puts_r+0x68>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	6022      	str	r2, [r4, #0]
 80051dc:	220a      	movs	r2, #10
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	e7ee      	b.n	80051c0 <_puts_r+0x88>
	...

080051e4 <puts>:
 80051e4:	4b02      	ldr	r3, [pc, #8]	@ (80051f0 <puts+0xc>)
 80051e6:	4601      	mov	r1, r0
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	f7ff bfa5 	b.w	8005138 <_puts_r>
 80051ee:	bf00      	nop
 80051f0:	2000001c 	.word	0x2000001c

080051f4 <__sread>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	460c      	mov	r4, r1
 80051f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fc:	f000 f8fc 	bl	80053f8 <_read_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	bfab      	itete	ge
 8005204:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005206:	89a3      	ldrhlt	r3, [r4, #12]
 8005208:	181b      	addge	r3, r3, r0
 800520a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800520e:	bfac      	ite	ge
 8005210:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005212:	81a3      	strhlt	r3, [r4, #12]
 8005214:	bd10      	pop	{r4, pc}

08005216 <__swrite>:
 8005216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	461f      	mov	r7, r3
 800521c:	898b      	ldrh	r3, [r1, #12]
 800521e:	05db      	lsls	r3, r3, #23
 8005220:	4605      	mov	r5, r0
 8005222:	460c      	mov	r4, r1
 8005224:	4616      	mov	r6, r2
 8005226:	d505      	bpl.n	8005234 <__swrite+0x1e>
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	2302      	movs	r3, #2
 800522e:	2200      	movs	r2, #0
 8005230:	f000 f8d0 	bl	80053d4 <_lseek_r>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800523a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	4632      	mov	r2, r6
 8005242:	463b      	mov	r3, r7
 8005244:	4628      	mov	r0, r5
 8005246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	f000 b8e7 	b.w	800541c <_write_r>

0800524e <__sseek>:
 800524e:	b510      	push	{r4, lr}
 8005250:	460c      	mov	r4, r1
 8005252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005256:	f000 f8bd 	bl	80053d4 <_lseek_r>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	bf15      	itete	ne
 8005260:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005262:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005266:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800526a:	81a3      	strheq	r3, [r4, #12]
 800526c:	bf18      	it	ne
 800526e:	81a3      	strhne	r3, [r4, #12]
 8005270:	bd10      	pop	{r4, pc}

08005272 <__sclose>:
 8005272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005276:	f000 b89d 	b.w	80053b4 <_close_r>

0800527a <__swbuf_r>:
 800527a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527c:	460e      	mov	r6, r1
 800527e:	4614      	mov	r4, r2
 8005280:	4605      	mov	r5, r0
 8005282:	b118      	cbz	r0, 800528c <__swbuf_r+0x12>
 8005284:	6a03      	ldr	r3, [r0, #32]
 8005286:	b90b      	cbnz	r3, 800528c <__swbuf_r+0x12>
 8005288:	f7ff ff20 	bl	80050cc <__sinit>
 800528c:	69a3      	ldr	r3, [r4, #24]
 800528e:	60a3      	str	r3, [r4, #8]
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	071a      	lsls	r2, r3, #28
 8005294:	d501      	bpl.n	800529a <__swbuf_r+0x20>
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	b943      	cbnz	r3, 80052ac <__swbuf_r+0x32>
 800529a:	4621      	mov	r1, r4
 800529c:	4628      	mov	r0, r5
 800529e:	f000 f82b 	bl	80052f8 <__swsetup_r>
 80052a2:	b118      	cbz	r0, 80052ac <__swbuf_r+0x32>
 80052a4:	f04f 37ff 	mov.w	r7, #4294967295
 80052a8:	4638      	mov	r0, r7
 80052aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	6922      	ldr	r2, [r4, #16]
 80052b0:	1a98      	subs	r0, r3, r2
 80052b2:	6963      	ldr	r3, [r4, #20]
 80052b4:	b2f6      	uxtb	r6, r6
 80052b6:	4283      	cmp	r3, r0
 80052b8:	4637      	mov	r7, r6
 80052ba:	dc05      	bgt.n	80052c8 <__swbuf_r+0x4e>
 80052bc:	4621      	mov	r1, r4
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 fa68 	bl	8005794 <_fflush_r>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d1ed      	bne.n	80052a4 <__swbuf_r+0x2a>
 80052c8:	68a3      	ldr	r3, [r4, #8]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	60a3      	str	r3, [r4, #8]
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	6022      	str	r2, [r4, #0]
 80052d4:	701e      	strb	r6, [r3, #0]
 80052d6:	6962      	ldr	r2, [r4, #20]
 80052d8:	1c43      	adds	r3, r0, #1
 80052da:	429a      	cmp	r2, r3
 80052dc:	d004      	beq.n	80052e8 <__swbuf_r+0x6e>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	07db      	lsls	r3, r3, #31
 80052e2:	d5e1      	bpl.n	80052a8 <__swbuf_r+0x2e>
 80052e4:	2e0a      	cmp	r6, #10
 80052e6:	d1df      	bne.n	80052a8 <__swbuf_r+0x2e>
 80052e8:	4621      	mov	r1, r4
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 fa52 	bl	8005794 <_fflush_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d0d9      	beq.n	80052a8 <__swbuf_r+0x2e>
 80052f4:	e7d6      	b.n	80052a4 <__swbuf_r+0x2a>
	...

080052f8 <__swsetup_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4b29      	ldr	r3, [pc, #164]	@ (80053a0 <__swsetup_r+0xa8>)
 80052fc:	4605      	mov	r5, r0
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	460c      	mov	r4, r1
 8005302:	b118      	cbz	r0, 800530c <__swsetup_r+0x14>
 8005304:	6a03      	ldr	r3, [r0, #32]
 8005306:	b90b      	cbnz	r3, 800530c <__swsetup_r+0x14>
 8005308:	f7ff fee0 	bl	80050cc <__sinit>
 800530c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005310:	0719      	lsls	r1, r3, #28
 8005312:	d422      	bmi.n	800535a <__swsetup_r+0x62>
 8005314:	06da      	lsls	r2, r3, #27
 8005316:	d407      	bmi.n	8005328 <__swsetup_r+0x30>
 8005318:	2209      	movs	r2, #9
 800531a:	602a      	str	r2, [r5, #0]
 800531c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005320:	81a3      	strh	r3, [r4, #12]
 8005322:	f04f 30ff 	mov.w	r0, #4294967295
 8005326:	e033      	b.n	8005390 <__swsetup_r+0x98>
 8005328:	0758      	lsls	r0, r3, #29
 800532a:	d512      	bpl.n	8005352 <__swsetup_r+0x5a>
 800532c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800532e:	b141      	cbz	r1, 8005342 <__swsetup_r+0x4a>
 8005330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005334:	4299      	cmp	r1, r3
 8005336:	d002      	beq.n	800533e <__swsetup_r+0x46>
 8005338:	4628      	mov	r0, r5
 800533a:	f000 f8af 	bl	800549c <_free_r>
 800533e:	2300      	movs	r3, #0
 8005340:	6363      	str	r3, [r4, #52]	@ 0x34
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005348:	81a3      	strh	r3, [r4, #12]
 800534a:	2300      	movs	r3, #0
 800534c:	6063      	str	r3, [r4, #4]
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	f043 0308 	orr.w	r3, r3, #8
 8005358:	81a3      	strh	r3, [r4, #12]
 800535a:	6923      	ldr	r3, [r4, #16]
 800535c:	b94b      	cbnz	r3, 8005372 <__swsetup_r+0x7a>
 800535e:	89a3      	ldrh	r3, [r4, #12]
 8005360:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005368:	d003      	beq.n	8005372 <__swsetup_r+0x7a>
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f000 fa5f 	bl	8005830 <__smakebuf_r>
 8005372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005376:	f013 0201 	ands.w	r2, r3, #1
 800537a:	d00a      	beq.n	8005392 <__swsetup_r+0x9a>
 800537c:	2200      	movs	r2, #0
 800537e:	60a2      	str	r2, [r4, #8]
 8005380:	6962      	ldr	r2, [r4, #20]
 8005382:	4252      	negs	r2, r2
 8005384:	61a2      	str	r2, [r4, #24]
 8005386:	6922      	ldr	r2, [r4, #16]
 8005388:	b942      	cbnz	r2, 800539c <__swsetup_r+0xa4>
 800538a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800538e:	d1c5      	bne.n	800531c <__swsetup_r+0x24>
 8005390:	bd38      	pop	{r3, r4, r5, pc}
 8005392:	0799      	lsls	r1, r3, #30
 8005394:	bf58      	it	pl
 8005396:	6962      	ldrpl	r2, [r4, #20]
 8005398:	60a2      	str	r2, [r4, #8]
 800539a:	e7f4      	b.n	8005386 <__swsetup_r+0x8e>
 800539c:	2000      	movs	r0, #0
 800539e:	e7f7      	b.n	8005390 <__swsetup_r+0x98>
 80053a0:	2000001c 	.word	0x2000001c

080053a4 <memset>:
 80053a4:	4402      	add	r2, r0
 80053a6:	4603      	mov	r3, r0
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d100      	bne.n	80053ae <memset+0xa>
 80053ac:	4770      	bx	lr
 80053ae:	f803 1b01 	strb.w	r1, [r3], #1
 80053b2:	e7f9      	b.n	80053a8 <memset+0x4>

080053b4 <_close_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4d06      	ldr	r5, [pc, #24]	@ (80053d0 <_close_r+0x1c>)
 80053b8:	2300      	movs	r3, #0
 80053ba:	4604      	mov	r4, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	602b      	str	r3, [r5, #0]
 80053c0:	f7fb fa39 	bl	8000836 <_close>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_close_r+0x1a>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_close_r+0x1a>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	200011b8 	.word	0x200011b8

080053d4 <_lseek_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d07      	ldr	r5, [pc, #28]	@ (80053f4 <_lseek_r+0x20>)
 80053d8:	4604      	mov	r4, r0
 80053da:	4608      	mov	r0, r1
 80053dc:	4611      	mov	r1, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	602a      	str	r2, [r5, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fb fa4e 	bl	8000884 <_lseek>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_lseek_r+0x1e>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_lseek_r+0x1e>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	200011b8 	.word	0x200011b8

080053f8 <_read_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4d07      	ldr	r5, [pc, #28]	@ (8005418 <_read_r+0x20>)
 80053fc:	4604      	mov	r4, r0
 80053fe:	4608      	mov	r0, r1
 8005400:	4611      	mov	r1, r2
 8005402:	2200      	movs	r2, #0
 8005404:	602a      	str	r2, [r5, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	f7fb f9dc 	bl	80007c4 <_read>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_read_r+0x1e>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_read_r+0x1e>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	200011b8 	.word	0x200011b8

0800541c <_write_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d07      	ldr	r5, [pc, #28]	@ (800543c <_write_r+0x20>)
 8005420:	4604      	mov	r4, r0
 8005422:	4608      	mov	r0, r1
 8005424:	4611      	mov	r1, r2
 8005426:	2200      	movs	r2, #0
 8005428:	602a      	str	r2, [r5, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	f7fb f9e7 	bl	80007fe <_write>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	d102      	bne.n	800543a <_write_r+0x1e>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	b103      	cbz	r3, 800543a <_write_r+0x1e>
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	bd38      	pop	{r3, r4, r5, pc}
 800543c:	200011b8 	.word	0x200011b8

08005440 <__errno>:
 8005440:	4b01      	ldr	r3, [pc, #4]	@ (8005448 <__errno+0x8>)
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	2000001c 	.word	0x2000001c

0800544c <__libc_init_array>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	4d0d      	ldr	r5, [pc, #52]	@ (8005484 <__libc_init_array+0x38>)
 8005450:	4c0d      	ldr	r4, [pc, #52]	@ (8005488 <__libc_init_array+0x3c>)
 8005452:	1b64      	subs	r4, r4, r5
 8005454:	10a4      	asrs	r4, r4, #2
 8005456:	2600      	movs	r6, #0
 8005458:	42a6      	cmp	r6, r4
 800545a:	d109      	bne.n	8005470 <__libc_init_array+0x24>
 800545c:	4d0b      	ldr	r5, [pc, #44]	@ (800548c <__libc_init_array+0x40>)
 800545e:	4c0c      	ldr	r4, [pc, #48]	@ (8005490 <__libc_init_array+0x44>)
 8005460:	f000 fa54 	bl	800590c <_init>
 8005464:	1b64      	subs	r4, r4, r5
 8005466:	10a4      	asrs	r4, r4, #2
 8005468:	2600      	movs	r6, #0
 800546a:	42a6      	cmp	r6, r4
 800546c:	d105      	bne.n	800547a <__libc_init_array+0x2e>
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	f855 3b04 	ldr.w	r3, [r5], #4
 8005474:	4798      	blx	r3
 8005476:	3601      	adds	r6, #1
 8005478:	e7ee      	b.n	8005458 <__libc_init_array+0xc>
 800547a:	f855 3b04 	ldr.w	r3, [r5], #4
 800547e:	4798      	blx	r3
 8005480:	3601      	adds	r6, #1
 8005482:	e7f2      	b.n	800546a <__libc_init_array+0x1e>
 8005484:	080059ec 	.word	0x080059ec
 8005488:	080059ec 	.word	0x080059ec
 800548c:	080059ec 	.word	0x080059ec
 8005490:	080059f0 	.word	0x080059f0

08005494 <__retarget_lock_init_recursive>:
 8005494:	4770      	bx	lr

08005496 <__retarget_lock_acquire_recursive>:
 8005496:	4770      	bx	lr

08005498 <__retarget_lock_release_recursive>:
 8005498:	4770      	bx	lr
	...

0800549c <_free_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4605      	mov	r5, r0
 80054a0:	2900      	cmp	r1, #0
 80054a2:	d041      	beq.n	8005528 <_free_r+0x8c>
 80054a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a8:	1f0c      	subs	r4, r1, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bfb8      	it	lt
 80054ae:	18e4      	addlt	r4, r4, r3
 80054b0:	f000 f8e0 	bl	8005674 <__malloc_lock>
 80054b4:	4a1d      	ldr	r2, [pc, #116]	@ (800552c <_free_r+0x90>)
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	b933      	cbnz	r3, 80054c8 <_free_r+0x2c>
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	6014      	str	r4, [r2, #0]
 80054be:	4628      	mov	r0, r5
 80054c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054c4:	f000 b8dc 	b.w	8005680 <__malloc_unlock>
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	d908      	bls.n	80054de <_free_r+0x42>
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	1821      	adds	r1, r4, r0
 80054d0:	428b      	cmp	r3, r1
 80054d2:	bf01      	itttt	eq
 80054d4:	6819      	ldreq	r1, [r3, #0]
 80054d6:	685b      	ldreq	r3, [r3, #4]
 80054d8:	1809      	addeq	r1, r1, r0
 80054da:	6021      	streq	r1, [r4, #0]
 80054dc:	e7ed      	b.n	80054ba <_free_r+0x1e>
 80054de:	461a      	mov	r2, r3
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	b10b      	cbz	r3, 80054e8 <_free_r+0x4c>
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d9fa      	bls.n	80054de <_free_r+0x42>
 80054e8:	6811      	ldr	r1, [r2, #0]
 80054ea:	1850      	adds	r0, r2, r1
 80054ec:	42a0      	cmp	r0, r4
 80054ee:	d10b      	bne.n	8005508 <_free_r+0x6c>
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	4401      	add	r1, r0
 80054f4:	1850      	adds	r0, r2, r1
 80054f6:	4283      	cmp	r3, r0
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	d1e0      	bne.n	80054be <_free_r+0x22>
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	6053      	str	r3, [r2, #4]
 8005502:	4408      	add	r0, r1
 8005504:	6010      	str	r0, [r2, #0]
 8005506:	e7da      	b.n	80054be <_free_r+0x22>
 8005508:	d902      	bls.n	8005510 <_free_r+0x74>
 800550a:	230c      	movs	r3, #12
 800550c:	602b      	str	r3, [r5, #0]
 800550e:	e7d6      	b.n	80054be <_free_r+0x22>
 8005510:	6820      	ldr	r0, [r4, #0]
 8005512:	1821      	adds	r1, r4, r0
 8005514:	428b      	cmp	r3, r1
 8005516:	bf04      	itt	eq
 8005518:	6819      	ldreq	r1, [r3, #0]
 800551a:	685b      	ldreq	r3, [r3, #4]
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	bf04      	itt	eq
 8005520:	1809      	addeq	r1, r1, r0
 8005522:	6021      	streq	r1, [r4, #0]
 8005524:	6054      	str	r4, [r2, #4]
 8005526:	e7ca      	b.n	80054be <_free_r+0x22>
 8005528:	bd38      	pop	{r3, r4, r5, pc}
 800552a:	bf00      	nop
 800552c:	200011c4 	.word	0x200011c4

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0f      	ldr	r6, [pc, #60]	@ (8005570 <sbrk_aligned+0x40>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 f9d6 	bl	80058ec <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f9d1 	bl	80058ec <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d103      	bne.n	8005556 <sbrk_aligned+0x26>
 800554e:	f04f 34ff 	mov.w	r4, #4294967295
 8005552:	4620      	mov	r0, r4
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	1cc4      	adds	r4, r0, #3
 8005558:	f024 0403 	bic.w	r4, r4, #3
 800555c:	42a0      	cmp	r0, r4
 800555e:	d0f8      	beq.n	8005552 <sbrk_aligned+0x22>
 8005560:	1a21      	subs	r1, r4, r0
 8005562:	4628      	mov	r0, r5
 8005564:	f000 f9c2 	bl	80058ec <_sbrk_r>
 8005568:	3001      	adds	r0, #1
 800556a:	d1f2      	bne.n	8005552 <sbrk_aligned+0x22>
 800556c:	e7ef      	b.n	800554e <sbrk_aligned+0x1e>
 800556e:	bf00      	nop
 8005570:	200011c0 	.word	0x200011c0

08005574 <_malloc_r>:
 8005574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005578:	1ccd      	adds	r5, r1, #3
 800557a:	f025 0503 	bic.w	r5, r5, #3
 800557e:	3508      	adds	r5, #8
 8005580:	2d0c      	cmp	r5, #12
 8005582:	bf38      	it	cc
 8005584:	250c      	movcc	r5, #12
 8005586:	2d00      	cmp	r5, #0
 8005588:	4606      	mov	r6, r0
 800558a:	db01      	blt.n	8005590 <_malloc_r+0x1c>
 800558c:	42a9      	cmp	r1, r5
 800558e:	d904      	bls.n	800559a <_malloc_r+0x26>
 8005590:	230c      	movs	r3, #12
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	2000      	movs	r0, #0
 8005596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800559a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005670 <_malloc_r+0xfc>
 800559e:	f000 f869 	bl	8005674 <__malloc_lock>
 80055a2:	f8d8 3000 	ldr.w	r3, [r8]
 80055a6:	461c      	mov	r4, r3
 80055a8:	bb44      	cbnz	r4, 80055fc <_malloc_r+0x88>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff ffbf 	bl	8005530 <sbrk_aligned>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	4604      	mov	r4, r0
 80055b6:	d158      	bne.n	800566a <_malloc_r+0xf6>
 80055b8:	f8d8 4000 	ldr.w	r4, [r8]
 80055bc:	4627      	mov	r7, r4
 80055be:	2f00      	cmp	r7, #0
 80055c0:	d143      	bne.n	800564a <_malloc_r+0xd6>
 80055c2:	2c00      	cmp	r4, #0
 80055c4:	d04b      	beq.n	800565e <_malloc_r+0xea>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	4639      	mov	r1, r7
 80055ca:	4630      	mov	r0, r6
 80055cc:	eb04 0903 	add.w	r9, r4, r3
 80055d0:	f000 f98c 	bl	80058ec <_sbrk_r>
 80055d4:	4581      	cmp	r9, r0
 80055d6:	d142      	bne.n	800565e <_malloc_r+0xea>
 80055d8:	6821      	ldr	r1, [r4, #0]
 80055da:	1a6d      	subs	r5, r5, r1
 80055dc:	4629      	mov	r1, r5
 80055de:	4630      	mov	r0, r6
 80055e0:	f7ff ffa6 	bl	8005530 <sbrk_aligned>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d03a      	beq.n	800565e <_malloc_r+0xea>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	442b      	add	r3, r5
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	f8d8 3000 	ldr.w	r3, [r8]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	bb62      	cbnz	r2, 8005650 <_malloc_r+0xdc>
 80055f6:	f8c8 7000 	str.w	r7, [r8]
 80055fa:	e00f      	b.n	800561c <_malloc_r+0xa8>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	1b52      	subs	r2, r2, r5
 8005600:	d420      	bmi.n	8005644 <_malloc_r+0xd0>
 8005602:	2a0b      	cmp	r2, #11
 8005604:	d917      	bls.n	8005636 <_malloc_r+0xc2>
 8005606:	1961      	adds	r1, r4, r5
 8005608:	42a3      	cmp	r3, r4
 800560a:	6025      	str	r5, [r4, #0]
 800560c:	bf18      	it	ne
 800560e:	6059      	strne	r1, [r3, #4]
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	bf08      	it	eq
 8005614:	f8c8 1000 	streq.w	r1, [r8]
 8005618:	5162      	str	r2, [r4, r5]
 800561a:	604b      	str	r3, [r1, #4]
 800561c:	4630      	mov	r0, r6
 800561e:	f000 f82f 	bl	8005680 <__malloc_unlock>
 8005622:	f104 000b 	add.w	r0, r4, #11
 8005626:	1d23      	adds	r3, r4, #4
 8005628:	f020 0007 	bic.w	r0, r0, #7
 800562c:	1ac2      	subs	r2, r0, r3
 800562e:	bf1c      	itt	ne
 8005630:	1a1b      	subne	r3, r3, r0
 8005632:	50a3      	strne	r3, [r4, r2]
 8005634:	e7af      	b.n	8005596 <_malloc_r+0x22>
 8005636:	6862      	ldr	r2, [r4, #4]
 8005638:	42a3      	cmp	r3, r4
 800563a:	bf0c      	ite	eq
 800563c:	f8c8 2000 	streq.w	r2, [r8]
 8005640:	605a      	strne	r2, [r3, #4]
 8005642:	e7eb      	b.n	800561c <_malloc_r+0xa8>
 8005644:	4623      	mov	r3, r4
 8005646:	6864      	ldr	r4, [r4, #4]
 8005648:	e7ae      	b.n	80055a8 <_malloc_r+0x34>
 800564a:	463c      	mov	r4, r7
 800564c:	687f      	ldr	r7, [r7, #4]
 800564e:	e7b6      	b.n	80055be <_malloc_r+0x4a>
 8005650:	461a      	mov	r2, r3
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	42a3      	cmp	r3, r4
 8005656:	d1fb      	bne.n	8005650 <_malloc_r+0xdc>
 8005658:	2300      	movs	r3, #0
 800565a:	6053      	str	r3, [r2, #4]
 800565c:	e7de      	b.n	800561c <_malloc_r+0xa8>
 800565e:	230c      	movs	r3, #12
 8005660:	6033      	str	r3, [r6, #0]
 8005662:	4630      	mov	r0, r6
 8005664:	f000 f80c 	bl	8005680 <__malloc_unlock>
 8005668:	e794      	b.n	8005594 <_malloc_r+0x20>
 800566a:	6005      	str	r5, [r0, #0]
 800566c:	e7d6      	b.n	800561c <_malloc_r+0xa8>
 800566e:	bf00      	nop
 8005670:	200011c4 	.word	0x200011c4

08005674 <__malloc_lock>:
 8005674:	4801      	ldr	r0, [pc, #4]	@ (800567c <__malloc_lock+0x8>)
 8005676:	f7ff bf0e 	b.w	8005496 <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	200011bc 	.word	0x200011bc

08005680 <__malloc_unlock>:
 8005680:	4801      	ldr	r0, [pc, #4]	@ (8005688 <__malloc_unlock+0x8>)
 8005682:	f7ff bf09 	b.w	8005498 <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	200011bc 	.word	0x200011bc

0800568c <__sflush_r>:
 800568c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005694:	0716      	lsls	r6, r2, #28
 8005696:	4605      	mov	r5, r0
 8005698:	460c      	mov	r4, r1
 800569a:	d454      	bmi.n	8005746 <__sflush_r+0xba>
 800569c:	684b      	ldr	r3, [r1, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	dc02      	bgt.n	80056a8 <__sflush_r+0x1c>
 80056a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dd48      	ble.n	800573a <__sflush_r+0xae>
 80056a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056aa:	2e00      	cmp	r6, #0
 80056ac:	d045      	beq.n	800573a <__sflush_r+0xae>
 80056ae:	2300      	movs	r3, #0
 80056b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056b4:	682f      	ldr	r7, [r5, #0]
 80056b6:	6a21      	ldr	r1, [r4, #32]
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	d030      	beq.n	800571e <__sflush_r+0x92>
 80056bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	0759      	lsls	r1, r3, #29
 80056c2:	d505      	bpl.n	80056d0 <__sflush_r+0x44>
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056ca:	b10b      	cbz	r3, 80056d0 <__sflush_r+0x44>
 80056cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056d4:	6a21      	ldr	r1, [r4, #32]
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b0      	blx	r6
 80056da:	1c43      	adds	r3, r0, #1
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	d106      	bne.n	80056ee <__sflush_r+0x62>
 80056e0:	6829      	ldr	r1, [r5, #0]
 80056e2:	291d      	cmp	r1, #29
 80056e4:	d82b      	bhi.n	800573e <__sflush_r+0xb2>
 80056e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005790 <__sflush_r+0x104>)
 80056e8:	410a      	asrs	r2, r1
 80056ea:	07d6      	lsls	r6, r2, #31
 80056ec:	d427      	bmi.n	800573e <__sflush_r+0xb2>
 80056ee:	2200      	movs	r2, #0
 80056f0:	6062      	str	r2, [r4, #4]
 80056f2:	04d9      	lsls	r1, r3, #19
 80056f4:	6922      	ldr	r2, [r4, #16]
 80056f6:	6022      	str	r2, [r4, #0]
 80056f8:	d504      	bpl.n	8005704 <__sflush_r+0x78>
 80056fa:	1c42      	adds	r2, r0, #1
 80056fc:	d101      	bne.n	8005702 <__sflush_r+0x76>
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	b903      	cbnz	r3, 8005704 <__sflush_r+0x78>
 8005702:	6560      	str	r0, [r4, #84]	@ 0x54
 8005704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005706:	602f      	str	r7, [r5, #0]
 8005708:	b1b9      	cbz	r1, 800573a <__sflush_r+0xae>
 800570a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800570e:	4299      	cmp	r1, r3
 8005710:	d002      	beq.n	8005718 <__sflush_r+0x8c>
 8005712:	4628      	mov	r0, r5
 8005714:	f7ff fec2 	bl	800549c <_free_r>
 8005718:	2300      	movs	r3, #0
 800571a:	6363      	str	r3, [r4, #52]	@ 0x34
 800571c:	e00d      	b.n	800573a <__sflush_r+0xae>
 800571e:	2301      	movs	r3, #1
 8005720:	4628      	mov	r0, r5
 8005722:	47b0      	blx	r6
 8005724:	4602      	mov	r2, r0
 8005726:	1c50      	adds	r0, r2, #1
 8005728:	d1c9      	bne.n	80056be <__sflush_r+0x32>
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0c6      	beq.n	80056be <__sflush_r+0x32>
 8005730:	2b1d      	cmp	r3, #29
 8005732:	d001      	beq.n	8005738 <__sflush_r+0xac>
 8005734:	2b16      	cmp	r3, #22
 8005736:	d11e      	bne.n	8005776 <__sflush_r+0xea>
 8005738:	602f      	str	r7, [r5, #0]
 800573a:	2000      	movs	r0, #0
 800573c:	e022      	b.n	8005784 <__sflush_r+0xf8>
 800573e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005742:	b21b      	sxth	r3, r3
 8005744:	e01b      	b.n	800577e <__sflush_r+0xf2>
 8005746:	690f      	ldr	r7, [r1, #16]
 8005748:	2f00      	cmp	r7, #0
 800574a:	d0f6      	beq.n	800573a <__sflush_r+0xae>
 800574c:	0793      	lsls	r3, r2, #30
 800574e:	680e      	ldr	r6, [r1, #0]
 8005750:	bf08      	it	eq
 8005752:	694b      	ldreq	r3, [r1, #20]
 8005754:	600f      	str	r7, [r1, #0]
 8005756:	bf18      	it	ne
 8005758:	2300      	movne	r3, #0
 800575a:	eba6 0807 	sub.w	r8, r6, r7
 800575e:	608b      	str	r3, [r1, #8]
 8005760:	f1b8 0f00 	cmp.w	r8, #0
 8005764:	dde9      	ble.n	800573a <__sflush_r+0xae>
 8005766:	6a21      	ldr	r1, [r4, #32]
 8005768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800576a:	4643      	mov	r3, r8
 800576c:	463a      	mov	r2, r7
 800576e:	4628      	mov	r0, r5
 8005770:	47b0      	blx	r6
 8005772:	2800      	cmp	r0, #0
 8005774:	dc08      	bgt.n	8005788 <__sflush_r+0xfc>
 8005776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800577a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577e:	81a3      	strh	r3, [r4, #12]
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005788:	4407      	add	r7, r0
 800578a:	eba8 0800 	sub.w	r8, r8, r0
 800578e:	e7e7      	b.n	8005760 <__sflush_r+0xd4>
 8005790:	dfbffffe 	.word	0xdfbffffe

08005794 <_fflush_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	4605      	mov	r5, r0
 800579a:	460c      	mov	r4, r1
 800579c:	b913      	cbnz	r3, 80057a4 <_fflush_r+0x10>
 800579e:	2500      	movs	r5, #0
 80057a0:	4628      	mov	r0, r5
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	b118      	cbz	r0, 80057ae <_fflush_r+0x1a>
 80057a6:	6a03      	ldr	r3, [r0, #32]
 80057a8:	b90b      	cbnz	r3, 80057ae <_fflush_r+0x1a>
 80057aa:	f7ff fc8f 	bl	80050cc <__sinit>
 80057ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f3      	beq.n	800579e <_fflush_r+0xa>
 80057b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057b8:	07d0      	lsls	r0, r2, #31
 80057ba:	d404      	bmi.n	80057c6 <_fflush_r+0x32>
 80057bc:	0599      	lsls	r1, r3, #22
 80057be:	d402      	bmi.n	80057c6 <_fflush_r+0x32>
 80057c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057c2:	f7ff fe68 	bl	8005496 <__retarget_lock_acquire_recursive>
 80057c6:	4628      	mov	r0, r5
 80057c8:	4621      	mov	r1, r4
 80057ca:	f7ff ff5f 	bl	800568c <__sflush_r>
 80057ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057d0:	07da      	lsls	r2, r3, #31
 80057d2:	4605      	mov	r5, r0
 80057d4:	d4e4      	bmi.n	80057a0 <_fflush_r+0xc>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	059b      	lsls	r3, r3, #22
 80057da:	d4e1      	bmi.n	80057a0 <_fflush_r+0xc>
 80057dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057de:	f7ff fe5b 	bl	8005498 <__retarget_lock_release_recursive>
 80057e2:	e7dd      	b.n	80057a0 <_fflush_r+0xc>

080057e4 <__swhatbuf_r>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	460c      	mov	r4, r1
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	b096      	sub	sp, #88	@ 0x58
 80057f0:	4615      	mov	r5, r2
 80057f2:	461e      	mov	r6, r3
 80057f4:	da0d      	bge.n	8005812 <__swhatbuf_r+0x2e>
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	bf14      	ite	ne
 8005802:	2340      	movne	r3, #64	@ 0x40
 8005804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005808:	2000      	movs	r0, #0
 800580a:	6031      	str	r1, [r6, #0]
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	b016      	add	sp, #88	@ 0x58
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	466a      	mov	r2, sp
 8005814:	f000 f848 	bl	80058a8 <_fstat_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	dbec      	blt.n	80057f6 <__swhatbuf_r+0x12>
 800581c:	9901      	ldr	r1, [sp, #4]
 800581e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005826:	4259      	negs	r1, r3
 8005828:	4159      	adcs	r1, r3
 800582a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800582e:	e7eb      	b.n	8005808 <__swhatbuf_r+0x24>

08005830 <__smakebuf_r>:
 8005830:	898b      	ldrh	r3, [r1, #12]
 8005832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005834:	079d      	lsls	r5, r3, #30
 8005836:	4606      	mov	r6, r0
 8005838:	460c      	mov	r4, r1
 800583a:	d507      	bpl.n	800584c <__smakebuf_r+0x1c>
 800583c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	6123      	str	r3, [r4, #16]
 8005844:	2301      	movs	r3, #1
 8005846:	6163      	str	r3, [r4, #20]
 8005848:	b003      	add	sp, #12
 800584a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800584c:	ab01      	add	r3, sp, #4
 800584e:	466a      	mov	r2, sp
 8005850:	f7ff ffc8 	bl	80057e4 <__swhatbuf_r>
 8005854:	9f00      	ldr	r7, [sp, #0]
 8005856:	4605      	mov	r5, r0
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	f7ff fe8a 	bl	8005574 <_malloc_r>
 8005860:	b948      	cbnz	r0, 8005876 <__smakebuf_r+0x46>
 8005862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005866:	059a      	lsls	r2, r3, #22
 8005868:	d4ee      	bmi.n	8005848 <__smakebuf_r+0x18>
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	f043 0302 	orr.w	r3, r3, #2
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	e7e2      	b.n	800583c <__smakebuf_r+0xc>
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	6020      	str	r0, [r4, #0]
 800587a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005886:	b15b      	cbz	r3, 80058a0 <__smakebuf_r+0x70>
 8005888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800588c:	4630      	mov	r0, r6
 800588e:	f000 f81d 	bl	80058cc <_isatty_r>
 8005892:	b128      	cbz	r0, 80058a0 <__smakebuf_r+0x70>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	431d      	orrs	r5, r3
 80058a4:	81a5      	strh	r5, [r4, #12]
 80058a6:	e7cf      	b.n	8005848 <__smakebuf_r+0x18>

080058a8 <_fstat_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	@ (80058c8 <_fstat_r+0x20>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	f7fa ffca 	bl	800084e <_fstat>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d102      	bne.n	80058c4 <_fstat_r+0x1c>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	b103      	cbz	r3, 80058c4 <_fstat_r+0x1c>
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	200011b8 	.word	0x200011b8

080058cc <_isatty_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d06      	ldr	r5, [pc, #24]	@ (80058e8 <_isatty_r+0x1c>)
 80058d0:	2300      	movs	r3, #0
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	602b      	str	r3, [r5, #0]
 80058d8:	f7fa ffc9 	bl	800086e <_isatty>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_isatty_r+0x1a>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_isatty_r+0x1a>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	200011b8 	.word	0x200011b8

080058ec <_sbrk_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d06      	ldr	r5, [pc, #24]	@ (8005908 <_sbrk_r+0x1c>)
 80058f0:	2300      	movs	r3, #0
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fa ffd2 	bl	80008a0 <_sbrk>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_sbrk_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_sbrk_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	200011b8 	.word	0x200011b8

0800590c <_init>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr

08005918 <_fini>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	bf00      	nop
 800591c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591e:	bc08      	pop	{r3}
 8005920:	469e      	mov	lr, r3
 8005922:	4770      	bx	lr
