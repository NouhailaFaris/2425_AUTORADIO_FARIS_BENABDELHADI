
2424_AUTORADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006bc4  08006bc4  00007bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d50  08006d50  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d50  08006d50  00007d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d58  08006d58  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d58  08006d58  00007d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006d60  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b8  20000074  08006dd4  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000152c  08006dd4  0000852c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012230  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003286  00000000  00000000  0001a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c02  00000000  00000000  0001e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dce  00000000  00000000  0001f13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013963  00000000  00000000  00047f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f233b  00000000  00000000  0005b86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014dba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004708  00000000  00000000  0014dbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001522f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bac 	.word	0x08006bac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006bac 	.word	0x08006bac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	200000e8 	.word	0x200000e8

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 f878 	bl	80046a6 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08006bd0 	.word	0x08006bd0
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 f8b2 	bl	800473e <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f811 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <MX_GPIO_Init+0xc8>)
 8000676:	f000 fe59 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f000 fe4a 	bl	800132c <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	@ 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <__io_putchar+0x20>)
 80006ba:	f002 fb67 	bl	8002d8c <HAL_UART_Transmit>

	return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000648 	.word	0x20000648

080006cc <fonction>:

int fonction(int argc, char ** argv)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 80006d6:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <fonction+0x1c>)
 80006d8:	f005 fb5c 	bl	8005d94 <puts>

	return 0;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	08006bec 	.word	0x08006bec

080006ec <ShellTask>:
void ShellTask(void *argument) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	shell_init();
 80006f4:	f000 f908 	bl	8000908 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 80006f8:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <ShellTask+0x28>)
 80006fa:	4907      	ldr	r1, [pc, #28]	@ (8000718 <ShellTask+0x2c>)
 80006fc:	2066      	movs	r0, #102	@ 0x66
 80006fe:	f000 f925 	bl	800094c <shell_add>
	printf("Shell démarré. Tapez vos commandes :\r\n");
 8000702:	4806      	ldr	r0, [pc, #24]	@ (800071c <ShellTask+0x30>)
 8000704:	f005 fb46 	bl	8005d94 <puts>
	shell_run();
 8000708:	f000 f9cc 	bl	8000aa4 <shell_run>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08006c08 	.word	0x08006c08
 8000718:	080006cd 	.word	0x080006cd
 800071c:	08006c20 	.word	0x08006c20

08000720 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000726:	f000 fbf5 	bl	8000f14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800072a:	f000 f831 	bl	8000790 <SystemClock_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */


	MX_GPIO_Init();
 800072e:	f7ff ff55 	bl	80005dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000732:	f000 fb31 	bl	8000d98 <MX_USART2_UART_Init>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_char, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	490f      	ldr	r1, [pc, #60]	@ (8000778 <main+0x58>)
 800073a:	4810      	ldr	r0, [pc, #64]	@ (800077c <main+0x5c>)
 800073c:	f002 fc78 	bl	8003030 <HAL_UART_Receive_IT>
	/* USER CODE BEGIN 2 */
	if (xTaskCreate(ShellTask, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <main+0x60>)
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	2301      	movs	r3, #1
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2300      	movs	r3, #0
 800074a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074e:	490d      	ldr	r1, [pc, #52]	@ (8000784 <main+0x64>)
 8000750:	480d      	ldr	r0, [pc, #52]	@ (8000788 <main+0x68>)
 8000752:	f004 f91c 	bl	800498e <xTaskCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d004      	beq.n	8000766 <main+0x46>
	{
		printf("Error creating task shell\r\n");
 800075c:	480b      	ldr	r0, [pc, #44]	@ (800078c <main+0x6c>)
 800075e:	f005 fb19 	bl	8005d94 <puts>
		Error_Handler();
 8000762:	f000 f866 	bl	8000832 <Error_Handler>
	}
	vTaskStartScheduler();
 8000766:	f004 fa7f 	bl	8004c68 <vTaskStartScheduler>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 800076a:	f7ff ff13 	bl	8000594 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800076e:	f003 ff93 	bl	8004698 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <main+0x52>
 8000776:	bf00      	nop
 8000778:	200002ec 	.word	0x200002ec
 800077c:	20000648 	.word	0x20000648
 8000780:	200002e8 	.word	0x200002e8
 8000784:	08006c48 	.word	0x08006c48
 8000788:	080006ed 	.word	0x080006ed
 800078c:	08006c50 	.word	0x08006c50

08000790 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b096      	sub	sp, #88	@ 0x58
 8000794:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2244      	movs	r2, #68	@ 0x44
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 fc0c 	bl	8005fbc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007b6:	f000 ff89 	bl	80016cc <HAL_PWREx_ControlVoltageScaling>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80007c0:	f000 f837 	bl	8000832 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007cc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2310      	movs	r3, #16
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80007de:	230a      	movs	r3, #10
 80007e0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 ffc0 	bl	8001778 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007fe:	f000 f818 	bl	8000832 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fb88 	bl	8001f30 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000826:	f000 f804 	bl	8000832 <Error_Handler>
	}
}
 800082a:	bf00      	nop
 800082c:	3758      	adds	r7, #88	@ 0x58
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000836:	b672      	cpsid	i
}
 8000838:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800083a:	bf00      	nop
 800083c:	e7fd      	b.n	800083a <Error_Handler+0x8>
	...

08000840 <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

static char uart_read() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, HAL_MAX_DELAY);
 8000846:	1df9      	adds	r1, r7, #7
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	2201      	movs	r2, #1
 800084e:	4804      	ldr	r0, [pc, #16]	@ (8000860 <uart_read+0x20>)
 8000850:	f002 fb25 	bl	8002e9e <HAL_UART_Receive>

	return c;
 8000854:	79fb      	ldrb	r3, [r7, #7]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000648 	.word	0x20000648

08000864 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000870:	887a      	ldrh	r2, [r7, #2]
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <uart_write+0x24>)
 800087a:	f002 fa87 	bl	8002d8c <HAL_UART_Transmit>
	return size;
 800087e:	887b      	ldrh	r3, [r7, #2]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000648 	.word	0x20000648

0800088c <sh_help>:

static int sh_help(int argc, char ** argv) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e022      	b.n	80008e2 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 800089c:	4916      	ldr	r1, [pc, #88]	@ (80008f8 <sh_help+0x6c>)
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	440b      	add	r3, r1
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	4912      	ldr	r1, [pc, #72]	@ (80008f8 <sh_help+0x6c>)
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	440b      	add	r3, r1
 80008bc:	3308      	adds	r3, #8
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <sh_help+0x70>)
 80008c6:	2128      	movs	r1, #40	@ 0x28
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <sh_help+0x74>)
 80008ca:	f005 fa6b 	bl	8005da4 <sniprintf>
 80008ce:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	480a      	ldr	r0, [pc, #40]	@ (8000900 <sh_help+0x74>)
 80008d8:	f7ff ffc4 	bl	8000864 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3301      	adds	r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <sh_help+0x78>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbd7      	blt.n	800089c <sh_help+0x10>
	}

	return 0;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200002f4 	.word	0x200002f4
 80008fc:	08006c6c 	.word	0x08006c6c
 8000900:	200005f4 	.word	0x200005f4
 8000904:	200002f0 	.word	0x200002f0

08000908 <shell_init>:

void shell_init() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	int size = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <shell_init+0x34>)
 8000914:	2128      	movs	r1, #40	@ 0x28
 8000916:	480a      	ldr	r0, [pc, #40]	@ (8000940 <shell_init+0x38>)
 8000918:	f005 fa44 	bl	8005da4 <sniprintf>
 800091c:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	b29b      	uxth	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	4806      	ldr	r0, [pc, #24]	@ (8000940 <shell_init+0x38>)
 8000926:	f7ff ff9d 	bl	8000864 <uart_write>

	shell_add('h', sh_help, "Help");
 800092a:	4a06      	ldr	r2, [pc, #24]	@ (8000944 <shell_init+0x3c>)
 800092c:	4906      	ldr	r1, [pc, #24]	@ (8000948 <shell_init+0x40>)
 800092e:	2068      	movs	r0, #104	@ 0x68
 8000930:	f000 f80c 	bl	800094c <shell_add>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08006c78 	.word	0x08006c78
 8000940:	200005f4 	.word	0x200005f4
 8000944:	08006ca0 	.word	0x08006ca0
 8000948:	0800088d 	.word	0x0800088d

0800094c <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <shell_add+0x74>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000960:	dc26      	bgt.n	80009b0 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <shell_add+0x74>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4917      	ldr	r1, [pc, #92]	@ (80009c4 <shell_add+0x78>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	440b      	add	r3, r1
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <shell_add+0x74>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4912      	ldr	r1, [pc, #72]	@ (80009c4 <shell_add+0x78>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	3304      	adds	r3, #4
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <shell_add+0x74>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	490c      	ldr	r1, [pc, #48]	@ (80009c4 <shell_add+0x78>)
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	440b      	add	r3, r1
 800099c:	3308      	adds	r3, #8
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <shell_add+0x74>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <shell_add+0x74>)
 80009aa:	6013      	str	r3, [r2, #0]
		return 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	e001      	b.n	80009b4 <shell_add+0x68>
	}

	return -1;
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	200002f0 	.word	0x200002f0
 80009c4:	200002f4 	.word	0x200002f4

080009c8 <shell_exec>:

static int shell_exec(char * buf) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b090      	sub	sp, #64	@ 0x40
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80009d8:	2300      	movs	r3, #0
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009dc:	e040      	b.n	8000a60 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 80009de:	492d      	ldr	r1, [pc, #180]	@ (8000a94 <shell_exec+0xcc>)
 80009e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	440b      	add	r3, r1
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d131      	bne.n	8000a5a <shell_exec+0x92>
			argc = 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a02:	e013      	b.n	8000a2c <shell_exec+0x64>
				if(*p == ' ') {
 8000a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b20      	cmp	r3, #32
 8000a0a:	d10c      	bne.n	8000a26 <shell_exec+0x5e>
					*p = '\0';
 8000a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000a18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a1a:	3201      	adds	r2, #1
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	3340      	adds	r3, #64	@ 0x40
 8000a20:	443b      	add	r3, r7
 8000a22:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a28:	3301      	adds	r3, #1
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <shell_exec+0x72>
 8000a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a36:	2b07      	cmp	r3, #7
 8000a38:	dde4      	ble.n	8000a04 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8000a3a:	4916      	ldr	r1, [pc, #88]	@ (8000a94 <shell_exec+0xcc>)
 8000a3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	3304      	adds	r3, #4
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f107 020c 	add.w	r2, r7, #12
 8000a50:	4611      	mov	r1, r2
 8000a52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000a54:	4798      	blx	r3
 8000a56:	4603      	mov	r3, r0
 8000a58:	e017      	b.n	8000a8a <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a60:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <shell_exec+0xd0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a66:	429a      	cmp	r2, r3
 8000a68:	dbb9      	blt.n	80009de <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a9c <shell_exec+0xd4>)
 8000a70:	2128      	movs	r1, #40	@ 0x28
 8000a72:	480b      	ldr	r0, [pc, #44]	@ (8000aa0 <shell_exec+0xd8>)
 8000a74:	f005 f996 	bl	8005da4 <sniprintf>
 8000a78:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8000a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <shell_exec+0xd8>)
 8000a82:	f7ff feef 	bl	8000864 <uart_write>
	return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3740      	adds	r7, #64	@ 0x40
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200002f4 	.word	0x200002f4
 8000a98:	200002f0 	.word	0x200002f0
 8000a9c:	08006ca8 	.word	0x08006ca8
 8000aa0:	200005f4 	.word	0x200005f4

08000aa4 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
	int reading = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	482a      	ldr	r0, [pc, #168]	@ (8000b60 <shell_run+0xbc>)
 8000ab6:	f7ff fed5 	bl	8000864 <uart_write>
		reading = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8000abe:	e047      	b.n	8000b50 <shell_run+0xac>
			char c = uart_read();
 8000ac0:	f7ff febe 	bl	8000840 <uart_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d025      	beq.n	8000b1a <shell_run+0x76>
 8000ace:	2b0d      	cmp	r3, #13
 8000ad0:	d12e      	bne.n	8000b30 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8000ad2:	4a24      	ldr	r2, [pc, #144]	@ (8000b64 <shell_run+0xc0>)
 8000ad4:	2128      	movs	r1, #40	@ 0x28
 8000ad6:	4824      	ldr	r0, [pc, #144]	@ (8000b68 <shell_run+0xc4>)
 8000ad8:	f005 f964 	bl	8005da4 <sniprintf>
 8000adc:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <shell_run+0xc4>)
 8000ae6:	f7ff febd 	bl	8000864 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	60ba      	str	r2, [r7, #8]
 8000af0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b6c <shell_run+0xc8>)
 8000af2:	2100      	movs	r1, #0
 8000af4:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <shell_run+0xc8>)
 8000af8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b70 <shell_run+0xcc>)
 8000afa:	2128      	movs	r1, #40	@ 0x28
 8000afc:	481a      	ldr	r0, [pc, #104]	@ (8000b68 <shell_run+0xc4>)
 8000afe:	f005 f951 	bl	8005da4 <sniprintf>
 8000b02:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <shell_run+0xc4>)
 8000b0c:	f7ff feaa 	bl	8000864 <uart_write>
				reading = 0;        //exit read loop
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
				break;
 8000b18:	e01a      	b.n	8000b50 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dd16      	ble.n	8000b4e <shell_run+0xaa>
					pos--;          //remove it in buffer
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8000b26:	2103      	movs	r1, #3
 8000b28:	4812      	ldr	r0, [pc, #72]	@ (8000b74 <shell_run+0xd0>)
 8000b2a:	f7ff fe9b 	bl	8000864 <uart_write>
				}
				break;
 8000b2e:	e00e      	b.n	8000b4e <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b27      	cmp	r3, #39	@ 0x27
 8000b34:	dc0c      	bgt.n	8000b50 <shell_run+0xac>
					uart_write(&c, 1);
 8000b36:	1cfb      	adds	r3, r7, #3
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fe92 	bl	8000864 <uart_write>
					cmd_buffer[pos++] = c; //store
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	78f9      	ldrb	r1, [r7, #3]
 8000b48:	4a08      	ldr	r2, [pc, #32]	@ (8000b6c <shell_run+0xc8>)
 8000b4a:	54d1      	strb	r1, [r2, r3]
 8000b4c:	e000      	b.n	8000b50 <shell_run+0xac>
				break;
 8000b4e:	bf00      	nop
		while(reading) {
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1b4      	bne.n	8000ac0 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <shell_run+0xc8>)
 8000b58:	f7ff ff36 	bl	80009c8 <shell_exec>
		uart_write(prompt, 2);
 8000b5c:	e7a9      	b.n	8000ab2 <shell_run+0xe>
 8000b5e:	bf00      	nop
 8000b60:	20000004 	.word	0x20000004
 8000b64:	08006cc0 	.word	0x08006cc0
 8000b68:	200005f4 	.word	0x200005f4
 8000b6c:	2000061c 	.word	0x2000061c
 8000b70:	08006cc4 	.word	0x08006cc4
 8000b74:	20000000 	.word	0x20000000

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	f06f 0001 	mvn.w	r0, #1
 8000bb6:	f000 fb04 	bl	80011c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c02:	f000 f9e3 	bl	8000fcc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c06:	f004 fb29 	bl	800525c <xTaskGetSchedulerState>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d001      	beq.n	8000c14 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c10:	f004 fd6a 	bl	80056e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <USART2_IRQHandler+0x10>)
 8000c1e:	f002 fa53 	bl	80030c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000648 	.word	0x20000648

08000c2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e00a      	b.n	8000c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3e:	f3af 8000 	nop.w
 8000c42:	4601      	mov	r1, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf0      	blt.n	8000c3e <_read+0x12>
  }

  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e009      	b.n	8000c8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd11 	bl	80006a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf1      	blt.n	8000c78 <_write+0x12>
  }
  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_close>:

int _close(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_isatty>:

int _isatty(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f005 f98e 	bl	8006058 <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20018000 	.word	0x20018000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	20000644 	.word	0x20000644
 8000d70:	20001530 	.word	0x20001530

08000d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000d9e:	4a15      	ldr	r2, [pc, #84]	@ (8000df4 <MX_USART2_UART_Init+0x5c>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_USART2_UART_Init+0x58>)
 8000ddc:	f001 ff88 	bl	8002cf0 <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000de6:	f7ff fd24 	bl	8000832 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000648 	.word	0x20000648
 8000df4:	40004400 	.word	0x40004400

08000df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0ac      	sub	sp, #176	@ 0xb0
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2288      	movs	r2, #136	@ 0x88
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f005 f8cf 	bl	8005fbc <memset>
  if(uartHandle->Instance==USART2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a25      	ldr	r2, [pc, #148]	@ (8000eb8 <HAL_UART_MspInit+0xc0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d143      	bne.n	8000eb0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 fa9f 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e40:	f7ff fcf7 	bl	8000832 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e48:	4a1c      	ldr	r2, [pc, #112]	@ (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000e74:	230c      	movs	r3, #12
 8000e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f000 fa46 	bl	800132c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2105      	movs	r1, #5
 8000ea4:	2026      	movs	r0, #38	@ 0x26
 8000ea6:	f000 f98c 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eaa:	2026      	movs	r0, #38	@ 0x26
 8000eac:	f000 f9a5 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	37b0      	adds	r7, #176	@ 0xb0
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40004400 	.word	0x40004400
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff ff56 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f005 f8b9 	bl	8006064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef2:	f7ff fc15 	bl	8000720 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f04:	08006d60 	.word	0x08006d60
  ldr r2, =_sbss
 8000f08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f0c:	2000152c 	.word	0x2000152c

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_Init+0x3c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <HAL_Init+0x3c>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f000 f93e 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f30:	200f      	movs	r0, #15
 8000f32:	f000 f80f 	bl	8000f54 <HAL_InitTick>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	e001      	b.n	8000f46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f42:	f7ff fe19 	bl	8000b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40022000 	.word	0x40022000

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <HAL_InitTick+0x6c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d023      	beq.n	8000fb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <HAL_InitTick+0x70>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <HAL_InitTick+0x6c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f949 	bl	8001216 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10f      	bne.n	8000faa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d809      	bhi.n	8000fa4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 f913 	bl	80011c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <HAL_InitTick+0x74>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e007      	b.n	8000fb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e004      	b.n	8000fb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e001      	b.n	8000fb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000010 	.word	0x20000010
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	2000000c 	.word	0x2000000c

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000010 	.word	0x20000010
 8000ff0:	200006d0 	.word	0x200006d0

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200006d0 	.word	0x200006d0

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	@ (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	@ (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d008      	beq.n	8001258 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2204      	movs	r2, #4
 800124a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e022      	b.n	800129e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 020e 	bic.w	r2, r2, #14
 8001266:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127c:	f003 021c 	and.w	r2, r3, #28
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	2101      	movs	r1, #1
 8001286:	fa01 f202 	lsl.w	r2, r1, r2
 800128a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d005      	beq.n	80012ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2204      	movs	r2, #4
 80012c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e029      	b.n	8001322 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 020e 	bic.w	r2, r2, #14
 80012dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f003 021c 	and.w	r2, r3, #28
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
    }
  }
  return status;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e17f      	b.n	800163c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8171 	beq.w	8001636 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d005      	beq.n	800136c <HAL_GPIO_Init+0x40>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d130      	bne.n	80013ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a2:	2201      	movs	r2, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f003 0201 	and.w	r2, r3, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d118      	bne.n	800140c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	f003 0201 	and.w	r2, r3, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b03      	cmp	r3, #3
 8001416:	d017      	beq.n	8001448 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	6939      	ldr	r1, [r7, #16]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80ac 	beq.w	8001636 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b5f      	ldr	r3, [pc, #380]	@ (800165c <HAL_GPIO_Init+0x330>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e2:	4a5e      	ldr	r2, [pc, #376]	@ (800165c <HAL_GPIO_Init+0x330>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ea:	4b5c      	ldr	r3, [pc, #368]	@ (800165c <HAL_GPIO_Init+0x330>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001660 <HAL_GPIO_Init+0x334>)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001520:	d025      	beq.n	800156e <HAL_GPIO_Init+0x242>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4f      	ldr	r2, [pc, #316]	@ (8001664 <HAL_GPIO_Init+0x338>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01f      	beq.n	800156a <HAL_GPIO_Init+0x23e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4e      	ldr	r2, [pc, #312]	@ (8001668 <HAL_GPIO_Init+0x33c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x23a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4d      	ldr	r2, [pc, #308]	@ (800166c <HAL_GPIO_Init+0x340>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x236>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4c      	ldr	r2, [pc, #304]	@ (8001670 <HAL_GPIO_Init+0x344>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x232>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4b      	ldr	r2, [pc, #300]	@ (8001674 <HAL_GPIO_Init+0x348>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4a      	ldr	r2, [pc, #296]	@ (8001678 <HAL_GPIO_Init+0x34c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x22a>
 8001552:	2306      	movs	r3, #6
 8001554:	e00c      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001556:	2307      	movs	r3, #7
 8001558:	e00a      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800155a:	2305      	movs	r3, #5
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800155e:	2304      	movs	r3, #4
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800156e:	2300      	movs	r3, #0
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001580:	4937      	ldr	r1, [pc, #220]	@ (8001660 <HAL_GPIO_Init+0x334>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800158e:	4b3b      	ldr	r3, [pc, #236]	@ (800167c <HAL_GPIO_Init+0x350>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b2:	4a32      	ldr	r2, [pc, #200]	@ (800167c <HAL_GPIO_Init+0x350>)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <HAL_GPIO_Init+0x350>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015dc:	4a27      	ldr	r2, [pc, #156]	@ (800167c <HAL_GPIO_Init+0x350>)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <HAL_GPIO_Init+0x350>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001606:	4a1d      	ldr	r2, [pc, #116]	@ (800167c <HAL_GPIO_Init+0x350>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_GPIO_Init+0x350>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <HAL_GPIO_Init+0x350>)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa22 f303 	lsr.w	r3, r2, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f ae78 	bne.w	800133c <HAL_GPIO_Init+0x10>
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	48000400 	.word	0x48000400
 8001668:	48000800 	.word	0x48000800
 800166c:	48000c00 	.word	0x48000c00
 8001670:	48001000 	.word	0x48001000
 8001674:	48001400 	.word	0x48001400
 8001678:	48001800 	.word	0x48001800
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800169c:	e002      	b.n	80016a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40007000 	.word	0x40007000

080016cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016da:	d130      	bne.n	800173e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016e8:	d038      	beq.n	800175c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016f2:	4a1e      	ldr	r2, [pc, #120]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2232      	movs	r2, #50	@ 0x32
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001710:	e002      	b.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3b01      	subs	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001718:	4b14      	ldr	r3, [pc, #80]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001724:	d102      	bne.n	800172c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f2      	bne.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001738:	d110      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e00f      	b.n	800175e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800174a:	d007      	beq.n	800175c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001754:	4a05      	ldr	r2, [pc, #20]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40007000 	.word	0x40007000
 8001770:	20000008 	.word	0x20000008
 8001774:	431bde83 	.word	0x431bde83

08001778 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e3ca      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178a:	4b97      	ldr	r3, [pc, #604]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001794:	4b94      	ldr	r3, [pc, #592]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80e4 	beq.w	8001974 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_RCC_OscConfig+0x4a>
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	f040 808b 	bne.w	80018d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	f040 8087 	bne.w	80018d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c2:	4b89      	ldr	r3, [pc, #548]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_RCC_OscConfig+0x62>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e3a2      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	4b82      	ldr	r3, [pc, #520]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HAL_RCC_OscConfig+0x7c>
 80017ea:	4b7f      	ldr	r3, [pc, #508]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017f2:	e005      	b.n	8001800 <HAL_RCC_OscConfig+0x88>
 80017f4:	4b7c      	ldr	r3, [pc, #496]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001800:	4293      	cmp	r3, r2
 8001802:	d223      	bcs.n	800184c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fd55 	bl	80022b8 <RCC_SetFlashLatencyFromMSIRange>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e383      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001818:	4b73      	ldr	r3, [pc, #460]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a72      	ldr	r2, [pc, #456]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b70      	ldr	r3, [pc, #448]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	496d      	ldr	r1, [pc, #436]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001836:	4b6c      	ldr	r3, [pc, #432]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	4968      	ldr	r1, [pc, #416]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
 800184a:	e025      	b.n	8001898 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184c:	4b66      	ldr	r3, [pc, #408]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a65      	ldr	r2, [pc, #404]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b63      	ldr	r3, [pc, #396]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4960      	ldr	r1, [pc, #384]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186a:	4b5f      	ldr	r3, [pc, #380]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	495b      	ldr	r1, [pc, #364]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fd15 	bl	80022b8 <RCC_SetFlashLatencyFromMSIRange>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e343      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001898:	f000 fc4a 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 800189c:	4602      	mov	r2, r0
 800189e:	4b52      	ldr	r3, [pc, #328]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	4950      	ldr	r1, [pc, #320]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80018aa:	5ccb      	ldrb	r3, [r1, r3]
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
 80018b4:	4a4e      	ldr	r2, [pc, #312]	@ (80019f0 <HAL_RCC_OscConfig+0x278>)
 80018b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018b8:	4b4e      	ldr	r3, [pc, #312]	@ (80019f4 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb49 	bl	8000f54 <HAL_InitTick>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d052      	beq.n	8001972 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	e327      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d032      	beq.n	800193e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018d8:	4b43      	ldr	r3, [pc, #268]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a42      	ldr	r2, [pc, #264]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb86 	bl	8000ff4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb82 	bl	8000ff4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e310      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fe:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a36      	ldr	r2, [pc, #216]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4931      	ldr	r1, [pc, #196]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001928:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	492c      	ldr	r1, [pc, #176]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e01a      	b.n	8001974 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a29      	ldr	r2, [pc, #164]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800194a:	f7ff fb53 	bl	8000ff4 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001952:	f7ff fb4f 	bl	8000ff4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e2dd      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001964:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x1da>
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001972:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d074      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b08      	cmp	r3, #8
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x21a>
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d10e      	bne.n	80019aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d10b      	bne.n	80019aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d064      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d160      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e2ba      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x24a>
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0b      	ldr	r2, [pc, #44]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e026      	b.n	8001a10 <HAL_RCC_OscConfig+0x298>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ca:	d115      	bne.n	80019f8 <HAL_RCC_OscConfig+0x280>
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80019d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a02      	ldr	r2, [pc, #8]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x298>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	08006cd4 	.word	0x08006cd4
 80019f0:	20000008 	.word	0x20000008
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	4ba0      	ldr	r3, [pc, #640]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a9f      	ldr	r2, [pc, #636]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b9d      	ldr	r3, [pc, #628]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a9c      	ldr	r2, [pc, #624]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff faec 	bl	8000ff4 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fae8 	bl	8000ff4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e276      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a32:	4b92      	ldr	r3, [pc, #584]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2a8>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fad8 	bl	8000ff4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fad4 	bl	8000ff4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e262      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5a:	4b88      	ldr	r3, [pc, #544]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2d0>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d060      	beq.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_OscConfig+0x310>
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d119      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d116      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b7c      	ldr	r3, [pc, #496]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x328>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e23f      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b76      	ldr	r3, [pc, #472]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4973      	ldr	r1, [pc, #460]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab4:	e040      	b.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d023      	beq.n	8001b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abe:	4b6f      	ldr	r3, [pc, #444]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa93 	bl	8000ff4 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fa8f 	bl	8000ff4 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e21d      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b62      	ldr	r3, [pc, #392]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	495f      	ldr	r1, [pc, #380]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
 8001b04:	e018      	b.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b06:	4b5d      	ldr	r3, [pc, #372]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff fa6f 	bl	8000ff4 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff fa6b 	bl	8000ff4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1f9      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2c:	4b53      	ldr	r3, [pc, #332]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d03c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b52:	4a4a      	ldr	r2, [pc, #296]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fa4a 	bl	8000ff4 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff fa46 	bl	8000ff4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1d4      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b76:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ef      	beq.n	8001b64 <HAL_RCC_OscConfig+0x3ec>
 8001b84:	e01b      	b.n	8001bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b86:	4b3d      	ldr	r3, [pc, #244]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa2d 	bl	8000ff4 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa29 	bl	8000ff4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1b7      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb0:	4b32      	ldr	r3, [pc, #200]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ef      	bne.n	8001b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80a6 	beq.w	8001d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	4a26      	ldr	r2, [pc, #152]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be8:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf8:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_RCC_OscConfig+0x508>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d118      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_RCC_OscConfig+0x508>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <HAL_RCC_OscConfig+0x508>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c10:	f7ff f9f0 	bl	8000ff4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c18:	f7ff f9ec 	bl	8000ff4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e17a      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_RCC_OscConfig+0x508>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4d8>
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c4e:	e029      	b.n	8001ca4 <HAL_RCC_OscConfig+0x52c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d115      	bne.n	8001c84 <HAL_RCC_OscConfig+0x50c>
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5e:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6e:	4a03      	ldr	r2, [pc, #12]	@ (8001c7c <HAL_RCC_OscConfig+0x504>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c78:	e014      	b.n	8001ca4 <HAL_RCC_OscConfig+0x52c>
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40007000 	.word	0x40007000
 8001c84:	4b9c      	ldr	r3, [pc, #624]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c94:	4b98      	ldr	r3, [pc, #608]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9a:	4a97      	ldr	r2, [pc, #604]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d016      	beq.n	8001cda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff f9a2 	bl	8000ff4 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f99e 	bl	8000ff4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e12a      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cca:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ed      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x53c>
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cda:	f7ff f98b 	bl	8000ff4 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff f987 	bl	8000ff4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e113      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ed      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0c:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	4a79      	ldr	r2, [pc, #484]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80fe 	beq.w	8001f1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	f040 80d0 	bne.w	8001ecc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d2c:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d130      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d127      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11f      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d6c:	2a07      	cmp	r2, #7
 8001d6e:	bf14      	ite	ne
 8001d70:	2201      	movne	r2, #1
 8001d72:	2200      	moveq	r2, #0
 8001d74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d113      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d06e      	beq.n	8001e80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d069      	beq.n	8001e7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001db4:	4b50      	ldr	r3, [pc, #320]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0ad      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd0:	f7ff f910 	bl	8000ff4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f90c 	bl	8000ff4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e09a      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dea:	4b43      	ldr	r3, [pc, #268]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df6:	4b40      	ldr	r3, [pc, #256]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b40      	ldr	r3, [pc, #256]	@ (8001efc <HAL_RCC_OscConfig+0x784>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e06:	3a01      	subs	r2, #1
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e10:	0212      	lsls	r2, r2, #8
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e18:	0852      	lsrs	r2, r2, #1
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	0552      	lsls	r2, r2, #21
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e24:	0852      	lsrs	r2, r2, #1
 8001e26:	3a01      	subs	r2, #1
 8001e28:	0652      	lsls	r2, r2, #25
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e30:	0912      	lsrs	r2, r2, #4
 8001e32:	0452      	lsls	r2, r2, #17
 8001e34:	430a      	orrs	r2, r1
 8001e36:	4930      	ldr	r1, [pc, #192]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e54:	f7ff f8ce 	bl	8000ff4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f8ca 	bl	8000ff4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e058      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7a:	e050      	b.n	8001f1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e04f      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d148      	bne.n	8001f1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e98:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ea4:	f7ff f8a6 	bl	8000ff4 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff f8a2 	bl	8000ff4 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e030      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x734>
 8001eca:	e028      	b.n	8001f1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d023      	beq.n	8001f1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a08      	ldr	r2, [pc, #32]	@ (8001ef8 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f889 	bl	8000ff4 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee4:	e00c      	b.n	8001f00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff f885 	bl	8000ff4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d905      	bls.n	8001f00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e013      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_RCC_OscConfig+0x7b0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ec      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_RCC_OscConfig+0x7b0>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4905      	ldr	r1, [pc, #20]	@ (8001f28 <HAL_RCC_OscConfig+0x7b0>)
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_RCC_OscConfig+0x7b4>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	60cb      	str	r3, [r1, #12]
 8001f18:	e001      	b.n	8001f1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	feeefffc 	.word	0xfeeefffc

08001f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0e7      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b75      	ldr	r3, [pc, #468]	@ (800211c <HAL_RCC_ClockConfig+0x1ec>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b72      	ldr	r3, [pc, #456]	@ (800211c <HAL_RCC_ClockConfig+0x1ec>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	4970      	ldr	r1, [pc, #448]	@ (800211c <HAL_RCC_ClockConfig+0x1ec>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b6e      	ldr	r3, [pc, #440]	@ (800211c <HAL_RCC_ClockConfig+0x1ec>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0cf      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d010      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4b66      	ldr	r3, [pc, #408]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d908      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f90:	4b63      	ldr	r3, [pc, #396]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4960      	ldr	r1, [pc, #384]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d04c      	beq.n	8002048 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d121      	bne.n	8002006 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0a6      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fce:	4b54      	ldr	r3, [pc, #336]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e09a      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e08e      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e086      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b46      	ldr	r3, [pc, #280]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4943      	ldr	r1, [pc, #268]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002018:	f7fe ffec 	bl	8000ff4 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe ffe8 	bl	8000ff4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e06e      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d010      	beq.n	8002076 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002060:	429a      	cmp	r2, r3
 8002062:	d208      	bcs.n	8002076 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002064:	4b2e      	ldr	r3, [pc, #184]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	492b      	ldr	r1, [pc, #172]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002076:	4b29      	ldr	r3, [pc, #164]	@ (800211c <HAL_RCC_ClockConfig+0x1ec>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d210      	bcs.n	80020a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002084:	4b25      	ldr	r3, [pc, #148]	@ (800211c <HAL_RCC_ClockConfig+0x1ec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 0207 	bic.w	r2, r3, #7
 800208c:	4923      	ldr	r1, [pc, #140]	@ (800211c <HAL_RCC_ClockConfig+0x1ec>)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002094:	4b21      	ldr	r3, [pc, #132]	@ (800211c <HAL_RCC_ClockConfig+0x1ec>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e036      	b.n	8002114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	4918      	ldr	r1, [pc, #96]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d009      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4910      	ldr	r1, [pc, #64]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e4:	f000 f824 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	490b      	ldr	r1, [pc, #44]	@ (8002124 <HAL_RCC_ClockConfig+0x1f4>)
 80020f6:	5ccb      	ldrb	r3, [r1, r3]
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002100:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <HAL_RCC_ClockConfig+0x1f8>)
 8002102:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_ClockConfig+0x1fc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ff23 	bl	8000f54 <HAL_InitTick>
 800210e:	4603      	mov	r3, r0
 8002110:	72fb      	strb	r3, [r7, #11]

  return status;
 8002112:	7afb      	ldrb	r3, [r7, #11]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	08006cd4 	.word	0x08006cd4
 8002128:	20000008 	.word	0x20000008
 800212c:	2000000c 	.word	0x2000000c

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	@ 0x24
 8002134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213e:	4b3e      	ldr	r3, [pc, #248]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002148:	4b3b      	ldr	r3, [pc, #236]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x34>
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d121      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d11e      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002164:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002170:	4b31      	ldr	r3, [pc, #196]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002180:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800218c:	4a2b      	ldr	r2, [pc, #172]	@ (800223c <HAL_RCC_GetSysClockFreq+0x10c>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d102      	bne.n	80021ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021a8:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x110>)
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	e004      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b4:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x114>)
 80021b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d134      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d003      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0xac>
 80021d4:	e005      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x110>)
 80021d8:	617b      	str	r3, [r7, #20]
      break;
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021dc:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x114>)
 80021de:	617b      	str	r3, [r7, #20]
      break;
 80021e0:	e002      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	617b      	str	r3, [r7, #20]
      break;
 80021e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	3301      	adds	r3, #1
 80021f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	fb03 f202 	mul.w	r2, r3, r2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x108>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	0e5b      	lsrs	r3, r3, #25
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	3301      	adds	r3, #1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002228:	69bb      	ldr	r3, [r7, #24]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	@ 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	08006cec 	.word	0x08006cec
 8002240:	00f42400 	.word	0x00f42400
 8002244:	007a1200 	.word	0x007a1200

08002248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000008 	.word	0x20000008

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4904      	ldr	r1, [pc, #16]	@ (8002288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	08006ce4 	.word	0x08006ce4

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002290:	f7ff ffda 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0adb      	lsrs	r3, r3, #11
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4904      	ldr	r1, [pc, #16]	@ (80022b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08006ce4 	.word	0x08006ce4

080022b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022d0:	f7ff f9ee 	bl	80016b0 <HAL_PWREx_GetVoltageRange>
 80022d4:	6178      	str	r0, [r7, #20]
 80022d6:	e014      	b.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	4a24      	ldr	r2, [pc, #144]	@ (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022f0:	f7ff f9de 	bl	80016b0 <HAL_PWREx_GetVoltageRange>
 80022f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002300:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002308:	d10b      	bne.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	@ 0x80
 800230e:	d919      	bls.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2ba0      	cmp	r3, #160	@ 0xa0
 8002314:	d902      	bls.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002316:	2302      	movs	r3, #2
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e013      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231c:	2301      	movs	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e010      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b80      	cmp	r3, #128	@ 0x80
 8002326:	d902      	bls.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002328:	2303      	movs	r3, #3
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e00a      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	@ 0x80
 8002332:	d102      	bne.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002334:	2302      	movs	r3, #2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e004      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b70      	cmp	r3, #112	@ 0x70
 800233e:	d101      	bne.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 0207 	bic.w	r2, r3, #7
 800234c:	4909      	ldr	r1, [pc, #36]	@ (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002354:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002380:	2300      	movs	r3, #0
 8002382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002384:	2300      	movs	r3, #0
 8002386:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002390:	2b00      	cmp	r3, #0
 8002392:	d041      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002398:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800239c:	d02a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800239e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023a2:	d824      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023a8:	d008      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ae:	d81e      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023b8:	d010      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023ba:	e018      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023bc:	4b86      	ldr	r3, [pc, #536]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a85      	ldr	r2, [pc, #532]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c8:	e015      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fabb 	bl	800294c <RCCEx_PLLSAI1_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023da:	e00c      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3320      	adds	r3, #32
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fba6 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ec:	e003      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	74fb      	strb	r3, [r7, #19]
      break;
 80023f2:	e000      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023fc:	4b76      	ldr	r3, [pc, #472]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800240a:	4973      	ldr	r1, [pc, #460]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002412:	e001      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d041      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002428:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800242c:	d02a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800242e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002432:	d824      	bhi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002438:	d008      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800243a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800243e:	d81e      	bhi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002448:	d010      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800244a:	e018      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800244c:	4b62      	ldr	r3, [pc, #392]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a61      	ldr	r2, [pc, #388]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002456:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002458:	e015      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fa73 	bl	800294c <RCCEx_PLLSAI1_Config>
 8002466:	4603      	mov	r3, r0
 8002468:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246a:	e00c      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3320      	adds	r3, #32
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fb5e 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800247c:	e003      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	74fb      	strb	r3, [r7, #19]
      break;
 8002482:	e000      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800248c:	4b52      	ldr	r3, [pc, #328]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800249a:	494f      	ldr	r1, [pc, #316]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024a2:	e001      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a0 	beq.w	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024ba:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00d      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	4b41      	ldr	r3, [pc, #260]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	4a40      	ldr	r2, [pc, #256]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024da:	6593      	str	r3, [r2, #88]	@ 0x58
 80024dc:	4b3e      	ldr	r3, [pc, #248]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e8:	2301      	movs	r3, #1
 80024ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ec:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3a      	ldr	r2, [pc, #232]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024f8:	f7fe fd7c 	bl	8000ff4 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024fe:	e009      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002500:	f7fe fd78 	bl	8000ff4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d902      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	74fb      	strb	r3, [r7, #19]
        break;
 8002512:	e005      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002514:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ef      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d15c      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002526:	4b2c      	ldr	r3, [pc, #176]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002530:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01f      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	d019      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002544:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800254e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002550:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	4a20      	ldr	r2, [pc, #128]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002570:	4a19      	ldr	r2, [pc, #100]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fd37 	bl	8000ff4 <HAL_GetTick>
 8002586:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002588:	e00b      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fd33 	bl	8000ff4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d902      	bls.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	74fb      	strb	r3, [r7, #19]
            break;
 80025a0:	e006      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ec      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025c6:	4904      	ldr	r1, [pc, #16]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025ce:	e009      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
 80025d4:	e006      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e4:	7c7b      	ldrb	r3, [r7, #17]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d105      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ea:	4b9e      	ldr	r3, [pc, #632]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	4a9d      	ldr	r2, [pc, #628]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002602:	4b98      	ldr	r3, [pc, #608]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002610:	4994      	ldr	r1, [pc, #592]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002624:	4b8f      	ldr	r3, [pc, #572]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	f023 020c 	bic.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002632:	498c      	ldr	r1, [pc, #560]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002646:	4b87      	ldr	r3, [pc, #540]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	4983      	ldr	r1, [pc, #524]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002668:	4b7e      	ldr	r3, [pc, #504]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	497b      	ldr	r1, [pc, #492]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800268a:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002698:	4972      	ldr	r1, [pc, #456]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ba:	496a      	ldr	r1, [pc, #424]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ce:	4b65      	ldr	r3, [pc, #404]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026dc:	4961      	ldr	r1, [pc, #388]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fe:	4959      	ldr	r1, [pc, #356]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002712:	4b54      	ldr	r3, [pc, #336]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002718:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002720:	4950      	ldr	r1, [pc, #320]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002734:	4b4b      	ldr	r3, [pc, #300]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	4948      	ldr	r1, [pc, #288]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002756:	4b43      	ldr	r3, [pc, #268]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	493f      	ldr	r1, [pc, #252]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d028      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002778:	4b3a      	ldr	r3, [pc, #232]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002786:	4937      	ldr	r1, [pc, #220]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002796:	d106      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002798:	4b32      	ldr	r3, [pc, #200]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a31      	ldr	r2, [pc, #196]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027a2:	60d3      	str	r3, [r2, #12]
 80027a4:	e011      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ae:	d10c      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	2101      	movs	r1, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f8c8 	bl	800294c <RCCEx_PLLSAI1_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d028      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027d6:	4b23      	ldr	r3, [pc, #140]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	491f      	ldr	r1, [pc, #124]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f4:	d106      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002800:	60d3      	str	r3, [r2, #12]
 8002802:	e011      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800280c:	d10c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3304      	adds	r3, #4
 8002812:	2101      	movs	r1, #1
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f899 	bl	800294c <RCCEx_PLLSAI1_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d02b      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002842:	4908      	ldr	r1, [pc, #32]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002852:	d109      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a02      	ldr	r2, [pc, #8]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800285e:	60d3      	str	r3, [r2, #12]
 8002860:	e014      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002870:	d10c      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f000 f867 	bl	800294c <RCCEx_PLLSAI1_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d02f      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002898:	4b2b      	ldr	r3, [pc, #172]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028a6:	4928      	ldr	r1, [pc, #160]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028b6:	d10d      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	2102      	movs	r1, #2
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f844 	bl	800294c <RCCEx_PLLSAI1_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d014      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	74bb      	strb	r3, [r7, #18]
 80028d2:	e011      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3320      	adds	r3, #32
 80028e2:	2102      	movs	r1, #2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f925 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 80028ea:	4603      	mov	r3, r0
 80028ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002912:	490d      	ldr	r1, [pc, #52]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002926:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002936:	4904      	ldr	r1, [pc, #16]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800293e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000

0800294c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800295a:	4b75      	ldr	r3, [pc, #468]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d018      	beq.n	8002998 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002966:	4b72      	ldr	r3, [pc, #456]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d10d      	bne.n	8002992 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
       ||
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800297e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
       ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d047      	beq.n	8002a22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e044      	b.n	8002a22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d018      	beq.n	80029d2 <RCCEx_PLLSAI1_Config+0x86>
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d825      	bhi.n	80029f0 <RCCEx_PLLSAI1_Config+0xa4>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d002      	beq.n	80029ae <RCCEx_PLLSAI1_Config+0x62>
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d009      	beq.n	80029c0 <RCCEx_PLLSAI1_Config+0x74>
 80029ac:	e020      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ae:	4b60      	ldr	r3, [pc, #384]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11d      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029be:	e01a      	b.n	80029f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e013      	b.n	80029fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029d2:	4b57      	ldr	r3, [pc, #348]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029de:	4b54      	ldr	r3, [pc, #336]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ee:	e006      	b.n	80029fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      break;
 80029f4:	e004      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a06:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	4944      	ldr	r1, [pc, #272]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d17d      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a28:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a40      	ldr	r2, [pc, #256]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a34:	f7fe fade 	bl	8000ff4 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a3a:	e009      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a3c:	f7fe fada 	bl	8000ff4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d902      	bls.n	8002a50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a4e:	e005      	b.n	8002a5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a50:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ef      	bne.n	8002a3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d160      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a68:	4b31      	ldr	r3, [pc, #196]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6892      	ldr	r2, [r2, #8]
 8002a78:	0211      	lsls	r1, r2, #8
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	0912      	lsrs	r2, r2, #4
 8002a80:	0452      	lsls	r2, r2, #17
 8002a82:	430a      	orrs	r2, r1
 8002a84:	492a      	ldr	r1, [pc, #168]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	610b      	str	r3, [r1, #16]
 8002a8a:	e027      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d112      	bne.n	8002ab8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a92:	4b27      	ldr	r3, [pc, #156]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6892      	ldr	r2, [r2, #8]
 8002aa2:	0211      	lsls	r1, r2, #8
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6912      	ldr	r2, [r2, #16]
 8002aa8:	0852      	lsrs	r2, r2, #1
 8002aaa:	3a01      	subs	r2, #1
 8002aac:	0552      	lsls	r2, r2, #21
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	491f      	ldr	r1, [pc, #124]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	610b      	str	r3, [r1, #16]
 8002ab6:	e011      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ac0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	0211      	lsls	r1, r2, #8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6952      	ldr	r2, [r2, #20]
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0652      	lsls	r2, r2, #25
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	4916      	ldr	r1, [pc, #88]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fa84 	bl	8000ff4 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af0:	f7fe fa80 	bl	8000ff4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
          break;
 8002b02:	e005      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	4904      	ldr	r1, [pc, #16]	@ (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b42:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d018      	beq.n	8002b80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b4e:	4b67      	ldr	r3, [pc, #412]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0203 	and.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d10d      	bne.n	8002b7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
       ||
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b66:	4b61      	ldr	r3, [pc, #388]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
       ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d047      	beq.n	8002c0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	e044      	b.n	8002c0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d018      	beq.n	8002bba <RCCEx_PLLSAI2_Config+0x86>
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d825      	bhi.n	8002bd8 <RCCEx_PLLSAI2_Config+0xa4>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d002      	beq.n	8002b96 <RCCEx_PLLSAI2_Config+0x62>
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d009      	beq.n	8002ba8 <RCCEx_PLLSAI2_Config+0x74>
 8002b94:	e020      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b96:	4b55      	ldr	r3, [pc, #340]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11d      	bne.n	8002bde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba6:	e01a      	b.n	8002bde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ba8:	4b50      	ldr	r3, [pc, #320]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d116      	bne.n	8002be2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb8:	e013      	b.n	8002be2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bba:	4b4c      	ldr	r3, [pc, #304]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10f      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bc6:	4b49      	ldr	r3, [pc, #292]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bd6:	e006      	b.n	8002be6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e004      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bde:	bf00      	nop
 8002be0:	e002      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10d      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bee:	4b3f      	ldr	r3, [pc, #252]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	430b      	orrs	r3, r1
 8002c04:	4939      	ldr	r1, [pc, #228]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d167      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c10:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a35      	ldr	r2, [pc, #212]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c1c:	f7fe f9ea 	bl	8000ff4 <HAL_GetTick>
 8002c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c22:	e009      	b.n	8002c38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c24:	f7fe f9e6 	bl	8000ff4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	73fb      	strb	r3, [r7, #15]
        break;
 8002c36:	e005      	b.n	8002c44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c38:	4b2c      	ldr	r3, [pc, #176]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ef      	bne.n	8002c24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d14a      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d111      	bne.n	8002c74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c50:	4b26      	ldr	r3, [pc, #152]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6892      	ldr	r2, [r2, #8]
 8002c60:	0211      	lsls	r1, r2, #8
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68d2      	ldr	r2, [r2, #12]
 8002c66:	0912      	lsrs	r2, r2, #4
 8002c68:	0452      	lsls	r2, r2, #17
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	491f      	ldr	r1, [pc, #124]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	614b      	str	r3, [r1, #20]
 8002c72:	e011      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c74:	4b1d      	ldr	r3, [pc, #116]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	0211      	lsls	r1, r2, #8
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6912      	ldr	r2, [r2, #16]
 8002c8a:	0852      	lsrs	r2, r2, #1
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	0652      	lsls	r2, r2, #25
 8002c90:	430a      	orrs	r2, r1
 8002c92:	4916      	ldr	r1, [pc, #88]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c98:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a13      	ldr	r2, [pc, #76]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe f9a6 	bl	8000ff4 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002caa:	e009      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cac:	f7fe f9a2 	bl	8000ff4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d902      	bls.n	8002cc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cbe:	e005      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ef      	beq.n	8002cac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	4904      	ldr	r1, [pc, #16]	@ (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000

08002cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e040      	b.n	8002d84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fe f870 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	@ 0x24
 8002d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 ffae 	bl	8003c98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fcf3 	bl	8003728 <UART_SetConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e01b      	b.n	8002d84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f001 f82d 	bl	8003ddc <UART_CheckIdleState>
 8002d82:	4603      	mov	r3, r0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	@ 0x28
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d177      	bne.n	8002e94 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_UART_Transmit+0x24>
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e070      	b.n	8002e96 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2221      	movs	r2, #33	@ 0x21
 8002dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dc2:	f7fe f917 	bl	8000ff4 <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	88fa      	ldrh	r2, [r7, #6]
 8002dcc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de0:	d108      	bne.n	8002df4 <HAL_UART_Transmit+0x68>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e003      	b.n	8002dfc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dfc:	e02f      	b.n	8002e5e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f001 f88f 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e03b      	b.n	8002e96 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e30:	b292      	uxth	r2, r2
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	3302      	adds	r3, #2
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e007      	b.n	8002e4c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1c9      	bne.n	8002dfe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2140      	movs	r1, #64	@ 0x40
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f001 f859 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e005      	b.n	8002e96 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08a      	sub	sp, #40	@ 0x28
 8002ea2:	af02      	add	r7, sp, #8
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	f040 80b6 	bne.w	8003026 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_UART_Receive+0x28>
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0ae      	b.n	8003028 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2222      	movs	r2, #34	@ 0x22
 8002ed6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe f888 	bl	8000ff4 <HAL_GetTick>
 8002ee4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efe:	d10e      	bne.n	8002f1e <HAL_UART_Receive+0x80>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_UART_Receive+0x76>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f12:	e02d      	b.n	8002f70 <HAL_UART_Receive+0xd2>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	22ff      	movs	r2, #255	@ 0xff
 8002f18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f1c:	e028      	b.n	8002f70 <HAL_UART_Receive+0xd2>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_UART_Receive+0xa4>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Receive+0x9a>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	22ff      	movs	r2, #255	@ 0xff
 8002f32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f36:	e01b      	b.n	8002f70 <HAL_UART_Receive+0xd2>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	227f      	movs	r2, #127	@ 0x7f
 8002f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f40:	e016      	b.n	8002f70 <HAL_UART_Receive+0xd2>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f4a:	d10d      	bne.n	8002f68 <HAL_UART_Receive+0xca>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <HAL_UART_Receive+0xc0>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	227f      	movs	r2, #127	@ 0x7f
 8002f58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f5c:	e008      	b.n	8002f70 <HAL_UART_Receive+0xd2>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	223f      	movs	r2, #63	@ 0x3f
 8002f62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f66:	e003      	b.n	8002f70 <HAL_UART_Receive+0xd2>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002f76:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f80:	d108      	bne.n	8002f94 <HAL_UART_Receive+0xf6>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	e003      	b.n	8002f9c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f9c:	e037      	b.n	800300e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2120      	movs	r1, #32
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 ffbf 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e033      	b.n	8003028 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	8a7b      	ldrh	r3, [r7, #18]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	3302      	adds	r3, #2
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e00d      	b.n	8002ffc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	8a7b      	ldrh	r3, [r7, #18]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1c1      	bne.n	8002f9e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	@ 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003044:	2b20      	cmp	r3, #32
 8003046:	d137      	bne.n	80030b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_UART_Receive_IT+0x24>
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e030      	b.n	80030ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a18      	ldr	r2, [pc, #96]	@ (80030c4 <HAL_UART_Receive_IT+0x94>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d01f      	beq.n	80030a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	613b      	str	r3, [r7, #16]
   return(result);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	69f9      	ldr	r1, [r7, #28]
 800309a:	6a3a      	ldr	r2, [r7, #32]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e6      	bne.n	8003076 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 ffaa 	bl	8004008 <UART_Start_Receive_IT>
 80030b4:	4603      	mov	r3, r0
 80030b6:	e000      	b.n	80030ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3728      	adds	r7, #40	@ 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40008000 	.word	0x40008000

080030c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0ba      	sub	sp, #232	@ 0xe8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80030f6:	4013      	ands	r3, r2
 80030f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80030fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d115      	bne.n	8003130 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00f      	beq.n	8003130 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 82ca 	beq.w	80036ba <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
      }
      return;
 800312e:	e2c4      	b.n	80036ba <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8117 	beq.w	8003368 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800313a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003146:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800314a:	4b85      	ldr	r3, [pc, #532]	@ (8003360 <HAL_UART_IRQHandler+0x298>)
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 810a 	beq.w	8003368 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d011      	beq.n	8003184 <HAL_UART_IRQHandler+0xbc>
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2201      	movs	r2, #1
 8003172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d011      	beq.n	80031b4 <HAL_UART_IRQHandler+0xec>
 8003190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2202      	movs	r2, #2
 80031a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d011      	beq.n	80031e4 <HAL_UART_IRQHandler+0x11c>
 80031c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00b      	beq.n	80031e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2204      	movs	r2, #4
 80031d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031da:	f043 0202 	orr.w	r2, r3, #2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003200:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2208      	movs	r2, #8
 800320e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003216:	f043 0208 	orr.w	r2, r3, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <HAL_UART_IRQHandler+0x18a>
 800322c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003230:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00c      	beq.n	8003252 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003240:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8230 	beq.w	80036be <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800326a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800328c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329a:	2b40      	cmp	r3, #64	@ 0x40
 800329c:	d005      	beq.n	80032aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800329e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d04f      	beq.n	800334a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 ff72 	bl	8004194 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ba:	2b40      	cmp	r3, #64	@ 0x40
 80032bc:	d141      	bne.n	8003342 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3308      	adds	r3, #8
 80032c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032fa:	e841 2300 	strex	r3, r2, [r1]
 80032fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1d9      	bne.n	80032be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330e:	2b00      	cmp	r3, #0
 8003310:	d013      	beq.n	800333a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003316:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <HAL_UART_IRQHandler+0x29c>)
 8003318:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd ffc3 	bl	80012aa <HAL_DMA_Abort_IT>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d017      	beq.n	800335a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003334:	4610      	mov	r0, r2
 8003336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	e00f      	b.n	800335a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9de 	bl	80036fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	e00b      	b.n	800335a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9da 	bl	80036fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003348:	e007      	b.n	800335a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9d6 	bl	80036fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003358:	e1b1      	b.n	80036be <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335a:	bf00      	nop
    return;
 800335c:	e1af      	b.n	80036be <HAL_UART_IRQHandler+0x5f6>
 800335e:	bf00      	nop
 8003360:	04000120 	.word	0x04000120
 8003364:	0800425d 	.word	0x0800425d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336c:	2b01      	cmp	r3, #1
 800336e:	f040 816a 	bne.w	8003646 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8163 	beq.w	8003646 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 815c 	beq.w	8003646 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2210      	movs	r2, #16
 8003394:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	f040 80d4 	bne.w	800354e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80ad 	beq.w	8003516 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80033c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033c6:	429a      	cmp	r2, r3
 80033c8:	f080 80a5 	bcs.w	8003516 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 8086 	bne.w	80034f4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003412:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003416:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800341e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800342a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1da      	bne.n	80033e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3308      	adds	r3, #8
 8003438:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3308      	adds	r3, #8
 8003452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003456:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800345a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800345e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e1      	bne.n	8003432 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3308      	adds	r3, #8
 8003474:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800347e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3308      	adds	r3, #8
 800348e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003492:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003498:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e3      	bne.n	800346e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034c4:	f023 0310 	bic.w	r3, r3, #16
 80034c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e4      	bne.n	80034b4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fe9d 	bl	800122e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003506:	b29b      	uxth	r3, r3
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	b29b      	uxth	r3, r3
 800350c:	4619      	mov	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8fe 	bl	8003710 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003514:	e0d5      	b.n	80036c2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800351c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 80ce 	bne.w	80036c2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b20      	cmp	r3, #32
 8003534:	f040 80c5 	bne.w	80036c2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8e2 	bl	8003710 <HAL_UARTEx_RxEventCallback>
      return;
 800354c:	e0b9      	b.n	80036c2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800355a:	b29b      	uxth	r3, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80ab 	beq.w	80036c6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80a6 	beq.w	80036c6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003582:	e853 3f00 	ldrex	r3, [r3]
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800358e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800359c:	647b      	str	r3, [r7, #68]	@ 0x44
 800359e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e4      	bne.n	800357a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3308      	adds	r3, #8
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	623b      	str	r3, [r7, #32]
   return(result);
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3308      	adds	r3, #8
 80035d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80035d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e3      	bne.n	80035b0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	60fb      	str	r3, [r7, #12]
   return(result);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f023 0310 	bic.w	r3, r3, #16
 8003610:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	69b9      	ldr	r1, [r7, #24]
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	617b      	str	r3, [r7, #20]
   return(result);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e4      	bne.n	80035fc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f866 	bl	8003710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003644:	e03f      	b.n	80036c6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <HAL_UART_IRQHandler+0x5a8>
 8003652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003666:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fff3 	bl	8004654 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800366e:	e02d      	b.n	80036cc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01c      	beq.n	80036ca <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
    }
    return;
 8003698:	e017      	b.n	80036ca <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <HAL_UART_IRQHandler+0x604>
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00c      	beq.n	80036cc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fde8 	bl	8004288 <UART_EndTransmit_IT>
    return;
 80036b8:	e008      	b.n	80036cc <HAL_UART_IRQHandler+0x604>
      return;
 80036ba:	bf00      	nop
 80036bc:	e006      	b.n	80036cc <HAL_UART_IRQHandler+0x604>
    return;
 80036be:	bf00      	nop
 80036c0:	e004      	b.n	80036cc <HAL_UART_IRQHandler+0x604>
      return;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <HAL_UART_IRQHandler+0x604>
      return;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_UART_IRQHandler+0x604>
    return;
 80036ca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036cc:	37e8      	adds	r7, #232	@ 0xe8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop

080036d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	b08a      	sub	sp, #40	@ 0x28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4313      	orrs	r3, r2
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4ba4      	ldr	r3, [pc, #656]	@ (80039e8 <UART_SetConfig+0x2c0>)
 8003758:	4013      	ands	r3, r2
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a99      	ldr	r2, [pc, #612]	@ (80039ec <UART_SetConfig+0x2c4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003790:	4313      	orrs	r3, r2
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a90      	ldr	r2, [pc, #576]	@ (80039f0 <UART_SetConfig+0x2c8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d126      	bne.n	8003800 <UART_SetConfig+0xd8>
 80037b2:	4b90      	ldr	r3, [pc, #576]	@ (80039f4 <UART_SetConfig+0x2cc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d81b      	bhi.n	80037f8 <UART_SetConfig+0xd0>
 80037c0:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <UART_SetConfig+0xa0>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e9 	.word	0x080037e9
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037f1 	.word	0x080037f1
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037de:	e116      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80037e0:	2302      	movs	r3, #2
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e6:	e112      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ee:	e10e      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f6:	e10a      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fe:	e106      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7c      	ldr	r2, [pc, #496]	@ (80039f8 <UART_SetConfig+0x2d0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d138      	bne.n	800387c <UART_SetConfig+0x154>
 800380a:	4b7a      	ldr	r3, [pc, #488]	@ (80039f4 <UART_SetConfig+0x2cc>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b0c      	cmp	r3, #12
 8003816:	d82d      	bhi.n	8003874 <UART_SetConfig+0x14c>
 8003818:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <UART_SetConfig+0xf8>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003855 	.word	0x08003855
 8003824:	08003875 	.word	0x08003875
 8003828:	08003875 	.word	0x08003875
 800382c:	08003875 	.word	0x08003875
 8003830:	08003865 	.word	0x08003865
 8003834:	08003875 	.word	0x08003875
 8003838:	08003875 	.word	0x08003875
 800383c:	08003875 	.word	0x08003875
 8003840:	0800385d 	.word	0x0800385d
 8003844:	08003875 	.word	0x08003875
 8003848:	08003875 	.word	0x08003875
 800384c:	08003875 	.word	0x08003875
 8003850:	0800386d 	.word	0x0800386d
 8003854:	2300      	movs	r3, #0
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385a:	e0d8      	b.n	8003a0e <UART_SetConfig+0x2e6>
 800385c:	2302      	movs	r3, #2
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003862:	e0d4      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003864:	2304      	movs	r3, #4
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386a:	e0d0      	b.n	8003a0e <UART_SetConfig+0x2e6>
 800386c:	2308      	movs	r3, #8
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e0cc      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003874:	2310      	movs	r3, #16
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387a:	e0c8      	b.n	8003a0e <UART_SetConfig+0x2e6>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5e      	ldr	r2, [pc, #376]	@ (80039fc <UART_SetConfig+0x2d4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d125      	bne.n	80038d2 <UART_SetConfig+0x1aa>
 8003886:	4b5b      	ldr	r3, [pc, #364]	@ (80039f4 <UART_SetConfig+0x2cc>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003890:	2b30      	cmp	r3, #48	@ 0x30
 8003892:	d016      	beq.n	80038c2 <UART_SetConfig+0x19a>
 8003894:	2b30      	cmp	r3, #48	@ 0x30
 8003896:	d818      	bhi.n	80038ca <UART_SetConfig+0x1a2>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d00a      	beq.n	80038b2 <UART_SetConfig+0x18a>
 800389c:	2b20      	cmp	r3, #32
 800389e:	d814      	bhi.n	80038ca <UART_SetConfig+0x1a2>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <UART_SetConfig+0x182>
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d008      	beq.n	80038ba <UART_SetConfig+0x192>
 80038a8:	e00f      	b.n	80038ca <UART_SetConfig+0x1a2>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b0:	e0ad      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038b2:	2302      	movs	r3, #2
 80038b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b8:	e0a9      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038ba:	2304      	movs	r3, #4
 80038bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c0:	e0a5      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038c2:	2308      	movs	r3, #8
 80038c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c8:	e0a1      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038ca:	2310      	movs	r3, #16
 80038cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d0:	e09d      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003a00 <UART_SetConfig+0x2d8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d125      	bne.n	8003928 <UART_SetConfig+0x200>
 80038dc:	4b45      	ldr	r3, [pc, #276]	@ (80039f4 <UART_SetConfig+0x2cc>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038e8:	d016      	beq.n	8003918 <UART_SetConfig+0x1f0>
 80038ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80038ec:	d818      	bhi.n	8003920 <UART_SetConfig+0x1f8>
 80038ee:	2b80      	cmp	r3, #128	@ 0x80
 80038f0:	d00a      	beq.n	8003908 <UART_SetConfig+0x1e0>
 80038f2:	2b80      	cmp	r3, #128	@ 0x80
 80038f4:	d814      	bhi.n	8003920 <UART_SetConfig+0x1f8>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <UART_SetConfig+0x1d8>
 80038fa:	2b40      	cmp	r3, #64	@ 0x40
 80038fc:	d008      	beq.n	8003910 <UART_SetConfig+0x1e8>
 80038fe:	e00f      	b.n	8003920 <UART_SetConfig+0x1f8>
 8003900:	2300      	movs	r3, #0
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003906:	e082      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003908:	2302      	movs	r3, #2
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390e:	e07e      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003910:	2304      	movs	r3, #4
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003916:	e07a      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003918:	2308      	movs	r3, #8
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391e:	e076      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003920:	2310      	movs	r3, #16
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003926:	e072      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a35      	ldr	r2, [pc, #212]	@ (8003a04 <UART_SetConfig+0x2dc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12a      	bne.n	8003988 <UART_SetConfig+0x260>
 8003932:	4b30      	ldr	r3, [pc, #192]	@ (80039f4 <UART_SetConfig+0x2cc>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003940:	d01a      	beq.n	8003978 <UART_SetConfig+0x250>
 8003942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003946:	d81b      	bhi.n	8003980 <UART_SetConfig+0x258>
 8003948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394c:	d00c      	beq.n	8003968 <UART_SetConfig+0x240>
 800394e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003952:	d815      	bhi.n	8003980 <UART_SetConfig+0x258>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <UART_SetConfig+0x238>
 8003958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395c:	d008      	beq.n	8003970 <UART_SetConfig+0x248>
 800395e:	e00f      	b.n	8003980 <UART_SetConfig+0x258>
 8003960:	2300      	movs	r3, #0
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003966:	e052      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003968:	2302      	movs	r3, #2
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800396e:	e04e      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003970:	2304      	movs	r3, #4
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003976:	e04a      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003978:	2308      	movs	r3, #8
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397e:	e046      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003980:	2310      	movs	r3, #16
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003986:	e042      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <UART_SetConfig+0x2c4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d13a      	bne.n	8003a08 <UART_SetConfig+0x2e0>
 8003992:	4b18      	ldr	r3, [pc, #96]	@ (80039f4 <UART_SetConfig+0x2cc>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003998:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800399c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039a0:	d01a      	beq.n	80039d8 <UART_SetConfig+0x2b0>
 80039a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039a6:	d81b      	bhi.n	80039e0 <UART_SetConfig+0x2b8>
 80039a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ac:	d00c      	beq.n	80039c8 <UART_SetConfig+0x2a0>
 80039ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b2:	d815      	bhi.n	80039e0 <UART_SetConfig+0x2b8>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <UART_SetConfig+0x298>
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039bc:	d008      	beq.n	80039d0 <UART_SetConfig+0x2a8>
 80039be:	e00f      	b.n	80039e0 <UART_SetConfig+0x2b8>
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c6:	e022      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ce:	e01e      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039d0:	2304      	movs	r3, #4
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d6:	e01a      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039d8:	2308      	movs	r3, #8
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039de:	e016      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039e0:	2310      	movs	r3, #16
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e6:	e012      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039e8:	efff69f3 	.word	0xefff69f3
 80039ec:	40008000 	.word	0x40008000
 80039f0:	40013800 	.word	0x40013800
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40004400 	.word	0x40004400
 80039fc:	40004800 	.word	0x40004800
 8003a00:	40004c00 	.word	0x40004c00
 8003a04:	40005000 	.word	0x40005000
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a9f      	ldr	r2, [pc, #636]	@ (8003c90 <UART_SetConfig+0x568>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d17a      	bne.n	8003b0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d824      	bhi.n	8003a6a <UART_SetConfig+0x342>
 8003a20:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <UART_SetConfig+0x300>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003a6b 	.word	0x08003a6b
 8003a30:	08003a55 	.word	0x08003a55
 8003a34:	08003a6b 	.word	0x08003a6b
 8003a38:	08003a5b 	.word	0x08003a5b
 8003a3c:	08003a6b 	.word	0x08003a6b
 8003a40:	08003a6b 	.word	0x08003a6b
 8003a44:	08003a6b 	.word	0x08003a6b
 8003a48:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f7fe fc08 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003a50:	61f8      	str	r0, [r7, #28]
        break;
 8003a52:	e010      	b.n	8003a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a54:	4b8f      	ldr	r3, [pc, #572]	@ (8003c94 <UART_SetConfig+0x56c>)
 8003a56:	61fb      	str	r3, [r7, #28]
        break;
 8003a58:	e00d      	b.n	8003a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5a:	f7fe fb69 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8003a5e:	61f8      	str	r0, [r7, #28]
        break;
 8003a60:	e009      	b.n	8003a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a66:	61fb      	str	r3, [r7, #28]
        break;
 8003a68:	e005      	b.n	8003a76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80fb 	beq.w	8003c74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d305      	bcc.n	8003a9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d903      	bls.n	8003aa2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003aa0:	e0e8      	b.n	8003c74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	461c      	mov	r4, r3
 8003aa8:	4615      	mov	r5, r2
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	022b      	lsls	r3, r5, #8
 8003ab4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ab8:	0222      	lsls	r2, r4, #8
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	6849      	ldr	r1, [r1, #4]
 8003abe:	0849      	lsrs	r1, r1, #1
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	4688      	mov	r8, r1
 8003ac4:	4681      	mov	r9, r0
 8003ac6:	eb12 0a08 	adds.w	sl, r2, r8
 8003aca:	eb43 0b09 	adc.w	fp, r3, r9
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003adc:	4650      	mov	r0, sl
 8003ade:	4659      	mov	r1, fp
 8003ae0:	f7fc fbc6 	bl	8000270 <__aeabi_uldivmod>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4613      	mov	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af2:	d308      	bcc.n	8003b06 <UART_SetConfig+0x3de>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003afa:	d204      	bcs.n	8003b06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	60da      	str	r2, [r3, #12]
 8003b04:	e0b6      	b.n	8003c74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b0c:	e0b2      	b.n	8003c74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b16:	d15e      	bne.n	8003bd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d828      	bhi.n	8003b72 <UART_SetConfig+0x44a>
 8003b20:	a201      	add	r2, pc, #4	@ (adr r2, 8003b28 <UART_SetConfig+0x400>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b55 	.word	0x08003b55
 8003b30:	08003b5d 	.word	0x08003b5d
 8003b34:	08003b73 	.word	0x08003b73
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b73 	.word	0x08003b73
 8003b40:	08003b73 	.word	0x08003b73
 8003b44:	08003b73 	.word	0x08003b73
 8003b48:	08003b6b 	.word	0x08003b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7fe fb88 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003b50:	61f8      	str	r0, [r7, #28]
        break;
 8003b52:	e014      	b.n	8003b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fe fb9a 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 8003b58:	61f8      	str	r0, [r7, #28]
        break;
 8003b5a:	e010      	b.n	8003b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c94 <UART_SetConfig+0x56c>)
 8003b5e:	61fb      	str	r3, [r7, #28]
        break;
 8003b60:	e00d      	b.n	8003b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b62:	f7fe fae5 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8003b66:	61f8      	str	r0, [r7, #28]
        break;
 8003b68:	e009      	b.n	8003b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b6e:	61fb      	str	r3, [r7, #28]
        break;
 8003b70:	e005      	b.n	8003b7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d077      	beq.n	8003c74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005a      	lsls	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	441a      	add	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	d916      	bls.n	8003bce <UART_SetConfig+0x4a6>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba6:	d212      	bcs.n	8003bce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f023 030f 	bic.w	r3, r3, #15
 8003bb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	8afb      	ldrh	r3, [r7, #22]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	8afa      	ldrh	r2, [r7, #22]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e052      	b.n	8003c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003bd4:	e04e      	b.n	8003c74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d827      	bhi.n	8003c2e <UART_SetConfig+0x506>
 8003bde:	a201      	add	r2, pc, #4	@ (adr r2, 8003be4 <UART_SetConfig+0x4bc>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7fe fb2a 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	61f8      	str	r0, [r7, #28]
        break;
 8003c0e:	e014      	b.n	8003c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fe fb3c 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 8003c14:	61f8      	str	r0, [r7, #28]
        break;
 8003c16:	e010      	b.n	8003c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <UART_SetConfig+0x56c>)
 8003c1a:	61fb      	str	r3, [r7, #28]
        break;
 8003c1c:	e00d      	b.n	8003c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe fa87 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8003c22:	61f8      	str	r0, [r7, #28]
        break;
 8003c24:	e009      	b.n	8003c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2a:	61fb      	str	r3, [r7, #28]
        break;
 8003c2c:	e005      	b.n	8003c3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c38:	bf00      	nop
    }

    if (pclk != 0U)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d019      	beq.n	8003c74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	085a      	lsrs	r2, r3, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	441a      	add	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	d909      	bls.n	8003c6e <UART_SetConfig+0x546>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c60:	d205      	bcs.n	8003c6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	e002      	b.n	8003c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3728      	adds	r7, #40	@ 0x28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8e:	bf00      	nop
 8003c90:	40008000 	.word	0x40008000
 8003c94:	00f42400 	.word	0x00f42400

08003c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01a      	beq.n	8003dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d96:	d10a      	bne.n	8003dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b098      	sub	sp, #96	@ 0x60
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dec:	f7fd f902 	bl	8000ff4 <HAL_GetTick>
 8003df0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d12e      	bne.n	8003e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f88c 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d021      	beq.n	8003e5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e062      	b.n	8003f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d149      	bne.n	8003f00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e74:	2200      	movs	r2, #0
 8003e76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f856 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d03c      	beq.n	8003f00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	623b      	str	r3, [r7, #32]
   return(result);
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e6      	bne.n	8003e86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ed8:	61fa      	str	r2, [r7, #28]
 8003eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	69b9      	ldr	r1, [r7, #24]
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e5      	bne.n	8003eb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e011      	b.n	8003f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3758      	adds	r7, #88	@ 0x58
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3c:	e04f      	b.n	8003fde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d04b      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f46:	f7fd f855 	bl	8000ff4 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d302      	bcc.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e04e      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d037      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b80      	cmp	r3, #128	@ 0x80
 8003f72:	d034      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b40      	cmp	r3, #64	@ 0x40
 8003f78:	d031      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d110      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f8ff 	bl	8004194 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e029      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb8:	d111      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f8e5 	bl	8004194 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e00f      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	bf0c      	ite	eq
 8003fee:	2301      	moveq	r3, #1
 8003ff0:	2300      	movne	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d0a0      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b480      	push	{r7}
 800400a:	b097      	sub	sp, #92	@ 0x5c
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	88fa      	ldrh	r2, [r7, #6]
 8004028:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403a:	d10e      	bne.n	800405a <UART_Start_Receive_IT+0x52>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <UART_Start_Receive_IT+0x48>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800404a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800404e:	e02d      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	22ff      	movs	r2, #255	@ 0xff
 8004054:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004058:	e028      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10d      	bne.n	800407e <UART_Start_Receive_IT+0x76>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <UART_Start_Receive_IT+0x6c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	22ff      	movs	r2, #255	@ 0xff
 800406e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004072:	e01b      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	227f      	movs	r2, #127	@ 0x7f
 8004078:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800407c:	e016      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004086:	d10d      	bne.n	80040a4 <UART_Start_Receive_IT+0x9c>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <UART_Start_Receive_IT+0x92>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	227f      	movs	r2, #127	@ 0x7f
 8004094:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004098:	e008      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	223f      	movs	r2, #63	@ 0x3f
 800409e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040a2:	e003      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2222      	movs	r2, #34	@ 0x22
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80040de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80040e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80040ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f8:	d107      	bne.n	800410a <UART_Start_Receive_IT+0x102>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4a21      	ldr	r2, [pc, #132]	@ (800418c <UART_Start_Receive_IT+0x184>)
 8004106:	669a      	str	r2, [r3, #104]	@ 0x68
 8004108:	e002      	b.n	8004110 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a20      	ldr	r2, [pc, #128]	@ (8004190 <UART_Start_Receive_IT+0x188>)
 800410e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d019      	beq.n	800414c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800412c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
 8004138:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800413c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e6      	bne.n	8004118 <UART_Start_Receive_IT+0x110>
 800414a:	e018      	b.n	800417e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	613b      	str	r3, [r7, #16]
   return(result);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f043 0320 	orr.w	r3, r3, #32
 8004160:	653b      	str	r3, [r7, #80]	@ 0x50
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	69f9      	ldr	r1, [r7, #28]
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	61bb      	str	r3, [r7, #24]
   return(result);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e6      	bne.n	800414c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	375c      	adds	r7, #92	@ 0x5c
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	08004499 	.word	0x08004499
 8004190:	080042dd 	.word	0x080042dd

08004194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b095      	sub	sp, #84	@ 0x54
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80041bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e6      	bne.n	800419c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3308      	adds	r3, #8
 80041d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3308      	adds	r3, #8
 80041ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e5      	bne.n	80041ce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004206:	2b01      	cmp	r3, #1
 8004208:	d118      	bne.n	800423c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	60bb      	str	r3, [r7, #8]
   return(result);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0310 	bic.w	r3, r3, #16
 800421e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6979      	ldr	r1, [r7, #20]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	613b      	str	r3, [r7, #16]
   return(result);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e6      	bne.n	800420a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004250:	bf00      	nop
 8004252:	3754      	adds	r7, #84	@ 0x54
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fa3e 	bl	80036fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	60bb      	str	r3, [r7, #8]
   return(result);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6979      	ldr	r1, [r7, #20]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	613b      	str	r3, [r7, #16]
   return(result);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e6      	bne.n	8004290 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fa00 	bl	80036d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d4:	bf00      	nop
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b09c      	sub	sp, #112	@ 0x70
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f4:	2b22      	cmp	r3, #34	@ 0x22
 80042f6:	f040 80be 	bne.w	8004476 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004300:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004304:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004308:	b2d9      	uxtb	r1, r3
 800430a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800430e:	b2da      	uxtb	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	400a      	ands	r2, r1
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	f040 80a3 	bne.w	800448a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004362:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004364:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e6      	bne.n	8004344 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	667b      	str	r3, [r7, #100]	@ 0x64
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3308      	adds	r3, #8
 8004394:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004396:	647a      	str	r2, [r7, #68]	@ 0x44
 8004398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800439c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a34      	ldr	r2, [pc, #208]	@ (8004494 <UART_RxISR_8BIT+0x1b8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d01f      	beq.n	8004408 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d018      	beq.n	8004408 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	623b      	str	r3, [r7, #32]
   return(result);
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440c:	2b01      	cmp	r3, #1
 800440e:	d12e      	bne.n	800446e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	60fb      	str	r3, [r7, #12]
   return(result);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0310 	bic.w	r3, r3, #16
 800442a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	69b9      	ldr	r1, [r7, #24]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	617b      	str	r3, [r7, #20]
   return(result);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e6      	bne.n	8004416 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d103      	bne.n	800445e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2210      	movs	r2, #16
 800445c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff f952 	bl	8003710 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800446c:	e00d      	b.n	800448a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff f93a 	bl	80036e8 <HAL_UART_RxCpltCallback>
}
 8004474:	e009      	b.n	800448a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	8b1b      	ldrh	r3, [r3, #24]
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0208 	orr.w	r2, r2, #8
 8004486:	b292      	uxth	r2, r2
 8004488:	831a      	strh	r2, [r3, #24]
}
 800448a:	bf00      	nop
 800448c:	3770      	adds	r7, #112	@ 0x70
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40008000 	.word	0x40008000

08004498 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b09c      	sub	sp, #112	@ 0x70
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044b0:	2b22      	cmp	r3, #34	@ 0x22
 80044b2:	f040 80be 	bne.w	8004632 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80044bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80044c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80044ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80044ce:	4013      	ands	r3, r2
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044da:	1c9a      	adds	r2, r3, #2
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 80a3 	bne.w	8004646 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800450e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004514:	667b      	str	r3, [r7, #100]	@ 0x64
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800451e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004520:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004524:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800452c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	663b      	str	r3, [r7, #96]	@ 0x60
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3308      	adds	r3, #8
 8004550:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004552:	643a      	str	r2, [r7, #64]	@ 0x40
 8004554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004558:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a34      	ldr	r2, [pc, #208]	@ (8004650 <UART_RxISR_16BIT+0x1b8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d01f      	beq.n	80045c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d018      	beq.n	80045c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e6      	bne.n	8004592 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d12e      	bne.n	800462a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f023 0310 	bic.w	r3, r3, #16
 80045e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6979      	ldr	r1, [r7, #20]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	613b      	str	r3, [r7, #16]
   return(result);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e6      	bne.n	80045d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b10      	cmp	r3, #16
 8004610:	d103      	bne.n	800461a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2210      	movs	r2, #16
 8004618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff f874 	bl	8003710 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004628:	e00d      	b.n	8004646 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff f85c 	bl	80036e8 <HAL_UART_RxCpltCallback>
}
 8004630:	e009      	b.n	8004646 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	8b1b      	ldrh	r3, [r3, #24]
 8004638:	b29a      	uxth	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0208 	orr.w	r2, r2, #8
 8004642:	b292      	uxth	r2, r2
 8004644:	831a      	strh	r2, [r3, #24]
}
 8004646:	bf00      	nop
 8004648:	3770      	adds	r7, #112	@ 0x70
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40008000 	.word	0x40008000

08004654 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800467a:	2b84      	cmp	r3, #132	@ 0x84
 800467c:	d005      	beq.n	800468a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800467e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	3303      	adds	r3, #3
 8004688:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800469c:	f000 fae4 	bl	8004c68 <vTaskStartScheduler>
  
  return osOK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a8:	b089      	sub	sp, #36	@ 0x24
 80046aa:	af04      	add	r7, sp, #16
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <osThreadCreate+0x54>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01c      	beq.n	80046fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685c      	ldr	r4, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691e      	ldr	r6, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ffc8 	bl	8004668 <makeFreeRtosPriority>
 80046d8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046e2:	9202      	str	r2, [sp, #8]
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	9100      	str	r1, [sp, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4632      	mov	r2, r6
 80046ec:	4629      	mov	r1, r5
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 f8ed 	bl	80048ce <xTaskCreateStatic>
 80046f4:	4603      	mov	r3, r0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e01c      	b.n	8004734 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685c      	ldr	r4, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004706:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ffaa 	bl	8004668 <makeFreeRtosPriority>
 8004714:	4602      	mov	r2, r0
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	9200      	str	r2, [sp, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	4632      	mov	r2, r6
 8004722:	4629      	mov	r1, r5
 8004724:	4620      	mov	r0, r4
 8004726:	f000 f932 	bl	800498e <xTaskCreate>
 800472a:	4603      	mov	r3, r0
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800473e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <osDelay+0x16>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	e000      	b.n	8004756 <osDelay+0x18>
 8004754:	2301      	movs	r3, #1
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fa50 	bl	8004bfc <vTaskDelay>
  
  return osOK;
 800475c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f103 0208 	add.w	r2, r3, #8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f103 0208 	add.w	r2, r3, #8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f103 0208 	add.w	r2, r3, #8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d103      	bne.n	8004828 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e00c      	b.n	8004842 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3308      	adds	r3, #8
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e002      	b.n	8004836 <vListInsert+0x2e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	d2f6      	bcs.n	8004830 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	601a      	str	r2, [r3, #0]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6892      	ldr	r2, [r2, #8]
 8004890:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6852      	ldr	r2, [r2, #4]
 800489a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d103      	bne.n	80048ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b08e      	sub	sp, #56	@ 0x38
 80048d2:	af04      	add	r7, sp, #16
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	61fb      	str	r3, [r7, #28]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004918:	2354      	movs	r3, #84	@ 0x54
 800491a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b54      	cmp	r3, #84	@ 0x54
 8004920:	d00b      	beq.n	800493a <xTaskCreateStatic+0x6c>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	61bb      	str	r3, [r7, #24]
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	e7fd      	b.n	8004936 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800493a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800493c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01e      	beq.n	8004980 <xTaskCreateStatic+0xb2>
 8004942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004950:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800495a:	2300      	movs	r3, #0
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	f107 0314 	add.w	r3, r7, #20
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f850 	bl	8004a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004978:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800497a:	f000 f8d5 	bl	8004b28 <prvAddNewTaskToReadyList>
 800497e:	e001      	b.n	8004984 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004984:	697b      	ldr	r3, [r7, #20]
	}
 8004986:	4618      	mov	r0, r3
 8004988:	3728      	adds	r7, #40	@ 0x28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800498e:	b580      	push	{r7, lr}
 8004990:	b08c      	sub	sp, #48	@ 0x30
 8004992:	af04      	add	r7, sp, #16
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fef0 	bl	8005788 <pvPortMalloc>
 80049a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049b0:	2054      	movs	r0, #84	@ 0x54
 80049b2:	f000 fee9 	bl	8005788 <pvPortMalloc>
 80049b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80049c4:	e005      	b.n	80049d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f000 ffac 	bl	8005924 <vPortFree>
 80049cc:	e001      	b.n	80049d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d017      	beq.n	8004a08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	2300      	movs	r3, #0
 80049e4:	9303      	str	r3, [sp, #12]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	9302      	str	r3, [sp, #8]
 80049ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f80e 	bl	8004a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049fc:	69f8      	ldr	r0, [r7, #28]
 80049fe:	f000 f893 	bl	8004b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	e002      	b.n	8004a0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
	}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a30:	3b01      	subs	r3, #1
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	617b      	str	r3, [r7, #20]
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	e7fd      	b.n	8004a5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01f      	beq.n	8004aa8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	e012      	b.n	8004a94 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	7819      	ldrb	r1, [r3, #0]
 8004a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3334      	adds	r3, #52	@ 0x34
 8004a7e:	460a      	mov	r2, r1
 8004a80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d006      	beq.n	8004a9c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3301      	adds	r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d9e9      	bls.n	8004a6e <prvInitialiseNewTask+0x56>
 8004a9a:	e000      	b.n	8004a9e <prvInitialiseNewTask+0x86>
			{
				break;
 8004a9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aa6:	e003      	b.n	8004ab0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	2b06      	cmp	r3, #6
 8004ab4:	d901      	bls.n	8004aba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ab6:	2306      	movs	r3, #6
 8004ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004abe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	2200      	movs	r2, #0
 8004aca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fe68 	bl	80047a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	3318      	adds	r3, #24
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fe63 	bl	80047a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	f1c3 0207 	rsb	r2, r3, #7
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2200      	movs	r2, #0
 8004afa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	69b8      	ldr	r0, [r7, #24]
 8004b0a:	f000 fc2b 	bl	8005364 <pxPortInitialiseStack>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b20:	bf00      	nop
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b30:	f000 fd4a 	bl	80055c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b34:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <prvAddNewTaskToReadyList+0xb8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	4a29      	ldr	r2, [pc, #164]	@ (8004be0 <prvAddNewTaskToReadyList+0xb8>)
 8004b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b3e:	4b29      	ldr	r3, [pc, #164]	@ (8004be4 <prvAddNewTaskToReadyList+0xbc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b46:	4a27      	ldr	r2, [pc, #156]	@ (8004be4 <prvAddNewTaskToReadyList+0xbc>)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b4c:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <prvAddNewTaskToReadyList+0xb8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d110      	bne.n	8004b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b54:	f000 fac4 	bl	80050e0 <prvInitialiseTaskLists>
 8004b58:	e00d      	b.n	8004b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b5a:	4b23      	ldr	r3, [pc, #140]	@ (8004be8 <prvAddNewTaskToReadyList+0xc0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b62:	4b20      	ldr	r3, [pc, #128]	@ (8004be4 <prvAddNewTaskToReadyList+0xbc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d802      	bhi.n	8004b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b70:	4a1c      	ldr	r2, [pc, #112]	@ (8004be4 <prvAddNewTaskToReadyList+0xbc>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b76:	4b1d      	ldr	r3, [pc, #116]	@ (8004bec <prvAddNewTaskToReadyList+0xc4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bec <prvAddNewTaskToReadyList+0xc4>)
 8004b7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <prvAddNewTaskToReadyList+0xc8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	4a18      	ldr	r2, [pc, #96]	@ (8004bf0 <prvAddNewTaskToReadyList+0xc8>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <prvAddNewTaskToReadyList+0xcc>)
 8004ba0:	441a      	add	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7ff fe09 	bl	80047c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bae:	f000 fd3d 	bl	800562c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <prvAddNewTaskToReadyList+0xc0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00e      	beq.n	8004bd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <prvAddNewTaskToReadyList+0xbc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d207      	bcs.n	8004bd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <prvAddNewTaskToReadyList+0xd0>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200007d4 	.word	0x200007d4
 8004be4:	200006d4 	.word	0x200006d4
 8004be8:	200007e0 	.word	0x200007e0
 8004bec:	200007f0 	.word	0x200007f0
 8004bf0:	200007dc 	.word	0x200007dc
 8004bf4:	200006d8 	.word	0x200006d8
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c0e:	4b14      	ldr	r3, [pc, #80]	@ (8004c60 <vTaskDelay+0x64>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <vTaskDelay+0x32>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60bb      	str	r3, [r7, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c2e:	f000 f87d 	bl	8004d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c32:	2100      	movs	r1, #0
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fb2f 	bl	8005298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c3a:	f000 f885 	bl	8004d48 <xTaskResumeAll>
 8004c3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004c46:	4b07      	ldr	r3, [pc, #28]	@ (8004c64 <vTaskDelay+0x68>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	200007fc 	.word	0x200007fc
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	@ 0x28
 8004c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c76:	463a      	mov	r2, r7
 8004c78:	1d39      	adds	r1, r7, #4
 8004c7a:	f107 0308 	add.w	r3, r7, #8
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fb fc6e 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	9202      	str	r2, [sp, #8]
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	2300      	movs	r3, #0
 8004c94:	460a      	mov	r2, r1
 8004c96:	491f      	ldr	r1, [pc, #124]	@ (8004d14 <vTaskStartScheduler+0xac>)
 8004c98:	481f      	ldr	r0, [pc, #124]	@ (8004d18 <vTaskStartScheduler+0xb0>)
 8004c9a:	f7ff fe18 	bl	80048ce <xTaskCreateStatic>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8004d1c <vTaskStartScheduler+0xb4>)
 8004ca2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d1c <vTaskStartScheduler+0xb4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e001      	b.n	8004cb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d116      	bne.n	8004cea <vTaskStartScheduler+0x82>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	613b      	str	r3, [r7, #16]
}
 8004cce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd0:	4b13      	ldr	r3, [pc, #76]	@ (8004d20 <vTaskStartScheduler+0xb8>)
 8004cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cd8:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <vTaskStartScheduler+0xbc>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cde:	4b12      	ldr	r3, [pc, #72]	@ (8004d28 <vTaskStartScheduler+0xc0>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ce4:	f000 fbcc 	bl	8005480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ce8:	e00f      	b.n	8004d0a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d10b      	bne.n	8004d0a <vTaskStartScheduler+0xa2>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60fb      	str	r3, [r7, #12]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <vTaskStartScheduler+0x9e>
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	08006ccc 	.word	0x08006ccc
 8004d18:	080050b1 	.word	0x080050b1
 8004d1c:	200007f8 	.word	0x200007f8
 8004d20:	200007f4 	.word	0x200007f4
 8004d24:	200007e0 	.word	0x200007e0
 8004d28:	200007d8 	.word	0x200007d8

08004d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d30:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <vTaskSuspendAll+0x18>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a03      	ldr	r2, [pc, #12]	@ (8004d44 <vTaskSuspendAll+0x18>)
 8004d38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	200007fc 	.word	0x200007fc

08004d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d56:	4b42      	ldr	r3, [pc, #264]	@ (8004e60 <xTaskResumeAll+0x118>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10b      	bne.n	8004d76 <xTaskResumeAll+0x2e>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	603b      	str	r3, [r7, #0]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d76:	f000 fc27 	bl	80055c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d7a:	4b39      	ldr	r3, [pc, #228]	@ (8004e60 <xTaskResumeAll+0x118>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	4a37      	ldr	r2, [pc, #220]	@ (8004e60 <xTaskResumeAll+0x118>)
 8004d82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d84:	4b36      	ldr	r3, [pc, #216]	@ (8004e60 <xTaskResumeAll+0x118>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d161      	bne.n	8004e50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d8c:	4b35      	ldr	r3, [pc, #212]	@ (8004e64 <xTaskResumeAll+0x11c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d05d      	beq.n	8004e50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d94:	e02e      	b.n	8004df4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d96:	4b34      	ldr	r3, [pc, #208]	@ (8004e68 <xTaskResumeAll+0x120>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3318      	adds	r3, #24
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fd69 	bl	800487a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fd64 	bl	800487a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	2201      	movs	r2, #1
 8004db8:	409a      	lsls	r2, r3
 8004dba:	4b2c      	ldr	r3, [pc, #176]	@ (8004e6c <xTaskResumeAll+0x124>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e6c <xTaskResumeAll+0x124>)
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <xTaskResumeAll+0x128>)
 8004dd2:	441a      	add	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f7ff fcf0 	bl	80047c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de4:	4b23      	ldr	r3, [pc, #140]	@ (8004e74 <xTaskResumeAll+0x12c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004dee:	4b22      	ldr	r3, [pc, #136]	@ (8004e78 <xTaskResumeAll+0x130>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004df4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e68 <xTaskResumeAll+0x120>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1cc      	bne.n	8004d96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e02:	f000 fa0b 	bl	800521c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e06:	4b1d      	ldr	r3, [pc, #116]	@ (8004e7c <xTaskResumeAll+0x134>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e12:	f000 f837 	bl	8004e84 <xTaskIncrementTick>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e1c:	4b16      	ldr	r3, [pc, #88]	@ (8004e78 <xTaskResumeAll+0x130>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f1      	bne.n	8004e12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <xTaskResumeAll+0x134>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e34:	4b10      	ldr	r3, [pc, #64]	@ (8004e78 <xTaskResumeAll+0x130>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e40:	4b0f      	ldr	r3, [pc, #60]	@ (8004e80 <xTaskResumeAll+0x138>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e50:	f000 fbec 	bl	800562c <vPortExitCritical>

	return xAlreadyYielded;
 8004e54:	68bb      	ldr	r3, [r7, #8]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	200007fc 	.word	0x200007fc
 8004e64:	200007d4 	.word	0x200007d4
 8004e68:	20000794 	.word	0x20000794
 8004e6c:	200007dc 	.word	0x200007dc
 8004e70:	200006d8 	.word	0x200006d8
 8004e74:	200006d4 	.word	0x200006d4
 8004e78:	200007e8 	.word	0x200007e8
 8004e7c:	200007e4 	.word	0x200007e4
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fcc <xTaskIncrementTick+0x148>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f040 808f 	bne.w	8004fb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e98:	4b4d      	ldr	r3, [pc, #308]	@ (8004fd0 <xTaskIncrementTick+0x14c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8004fd0 <xTaskIncrementTick+0x14c>)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d121      	bne.n	8004ef0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004eac:	4b49      	ldr	r3, [pc, #292]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <xTaskIncrementTick+0x4a>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	603b      	str	r3, [r7, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <xTaskIncrementTick+0x46>
 8004ece:	4b41      	ldr	r3, [pc, #260]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	4b40      	ldr	r3, [pc, #256]	@ (8004fd8 <xTaskIncrementTick+0x154>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd8 <xTaskIncrementTick+0x154>)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fdc <xTaskIncrementTick+0x158>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fdc <xTaskIncrementTick+0x158>)
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	f000 f996 	bl	800521c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe0 <xTaskIncrementTick+0x15c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d348      	bcc.n	8004f8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004efa:	4b36      	ldr	r3, [pc, #216]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f04:	4b36      	ldr	r3, [pc, #216]	@ (8004fe0 <xTaskIncrementTick+0x15c>)
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	601a      	str	r2, [r3, #0]
					break;
 8004f0c:	e03e      	b.n	8004f8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0e:	4b31      	ldr	r3, [pc, #196]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d203      	bcs.n	8004f2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f26:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe0 <xTaskIncrementTick+0x15c>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f2c:	e02e      	b.n	8004f8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fca1 	bl	800487a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3318      	adds	r3, #24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fc98 	bl	800487a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	2201      	movs	r2, #1
 8004f50:	409a      	lsls	r2, r3
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <xTaskIncrementTick+0x160>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <xTaskIncrementTick+0x160>)
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe8 <xTaskIncrementTick+0x164>)
 8004f6a:	441a      	add	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f7ff fc24 	bl	80047c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <xTaskIncrementTick+0x168>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3b9      	bcc.n	8004efa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f86:	2301      	movs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8a:	e7b6      	b.n	8004efa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f8c:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <xTaskIncrementTick+0x168>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f92:	4915      	ldr	r1, [pc, #84]	@ (8004fe8 <xTaskIncrementTick+0x164>)
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d901      	bls.n	8004fa8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fa8:	4b11      	ldr	r3, [pc, #68]	@ (8004ff0 <xTaskIncrementTick+0x16c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e004      	b.n	8004fc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff4 <xTaskIncrementTick+0x170>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff4 <xTaskIncrementTick+0x170>)
 8004fbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fc0:	697b      	ldr	r3, [r7, #20]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	200007fc 	.word	0x200007fc
 8004fd0:	200007d8 	.word	0x200007d8
 8004fd4:	2000078c 	.word	0x2000078c
 8004fd8:	20000790 	.word	0x20000790
 8004fdc:	200007ec 	.word	0x200007ec
 8004fe0:	200007f4 	.word	0x200007f4
 8004fe4:	200007dc 	.word	0x200007dc
 8004fe8:	200006d8 	.word	0x200006d8
 8004fec:	200006d4 	.word	0x200006d4
 8004ff0:	200007e8 	.word	0x200007e8
 8004ff4:	200007e4 	.word	0x200007e4

08004ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ffe:	4b27      	ldr	r3, [pc, #156]	@ (800509c <vTaskSwitchContext+0xa4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005006:	4b26      	ldr	r3, [pc, #152]	@ (80050a0 <vTaskSwitchContext+0xa8>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800500c:	e040      	b.n	8005090 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800500e:	4b24      	ldr	r3, [pc, #144]	@ (80050a0 <vTaskSwitchContext+0xa8>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005014:	4b23      	ldr	r3, [pc, #140]	@ (80050a4 <vTaskSwitchContext+0xac>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	fab3 f383 	clz	r3, r3
 8005020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005022:	7afb      	ldrb	r3, [r7, #11]
 8005024:	f1c3 031f 	rsb	r3, r3, #31
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	491f      	ldr	r1, [pc, #124]	@ (80050a8 <vTaskSwitchContext+0xb0>)
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10b      	bne.n	8005056 <vTaskSwitchContext+0x5e>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	e7fd      	b.n	8005052 <vTaskSwitchContext+0x5a>
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4a11      	ldr	r2, [pc, #68]	@ (80050a8 <vTaskSwitchContext+0xb0>)
 8005062:	4413      	add	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	3308      	adds	r3, #8
 8005078:	429a      	cmp	r2, r3
 800507a:	d104      	bne.n	8005086 <vTaskSwitchContext+0x8e>
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4a07      	ldr	r2, [pc, #28]	@ (80050ac <vTaskSwitchContext+0xb4>)
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	200007fc 	.word	0x200007fc
 80050a0:	200007e8 	.word	0x200007e8
 80050a4:	200007dc 	.word	0x200007dc
 80050a8:	200006d8 	.word	0x200006d8
 80050ac:	200006d4 	.word	0x200006d4

080050b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050b8:	f000 f852 	bl	8005160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050bc:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <prvIdleTask+0x28>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d9f9      	bls.n	80050b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050c4:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <prvIdleTask+0x2c>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050d4:	e7f0      	b.n	80050b8 <prvIdleTask+0x8>
 80050d6:	bf00      	nop
 80050d8:	200006d8 	.word	0x200006d8
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
 80050ea:	e00c      	b.n	8005106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4a12      	ldr	r2, [pc, #72]	@ (8005140 <prvInitialiseTaskLists+0x60>)
 80050f8:	4413      	add	r3, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fb33 	bl	8004766 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3301      	adds	r3, #1
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b06      	cmp	r3, #6
 800510a:	d9ef      	bls.n	80050ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800510c:	480d      	ldr	r0, [pc, #52]	@ (8005144 <prvInitialiseTaskLists+0x64>)
 800510e:	f7ff fb2a 	bl	8004766 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005112:	480d      	ldr	r0, [pc, #52]	@ (8005148 <prvInitialiseTaskLists+0x68>)
 8005114:	f7ff fb27 	bl	8004766 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005118:	480c      	ldr	r0, [pc, #48]	@ (800514c <prvInitialiseTaskLists+0x6c>)
 800511a:	f7ff fb24 	bl	8004766 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800511e:	480c      	ldr	r0, [pc, #48]	@ (8005150 <prvInitialiseTaskLists+0x70>)
 8005120:	f7ff fb21 	bl	8004766 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005124:	480b      	ldr	r0, [pc, #44]	@ (8005154 <prvInitialiseTaskLists+0x74>)
 8005126:	f7ff fb1e 	bl	8004766 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800512a:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <prvInitialiseTaskLists+0x78>)
 800512c:	4a05      	ldr	r2, [pc, #20]	@ (8005144 <prvInitialiseTaskLists+0x64>)
 800512e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005130:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <prvInitialiseTaskLists+0x7c>)
 8005132:	4a05      	ldr	r2, [pc, #20]	@ (8005148 <prvInitialiseTaskLists+0x68>)
 8005134:	601a      	str	r2, [r3, #0]
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	200006d8 	.word	0x200006d8
 8005144:	20000764 	.word	0x20000764
 8005148:	20000778 	.word	0x20000778
 800514c:	20000794 	.word	0x20000794
 8005150:	200007a8 	.word	0x200007a8
 8005154:	200007c0 	.word	0x200007c0
 8005158:	2000078c 	.word	0x2000078c
 800515c:	20000790 	.word	0x20000790

08005160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005166:	e019      	b.n	800519c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005168:	f000 fa2e 	bl	80055c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516c:	4b10      	ldr	r3, [pc, #64]	@ (80051b0 <prvCheckTasksWaitingTermination+0x50>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fb7e 	bl	800487a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <prvCheckTasksWaitingTermination+0x54>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	4a0b      	ldr	r2, [pc, #44]	@ (80051b4 <prvCheckTasksWaitingTermination+0x54>)
 8005186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005188:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <prvCheckTasksWaitingTermination+0x58>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3b01      	subs	r3, #1
 800518e:	4a0a      	ldr	r2, [pc, #40]	@ (80051b8 <prvCheckTasksWaitingTermination+0x58>)
 8005190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005192:	f000 fa4b 	bl	800562c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f810 	bl	80051bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800519c:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <prvCheckTasksWaitingTermination+0x58>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e1      	bne.n	8005168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200007a8 	.word	0x200007a8
 80051b4:	200007d4 	.word	0x200007d4
 80051b8:	200007bc 	.word	0x200007bc

080051bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d108      	bne.n	80051e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fba6 	bl	8005924 <vPortFree>
				vPortFree( pxTCB );
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fba3 	bl	8005924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051de:	e019      	b.n	8005214 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d103      	bne.n	80051f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fb9a 	bl	8005924 <vPortFree>
	}
 80051f0:	e010      	b.n	8005214 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d00b      	beq.n	8005214 <prvDeleteTCB+0x58>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <prvDeleteTCB+0x54>
	}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <prvResetNextTaskUnblockTime+0x38>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800522c:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <prvResetNextTaskUnblockTime+0x3c>)
 800522e:	f04f 32ff 	mov.w	r2, #4294967295
 8005232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005234:	e008      	b.n	8005248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005236:	4b07      	ldr	r3, [pc, #28]	@ (8005254 <prvResetNextTaskUnblockTime+0x38>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a04      	ldr	r2, [pc, #16]	@ (8005258 <prvResetNextTaskUnblockTime+0x3c>)
 8005246:	6013      	str	r3, [r2, #0]
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	2000078c 	.word	0x2000078c
 8005258:	200007f4 	.word	0x200007f4

0800525c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005262:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <xTaskGetSchedulerState+0x34>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800526a:	2301      	movs	r3, #1
 800526c:	607b      	str	r3, [r7, #4]
 800526e:	e008      	b.n	8005282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005270:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <xTaskGetSchedulerState+0x38>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005278:	2302      	movs	r3, #2
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	e001      	b.n	8005282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800527e:	2300      	movs	r3, #0
 8005280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005282:	687b      	ldr	r3, [r7, #4]
	}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	200007e0 	.word	0x200007e0
 8005294:	200007fc 	.word	0x200007fc

08005298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052a2:	4b29      	ldr	r3, [pc, #164]	@ (8005348 <prvAddCurrentTaskToDelayedList+0xb0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052a8:	4b28      	ldr	r3, [pc, #160]	@ (800534c <prvAddCurrentTaskToDelayedList+0xb4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3304      	adds	r3, #4
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fae3 	bl	800487a <uxListRemove>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052ba:	4b24      	ldr	r3, [pc, #144]	@ (800534c <prvAddCurrentTaskToDelayedList+0xb4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	2201      	movs	r2, #1
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43da      	mvns	r2, r3
 80052c8:	4b21      	ldr	r3, [pc, #132]	@ (8005350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4013      	ands	r3, r2
 80052ce:	4a20      	ldr	r2, [pc, #128]	@ (8005350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d10a      	bne.n	80052f0 <prvAddCurrentTaskToDelayedList+0x58>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e0:	4b1a      	ldr	r3, [pc, #104]	@ (800534c <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	481a      	ldr	r0, [pc, #104]	@ (8005354 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052ea:	f7ff fa69 	bl	80047c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052ee:	e026      	b.n	800533e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052f8:	4b14      	ldr	r3, [pc, #80]	@ (800534c <prvAddCurrentTaskToDelayedList+0xb4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d209      	bcs.n	800531c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005308:	4b13      	ldr	r3, [pc, #76]	@ (8005358 <prvAddCurrentTaskToDelayedList+0xc0>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b0f      	ldr	r3, [pc, #60]	@ (800534c <prvAddCurrentTaskToDelayedList+0xb4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3304      	adds	r3, #4
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f7ff fa77 	bl	8004808 <vListInsert>
}
 800531a:	e010      	b.n	800533e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800531c:	4b0f      	ldr	r3, [pc, #60]	@ (800535c <prvAddCurrentTaskToDelayedList+0xc4>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3304      	adds	r3, #4
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7ff fa6d 	bl	8004808 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800532e:	4b0c      	ldr	r3, [pc, #48]	@ (8005360 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	429a      	cmp	r2, r3
 8005336:	d202      	bcs.n	800533e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005338:	4a09      	ldr	r2, [pc, #36]	@ (8005360 <prvAddCurrentTaskToDelayedList+0xc8>)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6013      	str	r3, [r2, #0]
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	200007d8 	.word	0x200007d8
 800534c:	200006d4 	.word	0x200006d4
 8005350:	200007dc 	.word	0x200007dc
 8005354:	200007c0 	.word	0x200007c0
 8005358:	20000790 	.word	0x20000790
 800535c:	2000078c 	.word	0x2000078c
 8005360:	200007f4 	.word	0x200007f4

08005364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b04      	subs	r3, #4
 8005374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800537c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3b04      	subs	r3, #4
 8005382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3b04      	subs	r3, #4
 8005392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005394:	4a0c      	ldr	r2, [pc, #48]	@ (80053c8 <pxPortInitialiseStack+0x64>)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3b14      	subs	r3, #20
 800539e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b04      	subs	r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f06f 0202 	mvn.w	r2, #2
 80053b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3b20      	subs	r3, #32
 80053b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	080053cd 	.word	0x080053cd

080053cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053d6:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <prvTaskExitError+0x58>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d00b      	beq.n	80053f8 <prvTaskExitError+0x2c>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	60fb      	str	r3, [r7, #12]
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <prvTaskExitError+0x28>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	60bb      	str	r3, [r7, #8]
}
 800540a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800540c:	bf00      	nop
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0fc      	beq.n	800540e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000014 	.word	0x20000014
	...

08005430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005430:	4b07      	ldr	r3, [pc, #28]	@ (8005450 <pxCurrentTCBConst2>)
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	6808      	ldr	r0, [r1, #0]
 8005436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	f380 8809 	msr	PSP, r0
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f380 8811 	msr	BASEPRI, r0
 800544a:	4770      	bx	lr
 800544c:	f3af 8000 	nop.w

08005450 <pxCurrentTCBConst2>:
 8005450:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005458:	4808      	ldr	r0, [pc, #32]	@ (800547c <prvPortStartFirstTask+0x24>)
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	6800      	ldr	r0, [r0, #0]
 800545e:	f380 8808 	msr	MSP, r0
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8814 	msr	CONTROL, r0
 800546a:	b662      	cpsie	i
 800546c:	b661      	cpsie	f
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	df00      	svc	0
 8005478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800547a:	bf00      	nop
 800547c:	e000ed08 	.word	0xe000ed08

08005480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005486:	4b47      	ldr	r3, [pc, #284]	@ (80055a4 <xPortStartScheduler+0x124>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a47      	ldr	r2, [pc, #284]	@ (80055a8 <xPortStartScheduler+0x128>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10b      	bne.n	80054a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	613b      	str	r3, [r7, #16]
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054a8:	4b3e      	ldr	r3, [pc, #248]	@ (80055a4 <xPortStartScheduler+0x124>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a3f      	ldr	r2, [pc, #252]	@ (80055ac <xPortStartScheduler+0x12c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10b      	bne.n	80054ca <xPortStartScheduler+0x4a>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60fb      	str	r3, [r7, #12]
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	e7fd      	b.n	80054c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054ca:	4b39      	ldr	r3, [pc, #228]	@ (80055b0 <xPortStartScheduler+0x130>)
 80054cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	22ff      	movs	r2, #255	@ 0xff
 80054da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	4b31      	ldr	r3, [pc, #196]	@ (80055b4 <xPortStartScheduler+0x134>)
 80054f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054f2:	4b31      	ldr	r3, [pc, #196]	@ (80055b8 <xPortStartScheduler+0x138>)
 80054f4:	2207      	movs	r2, #7
 80054f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054f8:	e009      	b.n	800550e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80054fa:	4b2f      	ldr	r3, [pc, #188]	@ (80055b8 <xPortStartScheduler+0x138>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3b01      	subs	r3, #1
 8005500:	4a2d      	ldr	r2, [pc, #180]	@ (80055b8 <xPortStartScheduler+0x138>)
 8005502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	b2db      	uxtb	r3, r3
 800550c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005516:	2b80      	cmp	r3, #128	@ 0x80
 8005518:	d0ef      	beq.n	80054fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800551a:	4b27      	ldr	r3, [pc, #156]	@ (80055b8 <xPortStartScheduler+0x138>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1c3 0307 	rsb	r3, r3, #7
 8005522:	2b04      	cmp	r3, #4
 8005524:	d00b      	beq.n	800553e <xPortStartScheduler+0xbe>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60bb      	str	r3, [r7, #8]
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	e7fd      	b.n	800553a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800553e:	4b1e      	ldr	r3, [pc, #120]	@ (80055b8 <xPortStartScheduler+0x138>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <xPortStartScheduler+0x138>)
 8005546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005548:	4b1b      	ldr	r3, [pc, #108]	@ (80055b8 <xPortStartScheduler+0x138>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005550:	4a19      	ldr	r2, [pc, #100]	@ (80055b8 <xPortStartScheduler+0x138>)
 8005552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800555c:	4b17      	ldr	r3, [pc, #92]	@ (80055bc <xPortStartScheduler+0x13c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a16      	ldr	r2, [pc, #88]	@ (80055bc <xPortStartScheduler+0x13c>)
 8005562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005568:	4b14      	ldr	r3, [pc, #80]	@ (80055bc <xPortStartScheduler+0x13c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <xPortStartScheduler+0x13c>)
 800556e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005574:	f000 f8da 	bl	800572c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005578:	4b11      	ldr	r3, [pc, #68]	@ (80055c0 <xPortStartScheduler+0x140>)
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800557e:	f000 f8f9 	bl	8005774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005582:	4b10      	ldr	r3, [pc, #64]	@ (80055c4 <xPortStartScheduler+0x144>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a0f      	ldr	r2, [pc, #60]	@ (80055c4 <xPortStartScheduler+0x144>)
 8005588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800558c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800558e:	f7ff ff63 	bl	8005458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005592:	f7ff fd31 	bl	8004ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8005596:	f7ff ff19 	bl	80053cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	e000ed00 	.word	0xe000ed00
 80055a8:	410fc271 	.word	0x410fc271
 80055ac:	410fc270 	.word	0x410fc270
 80055b0:	e000e400 	.word	0xe000e400
 80055b4:	20000800 	.word	0x20000800
 80055b8:	20000804 	.word	0x20000804
 80055bc:	e000ed20 	.word	0xe000ed20
 80055c0:	20000014 	.word	0x20000014
 80055c4:	e000ef34 	.word	0xe000ef34

080055c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	607b      	str	r3, [r7, #4]
}
 80055e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055e2:	4b10      	ldr	r3, [pc, #64]	@ (8005624 <vPortEnterCritical+0x5c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3301      	adds	r3, #1
 80055e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005624 <vPortEnterCritical+0x5c>)
 80055ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005624 <vPortEnterCritical+0x5c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d110      	bne.n	8005616 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <vPortEnterCritical+0x60>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <vPortEnterCritical+0x4e>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	603b      	str	r3, [r7, #0]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <vPortEnterCritical+0x4a>
	}
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000014 	.word	0x20000014
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005632:	4b12      	ldr	r3, [pc, #72]	@ (800567c <vPortExitCritical+0x50>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <vPortExitCritical+0x26>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	607b      	str	r3, [r7, #4]
}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	e7fd      	b.n	800564e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005652:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <vPortExitCritical+0x50>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a08      	ldr	r2, [pc, #32]	@ (800567c <vPortExitCritical+0x50>)
 800565a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800565c:	4b07      	ldr	r3, [pc, #28]	@ (800567c <vPortExitCritical+0x50>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <vPortExitCritical+0x44>
 8005664:	2300      	movs	r3, #0
 8005666:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800566e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	20000014 	.word	0x20000014

08005680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005680:	f3ef 8009 	mrs	r0, PSP
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4b15      	ldr	r3, [pc, #84]	@ (80056e0 <pxCurrentTCBConst>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f01e 0f10 	tst.w	lr, #16
 8005690:	bf08      	it	eq
 8005692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	6010      	str	r0, [r2, #0]
 800569c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056a4:	f380 8811 	msr	BASEPRI, r0
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f7ff fca2 	bl	8004ff8 <vTaskSwitchContext>
 80056b4:	f04f 0000 	mov.w	r0, #0
 80056b8:	f380 8811 	msr	BASEPRI, r0
 80056bc:	bc09      	pop	{r0, r3}
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	6808      	ldr	r0, [r1, #0]
 80056c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c6:	f01e 0f10 	tst.w	lr, #16
 80056ca:	bf08      	it	eq
 80056cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056d0:	f380 8809 	msr	PSP, r0
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst>:
 80056e0:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop

080056e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
}
 8005700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005702:	f7ff fbbf 	bl	8004e84 <xTaskIncrementTick>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800570c:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <xPortSysTickHandler+0x40>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	f383 8811 	msr	BASEPRI, r3
}
 800571e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005730:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <vPortSetupTimerInterrupt+0x34>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005736:	4b0b      	ldr	r3, [pc, #44]	@ (8005764 <vPortSetupTimerInterrupt+0x38>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800573c:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <vPortSetupTimerInterrupt+0x3c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0a      	ldr	r2, [pc, #40]	@ (800576c <vPortSetupTimerInterrupt+0x40>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	099b      	lsrs	r3, r3, #6
 8005748:	4a09      	ldr	r2, [pc, #36]	@ (8005770 <vPortSetupTimerInterrupt+0x44>)
 800574a:	3b01      	subs	r3, #1
 800574c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800574e:	4b04      	ldr	r3, [pc, #16]	@ (8005760 <vPortSetupTimerInterrupt+0x34>)
 8005750:	2207      	movs	r2, #7
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000e010 	.word	0xe000e010
 8005764:	e000e018 	.word	0xe000e018
 8005768:	20000008 	.word	0x20000008
 800576c:	10624dd3 	.word	0x10624dd3
 8005770:	e000e014 	.word	0xe000e014

08005774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005784 <vPortEnableVFP+0x10>
 8005778:	6801      	ldr	r1, [r0, #0]
 800577a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800577e:	6001      	str	r1, [r0, #0]
 8005780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005782:	bf00      	nop
 8005784:	e000ed88 	.word	0xe000ed88

08005788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	@ 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005794:	f7ff faca 	bl	8004d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005798:	4b5c      	ldr	r3, [pc, #368]	@ (800590c <pvPortMalloc+0x184>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057a0:	f000 f924 	bl	80059ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005910 <pvPortMalloc+0x188>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 8095 	bne.w	80058dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01e      	beq.n	80057f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057b8:	2208      	movs	r2, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d015      	beq.n	80057f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f023 0307 	bic.w	r3, r3, #7
 80057d0:	3308      	adds	r3, #8
 80057d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <pvPortMalloc+0x6e>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	617b      	str	r3, [r7, #20]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d06f      	beq.n	80058dc <pvPortMalloc+0x154>
 80057fc:	4b45      	ldr	r3, [pc, #276]	@ (8005914 <pvPortMalloc+0x18c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d86a      	bhi.n	80058dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005806:	4b44      	ldr	r3, [pc, #272]	@ (8005918 <pvPortMalloc+0x190>)
 8005808:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800580a:	4b43      	ldr	r3, [pc, #268]	@ (8005918 <pvPortMalloc+0x190>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005810:	e004      	b.n	800581c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d903      	bls.n	800582e <pvPortMalloc+0xa6>
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f1      	bne.n	8005812 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800582e:	4b37      	ldr	r3, [pc, #220]	@ (800590c <pvPortMalloc+0x184>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005834:	429a      	cmp	r2, r3
 8005836:	d051      	beq.n	80058dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2208      	movs	r2, #8
 800583e:	4413      	add	r3, r2
 8005840:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	1ad2      	subs	r2, r2, r3
 8005852:	2308      	movs	r3, #8
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	429a      	cmp	r2, r3
 8005858:	d920      	bls.n	800589c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800585a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4413      	add	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <pvPortMalloc+0xfc>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	613b      	str	r3, [r7, #16]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005896:	69b8      	ldr	r0, [r7, #24]
 8005898:	f000 f90a 	bl	8005ab0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800589c:	4b1d      	ldr	r3, [pc, #116]	@ (8005914 <pvPortMalloc+0x18c>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005914 <pvPortMalloc+0x18c>)
 80058a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005914 <pvPortMalloc+0x18c>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <pvPortMalloc+0x194>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d203      	bcs.n	80058be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058b6:	4b17      	ldr	r3, [pc, #92]	@ (8005914 <pvPortMalloc+0x18c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a18      	ldr	r2, [pc, #96]	@ (800591c <pvPortMalloc+0x194>)
 80058bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <pvPortMalloc+0x188>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058d2:	4b13      	ldr	r3, [pc, #76]	@ (8005920 <pvPortMalloc+0x198>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3301      	adds	r3, #1
 80058d8:	4a11      	ldr	r2, [pc, #68]	@ (8005920 <pvPortMalloc+0x198>)
 80058da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058dc:	f7ff fa34 	bl	8004d48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <pvPortMalloc+0x17a>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	60fb      	str	r3, [r7, #12]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <pvPortMalloc+0x176>
	return pvReturn;
 8005902:	69fb      	ldr	r3, [r7, #28]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3728      	adds	r7, #40	@ 0x28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	200013c8 	.word	0x200013c8
 8005910:	200013dc 	.word	0x200013dc
 8005914:	200013cc 	.word	0x200013cc
 8005918:	200013c0 	.word	0x200013c0
 800591c:	200013d0 	.word	0x200013d0
 8005920:	200013d4 	.word	0x200013d4

08005924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d04f      	beq.n	80059d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005936:	2308      	movs	r3, #8
 8005938:	425b      	negs	r3, r3
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	4b25      	ldr	r3, [pc, #148]	@ (80059e0 <vPortFree+0xbc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <vPortFree+0x46>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60fb      	str	r3, [r7, #12]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <vPortFree+0x66>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	60bb      	str	r3, [r7, #8]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	4b14      	ldr	r3, [pc, #80]	@ (80059e0 <vPortFree+0xbc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4013      	ands	r3, r2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01e      	beq.n	80059d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11a      	bne.n	80059d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	4b0e      	ldr	r3, [pc, #56]	@ (80059e0 <vPortFree+0xbc>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	43db      	mvns	r3, r3
 80059aa:	401a      	ands	r2, r3
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059b0:	f7ff f9bc 	bl	8004d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <vPortFree+0xc0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4413      	add	r3, r2
 80059be:	4a09      	ldr	r2, [pc, #36]	@ (80059e4 <vPortFree+0xc0>)
 80059c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059c2:	6938      	ldr	r0, [r7, #16]
 80059c4:	f000 f874 	bl	8005ab0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059c8:	4b07      	ldr	r3, [pc, #28]	@ (80059e8 <vPortFree+0xc4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	4a06      	ldr	r2, [pc, #24]	@ (80059e8 <vPortFree+0xc4>)
 80059d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059d2:	f7ff f9b9 	bl	8004d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059d6:	bf00      	nop
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	200013dc 	.word	0x200013dc
 80059e4:	200013cc 	.word	0x200013cc
 80059e8:	200013d8 	.word	0x200013d8

080059ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059f2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80059f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059f8:	4b27      	ldr	r3, [pc, #156]	@ (8005a98 <prvHeapInit+0xac>)
 80059fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00c      	beq.n	8005a20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3307      	adds	r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005a98 <prvHeapInit+0xac>)
 8005a1c:	4413      	add	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a24:	4a1d      	ldr	r2, [pc, #116]	@ (8005a9c <prvHeapInit+0xb0>)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a9c <prvHeapInit+0xb0>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4413      	add	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a38:	2208      	movs	r2, #8
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0307 	bic.w	r3, r3, #7
 8005a46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <prvHeapInit+0xb4>)
 8005a4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a4e:	4b14      	ldr	r3, [pc, #80]	@ (8005aa0 <prvHeapInit+0xb4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a56:	4b12      	ldr	r3, [pc, #72]	@ (8005aa0 <prvHeapInit+0xb4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	1ad2      	subs	r2, r2, r3
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <prvHeapInit+0xb4>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa4 <prvHeapInit+0xb8>)
 8005a7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a09      	ldr	r2, [pc, #36]	@ (8005aa8 <prvHeapInit+0xbc>)
 8005a82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a84:	4b09      	ldr	r3, [pc, #36]	@ (8005aac <prvHeapInit+0xc0>)
 8005a86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a8a:	601a      	str	r2, [r3, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20000808 	.word	0x20000808
 8005a9c:	200013c0 	.word	0x200013c0
 8005aa0:	200013c8 	.word	0x200013c8
 8005aa4:	200013d0 	.word	0x200013d0
 8005aa8:	200013cc 	.word	0x200013cc
 8005aac:	200013dc 	.word	0x200013dc

08005ab0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ab8:	4b28      	ldr	r3, [pc, #160]	@ (8005b5c <prvInsertBlockIntoFreeList+0xac>)
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	e002      	b.n	8005ac4 <prvInsertBlockIntoFreeList+0x14>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d8f7      	bhi.n	8005abe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d108      	bne.n	8005af2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	441a      	add	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	441a      	add	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d118      	bne.n	8005b38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <prvInsertBlockIntoFreeList+0xb0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d00d      	beq.n	8005b2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	441a      	add	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	e008      	b.n	8005b40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <prvInsertBlockIntoFreeList+0xb0>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e003      	b.n	8005b40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d002      	beq.n	8005b4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	200013c0 	.word	0x200013c0
 8005b60:	200013c8 	.word	0x200013c8

08005b64 <std>:
 8005b64:	2300      	movs	r3, #0
 8005b66:	b510      	push	{r4, lr}
 8005b68:	4604      	mov	r4, r0
 8005b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b72:	6083      	str	r3, [r0, #8]
 8005b74:	8181      	strh	r1, [r0, #12]
 8005b76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b78:	81c2      	strh	r2, [r0, #14]
 8005b7a:	6183      	str	r3, [r0, #24]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	2208      	movs	r2, #8
 8005b80:	305c      	adds	r0, #92	@ 0x5c
 8005b82:	f000 fa1b 	bl	8005fbc <memset>
 8005b86:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <std+0x58>)
 8005b88:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <std+0x5c>)
 8005b8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <std+0x60>)
 8005b90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <std+0x64>)
 8005b94:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b96:	4b0d      	ldr	r3, [pc, #52]	@ (8005bcc <std+0x68>)
 8005b98:	6224      	str	r4, [r4, #32]
 8005b9a:	429c      	cmp	r4, r3
 8005b9c:	d006      	beq.n	8005bac <std+0x48>
 8005b9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ba2:	4294      	cmp	r4, r2
 8005ba4:	d002      	beq.n	8005bac <std+0x48>
 8005ba6:	33d0      	adds	r3, #208	@ 0xd0
 8005ba8:	429c      	cmp	r4, r3
 8005baa:	d105      	bne.n	8005bb8 <std+0x54>
 8005bac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb4:	f000 ba7a 	b.w	80060ac <__retarget_lock_init_recursive>
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	08005e0d 	.word	0x08005e0d
 8005bc0:	08005e2f 	.word	0x08005e2f
 8005bc4:	08005e67 	.word	0x08005e67
 8005bc8:	08005e8b 	.word	0x08005e8b
 8005bcc:	200013e0 	.word	0x200013e0

08005bd0 <stdio_exit_handler>:
 8005bd0:	4a02      	ldr	r2, [pc, #8]	@ (8005bdc <stdio_exit_handler+0xc>)
 8005bd2:	4903      	ldr	r1, [pc, #12]	@ (8005be0 <stdio_exit_handler+0x10>)
 8005bd4:	4803      	ldr	r0, [pc, #12]	@ (8005be4 <stdio_exit_handler+0x14>)
 8005bd6:	f000 b869 	b.w	8005cac <_fwalk_sglue>
 8005bda:	bf00      	nop
 8005bdc:	20000018 	.word	0x20000018
 8005be0:	08006995 	.word	0x08006995
 8005be4:	20000028 	.word	0x20000028

08005be8 <cleanup_stdio>:
 8005be8:	6841      	ldr	r1, [r0, #4]
 8005bea:	4b0c      	ldr	r3, [pc, #48]	@ (8005c1c <cleanup_stdio+0x34>)
 8005bec:	4299      	cmp	r1, r3
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	d001      	beq.n	8005bf8 <cleanup_stdio+0x10>
 8005bf4:	f000 fece 	bl	8006994 <_fflush_r>
 8005bf8:	68a1      	ldr	r1, [r4, #8]
 8005bfa:	4b09      	ldr	r3, [pc, #36]	@ (8005c20 <cleanup_stdio+0x38>)
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	d002      	beq.n	8005c06 <cleanup_stdio+0x1e>
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 fec7 	bl	8006994 <_fflush_r>
 8005c06:	68e1      	ldr	r1, [r4, #12]
 8005c08:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <cleanup_stdio+0x3c>)
 8005c0a:	4299      	cmp	r1, r3
 8005c0c:	d004      	beq.n	8005c18 <cleanup_stdio+0x30>
 8005c0e:	4620      	mov	r0, r4
 8005c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c14:	f000 bebe 	b.w	8006994 <_fflush_r>
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200013e0 	.word	0x200013e0
 8005c20:	20001448 	.word	0x20001448
 8005c24:	200014b0 	.word	0x200014b0

08005c28 <global_stdio_init.part.0>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <global_stdio_init.part.0+0x30>)
 8005c2c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c5c <global_stdio_init.part.0+0x34>)
 8005c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c60 <global_stdio_init.part.0+0x38>)
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	4620      	mov	r0, r4
 8005c34:	2200      	movs	r2, #0
 8005c36:	2104      	movs	r1, #4
 8005c38:	f7ff ff94 	bl	8005b64 <std>
 8005c3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c40:	2201      	movs	r2, #1
 8005c42:	2109      	movs	r1, #9
 8005c44:	f7ff ff8e 	bl	8005b64 <std>
 8005c48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c52:	2112      	movs	r1, #18
 8005c54:	f7ff bf86 	b.w	8005b64 <std>
 8005c58:	20001518 	.word	0x20001518
 8005c5c:	200013e0 	.word	0x200013e0
 8005c60:	08005bd1 	.word	0x08005bd1

08005c64 <__sfp_lock_acquire>:
 8005c64:	4801      	ldr	r0, [pc, #4]	@ (8005c6c <__sfp_lock_acquire+0x8>)
 8005c66:	f000 ba22 	b.w	80060ae <__retarget_lock_acquire_recursive>
 8005c6a:	bf00      	nop
 8005c6c:	20001521 	.word	0x20001521

08005c70 <__sfp_lock_release>:
 8005c70:	4801      	ldr	r0, [pc, #4]	@ (8005c78 <__sfp_lock_release+0x8>)
 8005c72:	f000 ba1d 	b.w	80060b0 <__retarget_lock_release_recursive>
 8005c76:	bf00      	nop
 8005c78:	20001521 	.word	0x20001521

08005c7c <__sinit>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	4604      	mov	r4, r0
 8005c80:	f7ff fff0 	bl	8005c64 <__sfp_lock_acquire>
 8005c84:	6a23      	ldr	r3, [r4, #32]
 8005c86:	b11b      	cbz	r3, 8005c90 <__sinit+0x14>
 8005c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c8c:	f7ff bff0 	b.w	8005c70 <__sfp_lock_release>
 8005c90:	4b04      	ldr	r3, [pc, #16]	@ (8005ca4 <__sinit+0x28>)
 8005c92:	6223      	str	r3, [r4, #32]
 8005c94:	4b04      	ldr	r3, [pc, #16]	@ (8005ca8 <__sinit+0x2c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f5      	bne.n	8005c88 <__sinit+0xc>
 8005c9c:	f7ff ffc4 	bl	8005c28 <global_stdio_init.part.0>
 8005ca0:	e7f2      	b.n	8005c88 <__sinit+0xc>
 8005ca2:	bf00      	nop
 8005ca4:	08005be9 	.word	0x08005be9
 8005ca8:	20001518 	.word	0x20001518

08005cac <_fwalk_sglue>:
 8005cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	4688      	mov	r8, r1
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cbc:	f1b9 0901 	subs.w	r9, r9, #1
 8005cc0:	d505      	bpl.n	8005cce <_fwalk_sglue+0x22>
 8005cc2:	6824      	ldr	r4, [r4, #0]
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	d1f7      	bne.n	8005cb8 <_fwalk_sglue+0xc>
 8005cc8:	4630      	mov	r0, r6
 8005cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cce:	89ab      	ldrh	r3, [r5, #12]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d907      	bls.n	8005ce4 <_fwalk_sglue+0x38>
 8005cd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	d003      	beq.n	8005ce4 <_fwalk_sglue+0x38>
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c0      	blx	r8
 8005ce2:	4306      	orrs	r6, r0
 8005ce4:	3568      	adds	r5, #104	@ 0x68
 8005ce6:	e7e9      	b.n	8005cbc <_fwalk_sglue+0x10>

08005ce8 <_puts_r>:
 8005ce8:	6a03      	ldr	r3, [r0, #32]
 8005cea:	b570      	push	{r4, r5, r6, lr}
 8005cec:	6884      	ldr	r4, [r0, #8]
 8005cee:	4605      	mov	r5, r0
 8005cf0:	460e      	mov	r6, r1
 8005cf2:	b90b      	cbnz	r3, 8005cf8 <_puts_r+0x10>
 8005cf4:	f7ff ffc2 	bl	8005c7c <__sinit>
 8005cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cfa:	07db      	lsls	r3, r3, #31
 8005cfc:	d405      	bmi.n	8005d0a <_puts_r+0x22>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	0598      	lsls	r0, r3, #22
 8005d02:	d402      	bmi.n	8005d0a <_puts_r+0x22>
 8005d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d06:	f000 f9d2 	bl	80060ae <__retarget_lock_acquire_recursive>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	0719      	lsls	r1, r3, #28
 8005d0e:	d502      	bpl.n	8005d16 <_puts_r+0x2e>
 8005d10:	6923      	ldr	r3, [r4, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d135      	bne.n	8005d82 <_puts_r+0x9a>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f8f9 	bl	8005f10 <__swsetup_r>
 8005d1e:	b380      	cbz	r0, 8005d82 <_puts_r+0x9a>
 8005d20:	f04f 35ff 	mov.w	r5, #4294967295
 8005d24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d26:	07da      	lsls	r2, r3, #31
 8005d28:	d405      	bmi.n	8005d36 <_puts_r+0x4e>
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	059b      	lsls	r3, r3, #22
 8005d2e:	d402      	bmi.n	8005d36 <_puts_r+0x4e>
 8005d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d32:	f000 f9bd 	bl	80060b0 <__retarget_lock_release_recursive>
 8005d36:	4628      	mov	r0, r5
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da04      	bge.n	8005d48 <_puts_r+0x60>
 8005d3e:	69a2      	ldr	r2, [r4, #24]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	dc17      	bgt.n	8005d74 <_puts_r+0x8c>
 8005d44:	290a      	cmp	r1, #10
 8005d46:	d015      	beq.n	8005d74 <_puts_r+0x8c>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	6022      	str	r2, [r4, #0]
 8005d4e:	7019      	strb	r1, [r3, #0]
 8005d50:	68a3      	ldr	r3, [r4, #8]
 8005d52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d56:	3b01      	subs	r3, #1
 8005d58:	60a3      	str	r3, [r4, #8]
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	d1ed      	bne.n	8005d3a <_puts_r+0x52>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da11      	bge.n	8005d86 <_puts_r+0x9e>
 8005d62:	4622      	mov	r2, r4
 8005d64:	210a      	movs	r1, #10
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 f893 	bl	8005e92 <__swbuf_r>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d0d7      	beq.n	8005d20 <_puts_r+0x38>
 8005d70:	250a      	movs	r5, #10
 8005d72:	e7d7      	b.n	8005d24 <_puts_r+0x3c>
 8005d74:	4622      	mov	r2, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f88b 	bl	8005e92 <__swbuf_r>
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d1e7      	bne.n	8005d50 <_puts_r+0x68>
 8005d80:	e7ce      	b.n	8005d20 <_puts_r+0x38>
 8005d82:	3e01      	subs	r6, #1
 8005d84:	e7e4      	b.n	8005d50 <_puts_r+0x68>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	6022      	str	r2, [r4, #0]
 8005d8c:	220a      	movs	r2, #10
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e7ee      	b.n	8005d70 <_puts_r+0x88>
	...

08005d94 <puts>:
 8005d94:	4b02      	ldr	r3, [pc, #8]	@ (8005da0 <puts+0xc>)
 8005d96:	4601      	mov	r1, r0
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	f7ff bfa5 	b.w	8005ce8 <_puts_r>
 8005d9e:	bf00      	nop
 8005da0:	20000024 	.word	0x20000024

08005da4 <sniprintf>:
 8005da4:	b40c      	push	{r2, r3}
 8005da6:	b530      	push	{r4, r5, lr}
 8005da8:	4b17      	ldr	r3, [pc, #92]	@ (8005e08 <sniprintf+0x64>)
 8005daa:	1e0c      	subs	r4, r1, #0
 8005dac:	681d      	ldr	r5, [r3, #0]
 8005dae:	b09d      	sub	sp, #116	@ 0x74
 8005db0:	da08      	bge.n	8005dc4 <sniprintf+0x20>
 8005db2:	238b      	movs	r3, #139	@ 0x8b
 8005db4:	602b      	str	r3, [r5, #0]
 8005db6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dba:	b01d      	add	sp, #116	@ 0x74
 8005dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dc0:	b002      	add	sp, #8
 8005dc2:	4770      	bx	lr
 8005dc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005dc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dcc:	bf14      	ite	ne
 8005dce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005dd2:	4623      	moveq	r3, r4
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	9307      	str	r3, [sp, #28]
 8005dd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ddc:	9002      	str	r0, [sp, #8]
 8005dde:	9006      	str	r0, [sp, #24]
 8005de0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005de4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005de6:	ab21      	add	r3, sp, #132	@ 0x84
 8005de8:	a902      	add	r1, sp, #8
 8005dea:	4628      	mov	r0, r5
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	f000 fac3 	bl	8006378 <_svfiprintf_r>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	bfbc      	itt	lt
 8005df6:	238b      	movlt	r3, #139	@ 0x8b
 8005df8:	602b      	strlt	r3, [r5, #0]
 8005dfa:	2c00      	cmp	r4, #0
 8005dfc:	d0dd      	beq.n	8005dba <sniprintf+0x16>
 8005dfe:	9b02      	ldr	r3, [sp, #8]
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e7d9      	b.n	8005dba <sniprintf+0x16>
 8005e06:	bf00      	nop
 8005e08:	20000024 	.word	0x20000024

08005e0c <__sread>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e14:	f000 f8fc 	bl	8006010 <_read_r>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	bfab      	itete	ge
 8005e1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e20:	181b      	addge	r3, r3, r0
 8005e22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e26:	bfac      	ite	ge
 8005e28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e2a:	81a3      	strhlt	r3, [r4, #12]
 8005e2c:	bd10      	pop	{r4, pc}

08005e2e <__swrite>:
 8005e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e32:	461f      	mov	r7, r3
 8005e34:	898b      	ldrh	r3, [r1, #12]
 8005e36:	05db      	lsls	r3, r3, #23
 8005e38:	4605      	mov	r5, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	4616      	mov	r6, r2
 8005e3e:	d505      	bpl.n	8005e4c <__swrite+0x1e>
 8005e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e44:	2302      	movs	r3, #2
 8005e46:	2200      	movs	r2, #0
 8005e48:	f000 f8d0 	bl	8005fec <_lseek_r>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e56:	81a3      	strh	r3, [r4, #12]
 8005e58:	4632      	mov	r2, r6
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e62:	f000 b8e7 	b.w	8006034 <_write_r>

08005e66 <__sseek>:
 8005e66:	b510      	push	{r4, lr}
 8005e68:	460c      	mov	r4, r1
 8005e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6e:	f000 f8bd 	bl	8005fec <_lseek_r>
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	bf15      	itete	ne
 8005e78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e82:	81a3      	strheq	r3, [r4, #12]
 8005e84:	bf18      	it	ne
 8005e86:	81a3      	strhne	r3, [r4, #12]
 8005e88:	bd10      	pop	{r4, pc}

08005e8a <__sclose>:
 8005e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e8e:	f000 b89d 	b.w	8005fcc <_close_r>

08005e92 <__swbuf_r>:
 8005e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e94:	460e      	mov	r6, r1
 8005e96:	4614      	mov	r4, r2
 8005e98:	4605      	mov	r5, r0
 8005e9a:	b118      	cbz	r0, 8005ea4 <__swbuf_r+0x12>
 8005e9c:	6a03      	ldr	r3, [r0, #32]
 8005e9e:	b90b      	cbnz	r3, 8005ea4 <__swbuf_r+0x12>
 8005ea0:	f7ff feec 	bl	8005c7c <__sinit>
 8005ea4:	69a3      	ldr	r3, [r4, #24]
 8005ea6:	60a3      	str	r3, [r4, #8]
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	071a      	lsls	r2, r3, #28
 8005eac:	d501      	bpl.n	8005eb2 <__swbuf_r+0x20>
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	b943      	cbnz	r3, 8005ec4 <__swbuf_r+0x32>
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 f82b 	bl	8005f10 <__swsetup_r>
 8005eba:	b118      	cbz	r0, 8005ec4 <__swbuf_r+0x32>
 8005ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	6922      	ldr	r2, [r4, #16]
 8005ec8:	1a98      	subs	r0, r3, r2
 8005eca:	6963      	ldr	r3, [r4, #20]
 8005ecc:	b2f6      	uxtb	r6, r6
 8005ece:	4283      	cmp	r3, r0
 8005ed0:	4637      	mov	r7, r6
 8005ed2:	dc05      	bgt.n	8005ee0 <__swbuf_r+0x4e>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 fd5c 	bl	8006994 <_fflush_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1ed      	bne.n	8005ebc <__swbuf_r+0x2a>
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	60a3      	str	r3, [r4, #8]
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	6022      	str	r2, [r4, #0]
 8005eec:	701e      	strb	r6, [r3, #0]
 8005eee:	6962      	ldr	r2, [r4, #20]
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d004      	beq.n	8005f00 <__swbuf_r+0x6e>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	07db      	lsls	r3, r3, #31
 8005efa:	d5e1      	bpl.n	8005ec0 <__swbuf_r+0x2e>
 8005efc:	2e0a      	cmp	r6, #10
 8005efe:	d1df      	bne.n	8005ec0 <__swbuf_r+0x2e>
 8005f00:	4621      	mov	r1, r4
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 fd46 	bl	8006994 <_fflush_r>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d0d9      	beq.n	8005ec0 <__swbuf_r+0x2e>
 8005f0c:	e7d6      	b.n	8005ebc <__swbuf_r+0x2a>
	...

08005f10 <__swsetup_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4b29      	ldr	r3, [pc, #164]	@ (8005fb8 <__swsetup_r+0xa8>)
 8005f14:	4605      	mov	r5, r0
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	460c      	mov	r4, r1
 8005f1a:	b118      	cbz	r0, 8005f24 <__swsetup_r+0x14>
 8005f1c:	6a03      	ldr	r3, [r0, #32]
 8005f1e:	b90b      	cbnz	r3, 8005f24 <__swsetup_r+0x14>
 8005f20:	f7ff feac 	bl	8005c7c <__sinit>
 8005f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f28:	0719      	lsls	r1, r3, #28
 8005f2a:	d422      	bmi.n	8005f72 <__swsetup_r+0x62>
 8005f2c:	06da      	lsls	r2, r3, #27
 8005f2e:	d407      	bmi.n	8005f40 <__swsetup_r+0x30>
 8005f30:	2209      	movs	r2, #9
 8005f32:	602a      	str	r2, [r5, #0]
 8005f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	e033      	b.n	8005fa8 <__swsetup_r+0x98>
 8005f40:	0758      	lsls	r0, r3, #29
 8005f42:	d512      	bpl.n	8005f6a <__swsetup_r+0x5a>
 8005f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f46:	b141      	cbz	r1, 8005f5a <__swsetup_r+0x4a>
 8005f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f4c:	4299      	cmp	r1, r3
 8005f4e:	d002      	beq.n	8005f56 <__swsetup_r+0x46>
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 f8bd 	bl	80060d0 <_free_r>
 8005f56:	2300      	movs	r3, #0
 8005f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f60:	81a3      	strh	r3, [r4, #12]
 8005f62:	2300      	movs	r3, #0
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f043 0308 	orr.w	r3, r3, #8
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	b94b      	cbnz	r3, 8005f8a <__swsetup_r+0x7a>
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f80:	d003      	beq.n	8005f8a <__swsetup_r+0x7a>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 fd53 	bl	8006a30 <__smakebuf_r>
 8005f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8e:	f013 0201 	ands.w	r2, r3, #1
 8005f92:	d00a      	beq.n	8005faa <__swsetup_r+0x9a>
 8005f94:	2200      	movs	r2, #0
 8005f96:	60a2      	str	r2, [r4, #8]
 8005f98:	6962      	ldr	r2, [r4, #20]
 8005f9a:	4252      	negs	r2, r2
 8005f9c:	61a2      	str	r2, [r4, #24]
 8005f9e:	6922      	ldr	r2, [r4, #16]
 8005fa0:	b942      	cbnz	r2, 8005fb4 <__swsetup_r+0xa4>
 8005fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fa6:	d1c5      	bne.n	8005f34 <__swsetup_r+0x24>
 8005fa8:	bd38      	pop	{r3, r4, r5, pc}
 8005faa:	0799      	lsls	r1, r3, #30
 8005fac:	bf58      	it	pl
 8005fae:	6962      	ldrpl	r2, [r4, #20]
 8005fb0:	60a2      	str	r2, [r4, #8]
 8005fb2:	e7f4      	b.n	8005f9e <__swsetup_r+0x8e>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e7f7      	b.n	8005fa8 <__swsetup_r+0x98>
 8005fb8:	20000024 	.word	0x20000024

08005fbc <memset>:
 8005fbc:	4402      	add	r2, r0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memset+0xa>
 8005fc4:	4770      	bx	lr
 8005fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fca:	e7f9      	b.n	8005fc0 <memset+0x4>

08005fcc <_close_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	@ (8005fe8 <_close_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fa fe61 	bl	8000c9e <_close>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_close_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_close_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	2000151c 	.word	0x2000151c

08005fec <_lseek_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d07      	ldr	r5, [pc, #28]	@ (800600c <_lseek_r+0x20>)
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	4608      	mov	r0, r1
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	602a      	str	r2, [r5, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f7fa fe76 	bl	8000cec <_lseek>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_lseek_r+0x1e>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_lseek_r+0x1e>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	2000151c 	.word	0x2000151c

08006010 <_read_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d07      	ldr	r5, [pc, #28]	@ (8006030 <_read_r+0x20>)
 8006014:	4604      	mov	r4, r0
 8006016:	4608      	mov	r0, r1
 8006018:	4611      	mov	r1, r2
 800601a:	2200      	movs	r2, #0
 800601c:	602a      	str	r2, [r5, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fa fe04 	bl	8000c2c <_read>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_read_r+0x1e>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_read_r+0x1e>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	2000151c 	.word	0x2000151c

08006034 <_write_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d07      	ldr	r5, [pc, #28]	@ (8006054 <_write_r+0x20>)
 8006038:	4604      	mov	r4, r0
 800603a:	4608      	mov	r0, r1
 800603c:	4611      	mov	r1, r2
 800603e:	2200      	movs	r2, #0
 8006040:	602a      	str	r2, [r5, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	f7fa fe0f 	bl	8000c66 <_write>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_write_r+0x1e>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_write_r+0x1e>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	2000151c 	.word	0x2000151c

08006058 <__errno>:
 8006058:	4b01      	ldr	r3, [pc, #4]	@ (8006060 <__errno+0x8>)
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000024 	.word	0x20000024

08006064 <__libc_init_array>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4d0d      	ldr	r5, [pc, #52]	@ (800609c <__libc_init_array+0x38>)
 8006068:	4c0d      	ldr	r4, [pc, #52]	@ (80060a0 <__libc_init_array+0x3c>)
 800606a:	1b64      	subs	r4, r4, r5
 800606c:	10a4      	asrs	r4, r4, #2
 800606e:	2600      	movs	r6, #0
 8006070:	42a6      	cmp	r6, r4
 8006072:	d109      	bne.n	8006088 <__libc_init_array+0x24>
 8006074:	4d0b      	ldr	r5, [pc, #44]	@ (80060a4 <__libc_init_array+0x40>)
 8006076:	4c0c      	ldr	r4, [pc, #48]	@ (80060a8 <__libc_init_array+0x44>)
 8006078:	f000 fd98 	bl	8006bac <_init>
 800607c:	1b64      	subs	r4, r4, r5
 800607e:	10a4      	asrs	r4, r4, #2
 8006080:	2600      	movs	r6, #0
 8006082:	42a6      	cmp	r6, r4
 8006084:	d105      	bne.n	8006092 <__libc_init_array+0x2e>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	f855 3b04 	ldr.w	r3, [r5], #4
 800608c:	4798      	blx	r3
 800608e:	3601      	adds	r6, #1
 8006090:	e7ee      	b.n	8006070 <__libc_init_array+0xc>
 8006092:	f855 3b04 	ldr.w	r3, [r5], #4
 8006096:	4798      	blx	r3
 8006098:	3601      	adds	r6, #1
 800609a:	e7f2      	b.n	8006082 <__libc_init_array+0x1e>
 800609c:	08006d58 	.word	0x08006d58
 80060a0:	08006d58 	.word	0x08006d58
 80060a4:	08006d58 	.word	0x08006d58
 80060a8:	08006d5c 	.word	0x08006d5c

080060ac <__retarget_lock_init_recursive>:
 80060ac:	4770      	bx	lr

080060ae <__retarget_lock_acquire_recursive>:
 80060ae:	4770      	bx	lr

080060b0 <__retarget_lock_release_recursive>:
 80060b0:	4770      	bx	lr

080060b2 <memcpy>:
 80060b2:	440a      	add	r2, r1
 80060b4:	4291      	cmp	r1, r2
 80060b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80060ba:	d100      	bne.n	80060be <memcpy+0xc>
 80060bc:	4770      	bx	lr
 80060be:	b510      	push	{r4, lr}
 80060c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060c8:	4291      	cmp	r1, r2
 80060ca:	d1f9      	bne.n	80060c0 <memcpy+0xe>
 80060cc:	bd10      	pop	{r4, pc}
	...

080060d0 <_free_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4605      	mov	r5, r0
 80060d4:	2900      	cmp	r1, #0
 80060d6:	d041      	beq.n	800615c <_free_r+0x8c>
 80060d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060dc:	1f0c      	subs	r4, r1, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfb8      	it	lt
 80060e2:	18e4      	addlt	r4, r4, r3
 80060e4:	f000 f8e0 	bl	80062a8 <__malloc_lock>
 80060e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006160 <_free_r+0x90>)
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	b933      	cbnz	r3, 80060fc <_free_r+0x2c>
 80060ee:	6063      	str	r3, [r4, #4]
 80060f0:	6014      	str	r4, [r2, #0]
 80060f2:	4628      	mov	r0, r5
 80060f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060f8:	f000 b8dc 	b.w	80062b4 <__malloc_unlock>
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	d908      	bls.n	8006112 <_free_r+0x42>
 8006100:	6820      	ldr	r0, [r4, #0]
 8006102:	1821      	adds	r1, r4, r0
 8006104:	428b      	cmp	r3, r1
 8006106:	bf01      	itttt	eq
 8006108:	6819      	ldreq	r1, [r3, #0]
 800610a:	685b      	ldreq	r3, [r3, #4]
 800610c:	1809      	addeq	r1, r1, r0
 800610e:	6021      	streq	r1, [r4, #0]
 8006110:	e7ed      	b.n	80060ee <_free_r+0x1e>
 8006112:	461a      	mov	r2, r3
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	b10b      	cbz	r3, 800611c <_free_r+0x4c>
 8006118:	42a3      	cmp	r3, r4
 800611a:	d9fa      	bls.n	8006112 <_free_r+0x42>
 800611c:	6811      	ldr	r1, [r2, #0]
 800611e:	1850      	adds	r0, r2, r1
 8006120:	42a0      	cmp	r0, r4
 8006122:	d10b      	bne.n	800613c <_free_r+0x6c>
 8006124:	6820      	ldr	r0, [r4, #0]
 8006126:	4401      	add	r1, r0
 8006128:	1850      	adds	r0, r2, r1
 800612a:	4283      	cmp	r3, r0
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	d1e0      	bne.n	80060f2 <_free_r+0x22>
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	6053      	str	r3, [r2, #4]
 8006136:	4408      	add	r0, r1
 8006138:	6010      	str	r0, [r2, #0]
 800613a:	e7da      	b.n	80060f2 <_free_r+0x22>
 800613c:	d902      	bls.n	8006144 <_free_r+0x74>
 800613e:	230c      	movs	r3, #12
 8006140:	602b      	str	r3, [r5, #0]
 8006142:	e7d6      	b.n	80060f2 <_free_r+0x22>
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	1821      	adds	r1, r4, r0
 8006148:	428b      	cmp	r3, r1
 800614a:	bf04      	itt	eq
 800614c:	6819      	ldreq	r1, [r3, #0]
 800614e:	685b      	ldreq	r3, [r3, #4]
 8006150:	6063      	str	r3, [r4, #4]
 8006152:	bf04      	itt	eq
 8006154:	1809      	addeq	r1, r1, r0
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	6054      	str	r4, [r2, #4]
 800615a:	e7ca      	b.n	80060f2 <_free_r+0x22>
 800615c:	bd38      	pop	{r3, r4, r5, pc}
 800615e:	bf00      	nop
 8006160:	20001528 	.word	0x20001528

08006164 <sbrk_aligned>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4e0f      	ldr	r6, [pc, #60]	@ (80061a4 <sbrk_aligned+0x40>)
 8006168:	460c      	mov	r4, r1
 800616a:	6831      	ldr	r1, [r6, #0]
 800616c:	4605      	mov	r5, r0
 800616e:	b911      	cbnz	r1, 8006176 <sbrk_aligned+0x12>
 8006170:	f000 fcd6 	bl	8006b20 <_sbrk_r>
 8006174:	6030      	str	r0, [r6, #0]
 8006176:	4621      	mov	r1, r4
 8006178:	4628      	mov	r0, r5
 800617a:	f000 fcd1 	bl	8006b20 <_sbrk_r>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d103      	bne.n	800618a <sbrk_aligned+0x26>
 8006182:	f04f 34ff 	mov.w	r4, #4294967295
 8006186:	4620      	mov	r0, r4
 8006188:	bd70      	pop	{r4, r5, r6, pc}
 800618a:	1cc4      	adds	r4, r0, #3
 800618c:	f024 0403 	bic.w	r4, r4, #3
 8006190:	42a0      	cmp	r0, r4
 8006192:	d0f8      	beq.n	8006186 <sbrk_aligned+0x22>
 8006194:	1a21      	subs	r1, r4, r0
 8006196:	4628      	mov	r0, r5
 8006198:	f000 fcc2 	bl	8006b20 <_sbrk_r>
 800619c:	3001      	adds	r0, #1
 800619e:	d1f2      	bne.n	8006186 <sbrk_aligned+0x22>
 80061a0:	e7ef      	b.n	8006182 <sbrk_aligned+0x1e>
 80061a2:	bf00      	nop
 80061a4:	20001524 	.word	0x20001524

080061a8 <_malloc_r>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	1ccd      	adds	r5, r1, #3
 80061ae:	f025 0503 	bic.w	r5, r5, #3
 80061b2:	3508      	adds	r5, #8
 80061b4:	2d0c      	cmp	r5, #12
 80061b6:	bf38      	it	cc
 80061b8:	250c      	movcc	r5, #12
 80061ba:	2d00      	cmp	r5, #0
 80061bc:	4606      	mov	r6, r0
 80061be:	db01      	blt.n	80061c4 <_malloc_r+0x1c>
 80061c0:	42a9      	cmp	r1, r5
 80061c2:	d904      	bls.n	80061ce <_malloc_r+0x26>
 80061c4:	230c      	movs	r3, #12
 80061c6:	6033      	str	r3, [r6, #0]
 80061c8:	2000      	movs	r0, #0
 80061ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062a4 <_malloc_r+0xfc>
 80061d2:	f000 f869 	bl	80062a8 <__malloc_lock>
 80061d6:	f8d8 3000 	ldr.w	r3, [r8]
 80061da:	461c      	mov	r4, r3
 80061dc:	bb44      	cbnz	r4, 8006230 <_malloc_r+0x88>
 80061de:	4629      	mov	r1, r5
 80061e0:	4630      	mov	r0, r6
 80061e2:	f7ff ffbf 	bl	8006164 <sbrk_aligned>
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	4604      	mov	r4, r0
 80061ea:	d158      	bne.n	800629e <_malloc_r+0xf6>
 80061ec:	f8d8 4000 	ldr.w	r4, [r8]
 80061f0:	4627      	mov	r7, r4
 80061f2:	2f00      	cmp	r7, #0
 80061f4:	d143      	bne.n	800627e <_malloc_r+0xd6>
 80061f6:	2c00      	cmp	r4, #0
 80061f8:	d04b      	beq.n	8006292 <_malloc_r+0xea>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	4639      	mov	r1, r7
 80061fe:	4630      	mov	r0, r6
 8006200:	eb04 0903 	add.w	r9, r4, r3
 8006204:	f000 fc8c 	bl	8006b20 <_sbrk_r>
 8006208:	4581      	cmp	r9, r0
 800620a:	d142      	bne.n	8006292 <_malloc_r+0xea>
 800620c:	6821      	ldr	r1, [r4, #0]
 800620e:	1a6d      	subs	r5, r5, r1
 8006210:	4629      	mov	r1, r5
 8006212:	4630      	mov	r0, r6
 8006214:	f7ff ffa6 	bl	8006164 <sbrk_aligned>
 8006218:	3001      	adds	r0, #1
 800621a:	d03a      	beq.n	8006292 <_malloc_r+0xea>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	442b      	add	r3, r5
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	f8d8 3000 	ldr.w	r3, [r8]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	bb62      	cbnz	r2, 8006284 <_malloc_r+0xdc>
 800622a:	f8c8 7000 	str.w	r7, [r8]
 800622e:	e00f      	b.n	8006250 <_malloc_r+0xa8>
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	1b52      	subs	r2, r2, r5
 8006234:	d420      	bmi.n	8006278 <_malloc_r+0xd0>
 8006236:	2a0b      	cmp	r2, #11
 8006238:	d917      	bls.n	800626a <_malloc_r+0xc2>
 800623a:	1961      	adds	r1, r4, r5
 800623c:	42a3      	cmp	r3, r4
 800623e:	6025      	str	r5, [r4, #0]
 8006240:	bf18      	it	ne
 8006242:	6059      	strne	r1, [r3, #4]
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	bf08      	it	eq
 8006248:	f8c8 1000 	streq.w	r1, [r8]
 800624c:	5162      	str	r2, [r4, r5]
 800624e:	604b      	str	r3, [r1, #4]
 8006250:	4630      	mov	r0, r6
 8006252:	f000 f82f 	bl	80062b4 <__malloc_unlock>
 8006256:	f104 000b 	add.w	r0, r4, #11
 800625a:	1d23      	adds	r3, r4, #4
 800625c:	f020 0007 	bic.w	r0, r0, #7
 8006260:	1ac2      	subs	r2, r0, r3
 8006262:	bf1c      	itt	ne
 8006264:	1a1b      	subne	r3, r3, r0
 8006266:	50a3      	strne	r3, [r4, r2]
 8006268:	e7af      	b.n	80061ca <_malloc_r+0x22>
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	42a3      	cmp	r3, r4
 800626e:	bf0c      	ite	eq
 8006270:	f8c8 2000 	streq.w	r2, [r8]
 8006274:	605a      	strne	r2, [r3, #4]
 8006276:	e7eb      	b.n	8006250 <_malloc_r+0xa8>
 8006278:	4623      	mov	r3, r4
 800627a:	6864      	ldr	r4, [r4, #4]
 800627c:	e7ae      	b.n	80061dc <_malloc_r+0x34>
 800627e:	463c      	mov	r4, r7
 8006280:	687f      	ldr	r7, [r7, #4]
 8006282:	e7b6      	b.n	80061f2 <_malloc_r+0x4a>
 8006284:	461a      	mov	r2, r3
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	42a3      	cmp	r3, r4
 800628a:	d1fb      	bne.n	8006284 <_malloc_r+0xdc>
 800628c:	2300      	movs	r3, #0
 800628e:	6053      	str	r3, [r2, #4]
 8006290:	e7de      	b.n	8006250 <_malloc_r+0xa8>
 8006292:	230c      	movs	r3, #12
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	4630      	mov	r0, r6
 8006298:	f000 f80c 	bl	80062b4 <__malloc_unlock>
 800629c:	e794      	b.n	80061c8 <_malloc_r+0x20>
 800629e:	6005      	str	r5, [r0, #0]
 80062a0:	e7d6      	b.n	8006250 <_malloc_r+0xa8>
 80062a2:	bf00      	nop
 80062a4:	20001528 	.word	0x20001528

080062a8 <__malloc_lock>:
 80062a8:	4801      	ldr	r0, [pc, #4]	@ (80062b0 <__malloc_lock+0x8>)
 80062aa:	f7ff bf00 	b.w	80060ae <__retarget_lock_acquire_recursive>
 80062ae:	bf00      	nop
 80062b0:	20001520 	.word	0x20001520

080062b4 <__malloc_unlock>:
 80062b4:	4801      	ldr	r0, [pc, #4]	@ (80062bc <__malloc_unlock+0x8>)
 80062b6:	f7ff befb 	b.w	80060b0 <__retarget_lock_release_recursive>
 80062ba:	bf00      	nop
 80062bc:	20001520 	.word	0x20001520

080062c0 <__ssputs_r>:
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	688e      	ldr	r6, [r1, #8]
 80062c6:	461f      	mov	r7, r3
 80062c8:	42be      	cmp	r6, r7
 80062ca:	680b      	ldr	r3, [r1, #0]
 80062cc:	4682      	mov	sl, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	4690      	mov	r8, r2
 80062d2:	d82d      	bhi.n	8006330 <__ssputs_r+0x70>
 80062d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062dc:	d026      	beq.n	800632c <__ssputs_r+0x6c>
 80062de:	6965      	ldr	r5, [r4, #20]
 80062e0:	6909      	ldr	r1, [r1, #16]
 80062e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062e6:	eba3 0901 	sub.w	r9, r3, r1
 80062ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062ee:	1c7b      	adds	r3, r7, #1
 80062f0:	444b      	add	r3, r9
 80062f2:	106d      	asrs	r5, r5, #1
 80062f4:	429d      	cmp	r5, r3
 80062f6:	bf38      	it	cc
 80062f8:	461d      	movcc	r5, r3
 80062fa:	0553      	lsls	r3, r2, #21
 80062fc:	d527      	bpl.n	800634e <__ssputs_r+0x8e>
 80062fe:	4629      	mov	r1, r5
 8006300:	f7ff ff52 	bl	80061a8 <_malloc_r>
 8006304:	4606      	mov	r6, r0
 8006306:	b360      	cbz	r0, 8006362 <__ssputs_r+0xa2>
 8006308:	6921      	ldr	r1, [r4, #16]
 800630a:	464a      	mov	r2, r9
 800630c:	f7ff fed1 	bl	80060b2 <memcpy>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	6126      	str	r6, [r4, #16]
 800631e:	6165      	str	r5, [r4, #20]
 8006320:	444e      	add	r6, r9
 8006322:	eba5 0509 	sub.w	r5, r5, r9
 8006326:	6026      	str	r6, [r4, #0]
 8006328:	60a5      	str	r5, [r4, #8]
 800632a:	463e      	mov	r6, r7
 800632c:	42be      	cmp	r6, r7
 800632e:	d900      	bls.n	8006332 <__ssputs_r+0x72>
 8006330:	463e      	mov	r6, r7
 8006332:	6820      	ldr	r0, [r4, #0]
 8006334:	4632      	mov	r2, r6
 8006336:	4641      	mov	r1, r8
 8006338:	f000 fbb6 	bl	8006aa8 <memmove>
 800633c:	68a3      	ldr	r3, [r4, #8]
 800633e:	1b9b      	subs	r3, r3, r6
 8006340:	60a3      	str	r3, [r4, #8]
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	4433      	add	r3, r6
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	2000      	movs	r0, #0
 800634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634e:	462a      	mov	r2, r5
 8006350:	f000 fbf6 	bl	8006b40 <_realloc_r>
 8006354:	4606      	mov	r6, r0
 8006356:	2800      	cmp	r0, #0
 8006358:	d1e0      	bne.n	800631c <__ssputs_r+0x5c>
 800635a:	6921      	ldr	r1, [r4, #16]
 800635c:	4650      	mov	r0, sl
 800635e:	f7ff feb7 	bl	80060d0 <_free_r>
 8006362:	230c      	movs	r3, #12
 8006364:	f8ca 3000 	str.w	r3, [sl]
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	e7e9      	b.n	800634a <__ssputs_r+0x8a>
	...

08006378 <_svfiprintf_r>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	4698      	mov	r8, r3
 800637e:	898b      	ldrh	r3, [r1, #12]
 8006380:	061b      	lsls	r3, r3, #24
 8006382:	b09d      	sub	sp, #116	@ 0x74
 8006384:	4607      	mov	r7, r0
 8006386:	460d      	mov	r5, r1
 8006388:	4614      	mov	r4, r2
 800638a:	d510      	bpl.n	80063ae <_svfiprintf_r+0x36>
 800638c:	690b      	ldr	r3, [r1, #16]
 800638e:	b973      	cbnz	r3, 80063ae <_svfiprintf_r+0x36>
 8006390:	2140      	movs	r1, #64	@ 0x40
 8006392:	f7ff ff09 	bl	80061a8 <_malloc_r>
 8006396:	6028      	str	r0, [r5, #0]
 8006398:	6128      	str	r0, [r5, #16]
 800639a:	b930      	cbnz	r0, 80063aa <_svfiprintf_r+0x32>
 800639c:	230c      	movs	r3, #12
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	b01d      	add	sp, #116	@ 0x74
 80063a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063aa:	2340      	movs	r3, #64	@ 0x40
 80063ac:	616b      	str	r3, [r5, #20]
 80063ae:	2300      	movs	r3, #0
 80063b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b2:	2320      	movs	r3, #32
 80063b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80063bc:	2330      	movs	r3, #48	@ 0x30
 80063be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800655c <_svfiprintf_r+0x1e4>
 80063c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063c6:	f04f 0901 	mov.w	r9, #1
 80063ca:	4623      	mov	r3, r4
 80063cc:	469a      	mov	sl, r3
 80063ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d2:	b10a      	cbz	r2, 80063d8 <_svfiprintf_r+0x60>
 80063d4:	2a25      	cmp	r2, #37	@ 0x25
 80063d6:	d1f9      	bne.n	80063cc <_svfiprintf_r+0x54>
 80063d8:	ebba 0b04 	subs.w	fp, sl, r4
 80063dc:	d00b      	beq.n	80063f6 <_svfiprintf_r+0x7e>
 80063de:	465b      	mov	r3, fp
 80063e0:	4622      	mov	r2, r4
 80063e2:	4629      	mov	r1, r5
 80063e4:	4638      	mov	r0, r7
 80063e6:	f7ff ff6b 	bl	80062c0 <__ssputs_r>
 80063ea:	3001      	adds	r0, #1
 80063ec:	f000 80a7 	beq.w	800653e <_svfiprintf_r+0x1c6>
 80063f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063f2:	445a      	add	r2, fp
 80063f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80063f6:	f89a 3000 	ldrb.w	r3, [sl]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 809f 	beq.w	800653e <_svfiprintf_r+0x1c6>
 8006400:	2300      	movs	r3, #0
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800640a:	f10a 0a01 	add.w	sl, sl, #1
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	9307      	str	r3, [sp, #28]
 8006412:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006416:	931a      	str	r3, [sp, #104]	@ 0x68
 8006418:	4654      	mov	r4, sl
 800641a:	2205      	movs	r2, #5
 800641c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006420:	484e      	ldr	r0, [pc, #312]	@ (800655c <_svfiprintf_r+0x1e4>)
 8006422:	f7f9 fed5 	bl	80001d0 <memchr>
 8006426:	9a04      	ldr	r2, [sp, #16]
 8006428:	b9d8      	cbnz	r0, 8006462 <_svfiprintf_r+0xea>
 800642a:	06d0      	lsls	r0, r2, #27
 800642c:	bf44      	itt	mi
 800642e:	2320      	movmi	r3, #32
 8006430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006434:	0711      	lsls	r1, r2, #28
 8006436:	bf44      	itt	mi
 8006438:	232b      	movmi	r3, #43	@ 0x2b
 800643a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800643e:	f89a 3000 	ldrb.w	r3, [sl]
 8006442:	2b2a      	cmp	r3, #42	@ 0x2a
 8006444:	d015      	beq.n	8006472 <_svfiprintf_r+0xfa>
 8006446:	9a07      	ldr	r2, [sp, #28]
 8006448:	4654      	mov	r4, sl
 800644a:	2000      	movs	r0, #0
 800644c:	f04f 0c0a 	mov.w	ip, #10
 8006450:	4621      	mov	r1, r4
 8006452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006456:	3b30      	subs	r3, #48	@ 0x30
 8006458:	2b09      	cmp	r3, #9
 800645a:	d94b      	bls.n	80064f4 <_svfiprintf_r+0x17c>
 800645c:	b1b0      	cbz	r0, 800648c <_svfiprintf_r+0x114>
 800645e:	9207      	str	r2, [sp, #28]
 8006460:	e014      	b.n	800648c <_svfiprintf_r+0x114>
 8006462:	eba0 0308 	sub.w	r3, r0, r8
 8006466:	fa09 f303 	lsl.w	r3, r9, r3
 800646a:	4313      	orrs	r3, r2
 800646c:	9304      	str	r3, [sp, #16]
 800646e:	46a2      	mov	sl, r4
 8006470:	e7d2      	b.n	8006418 <_svfiprintf_r+0xa0>
 8006472:	9b03      	ldr	r3, [sp, #12]
 8006474:	1d19      	adds	r1, r3, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	9103      	str	r1, [sp, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	bfbb      	ittet	lt
 800647e:	425b      	neglt	r3, r3
 8006480:	f042 0202 	orrlt.w	r2, r2, #2
 8006484:	9307      	strge	r3, [sp, #28]
 8006486:	9307      	strlt	r3, [sp, #28]
 8006488:	bfb8      	it	lt
 800648a:	9204      	strlt	r2, [sp, #16]
 800648c:	7823      	ldrb	r3, [r4, #0]
 800648e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006490:	d10a      	bne.n	80064a8 <_svfiprintf_r+0x130>
 8006492:	7863      	ldrb	r3, [r4, #1]
 8006494:	2b2a      	cmp	r3, #42	@ 0x2a
 8006496:	d132      	bne.n	80064fe <_svfiprintf_r+0x186>
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	1d1a      	adds	r2, r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	9203      	str	r2, [sp, #12]
 80064a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064a4:	3402      	adds	r4, #2
 80064a6:	9305      	str	r3, [sp, #20]
 80064a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800656c <_svfiprintf_r+0x1f4>
 80064ac:	7821      	ldrb	r1, [r4, #0]
 80064ae:	2203      	movs	r2, #3
 80064b0:	4650      	mov	r0, sl
 80064b2:	f7f9 fe8d 	bl	80001d0 <memchr>
 80064b6:	b138      	cbz	r0, 80064c8 <_svfiprintf_r+0x150>
 80064b8:	9b04      	ldr	r3, [sp, #16]
 80064ba:	eba0 000a 	sub.w	r0, r0, sl
 80064be:	2240      	movs	r2, #64	@ 0x40
 80064c0:	4082      	lsls	r2, r0
 80064c2:	4313      	orrs	r3, r2
 80064c4:	3401      	adds	r4, #1
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064cc:	4824      	ldr	r0, [pc, #144]	@ (8006560 <_svfiprintf_r+0x1e8>)
 80064ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064d2:	2206      	movs	r2, #6
 80064d4:	f7f9 fe7c 	bl	80001d0 <memchr>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d036      	beq.n	800654a <_svfiprintf_r+0x1d2>
 80064dc:	4b21      	ldr	r3, [pc, #132]	@ (8006564 <_svfiprintf_r+0x1ec>)
 80064de:	bb1b      	cbnz	r3, 8006528 <_svfiprintf_r+0x1b0>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	3307      	adds	r3, #7
 80064e4:	f023 0307 	bic.w	r3, r3, #7
 80064e8:	3308      	adds	r3, #8
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ee:	4433      	add	r3, r6
 80064f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80064f2:	e76a      	b.n	80063ca <_svfiprintf_r+0x52>
 80064f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f8:	460c      	mov	r4, r1
 80064fa:	2001      	movs	r0, #1
 80064fc:	e7a8      	b.n	8006450 <_svfiprintf_r+0xd8>
 80064fe:	2300      	movs	r3, #0
 8006500:	3401      	adds	r4, #1
 8006502:	9305      	str	r3, [sp, #20]
 8006504:	4619      	mov	r1, r3
 8006506:	f04f 0c0a 	mov.w	ip, #10
 800650a:	4620      	mov	r0, r4
 800650c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006510:	3a30      	subs	r2, #48	@ 0x30
 8006512:	2a09      	cmp	r2, #9
 8006514:	d903      	bls.n	800651e <_svfiprintf_r+0x1a6>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0c6      	beq.n	80064a8 <_svfiprintf_r+0x130>
 800651a:	9105      	str	r1, [sp, #20]
 800651c:	e7c4      	b.n	80064a8 <_svfiprintf_r+0x130>
 800651e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006522:	4604      	mov	r4, r0
 8006524:	2301      	movs	r3, #1
 8006526:	e7f0      	b.n	800650a <_svfiprintf_r+0x192>
 8006528:	ab03      	add	r3, sp, #12
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	462a      	mov	r2, r5
 800652e:	4b0e      	ldr	r3, [pc, #56]	@ (8006568 <_svfiprintf_r+0x1f0>)
 8006530:	a904      	add	r1, sp, #16
 8006532:	4638      	mov	r0, r7
 8006534:	f3af 8000 	nop.w
 8006538:	1c42      	adds	r2, r0, #1
 800653a:	4606      	mov	r6, r0
 800653c:	d1d6      	bne.n	80064ec <_svfiprintf_r+0x174>
 800653e:	89ab      	ldrh	r3, [r5, #12]
 8006540:	065b      	lsls	r3, r3, #25
 8006542:	f53f af2d 	bmi.w	80063a0 <_svfiprintf_r+0x28>
 8006546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006548:	e72c      	b.n	80063a4 <_svfiprintf_r+0x2c>
 800654a:	ab03      	add	r3, sp, #12
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	462a      	mov	r2, r5
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <_svfiprintf_r+0x1f0>)
 8006552:	a904      	add	r1, sp, #16
 8006554:	4638      	mov	r0, r7
 8006556:	f000 f879 	bl	800664c <_printf_i>
 800655a:	e7ed      	b.n	8006538 <_svfiprintf_r+0x1c0>
 800655c:	08006d1c 	.word	0x08006d1c
 8006560:	08006d26 	.word	0x08006d26
 8006564:	00000000 	.word	0x00000000
 8006568:	080062c1 	.word	0x080062c1
 800656c:	08006d22 	.word	0x08006d22

08006570 <_printf_common>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	4616      	mov	r6, r2
 8006576:	4698      	mov	r8, r3
 8006578:	688a      	ldr	r2, [r1, #8]
 800657a:	690b      	ldr	r3, [r1, #16]
 800657c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006580:	4293      	cmp	r3, r2
 8006582:	bfb8      	it	lt
 8006584:	4613      	movlt	r3, r2
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800658c:	4607      	mov	r7, r0
 800658e:	460c      	mov	r4, r1
 8006590:	b10a      	cbz	r2, 8006596 <_printf_common+0x26>
 8006592:	3301      	adds	r3, #1
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	0699      	lsls	r1, r3, #26
 800659a:	bf42      	ittt	mi
 800659c:	6833      	ldrmi	r3, [r6, #0]
 800659e:	3302      	addmi	r3, #2
 80065a0:	6033      	strmi	r3, [r6, #0]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	f015 0506 	ands.w	r5, r5, #6
 80065a8:	d106      	bne.n	80065b8 <_printf_common+0x48>
 80065aa:	f104 0a19 	add.w	sl, r4, #25
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	6832      	ldr	r2, [r6, #0]
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dc26      	bgt.n	8006606 <_printf_common+0x96>
 80065b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	3b00      	subs	r3, #0
 80065c0:	bf18      	it	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	0692      	lsls	r2, r2, #26
 80065c6:	d42b      	bmi.n	8006620 <_printf_common+0xb0>
 80065c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065cc:	4641      	mov	r1, r8
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c8      	blx	r9
 80065d2:	3001      	adds	r0, #1
 80065d4:	d01e      	beq.n	8006614 <_printf_common+0xa4>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	f003 0306 	and.w	r3, r3, #6
 80065de:	2b04      	cmp	r3, #4
 80065e0:	bf02      	ittt	eq
 80065e2:	68e5      	ldreq	r5, [r4, #12]
 80065e4:	6833      	ldreq	r3, [r6, #0]
 80065e6:	1aed      	subeq	r5, r5, r3
 80065e8:	68a3      	ldr	r3, [r4, #8]
 80065ea:	bf0c      	ite	eq
 80065ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065f0:	2500      	movne	r5, #0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	bfc4      	itt	gt
 80065f6:	1a9b      	subgt	r3, r3, r2
 80065f8:	18ed      	addgt	r5, r5, r3
 80065fa:	2600      	movs	r6, #0
 80065fc:	341a      	adds	r4, #26
 80065fe:	42b5      	cmp	r5, r6
 8006600:	d11a      	bne.n	8006638 <_printf_common+0xc8>
 8006602:	2000      	movs	r0, #0
 8006604:	e008      	b.n	8006618 <_printf_common+0xa8>
 8006606:	2301      	movs	r3, #1
 8006608:	4652      	mov	r2, sl
 800660a:	4641      	mov	r1, r8
 800660c:	4638      	mov	r0, r7
 800660e:	47c8      	blx	r9
 8006610:	3001      	adds	r0, #1
 8006612:	d103      	bne.n	800661c <_printf_common+0xac>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661c:	3501      	adds	r5, #1
 800661e:	e7c6      	b.n	80065ae <_printf_common+0x3e>
 8006620:	18e1      	adds	r1, r4, r3
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	2030      	movs	r0, #48	@ 0x30
 8006626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800662a:	4422      	add	r2, r4
 800662c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006634:	3302      	adds	r3, #2
 8006636:	e7c7      	b.n	80065c8 <_printf_common+0x58>
 8006638:	2301      	movs	r3, #1
 800663a:	4622      	mov	r2, r4
 800663c:	4641      	mov	r1, r8
 800663e:	4638      	mov	r0, r7
 8006640:	47c8      	blx	r9
 8006642:	3001      	adds	r0, #1
 8006644:	d0e6      	beq.n	8006614 <_printf_common+0xa4>
 8006646:	3601      	adds	r6, #1
 8006648:	e7d9      	b.n	80065fe <_printf_common+0x8e>
	...

0800664c <_printf_i>:
 800664c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006650:	7e0f      	ldrb	r7, [r1, #24]
 8006652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006654:	2f78      	cmp	r7, #120	@ 0x78
 8006656:	4691      	mov	r9, r2
 8006658:	4680      	mov	r8, r0
 800665a:	460c      	mov	r4, r1
 800665c:	469a      	mov	sl, r3
 800665e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006662:	d807      	bhi.n	8006674 <_printf_i+0x28>
 8006664:	2f62      	cmp	r7, #98	@ 0x62
 8006666:	d80a      	bhi.n	800667e <_printf_i+0x32>
 8006668:	2f00      	cmp	r7, #0
 800666a:	f000 80d2 	beq.w	8006812 <_printf_i+0x1c6>
 800666e:	2f58      	cmp	r7, #88	@ 0x58
 8006670:	f000 80b9 	beq.w	80067e6 <_printf_i+0x19a>
 8006674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800667c:	e03a      	b.n	80066f4 <_printf_i+0xa8>
 800667e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006682:	2b15      	cmp	r3, #21
 8006684:	d8f6      	bhi.n	8006674 <_printf_i+0x28>
 8006686:	a101      	add	r1, pc, #4	@ (adr r1, 800668c <_printf_i+0x40>)
 8006688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066f9 	.word	0x080066f9
 8006694:	08006675 	.word	0x08006675
 8006698:	08006675 	.word	0x08006675
 800669c:	08006675 	.word	0x08006675
 80066a0:	08006675 	.word	0x08006675
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	08006675 	.word	0x08006675
 80066ac:	08006675 	.word	0x08006675
 80066b0:	08006675 	.word	0x08006675
 80066b4:	08006675 	.word	0x08006675
 80066b8:	080067f9 	.word	0x080067f9
 80066bc:	08006723 	.word	0x08006723
 80066c0:	080067b3 	.word	0x080067b3
 80066c4:	08006675 	.word	0x08006675
 80066c8:	08006675 	.word	0x08006675
 80066cc:	0800681b 	.word	0x0800681b
 80066d0:	08006675 	.word	0x08006675
 80066d4:	08006723 	.word	0x08006723
 80066d8:	08006675 	.word	0x08006675
 80066dc:	08006675 	.word	0x08006675
 80066e0:	080067bb 	.word	0x080067bb
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	1d1a      	adds	r2, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6032      	str	r2, [r6, #0]
 80066ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066f4:	2301      	movs	r3, #1
 80066f6:	e09d      	b.n	8006834 <_printf_i+0x1e8>
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	1d19      	adds	r1, r3, #4
 80066fe:	6031      	str	r1, [r6, #0]
 8006700:	0606      	lsls	r6, r0, #24
 8006702:	d501      	bpl.n	8006708 <_printf_i+0xbc>
 8006704:	681d      	ldr	r5, [r3, #0]
 8006706:	e003      	b.n	8006710 <_printf_i+0xc4>
 8006708:	0645      	lsls	r5, r0, #25
 800670a:	d5fb      	bpl.n	8006704 <_printf_i+0xb8>
 800670c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006710:	2d00      	cmp	r5, #0
 8006712:	da03      	bge.n	800671c <_printf_i+0xd0>
 8006714:	232d      	movs	r3, #45	@ 0x2d
 8006716:	426d      	negs	r5, r5
 8006718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800671c:	4859      	ldr	r0, [pc, #356]	@ (8006884 <_printf_i+0x238>)
 800671e:	230a      	movs	r3, #10
 8006720:	e011      	b.n	8006746 <_printf_i+0xfa>
 8006722:	6821      	ldr	r1, [r4, #0]
 8006724:	6833      	ldr	r3, [r6, #0]
 8006726:	0608      	lsls	r0, r1, #24
 8006728:	f853 5b04 	ldr.w	r5, [r3], #4
 800672c:	d402      	bmi.n	8006734 <_printf_i+0xe8>
 800672e:	0649      	lsls	r1, r1, #25
 8006730:	bf48      	it	mi
 8006732:	b2ad      	uxthmi	r5, r5
 8006734:	2f6f      	cmp	r7, #111	@ 0x6f
 8006736:	4853      	ldr	r0, [pc, #332]	@ (8006884 <_printf_i+0x238>)
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	bf14      	ite	ne
 800673c:	230a      	movne	r3, #10
 800673e:	2308      	moveq	r3, #8
 8006740:	2100      	movs	r1, #0
 8006742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006746:	6866      	ldr	r6, [r4, #4]
 8006748:	60a6      	str	r6, [r4, #8]
 800674a:	2e00      	cmp	r6, #0
 800674c:	bfa2      	ittt	ge
 800674e:	6821      	ldrge	r1, [r4, #0]
 8006750:	f021 0104 	bicge.w	r1, r1, #4
 8006754:	6021      	strge	r1, [r4, #0]
 8006756:	b90d      	cbnz	r5, 800675c <_printf_i+0x110>
 8006758:	2e00      	cmp	r6, #0
 800675a:	d04b      	beq.n	80067f4 <_printf_i+0x1a8>
 800675c:	4616      	mov	r6, r2
 800675e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006762:	fb03 5711 	mls	r7, r3, r1, r5
 8006766:	5dc7      	ldrb	r7, [r0, r7]
 8006768:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800676c:	462f      	mov	r7, r5
 800676e:	42bb      	cmp	r3, r7
 8006770:	460d      	mov	r5, r1
 8006772:	d9f4      	bls.n	800675e <_printf_i+0x112>
 8006774:	2b08      	cmp	r3, #8
 8006776:	d10b      	bne.n	8006790 <_printf_i+0x144>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	07df      	lsls	r7, r3, #31
 800677c:	d508      	bpl.n	8006790 <_printf_i+0x144>
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	6861      	ldr	r1, [r4, #4]
 8006782:	4299      	cmp	r1, r3
 8006784:	bfde      	ittt	le
 8006786:	2330      	movle	r3, #48	@ 0x30
 8006788:	f806 3c01 	strble.w	r3, [r6, #-1]
 800678c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006790:	1b92      	subs	r2, r2, r6
 8006792:	6122      	str	r2, [r4, #16]
 8006794:	f8cd a000 	str.w	sl, [sp]
 8006798:	464b      	mov	r3, r9
 800679a:	aa03      	add	r2, sp, #12
 800679c:	4621      	mov	r1, r4
 800679e:	4640      	mov	r0, r8
 80067a0:	f7ff fee6 	bl	8006570 <_printf_common>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d14a      	bne.n	800683e <_printf_i+0x1f2>
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	b004      	add	sp, #16
 80067ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	f043 0320 	orr.w	r3, r3, #32
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	4833      	ldr	r0, [pc, #204]	@ (8006888 <_printf_i+0x23c>)
 80067bc:	2778      	movs	r7, #120	@ 0x78
 80067be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	6831      	ldr	r1, [r6, #0]
 80067c6:	061f      	lsls	r7, r3, #24
 80067c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80067cc:	d402      	bmi.n	80067d4 <_printf_i+0x188>
 80067ce:	065f      	lsls	r7, r3, #25
 80067d0:	bf48      	it	mi
 80067d2:	b2ad      	uxthmi	r5, r5
 80067d4:	6031      	str	r1, [r6, #0]
 80067d6:	07d9      	lsls	r1, r3, #31
 80067d8:	bf44      	itt	mi
 80067da:	f043 0320 	orrmi.w	r3, r3, #32
 80067de:	6023      	strmi	r3, [r4, #0]
 80067e0:	b11d      	cbz	r5, 80067ea <_printf_i+0x19e>
 80067e2:	2310      	movs	r3, #16
 80067e4:	e7ac      	b.n	8006740 <_printf_i+0xf4>
 80067e6:	4827      	ldr	r0, [pc, #156]	@ (8006884 <_printf_i+0x238>)
 80067e8:	e7e9      	b.n	80067be <_printf_i+0x172>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	f023 0320 	bic.w	r3, r3, #32
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	e7f6      	b.n	80067e2 <_printf_i+0x196>
 80067f4:	4616      	mov	r6, r2
 80067f6:	e7bd      	b.n	8006774 <_printf_i+0x128>
 80067f8:	6833      	ldr	r3, [r6, #0]
 80067fa:	6825      	ldr	r5, [r4, #0]
 80067fc:	6961      	ldr	r1, [r4, #20]
 80067fe:	1d18      	adds	r0, r3, #4
 8006800:	6030      	str	r0, [r6, #0]
 8006802:	062e      	lsls	r6, r5, #24
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	d501      	bpl.n	800680c <_printf_i+0x1c0>
 8006808:	6019      	str	r1, [r3, #0]
 800680a:	e002      	b.n	8006812 <_printf_i+0x1c6>
 800680c:	0668      	lsls	r0, r5, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0x1bc>
 8006810:	8019      	strh	r1, [r3, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	4616      	mov	r6, r2
 8006818:	e7bc      	b.n	8006794 <_printf_i+0x148>
 800681a:	6833      	ldr	r3, [r6, #0]
 800681c:	1d1a      	adds	r2, r3, #4
 800681e:	6032      	str	r2, [r6, #0]
 8006820:	681e      	ldr	r6, [r3, #0]
 8006822:	6862      	ldr	r2, [r4, #4]
 8006824:	2100      	movs	r1, #0
 8006826:	4630      	mov	r0, r6
 8006828:	f7f9 fcd2 	bl	80001d0 <memchr>
 800682c:	b108      	cbz	r0, 8006832 <_printf_i+0x1e6>
 800682e:	1b80      	subs	r0, r0, r6
 8006830:	6060      	str	r0, [r4, #4]
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	2300      	movs	r3, #0
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683c:	e7aa      	b.n	8006794 <_printf_i+0x148>
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	4632      	mov	r2, r6
 8006842:	4649      	mov	r1, r9
 8006844:	4640      	mov	r0, r8
 8006846:	47d0      	blx	sl
 8006848:	3001      	adds	r0, #1
 800684a:	d0ad      	beq.n	80067a8 <_printf_i+0x15c>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	d413      	bmi.n	800687a <_printf_i+0x22e>
 8006852:	68e0      	ldr	r0, [r4, #12]
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	4298      	cmp	r0, r3
 8006858:	bfb8      	it	lt
 800685a:	4618      	movlt	r0, r3
 800685c:	e7a6      	b.n	80067ac <_printf_i+0x160>
 800685e:	2301      	movs	r3, #1
 8006860:	4632      	mov	r2, r6
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d09d      	beq.n	80067a8 <_printf_i+0x15c>
 800686c:	3501      	adds	r5, #1
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	9903      	ldr	r1, [sp, #12]
 8006872:	1a5b      	subs	r3, r3, r1
 8006874:	42ab      	cmp	r3, r5
 8006876:	dcf2      	bgt.n	800685e <_printf_i+0x212>
 8006878:	e7eb      	b.n	8006852 <_printf_i+0x206>
 800687a:	2500      	movs	r5, #0
 800687c:	f104 0619 	add.w	r6, r4, #25
 8006880:	e7f5      	b.n	800686e <_printf_i+0x222>
 8006882:	bf00      	nop
 8006884:	08006d2d 	.word	0x08006d2d
 8006888:	08006d3e 	.word	0x08006d3e

0800688c <__sflush_r>:
 800688c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006894:	0716      	lsls	r6, r2, #28
 8006896:	4605      	mov	r5, r0
 8006898:	460c      	mov	r4, r1
 800689a:	d454      	bmi.n	8006946 <__sflush_r+0xba>
 800689c:	684b      	ldr	r3, [r1, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dc02      	bgt.n	80068a8 <__sflush_r+0x1c>
 80068a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dd48      	ble.n	800693a <__sflush_r+0xae>
 80068a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	d045      	beq.n	800693a <__sflush_r+0xae>
 80068ae:	2300      	movs	r3, #0
 80068b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068b4:	682f      	ldr	r7, [r5, #0]
 80068b6:	6a21      	ldr	r1, [r4, #32]
 80068b8:	602b      	str	r3, [r5, #0]
 80068ba:	d030      	beq.n	800691e <__sflush_r+0x92>
 80068bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	0759      	lsls	r1, r3, #29
 80068c2:	d505      	bpl.n	80068d0 <__sflush_r+0x44>
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	1ad2      	subs	r2, r2, r3
 80068c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068ca:	b10b      	cbz	r3, 80068d0 <__sflush_r+0x44>
 80068cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	2300      	movs	r3, #0
 80068d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068d4:	6a21      	ldr	r1, [r4, #32]
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b0      	blx	r6
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	d106      	bne.n	80068ee <__sflush_r+0x62>
 80068e0:	6829      	ldr	r1, [r5, #0]
 80068e2:	291d      	cmp	r1, #29
 80068e4:	d82b      	bhi.n	800693e <__sflush_r+0xb2>
 80068e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006990 <__sflush_r+0x104>)
 80068e8:	410a      	asrs	r2, r1
 80068ea:	07d6      	lsls	r6, r2, #31
 80068ec:	d427      	bmi.n	800693e <__sflush_r+0xb2>
 80068ee:	2200      	movs	r2, #0
 80068f0:	6062      	str	r2, [r4, #4]
 80068f2:	04d9      	lsls	r1, r3, #19
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	6022      	str	r2, [r4, #0]
 80068f8:	d504      	bpl.n	8006904 <__sflush_r+0x78>
 80068fa:	1c42      	adds	r2, r0, #1
 80068fc:	d101      	bne.n	8006902 <__sflush_r+0x76>
 80068fe:	682b      	ldr	r3, [r5, #0]
 8006900:	b903      	cbnz	r3, 8006904 <__sflush_r+0x78>
 8006902:	6560      	str	r0, [r4, #84]	@ 0x54
 8006904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006906:	602f      	str	r7, [r5, #0]
 8006908:	b1b9      	cbz	r1, 800693a <__sflush_r+0xae>
 800690a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800690e:	4299      	cmp	r1, r3
 8006910:	d002      	beq.n	8006918 <__sflush_r+0x8c>
 8006912:	4628      	mov	r0, r5
 8006914:	f7ff fbdc 	bl	80060d0 <_free_r>
 8006918:	2300      	movs	r3, #0
 800691a:	6363      	str	r3, [r4, #52]	@ 0x34
 800691c:	e00d      	b.n	800693a <__sflush_r+0xae>
 800691e:	2301      	movs	r3, #1
 8006920:	4628      	mov	r0, r5
 8006922:	47b0      	blx	r6
 8006924:	4602      	mov	r2, r0
 8006926:	1c50      	adds	r0, r2, #1
 8006928:	d1c9      	bne.n	80068be <__sflush_r+0x32>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0c6      	beq.n	80068be <__sflush_r+0x32>
 8006930:	2b1d      	cmp	r3, #29
 8006932:	d001      	beq.n	8006938 <__sflush_r+0xac>
 8006934:	2b16      	cmp	r3, #22
 8006936:	d11e      	bne.n	8006976 <__sflush_r+0xea>
 8006938:	602f      	str	r7, [r5, #0]
 800693a:	2000      	movs	r0, #0
 800693c:	e022      	b.n	8006984 <__sflush_r+0xf8>
 800693e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006942:	b21b      	sxth	r3, r3
 8006944:	e01b      	b.n	800697e <__sflush_r+0xf2>
 8006946:	690f      	ldr	r7, [r1, #16]
 8006948:	2f00      	cmp	r7, #0
 800694a:	d0f6      	beq.n	800693a <__sflush_r+0xae>
 800694c:	0793      	lsls	r3, r2, #30
 800694e:	680e      	ldr	r6, [r1, #0]
 8006950:	bf08      	it	eq
 8006952:	694b      	ldreq	r3, [r1, #20]
 8006954:	600f      	str	r7, [r1, #0]
 8006956:	bf18      	it	ne
 8006958:	2300      	movne	r3, #0
 800695a:	eba6 0807 	sub.w	r8, r6, r7
 800695e:	608b      	str	r3, [r1, #8]
 8006960:	f1b8 0f00 	cmp.w	r8, #0
 8006964:	dde9      	ble.n	800693a <__sflush_r+0xae>
 8006966:	6a21      	ldr	r1, [r4, #32]
 8006968:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800696a:	4643      	mov	r3, r8
 800696c:	463a      	mov	r2, r7
 800696e:	4628      	mov	r0, r5
 8006970:	47b0      	blx	r6
 8006972:	2800      	cmp	r0, #0
 8006974:	dc08      	bgt.n	8006988 <__sflush_r+0xfc>
 8006976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006988:	4407      	add	r7, r0
 800698a:	eba8 0800 	sub.w	r8, r8, r0
 800698e:	e7e7      	b.n	8006960 <__sflush_r+0xd4>
 8006990:	dfbffffe 	.word	0xdfbffffe

08006994 <_fflush_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	690b      	ldr	r3, [r1, #16]
 8006998:	4605      	mov	r5, r0
 800699a:	460c      	mov	r4, r1
 800699c:	b913      	cbnz	r3, 80069a4 <_fflush_r+0x10>
 800699e:	2500      	movs	r5, #0
 80069a0:	4628      	mov	r0, r5
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	b118      	cbz	r0, 80069ae <_fflush_r+0x1a>
 80069a6:	6a03      	ldr	r3, [r0, #32]
 80069a8:	b90b      	cbnz	r3, 80069ae <_fflush_r+0x1a>
 80069aa:	f7ff f967 	bl	8005c7c <__sinit>
 80069ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f3      	beq.n	800699e <_fflush_r+0xa>
 80069b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069b8:	07d0      	lsls	r0, r2, #31
 80069ba:	d404      	bmi.n	80069c6 <_fflush_r+0x32>
 80069bc:	0599      	lsls	r1, r3, #22
 80069be:	d402      	bmi.n	80069c6 <_fflush_r+0x32>
 80069c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069c2:	f7ff fb74 	bl	80060ae <__retarget_lock_acquire_recursive>
 80069c6:	4628      	mov	r0, r5
 80069c8:	4621      	mov	r1, r4
 80069ca:	f7ff ff5f 	bl	800688c <__sflush_r>
 80069ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069d0:	07da      	lsls	r2, r3, #31
 80069d2:	4605      	mov	r5, r0
 80069d4:	d4e4      	bmi.n	80069a0 <_fflush_r+0xc>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	059b      	lsls	r3, r3, #22
 80069da:	d4e1      	bmi.n	80069a0 <_fflush_r+0xc>
 80069dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069de:	f7ff fb67 	bl	80060b0 <__retarget_lock_release_recursive>
 80069e2:	e7dd      	b.n	80069a0 <_fflush_r+0xc>

080069e4 <__swhatbuf_r>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	460c      	mov	r4, r1
 80069e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ec:	2900      	cmp	r1, #0
 80069ee:	b096      	sub	sp, #88	@ 0x58
 80069f0:	4615      	mov	r5, r2
 80069f2:	461e      	mov	r6, r3
 80069f4:	da0d      	bge.n	8006a12 <__swhatbuf_r+0x2e>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2340      	movne	r3, #64	@ 0x40
 8006a04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a08:	2000      	movs	r0, #0
 8006a0a:	6031      	str	r1, [r6, #0]
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	b016      	add	sp, #88	@ 0x58
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	466a      	mov	r2, sp
 8006a14:	f000 f862 	bl	8006adc <_fstat_r>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	dbec      	blt.n	80069f6 <__swhatbuf_r+0x12>
 8006a1c:	9901      	ldr	r1, [sp, #4]
 8006a1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a26:	4259      	negs	r1, r3
 8006a28:	4159      	adcs	r1, r3
 8006a2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a2e:	e7eb      	b.n	8006a08 <__swhatbuf_r+0x24>

08006a30 <__smakebuf_r>:
 8006a30:	898b      	ldrh	r3, [r1, #12]
 8006a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a34:	079d      	lsls	r5, r3, #30
 8006a36:	4606      	mov	r6, r0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	d507      	bpl.n	8006a4c <__smakebuf_r+0x1c>
 8006a3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	2301      	movs	r3, #1
 8006a46:	6163      	str	r3, [r4, #20]
 8006a48:	b003      	add	sp, #12
 8006a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a4c:	ab01      	add	r3, sp, #4
 8006a4e:	466a      	mov	r2, sp
 8006a50:	f7ff ffc8 	bl	80069e4 <__swhatbuf_r>
 8006a54:	9f00      	ldr	r7, [sp, #0]
 8006a56:	4605      	mov	r5, r0
 8006a58:	4639      	mov	r1, r7
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7ff fba4 	bl	80061a8 <_malloc_r>
 8006a60:	b948      	cbnz	r0, 8006a76 <__smakebuf_r+0x46>
 8006a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a66:	059a      	lsls	r2, r3, #22
 8006a68:	d4ee      	bmi.n	8006a48 <__smakebuf_r+0x18>
 8006a6a:	f023 0303 	bic.w	r3, r3, #3
 8006a6e:	f043 0302 	orr.w	r3, r3, #2
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	e7e2      	b.n	8006a3c <__smakebuf_r+0xc>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	6020      	str	r0, [r4, #0]
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	9b01      	ldr	r3, [sp, #4]
 8006a82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a86:	b15b      	cbz	r3, 8006aa0 <__smakebuf_r+0x70>
 8006a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f837 	bl	8006b00 <_isatty_r>
 8006a92:	b128      	cbz	r0, 8006aa0 <__smakebuf_r+0x70>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	431d      	orrs	r5, r3
 8006aa4:	81a5      	strh	r5, [r4, #12]
 8006aa6:	e7cf      	b.n	8006a48 <__smakebuf_r+0x18>

08006aa8 <memmove>:
 8006aa8:	4288      	cmp	r0, r1
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	eb01 0402 	add.w	r4, r1, r2
 8006ab0:	d902      	bls.n	8006ab8 <memmove+0x10>
 8006ab2:	4284      	cmp	r4, r0
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	d807      	bhi.n	8006ac8 <memmove+0x20>
 8006ab8:	1e43      	subs	r3, r0, #1
 8006aba:	42a1      	cmp	r1, r4
 8006abc:	d008      	beq.n	8006ad0 <memmove+0x28>
 8006abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ac6:	e7f8      	b.n	8006aba <memmove+0x12>
 8006ac8:	4402      	add	r2, r0
 8006aca:	4601      	mov	r1, r0
 8006acc:	428a      	cmp	r2, r1
 8006ace:	d100      	bne.n	8006ad2 <memmove+0x2a>
 8006ad0:	bd10      	pop	{r4, pc}
 8006ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ada:	e7f7      	b.n	8006acc <memmove+0x24>

08006adc <_fstat_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d07      	ldr	r5, [pc, #28]	@ (8006afc <_fstat_r+0x20>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	602b      	str	r3, [r5, #0]
 8006aea:	f7fa f8e4 	bl	8000cb6 <_fstat>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d102      	bne.n	8006af8 <_fstat_r+0x1c>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	b103      	cbz	r3, 8006af8 <_fstat_r+0x1c>
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	2000151c 	.word	0x2000151c

08006b00 <_isatty_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d06      	ldr	r5, [pc, #24]	@ (8006b1c <_isatty_r+0x1c>)
 8006b04:	2300      	movs	r3, #0
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fa f8e3 	bl	8000cd6 <_isatty>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_isatty_r+0x1a>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_isatty_r+0x1a>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	2000151c 	.word	0x2000151c

08006b20 <_sbrk_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d06      	ldr	r5, [pc, #24]	@ (8006b3c <_sbrk_r+0x1c>)
 8006b24:	2300      	movs	r3, #0
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fa f8ec 	bl	8000d08 <_sbrk>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_sbrk_r+0x1a>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_sbrk_r+0x1a>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	2000151c 	.word	0x2000151c

08006b40 <_realloc_r>:
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	4680      	mov	r8, r0
 8006b46:	4615      	mov	r5, r2
 8006b48:	460c      	mov	r4, r1
 8006b4a:	b921      	cbnz	r1, 8006b56 <_realloc_r+0x16>
 8006b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b50:	4611      	mov	r1, r2
 8006b52:	f7ff bb29 	b.w	80061a8 <_malloc_r>
 8006b56:	b92a      	cbnz	r2, 8006b64 <_realloc_r+0x24>
 8006b58:	f7ff faba 	bl	80060d0 <_free_r>
 8006b5c:	2400      	movs	r4, #0
 8006b5e:	4620      	mov	r0, r4
 8006b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b64:	f000 f81a 	bl	8006b9c <_malloc_usable_size_r>
 8006b68:	4285      	cmp	r5, r0
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	d802      	bhi.n	8006b74 <_realloc_r+0x34>
 8006b6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b72:	d8f4      	bhi.n	8006b5e <_realloc_r+0x1e>
 8006b74:	4629      	mov	r1, r5
 8006b76:	4640      	mov	r0, r8
 8006b78:	f7ff fb16 	bl	80061a8 <_malloc_r>
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d0ec      	beq.n	8006b5c <_realloc_r+0x1c>
 8006b82:	42b5      	cmp	r5, r6
 8006b84:	462a      	mov	r2, r5
 8006b86:	4621      	mov	r1, r4
 8006b88:	bf28      	it	cs
 8006b8a:	4632      	movcs	r2, r6
 8006b8c:	f7ff fa91 	bl	80060b2 <memcpy>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7ff fa9c 	bl	80060d0 <_free_r>
 8006b98:	463c      	mov	r4, r7
 8006b9a:	e7e0      	b.n	8006b5e <_realloc_r+0x1e>

08006b9c <_malloc_usable_size_r>:
 8006b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba0:	1f18      	subs	r0, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfbc      	itt	lt
 8006ba6:	580b      	ldrlt	r3, [r1, r0]
 8006ba8:	18c0      	addlt	r0, r0, r3
 8006baa:	4770      	bx	lr

08006bac <_init>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr

08006bb8 <_fini>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr
