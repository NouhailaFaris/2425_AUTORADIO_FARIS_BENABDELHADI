
2424_AUTORADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006080  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006210  08006210  00007210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800631c  0800631c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800631c  0800631c  0000731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006324  08006324  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006324  08006324  00007324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006328  08006328  00007328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800632c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000068  08006394  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08006394  0000837c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119cd  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5c  00000000  00000000  00019a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  0001c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb5  00000000  00000000  0001d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040cc  00000000  00000000  0001e2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013445  00000000  00000000  000223a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1e04  00000000  00000000  000357e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001275ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  00127630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0012bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061f8 	.word	0x080061f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080061f8 	.word	0x080061f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b35      	ldr	r3, [pc, #212]	@ (800064c <MX_GPIO_Init+0xec>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a34      	ldr	r2, [pc, #208]	@ (800064c <MX_GPIO_Init+0xec>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b32      	ldr	r3, [pc, #200]	@ (800064c <MX_GPIO_Init+0xec>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b2f      	ldr	r3, [pc, #188]	@ (800064c <MX_GPIO_Init+0xec>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a2e      	ldr	r2, [pc, #184]	@ (800064c <MX_GPIO_Init+0xec>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b2c      	ldr	r3, [pc, #176]	@ (800064c <MX_GPIO_Init+0xec>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b29      	ldr	r3, [pc, #164]	@ (800064c <MX_GPIO_Init+0xec>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a28      	ldr	r2, [pc, #160]	@ (800064c <MX_GPIO_Init+0xec>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b26      	ldr	r3, [pc, #152]	@ (800064c <MX_GPIO_Init+0xec>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b23      	ldr	r3, [pc, #140]	@ (800064c <MX_GPIO_Init+0xec>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a22      	ldr	r2, [pc, #136]	@ (800064c <MX_GPIO_Init+0xec>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_GPIO_Init+0xec>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2121      	movs	r1, #33	@ 0x21
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f000 ffd3 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	481a      	ldr	r0, [pc, #104]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005e8:	f000 ffce 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	4814      	ldr	r0, [pc, #80]	@ (8000654 <MX_GPIO_Init+0xf4>)
 8000604:	f000 fe16 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000608:	2321      	movs	r3, #33	@ 0x21
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f000 fe07 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000626:	2380      	movs	r3, #128	@ 0x80
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_GPIO_Init+0xf0>)
 800063e:	f000 fdf9 	bl	8001234 <HAL_GPIO_Init>

}
 8000642:	bf00      	nop
 8000644:	3728      	adds	r7, #40	@ 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	48000400 	.word	0x48000400
 8000654:	48000800 	.word	0x48000800

08000658 <__io_putchar>:
void GPIOExpander_WriteRegister(uint8_t reg, uint8_t value);
void GPIOExpander_Init(void);
void GPIOExpander_SetLED(uint8_t value);

/* Redirect printf to UART */
int __io_putchar(int ch) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000660:	1d39      	adds	r1, r7, #4
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	2201      	movs	r2, #1
 8000668:	4803      	ldr	r0, [pc, #12]	@ (8000678 <__io_putchar+0x20>)
 800066a:	f003 fb53 	bl	8003d14 <HAL_UART_Transmit>
    return ch;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000ec 	.word	0x200000ec

0800067c <GPIOExpander_Select>:

/* USER CODE BEGIN 0 */

// Fonction pour sélectionner le GPIO Expander
void GPIOExpander_Select(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIO_EXPANDER_CS_PORT, GPIO_EXPANDER_CS_PIN, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2180      	movs	r1, #128	@ 0x80
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <GPIOExpander_Select+0x18>)
 8000686:	f000 ff7f 	bl	8001588 <HAL_GPIO_WritePin>
    printf("CS LOW\r\n");
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <GPIOExpander_Select+0x1c>)
 800068c:	f004 ff50 	bl	8005530 <puts>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	48000400 	.word	0x48000400
 8000698:	08006210 	.word	0x08006210

0800069c <GPIOExpander_Deselect>:

// Fonction pour désélectionner le GPIO Expander
void GPIOExpander_Deselect(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIO_EXPANDER_CS_PORT, GPIO_EXPANDER_CS_PIN, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2180      	movs	r1, #128	@ 0x80
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <GPIOExpander_Deselect+0x18>)
 80006a6:	f000 ff6f 	bl	8001588 <HAL_GPIO_WritePin>
    printf("CS HIGH\r\n");
 80006aa:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <GPIOExpander_Deselect+0x1c>)
 80006ac:	f004 ff40 	bl	8005530 <puts>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	48000400 	.word	0x48000400
 80006b8:	08006218 	.word	0x08006218

080006bc <GPIOExpander_WriteRegister>:

// Fonction pour écrire dans un registre du MCP23S17
void GPIOExpander_WriteRegister(uint8_t reg, uint8_t value) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
    uint8_t data[3] = {MCP23S17_WRITE_OPCODE, reg, value};
 80006cc:	2340      	movs	r3, #64	@ 0x40
 80006ce:	733b      	strb	r3, [r7, #12]
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	737b      	strb	r3, [r7, #13]
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	73bb      	strb	r3, [r7, #14]

    GPIOExpander_Select();
 80006d8:	f7ff ffd0 	bl	800067c <GPIOExpander_Select>
    HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 80006dc:	f107 010c 	add.w	r1, r7, #12
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2203      	movs	r2, #3
 80006e6:	480d      	ldr	r0, [pc, #52]	@ (800071c <GPIOExpander_WriteRegister+0x60>)
 80006e8:	f002 fb29 	bl	8002d3e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &value, 3, HAL_MAX_DELAY);
 80006ec:	1db9      	adds	r1, r7, #6
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	2203      	movs	r2, #3
 80006f4:	4809      	ldr	r0, [pc, #36]	@ (800071c <GPIOExpander_WriteRegister+0x60>)
 80006f6:	f002 fc98 	bl	800302a <HAL_SPI_Receive>
    HAL_Delay(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 fbe6 	bl	8000ecc <HAL_Delay>
    GPIOExpander_Deselect();
 8000700:	f7ff ffcc 	bl	800069c <GPIOExpander_Deselect>
    HAL_Delay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fbe1 	bl	8000ecc <HAL_Delay>
    printf("Valeur lue : 0x%02X\r\n", value);
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	@ (8000720 <GPIOExpander_WriteRegister+0x64>)
 8000710:	f004 fea6 	bl	8005460 <iprintf>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000084 	.word	0x20000084
 8000720:	08006224 	.word	0x08006224

08000724 <GPIOExpander_Init>:

// Initialisation du MCP23S17
void GPIOExpander_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    printf("Initialisation du GPIO Expander...\r\n");
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <GPIOExpander_Init+0x34>)
 800072a:	f004 ff01 	bl	8005530 <puts>
    GPIOExpander_WriteRegister(MCP23S17_IODIRB, 0x00);
 800072e:	2100      	movs	r1, #0
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ffc3 	bl	80006bc <GPIOExpander_WriteRegister>
    GPIOExpander_WriteRegister(MCP23S17_GPIOB, 0x00);
 8000736:	2100      	movs	r1, #0
 8000738:	2013      	movs	r0, #19
 800073a:	f7ff ffbf 	bl	80006bc <GPIOExpander_WriteRegister>
    GPIOExpander_WriteRegister(MCP23S17_IODIRA, 0x00);
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ffbb 	bl	80006bc <GPIOExpander_WriteRegister>
    GPIOExpander_WriteRegister(MCP23S17_GPIOA, 0x00);
 8000746:	2100      	movs	r1, #0
 8000748:	2012      	movs	r0, #18
 800074a:	f7ff ffb7 	bl	80006bc <GPIOExpander_WriteRegister>
    printf("Initialisation terminée\r\n");
 800074e:	4803      	ldr	r0, [pc, #12]	@ (800075c <GPIOExpander_Init+0x38>)
 8000750:	f004 feee 	bl	8005530 <puts>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	0800623c 	.word	0x0800623c
 800075c:	08006260 	.word	0x08006260

08000760 <GPIOExpander_SetLEDA>:

// Fonction pour contrôler les LEDs via GPIOA
void GPIOExpander_SetLEDA(uint8_t value) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]


    GPIOExpander_WriteRegister(MCP23S17_GPIOA, value);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	4619      	mov	r1, r3
 800076e:	2012      	movs	r0, #18
 8000770:	f7ff ffa4 	bl	80006bc <GPIOExpander_WriteRegister>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <GPIOExpander_SetLEDB>:
void GPIOExpander_SetLEDB(uint8_t value) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]

    GPIOExpander_WriteRegister(MCP23S17_GPIOB, value);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4619      	mov	r1, r3
 800078a:	2013      	movs	r0, #19
 800078c:	f7ff ff96 	bl	80006bc <GPIOExpander_WriteRegister>
   }
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 800079e:	f000 fb19 	bl	8000dd4 <HAL_Init>
    SystemClock_Config();
 80007a2:	f000 f83f 	bl	8000824 <SystemClock_Config>
    MX_GPIO_Init();
 80007a6:	f7ff fedb 	bl	8000560 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80007aa:	f000 fa55 	bl	8000c58 <MX_USART2_UART_Init>
    MX_SPI3_Init();
 80007ae:	f000 f891 	bl	80008d4 <MX_SPI3_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2101      	movs	r1, #1
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f000 fee5 	bl	8001588 <HAL_GPIO_WritePin>

    /* Initialize the GPIO Expander */
    GPIOExpander_Init();
 80007be:	f7ff ffb1 	bl	8000724 <GPIOExpander_Init>

    printf("Démarrage de l'effet chenillard\r\n");
 80007c2:	4817      	ldr	r0, [pc, #92]	@ (8000820 <main+0x88>)
 80007c4:	f004 feb4 	bl	8005530 <puts>
    /* Infinite loop */
    while (1) {


            // Chenillard sur PORTB
            for (int i = 0; i < 8; i++) {
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	e00e      	b.n	80007ec <main+0x54>
                GPIOExpander_SetLEDA(1 << i);
 80007ce:	2201      	movs	r2, #1
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffc1 	bl	8000760 <GPIOExpander_SetLEDA>
                HAL_Delay(500);
 80007de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007e2:	f000 fb73 	bl	8000ecc <HAL_Delay>
            for (int i = 0; i < 8; i++) {
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	dded      	ble.n	80007ce <main+0x36>
            }
            for (int i = 0; i < 8; i++) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	e00e      	b.n	8000816 <main+0x7e>
                            GPIOExpander_SetLEDB(1 << i);
 80007f8:	2201      	movs	r2, #1
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffba 	bl	800077c <GPIOExpander_SetLEDB>
                            HAL_Delay(500);
 8000808:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080c:	f000 fb5e 	bl	8000ecc <HAL_Delay>
            for (int i = 0; i < 8; i++) {
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2b07      	cmp	r3, #7
 800081a:	dded      	ble.n	80007f8 <main+0x60>
            for (int i = 0; i < 8; i++) {
 800081c:	e7d4      	b.n	80007c8 <main+0x30>
 800081e:	bf00      	nop
 8000820:	0800627c 	.word	0x0800627c

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b096      	sub	sp, #88	@ 0x58
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2244      	movs	r2, #68	@ 0x44
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f004 ff5c 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	463b      	mov	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000846:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800084a:	f000 fec3 	bl	80015d4 <HAL_PWREx_ControlVoltageScaling>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000854:	f000 f837 	bl	80008c6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000860:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000862:	2310      	movs	r3, #16
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086a:	2302      	movs	r3, #2
 800086c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000872:	230a      	movs	r3, #10
 8000874:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000876:	2307      	movs	r3, #7
 8000878:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800087e:	2302      	movs	r3, #2
 8000880:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fefa 	bl	8001680 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000892:	f000 f818 	bl	80008c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2303      	movs	r3, #3
 800089c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	2104      	movs	r1, #4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fac2 	bl	8001e38 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ba:	f000 f804 	bl	80008c6 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3758      	adds	r7, #88	@ 0x58
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ca:	b672      	cpsid	i
}
 80008cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008ce:	bf00      	nop
 80008d0:	e7fd      	b.n	80008ce <Error_Handler+0x8>
	...

080008d4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_SPI3_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_SPI3_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_SPI3_Init+0x74>)
 80008e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_SPI3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_SPI3_Init+0x74>)
 80008ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_SPI3_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_SPI3_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_SPI3_Init+0x74>)
 8000902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000906:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_SPI3_Init+0x74>)
 800090a:	2210      	movs	r2, #16
 800090c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_SPI3_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_SPI3_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_SPI3_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_SPI3_Init+0x74>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_SPI3_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_SPI3_Init+0x74>)
 800092e:	2208      	movs	r2, #8
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_SPI3_Init+0x74>)
 8000934:	f002 f960 	bl	8002bf8 <HAL_SPI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800093e:	f7ff ffc2 	bl	80008c6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000084 	.word	0x20000084
 800094c:	40003c00 	.word	0x40003c00

08000950 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a29      	ldr	r2, [pc, #164]	@ (8000a14 <HAL_SPI_MspInit+0xc4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d14c      	bne.n	8000a0c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000976:	4a28      	ldr	r2, [pc, #160]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 8000978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800097c:	6593      	str	r3, [r2, #88]	@ 0x58
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000982:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a22      	ldr	r2, [pc, #136]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <HAL_SPI_MspInit+0xc8>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009cc:	2306      	movs	r3, #6
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <HAL_SPI_MspInit+0xcc>)
 80009d8:	f000 fc2c 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009dc:	2320      	movs	r3, #32
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ec:	2306      	movs	r3, #6
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	480a      	ldr	r0, [pc, #40]	@ (8000a20 <HAL_SPI_MspInit+0xd0>)
 80009f8:	f000 fc1c 	bl	8001234 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2105      	movs	r1, #5
 8000a00:	2033      	movs	r0, #51	@ 0x33
 8000a02:	f000 fb62 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000a06:	2033      	movs	r0, #51	@ 0x33
 8000a08:	f000 fb7b 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40003c00 	.word	0x40003c00
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000800 	.word	0x48000800
 8000a20:	48000400 	.word	0x48000400

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	f06f 0001 	mvn.w	r0, #1
 8000a62:	f000 fb32 	bl	80010ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aae:	f000 f9ed 	bl	8000e8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ab2:	f004 fb81 	bl	80051b8 <xTaskGetSchedulerState>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d001      	beq.n	8000ac0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000abc:	f004 fbec 	bl	8005298 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <USART2_IRQHandler+0x10>)
 8000aca:	f003 f9ad 	bl	8003e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000ec 	.word	0x200000ec

08000ad8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <SPI3_IRQHandler+0x10>)
 8000ade:	f002 fdfb 	bl	80036d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000084 	.word	0x20000084

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e009      	b.n	8000b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd89 	bl	8000658 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf1      	blt.n	8000b38 <_write+0x12>
  }
  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_close>:

int _close(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b86:	605a      	str	r2, [r3, #4]
  return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_isatty>:

int _isatty(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f004 fdc8 	bl	800578c <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20018000 	.word	0x20018000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	200000e8 	.word	0x200000e8
 8000c30:	20000380 	.word	0x20000380

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c5e:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <MX_USART2_UART_Init+0x5c>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c9c:	f002 ffec 	bl	8003c78 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca6:	f7ff fe0e 	bl	80008c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000ec 	.word	0x200000ec
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0ac      	sub	sp, #176	@ 0xb0
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2288      	movs	r2, #136	@ 0x88
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 fd09 	bl	80056f0 <memset>
  if(uartHandle->Instance==USART2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a25      	ldr	r2, [pc, #148]	@ (8000d78 <HAL_UART_MspInit+0xc0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d143      	bne.n	8000d70 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fac3 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d00:	f7ff fde1 	bl	80008c6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d08:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	4a16      	ldr	r2, [pc, #88]	@ (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <HAL_UART_MspInit+0xc4>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000d34:	230c      	movs	r3, #12
 8000d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d56:	4619      	mov	r1, r3
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5c:	f000 fa6a 	bl	8001234 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2105      	movs	r1, #5
 8000d64:	2026      	movs	r0, #38	@ 0x26
 8000d66:	f000 f9b0 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d6a:	2026      	movs	r0, #38	@ 0x26
 8000d6c:	f000 f9c9 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d70:	bf00      	nop
 8000d72:	37b0      	adds	r7, #176	@ 0xb0
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40021000 	.word	0x40021000

08000d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d84:	f7ff ff56 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f004 fcf3 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db2:	f7ff fcf1 	bl	8000798 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dc4:	0800632c 	.word	0x0800632c
  ldr r2, =_sbss
 8000dc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dcc:	2000037c 	.word	0x2000037c

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <HAL_Init+0x3c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e10 <HAL_Init+0x3c>)
 8000de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 f962 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df0:	200f      	movs	r0, #15
 8000df2:	f000 f80f 	bl	8000e14 <HAL_InitTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	e001      	b.n	8000e06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e02:	f7ff fe0f 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d023      	beq.n	8000e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e28:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <HAL_InitTick+0x70>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f96d 	bl	800111e <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10f      	bne.n	8000e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d809      	bhi.n	8000e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f937 	bl	80010ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <HAL_InitTick+0x74>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e004      	b.n	8000e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e001      	b.n	8000e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000174 	.word	0x20000174

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000174 	.word	0x20000174

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	@ (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	@ (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	@ (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	@ 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	@ 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001136:	b480      	push	{r7}
 8001138:	b085      	sub	sp, #20
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d008      	beq.n	8001160 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2204      	movs	r2, #4
 8001152:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e022      	b.n	80011a6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 020e 	bic.w	r2, r2, #14
 800116e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001184:	f003 021c 	and.w	r2, r3, #28
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	2101      	movs	r1, #1
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d005      	beq.n	80011d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2204      	movs	r2, #4
 80011ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e029      	b.n	800122a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 020e 	bic.w	r2, r2, #14
 80011e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f003 021c 	and.w	r2, r3, #28
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    }
  }
  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e17f      	b.n	8001544 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8171 	beq.w	800153e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d118      	bne.n	8001314 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012e8:	2201      	movs	r2, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	f003 0201 	and.w	r2, r3, #1
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b03      	cmp	r3, #3
 800131e:	d017      	beq.n	8001350 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d123      	bne.n	80013a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	6939      	ldr	r1, [r7, #16]
 80013a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0203 	and.w	r2, r3, #3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80ac 	beq.w	800153e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001564 <HAL_GPIO_Init+0x330>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001564 <HAL_GPIO_Init+0x330>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001564 <HAL_GPIO_Init+0x330>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001568 <HAL_GPIO_Init+0x334>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	220f      	movs	r2, #15
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x242>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4f      	ldr	r2, [pc, #316]	@ (800156c <HAL_GPIO_Init+0x338>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x23e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4e      	ldr	r2, [pc, #312]	@ (8001570 <HAL_GPIO_Init+0x33c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x23a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4d      	ldr	r2, [pc, #308]	@ (8001574 <HAL_GPIO_Init+0x340>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x236>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4c      	ldr	r2, [pc, #304]	@ (8001578 <HAL_GPIO_Init+0x344>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x232>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4b      	ldr	r2, [pc, #300]	@ (800157c <HAL_GPIO_Init+0x348>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4a      	ldr	r2, [pc, #296]	@ (8001580 <HAL_GPIO_Init+0x34c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x22a>
 800145a:	2306      	movs	r3, #6
 800145c:	e00c      	b.n	8001478 <HAL_GPIO_Init+0x244>
 800145e:	2307      	movs	r3, #7
 8001460:	e00a      	b.n	8001478 <HAL_GPIO_Init+0x244>
 8001462:	2305      	movs	r3, #5
 8001464:	e008      	b.n	8001478 <HAL_GPIO_Init+0x244>
 8001466:	2304      	movs	r3, #4
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x244>
 800146a:	2303      	movs	r3, #3
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x244>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x244>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x244>
 8001476:	2300      	movs	r3, #0
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4093      	lsls	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001488:	4937      	ldr	r1, [pc, #220]	@ (8001568 <HAL_GPIO_Init+0x334>)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001496:	4b3b      	ldr	r3, [pc, #236]	@ (8001584 <HAL_GPIO_Init+0x350>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ba:	4a32      	ldr	r2, [pc, #200]	@ (8001584 <HAL_GPIO_Init+0x350>)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014c0:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <HAL_GPIO_Init+0x350>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e4:	4a27      	ldr	r2, [pc, #156]	@ (8001584 <HAL_GPIO_Init+0x350>)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <HAL_GPIO_Init+0x350>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800150e:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <HAL_GPIO_Init+0x350>)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_GPIO_Init+0x350>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001538:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <HAL_GPIO_Init+0x350>)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	f47f ae78 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48001000 	.word	0x48001000
 800157c:	48001400 	.word	0x48001400
 8001580:	48001800 	.word	0x48001800
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40007000 	.word	0x40007000

080015d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015e2:	d130      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e4:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015f0:	d038      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001600:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001602:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2232      	movs	r2, #50	@ 0x32
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	4a1b      	ldr	r2, [pc, #108]	@ (800167c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001618:	e002      	b.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3b01      	subs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800162c:	d102      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x60>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f2      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001640:	d110      	bne.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e00f      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001652:	d007      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800165c:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001662:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000
 8001678:	20000000 	.word	0x20000000
 800167c:	431bde83 	.word	0x431bde83

08001680 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e3ca      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001692:	4b97      	ldr	r3, [pc, #604]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169c:	4b94      	ldr	r3, [pc, #592]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80e4 	beq.w	800187c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_RCC_OscConfig+0x4a>
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	f040 808b 	bne.w	80017d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	f040 8087 	bne.w	80017d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x62>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e3a2      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	4b82      	ldr	r3, [pc, #520]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_RCC_OscConfig+0x7c>
 80016f2:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016fa:	e005      	b.n	8001708 <HAL_RCC_OscConfig+0x88>
 80016fc:	4b7c      	ldr	r3, [pc, #496]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001708:	4293      	cmp	r3, r2
 800170a:	d223      	bcs.n	8001754 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fd55 	bl	80021c0 <RCC_SetFlashLatencyFromMSIRange>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e383      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001720:	4b73      	ldr	r3, [pc, #460]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a72      	ldr	r2, [pc, #456]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b70      	ldr	r3, [pc, #448]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	496d      	ldr	r1, [pc, #436]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173e:	4b6c      	ldr	r3, [pc, #432]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	4968      	ldr	r1, [pc, #416]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
 8001752:	e025      	b.n	80017a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001754:	4b66      	ldr	r3, [pc, #408]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a65      	ldr	r2, [pc, #404]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b63      	ldr	r3, [pc, #396]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4960      	ldr	r1, [pc, #384]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001772:	4b5f      	ldr	r3, [pc, #380]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	495b      	ldr	r1, [pc, #364]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fd15 	bl	80021c0 <RCC_SetFlashLatencyFromMSIRange>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e343      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a0:	f000 fc4a 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b52      	ldr	r3, [pc, #328]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	4950      	ldr	r1, [pc, #320]	@ (80018f4 <HAL_RCC_OscConfig+0x274>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	4a4e      	ldr	r2, [pc, #312]	@ (80018f8 <HAL_RCC_OscConfig+0x278>)
 80017be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c0:	4b4e      	ldr	r3, [pc, #312]	@ (80018fc <HAL_RCC_OscConfig+0x27c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fb25 	bl	8000e14 <HAL_InitTick>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d052      	beq.n	800187a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	e327      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d032      	beq.n	8001846 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e0:	4b43      	ldr	r3, [pc, #268]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a42      	ldr	r2, [pc, #264]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb62 	bl	8000eb4 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f4:	f7ff fb5e 	bl	8000eb4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e310      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001806:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a36      	ldr	r2, [pc, #216]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b34      	ldr	r3, [pc, #208]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4931      	ldr	r1, [pc, #196]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001830:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	492c      	ldr	r1, [pc, #176]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	e01a      	b.n	800187c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001846:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a29      	ldr	r2, [pc, #164]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001852:	f7ff fb2f 	bl	8000eb4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185a:	f7ff fb2b 	bl	8000eb4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e2dd      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186c:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x1da>
 8001878:	e000      	b.n	800187c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d074      	beq.n	8001972 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b08      	cmp	r3, #8
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x21a>
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b0c      	cmp	r3, #12
 8001892:	d10e      	bne.n	80018b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d10b      	bne.n	80018b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d064      	beq.n	8001970 <HAL_RCC_OscConfig+0x2f0>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d160      	bne.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e2ba      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x24a>
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e026      	b.n	8001918 <HAL_RCC_OscConfig+0x298>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018d2:	d115      	bne.n	8001900 <HAL_RCC_OscConfig+0x280>
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a02      	ldr	r2, [pc, #8]	@ (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x298>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	080062a0 	.word	0x080062a0
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004
 8001900:	4ba0      	ldr	r3, [pc, #640]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a9f      	ldr	r2, [pc, #636]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b9d      	ldr	r3, [pc, #628]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a9c      	ldr	r2, [pc, #624]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fac8 	bl	8000eb4 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fac4 	bl	8000eb4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e276      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193a:	4b92      	ldr	r3, [pc, #584]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x2a8>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fab4 	bl	8000eb4 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fab0 	bl	8000eb4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	@ 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e262      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001962:	4b88      	ldr	r3, [pc, #544]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x2d0>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d060      	beq.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d005      	beq.n	8001990 <HAL_RCC_OscConfig+0x310>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d119      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d116      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	4b7c      	ldr	r3, [pc, #496]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_OscConfig+0x328>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e23f      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b76      	ldr	r3, [pc, #472]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	4973      	ldr	r1, [pc, #460]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	e040      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff fa6f 	bl	8000eb4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff fa6b 	bl	8000eb4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e21d      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	4b65      	ldr	r3, [pc, #404]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b62      	ldr	r3, [pc, #392]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	495f      	ldr	r1, [pc, #380]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
 8001a0c:	e018      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5c      	ldr	r2, [pc, #368]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa4b 	bl	8000eb4 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff fa47 	bl	8000eb4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1f9      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a34:	4b53      	ldr	r3, [pc, #332]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a54:	4b4b      	ldr	r3, [pc, #300]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff fa26 	bl	8000eb4 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fa22 	bl	8000eb4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1d4      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7e:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ef      	beq.n	8001a6c <HAL_RCC_OscConfig+0x3ec>
 8001a8c:	e01b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a94:	4a3b      	ldr	r2, [pc, #236]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fa09 	bl	8000eb4 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fa05 	bl	8000eb4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1b7      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	4b32      	ldr	r3, [pc, #200]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80a6 	beq.w	8001c20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	4a26      	ldr	r2, [pc, #152]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af0:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afc:	2301      	movs	r3, #1
 8001afe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b00:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d118      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	@ (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b18:	f7ff f9cc 	bl	8000eb4 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b20:	f7ff f9c8 	bl	8000eb4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e17a      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4d8>
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b56:	e029      	b.n	8001bac <HAL_RCC_OscConfig+0x52c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d115      	bne.n	8001b8c <HAL_RCC_OscConfig+0x50c>
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b66:	4a07      	ldr	r2, [pc, #28]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b70:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b76:	4a03      	ldr	r2, [pc, #12]	@ (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b80:	e014      	b.n	8001bac <HAL_RCC_OscConfig+0x52c>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b92:	4a9b      	ldr	r2, [pc, #620]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b9c:	4b98      	ldr	r3, [pc, #608]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba2:	4a97      	ldr	r2, [pc, #604]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d016      	beq.n	8001be2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f97e 	bl	8000eb4 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f97a 	bl	8000eb4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e12a      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ed      	beq.n	8001bbc <HAL_RCC_OscConfig+0x53c>
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff f967 	bl	8000eb4 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f963 	bl	8000eb4 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e113      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c00:	4b7f      	ldr	r3, [pc, #508]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ed      	bne.n	8001bea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b7a      	ldr	r3, [pc, #488]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c18:	4a79      	ldr	r2, [pc, #484]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80fe 	beq.w	8001e26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	f040 80d0 	bne.w	8001dd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c34:	4b72      	ldr	r3, [pc, #456]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d130      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	3b01      	subs	r3, #1
 8001c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d127      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d11f      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c74:	2a07      	cmp	r2, #7
 8001c76:	bf14      	ite	ne
 8001c78:	2201      	movne	r2, #1
 8001c7a:	2200      	moveq	r2, #0
 8001c7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d113      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d109      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d06e      	beq.n	8001d88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d069      	beq.n	8001d84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0ad      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd8:	f7ff f8ec 	bl	8000eb4 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f8e8 	bl	8000eb4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e09a      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf2:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfe:	4b40      	ldr	r3, [pc, #256]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	4b40      	ldr	r3, [pc, #256]	@ (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d18:	0212      	lsls	r2, r2, #8
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d20:	0852      	lsrs	r2, r2, #1
 8001d22:	3a01      	subs	r2, #1
 8001d24:	0552      	lsls	r2, r2, #21
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d2c:	0852      	lsrs	r2, r2, #1
 8001d2e:	3a01      	subs	r2, #1
 8001d30:	0652      	lsls	r2, r2, #25
 8001d32:	4311      	orrs	r1, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d38:	0912      	lsrs	r2, r2, #4
 8001d3a:	0452      	lsls	r2, r2, #17
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	4930      	ldr	r1, [pc, #192]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d44:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2d      	ldr	r2, [pc, #180]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d50:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a2a      	ldr	r2, [pc, #168]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d5c:	f7ff f8aa 	bl	8000eb4 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff f8a6 	bl	8000eb4 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e058      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d82:	e050      	b.n	8001e26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e04f      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d148      	bne.n	8001e26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da0:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a16      	ldr	r2, [pc, #88]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dac:	f7ff f882 	bl	8000eb4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff f87e 	bl	8000eb4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e030      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x734>
 8001dd2:	e028      	b.n	8001e26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d023      	beq.n	8001e22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_RCC_OscConfig+0x780>)
 8001de0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7ff f865 	bl	8000eb4 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	e00c      	b.n	8001e08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7ff f861 	bl	8000eb4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d905      	bls.n	8001e08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e013      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_RCC_OscConfig+0x7b0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ec      	bne.n	8001dee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_RCC_OscConfig+0x7b0>)
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	4905      	ldr	r1, [pc, #20]	@ (8001e30 <HAL_RCC_OscConfig+0x7b0>)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_RCC_OscConfig+0x7b4>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
 8001e20:	e001      	b.n	8001e26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	feeefffc 	.word	0xfeeefffc

08001e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0e7      	b.n	800201c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b75      	ldr	r3, [pc, #468]	@ (8002024 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d910      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b72      	ldr	r3, [pc, #456]	@ (8002024 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	4970      	ldr	r1, [pc, #448]	@ (8002024 <HAL_RCC_ClockConfig+0x1ec>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002024 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0cf      	b.n	800201c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	4b66      	ldr	r3, [pc, #408]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d908      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b63      	ldr	r3, [pc, #396]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4960      	ldr	r1, [pc, #384]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d04c      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d121      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0a6      	b.n	800201c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed6:	4b54      	ldr	r3, [pc, #336]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d115      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e09a      	b.n	800201c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eee:	4b4e      	ldr	r3, [pc, #312]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e08e      	b.n	800201c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efe:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e086      	b.n	800201c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4b46      	ldr	r3, [pc, #280]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 0203 	bic.w	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4943      	ldr	r1, [pc, #268]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f20:	f7fe ffc8 	bl	8000eb4 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7fe ffc4 	bl	8000eb4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e06e      	b.n	800201c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 020c 	and.w	r2, r3, #12
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1eb      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d010      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4b31      	ldr	r3, [pc, #196]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d208      	bcs.n	8001f7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	492b      	ldr	r1, [pc, #172]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7e:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <HAL_RCC_ClockConfig+0x1ec>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d210      	bcs.n	8001fae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8c:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <HAL_RCC_ClockConfig+0x1ec>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 0207 	bic.w	r2, r3, #7
 8001f94:	4923      	ldr	r1, [pc, #140]	@ (8002024 <HAL_RCC_ClockConfig+0x1ec>)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9c:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <HAL_RCC_ClockConfig+0x1ec>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e036      	b.n	800201c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4918      	ldr	r1, [pc, #96]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4910      	ldr	r1, [pc, #64]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fec:	f000 f824 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	490b      	ldr	r1, [pc, #44]	@ (800202c <HAL_RCC_ClockConfig+0x1f4>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <HAL_RCC_ClockConfig+0x1f8>)
 800200a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_RCC_ClockConfig+0x1fc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe feff 	bl	8000e14 <HAL_InitTick>
 8002016:	4603      	mov	r3, r0
 8002018:	72fb      	strb	r3, [r7, #11]

  return status;
 800201a:	7afb      	ldrb	r3, [r7, #11]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40022000 	.word	0x40022000
 8002028:	40021000 	.word	0x40021000
 800202c:	080062a0 	.word	0x080062a0
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002046:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002050:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x34>
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d121      	bne.n	80020aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d11e      	bne.n	80020aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800206c:	4b34      	ldr	r3, [pc, #208]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002078:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e005      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002088:	4b2d      	ldr	r3, [pc, #180]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002094:	4a2b      	ldr	r2, [pc, #172]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10d      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d102      	bne.n	80020b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x110>)
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	e004      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020bc:	4b23      	ldr	r3, [pc, #140]	@ (800214c <HAL_RCC_GetSysClockFreq+0x114>)
 80020be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d134      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0xa6>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d003      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0xac>
 80020dc:	e005      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x110>)
 80020e0:	617b      	str	r3, [r7, #20]
      break;
 80020e2:	e005      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_RCC_GetSysClockFreq+0x114>)
 80020e6:	617b      	str	r3, [r7, #20]
      break;
 80020e8:	e002      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	617b      	str	r3, [r7, #20]
      break;
 80020ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	3301      	adds	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	fb03 f202 	mul.w	r2, r3, r2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002116:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x108>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	0e5b      	lsrs	r3, r3, #25
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	3301      	adds	r3, #1
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002130:	69bb      	ldr	r3, [r7, #24]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	080062b8 	.word	0x080062b8
 8002148:	00f42400 	.word	0x00f42400
 800214c:	007a1200 	.word	0x007a1200

08002150 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	@ (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800216c:	f7ff fff0 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	@ (8002190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	080062b0 	.word	0x080062b0

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002198:	f7ff ffda 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0adb      	lsrs	r3, r3, #11
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4904      	ldr	r1, [pc, #16]	@ (80021bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	080062b0 	.word	0x080062b0

080021c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021d8:	f7ff f9ee 	bl	80015b8 <HAL_PWREx_GetVoltageRange>
 80021dc:	6178      	str	r0, [r7, #20]
 80021de:	e014      	b.n	800220a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	4a24      	ldr	r2, [pc, #144]	@ (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ec:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021f8:	f7ff f9de 	bl	80015b8 <HAL_PWREx_GetVoltageRange>
 80021fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	4a1d      	ldr	r2, [pc, #116]	@ (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002208:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002210:	d10b      	bne.n	800222a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b80      	cmp	r3, #128	@ 0x80
 8002216:	d919      	bls.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2ba0      	cmp	r3, #160	@ 0xa0
 800221c:	d902      	bls.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800221e:	2302      	movs	r3, #2
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e013      	b.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002224:	2301      	movs	r3, #1
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	e010      	b.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b80      	cmp	r3, #128	@ 0x80
 800222e:	d902      	bls.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002230:	2303      	movs	r3, #3
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e00a      	b.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b80      	cmp	r3, #128	@ 0x80
 800223a:	d102      	bne.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800223c:	2302      	movs	r3, #2
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	e004      	b.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b70      	cmp	r3, #112	@ 0x70
 8002246:	d101      	bne.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002248:	2301      	movs	r3, #1
 800224a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 0207 	bic.w	r2, r3, #7
 8002254:	4909      	ldr	r1, [pc, #36]	@ (800227c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800225c:	4b07      	ldr	r3, [pc, #28]	@ (800227c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	40022000 	.word	0x40022000

08002280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002288:	2300      	movs	r3, #0
 800228a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800228c:	2300      	movs	r3, #0
 800228e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002298:	2b00      	cmp	r3, #0
 800229a:	d041      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022a4:	d02a      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022aa:	d824      	bhi.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022b0:	d008      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022b6:	d81e      	bhi.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022c0:	d010      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022c2:	e018      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022c4:	4b86      	ldr	r3, [pc, #536]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a85      	ldr	r2, [pc, #532]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d0:	e015      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fabb 	bl	8002854 <RCCEx_PLLSAI1_Config>
 80022de:	4603      	mov	r3, r0
 80022e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e2:	e00c      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3320      	adds	r3, #32
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fba6 	bl	8002a3c <RCCEx_PLLSAI2_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f4:	e003      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	74fb      	strb	r3, [r7, #19]
      break;
 80022fa:	e000      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10b      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002304:	4b76      	ldr	r3, [pc, #472]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002312:	4973      	ldr	r1, [pc, #460]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800231a:	e001      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d041      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002330:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002334:	d02a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002336:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800233a:	d824      	bhi.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800233c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002340:	d008      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002342:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002346:	d81e      	bhi.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002350:	d010      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002352:	e018      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002354:	4b62      	ldr	r3, [pc, #392]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a61      	ldr	r2, [pc, #388]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002360:	e015      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fa73 	bl	8002854 <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002372:	e00c      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3320      	adds	r3, #32
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fb5e 	bl	8002a3c <RCCEx_PLLSAI2_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002384:	e003      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	74fb      	strb	r3, [r7, #19]
      break;
 800238a:	e000      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800238c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002394:	4b52      	ldr	r3, [pc, #328]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023a2:	494f      	ldr	r1, [pc, #316]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023aa:	e001      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a0 	beq.w	80024fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023c2:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	4b41      	ldr	r3, [pc, #260]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	4a40      	ldr	r2, [pc, #256]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023e4:	4b3e      	ldr	r3, [pc, #248]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f4:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a3a      	ldr	r2, [pc, #232]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002400:	f7fe fd58 	bl	8000eb4 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002406:	e009      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002408:	f7fe fd54 	bl	8000eb4 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d902      	bls.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	74fb      	strb	r3, [r7, #19]
        break;
 800241a:	e005      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800241c:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ef      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d15c      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800242e:	4b2c      	ldr	r3, [pc, #176]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002438:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01f      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	d019      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800244c:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002456:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002458:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	4a20      	ldr	r2, [pc, #128]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246e:	4a1c      	ldr	r2, [pc, #112]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002478:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fd13 	bl	8000eb4 <HAL_GetTick>
 800248e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002490:	e00b      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe fd0f 	bl	8000eb4 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d902      	bls.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	74fb      	strb	r3, [r7, #19]
            break;
 80024a8:	e006      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0ec      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024be:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ce:	4904      	ldr	r1, [pc, #16]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024d6:	e009      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
 80024dc:	e006      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ec:	7c7b      	ldrb	r3, [r7, #17]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b9e      	ldr	r3, [pc, #632]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	4a9d      	ldr	r2, [pc, #628]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250a:	4b98      	ldr	r3, [pc, #608]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002510:	f023 0203 	bic.w	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002518:	4994      	ldr	r1, [pc, #592]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800252c:	4b8f      	ldr	r3, [pc, #572]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	f023 020c 	bic.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	498c      	ldr	r1, [pc, #560]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800254e:	4b87      	ldr	r3, [pc, #540]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002554:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	4983      	ldr	r1, [pc, #524]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002570:	4b7e      	ldr	r3, [pc, #504]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	497b      	ldr	r1, [pc, #492]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002592:	4b76      	ldr	r3, [pc, #472]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a0:	4972      	ldr	r1, [pc, #456]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b4:	4b6d      	ldr	r3, [pc, #436]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c2:	496a      	ldr	r1, [pc, #424]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025d6:	4b65      	ldr	r3, [pc, #404]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e4:	4961      	ldr	r1, [pc, #388]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025f8:	4b5c      	ldr	r3, [pc, #368]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002606:	4959      	ldr	r1, [pc, #356]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261a:	4b54      	ldr	r3, [pc, #336]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002628:	4950      	ldr	r1, [pc, #320]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800263c:	4b4b      	ldr	r3, [pc, #300]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264a:	4948      	ldr	r1, [pc, #288]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800265e:	4b43      	ldr	r3, [pc, #268]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	493f      	ldr	r1, [pc, #252]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d028      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002680:	4b3a      	ldr	r3, [pc, #232]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800268e:	4937      	ldr	r1, [pc, #220]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800269a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800269e:	d106      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a0:	4b32      	ldr	r3, [pc, #200]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a31      	ldr	r2, [pc, #196]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026aa:	60d3      	str	r3, [r2, #12]
 80026ac:	e011      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f8c8 	bl	8002854 <RCCEx_PLLSAI1_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d028      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026de:	4b23      	ldr	r3, [pc, #140]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	491f      	ldr	r1, [pc, #124]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026fc:	d106      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026fe:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4a1a      	ldr	r2, [pc, #104]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002708:	60d3      	str	r3, [r2, #12]
 800270a:	e011      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002714:	d10c      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	2101      	movs	r1, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f899 	bl	8002854 <RCCEx_PLLSAI1_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d02b      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002742:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800274a:	4908      	ldr	r1, [pc, #32]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800275a:	d109      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a02      	ldr	r2, [pc, #8]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002766:	60d3      	str	r3, [r2, #12]
 8002768:	e014      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002774:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002778:	d10c      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f867 	bl	8002854 <RCCEx_PLLSAI1_Config>
 8002786:	4603      	mov	r3, r0
 8002788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027ae:	4928      	ldr	r1, [pc, #160]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027be:	d10d      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	2102      	movs	r1, #2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f844 	bl	8002854 <RCCEx_PLLSAI1_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d014      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	74bb      	strb	r3, [r7, #18]
 80027da:	e011      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3320      	adds	r3, #32
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f925 	bl	8002a3c <RCCEx_PLLSAI2_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800280c:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800281a:	490d      	ldr	r1, [pc, #52]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002834:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800283e:	4904      	ldr	r1, [pc, #16]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002846:	7cbb      	ldrb	r3, [r7, #18]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000

08002854 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002862:	4b75      	ldr	r3, [pc, #468]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d018      	beq.n	80028a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800286e:	4b72      	ldr	r3, [pc, #456]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0203 	and.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d10d      	bne.n	800289a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
       ||
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002886:	4b6c      	ldr	r3, [pc, #432]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
       ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d047      	beq.n	800292a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e044      	b.n	800292a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d018      	beq.n	80028da <RCCEx_PLLSAI1_Config+0x86>
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d825      	bhi.n	80028f8 <RCCEx_PLLSAI1_Config+0xa4>
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d002      	beq.n	80028b6 <RCCEx_PLLSAI1_Config+0x62>
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d009      	beq.n	80028c8 <RCCEx_PLLSAI1_Config+0x74>
 80028b4:	e020      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028b6:	4b60      	ldr	r3, [pc, #384]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11d      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c6:	e01a      	b.n	80028fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d116      	bne.n	8002902 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d8:	e013      	b.n	8002902 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028da:	4b57      	ldr	r3, [pc, #348]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10f      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028e6:	4b54      	ldr	r3, [pc, #336]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028f6:	e006      	b.n	8002906 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
      break;
 80028fc:	e004      	b.n	8002908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028fe:	bf00      	nop
 8002900:	e002      	b.n	8002908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002902:	bf00      	nop
 8002904:	e000      	b.n	8002908 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002906:	bf00      	nop
    }

    if(status == HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10d      	bne.n	800292a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800290e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	430b      	orrs	r3, r1
 8002924:	4944      	ldr	r1, [pc, #272]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d17d      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002930:	4b41      	ldr	r3, [pc, #260]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a40      	ldr	r2, [pc, #256]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800293a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800293c:	f7fe faba 	bl	8000eb4 <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002942:	e009      	b.n	8002958 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002944:	f7fe fab6 	bl	8000eb4 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d902      	bls.n	8002958 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	73fb      	strb	r3, [r7, #15]
        break;
 8002956:	e005      	b.n	8002964 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002958:	4b37      	ldr	r3, [pc, #220]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ef      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d160      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002970:	4b31      	ldr	r3, [pc, #196]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6892      	ldr	r2, [r2, #8]
 8002980:	0211      	lsls	r1, r2, #8
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	0912      	lsrs	r2, r2, #4
 8002988:	0452      	lsls	r2, r2, #17
 800298a:	430a      	orrs	r2, r1
 800298c:	492a      	ldr	r1, [pc, #168]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	610b      	str	r3, [r1, #16]
 8002992:	e027      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d112      	bne.n	80029c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800299a:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6892      	ldr	r2, [r2, #8]
 80029aa:	0211      	lsls	r1, r2, #8
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6912      	ldr	r2, [r2, #16]
 80029b0:	0852      	lsrs	r2, r2, #1
 80029b2:	3a01      	subs	r2, #1
 80029b4:	0552      	lsls	r2, r2, #21
 80029b6:	430a      	orrs	r2, r1
 80029b8:	491f      	ldr	r1, [pc, #124]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	610b      	str	r3, [r1, #16]
 80029be:	e011      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6892      	ldr	r2, [r2, #8]
 80029d0:	0211      	lsls	r1, r2, #8
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6952      	ldr	r2, [r2, #20]
 80029d6:	0852      	lsrs	r2, r2, #1
 80029d8:	3a01      	subs	r2, #1
 80029da:	0652      	lsls	r2, r2, #25
 80029dc:	430a      	orrs	r2, r1
 80029de:	4916      	ldr	r1, [pc, #88]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029e4:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a13      	ldr	r2, [pc, #76]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fa60 	bl	8000eb4 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029f6:	e009      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029f8:	f7fe fa5c 	bl	8000eb4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d902      	bls.n	8002a0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	73fb      	strb	r3, [r7, #15]
          break;
 8002a0a:	e005      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	4904      	ldr	r1, [pc, #16]	@ (8002a38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d018      	beq.n	8002a88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a56:	4b67      	ldr	r3, [pc, #412]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0203 	and.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d10d      	bne.n	8002a82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
       ||
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a6e:	4b61      	ldr	r3, [pc, #388]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d047      	beq.n	8002b12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	e044      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d018      	beq.n	8002ac2 <RCCEx_PLLSAI2_Config+0x86>
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d825      	bhi.n	8002ae0 <RCCEx_PLLSAI2_Config+0xa4>
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d002      	beq.n	8002a9e <RCCEx_PLLSAI2_Config+0x62>
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d009      	beq.n	8002ab0 <RCCEx_PLLSAI2_Config+0x74>
 8002a9c:	e020      	b.n	8002ae0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a9e:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11d      	bne.n	8002ae6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aae:	e01a      	b.n	8002ae6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab0:	4b50      	ldr	r3, [pc, #320]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d116      	bne.n	8002aea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e013      	b.n	8002aea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ace:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ade:	e006      	b.n	8002aee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	e004      	b.n	8002af0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002af6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	4939      	ldr	r1, [pc, #228]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d167      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b18:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a35      	ldr	r2, [pc, #212]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b24:	f7fe f9c6 	bl	8000eb4 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b2a:	e009      	b.n	8002b40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b2c:	f7fe f9c2 	bl	8000eb4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d902      	bls.n	8002b40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b3e:	e005      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b40:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ef      	bne.n	8002b2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d14a      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d111      	bne.n	8002b7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b58:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6892      	ldr	r2, [r2, #8]
 8002b68:	0211      	lsls	r1, r2, #8
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68d2      	ldr	r2, [r2, #12]
 8002b6e:	0912      	lsrs	r2, r2, #4
 8002b70:	0452      	lsls	r2, r2, #17
 8002b72:	430a      	orrs	r2, r1
 8002b74:	491f      	ldr	r1, [pc, #124]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	614b      	str	r3, [r1, #20]
 8002b7a:	e011      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6892      	ldr	r2, [r2, #8]
 8002b8c:	0211      	lsls	r1, r2, #8
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6912      	ldr	r2, [r2, #16]
 8002b92:	0852      	lsrs	r2, r2, #1
 8002b94:	3a01      	subs	r2, #1
 8002b96:	0652      	lsls	r2, r2, #25
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	4916      	ldr	r1, [pc, #88]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ba0:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a13      	ldr	r2, [pc, #76]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe f982 	bl	8000eb4 <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bb2:	e009      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bb4:	f7fe f97e 	bl	8000eb4 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d902      	bls.n	8002bc8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	73fb      	strb	r3, [r7, #15]
          break;
 8002bc6:	e005      	b.n	8002bd4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ef      	beq.n	8002bb4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	4904      	ldr	r1, [pc, #16]	@ (8002bf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e095      	b.n	8002d36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d108      	bne.n	8002c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1a:	d009      	beq.n	8002c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
 8002c22:	e005      	b.n	8002c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd fe80 	bl	8000950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c70:	d902      	bls.n	8002c78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	e002      	b.n	8002c7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c86:	d007      	beq.n	8002c98 <HAL_SPI_Init+0xa0>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c90:	d002      	beq.n	8002c98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cda:	ea42 0103 	orr.w	r1, r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	0c1b      	lsrs	r3, r3, #16
 8002cf4:	f003 0204 	and.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d14:	ea42 0103 	orr.w	r1, r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b088      	sub	sp, #32
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d4e:	f7fe f8b1 	bl	8000eb4 <HAL_GetTick>
 8002d52:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	e15c      	b.n	8003022 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Transmit+0x36>
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e154      	b.n	8003022 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_SPI_Transmit+0x48>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e14d      	b.n	8003022 <HAL_SPI_Transmit+0x2e4>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2203      	movs	r2, #3
 8002d92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dd8:	d10f      	bne.n	8002dfa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002df8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b40      	cmp	r3, #64	@ 0x40
 8002e06:	d007      	beq.n	8002e18 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e20:	d952      	bls.n	8002ec8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_Transmit+0xf2>
 8002e2a:	8b7b      	ldrh	r3, [r7, #26]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d145      	bne.n	8002ebc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e40:	1c9a      	adds	r2, r3, #2
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e54:	e032      	b.n	8002ebc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d112      	bne.n	8002e8a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e68:	881a      	ldrh	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	1c9a      	adds	r2, r3, #2
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e88:	e018      	b.n	8002ebc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e8a:	f7fe f813 	bl	8000eb4 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d803      	bhi.n	8002ea2 <HAL_SPI_Transmit+0x164>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d102      	bne.n	8002ea8 <HAL_SPI_Transmit+0x16a>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0b2      	b.n	8003022 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1c7      	bne.n	8002e56 <HAL_SPI_Transmit+0x118>
 8002ec6:	e083      	b.n	8002fd0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_SPI_Transmit+0x198>
 8002ed0:	8b7b      	ldrh	r3, [r7, #26]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d177      	bne.n	8002fc6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d912      	bls.n	8002f06 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	881a      	ldrh	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b02      	subs	r3, #2
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f04:	e05f      	b.n	8002fc6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f2c:	e04b      	b.n	8002fc6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d12b      	bne.n	8002f94 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d912      	bls.n	8002f6c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	881a      	ldrh	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b02      	subs	r3, #2
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f6a:	e02c      	b.n	8002fc6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	7812      	ldrb	r2, [r2, #0]
 8002f78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f92:	e018      	b.n	8002fc6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f94:	f7fd ff8e 	bl	8000eb4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d803      	bhi.n	8002fac <HAL_SPI_Transmit+0x26e>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d102      	bne.n	8002fb2 <HAL_SPI_Transmit+0x274>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e02d      	b.n	8003022 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ae      	bne.n	8002f2e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	6839      	ldr	r1, [r7, #0]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fe09 	bl	8003bec <SPI_EndRxTxTransaction>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003020:	2300      	movs	r3, #0
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	af02      	add	r7, sp, #8
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	e123      	b.n	8003292 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003052:	d112      	bne.n	800307a <HAL_SPI_Receive+0x50>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10e      	bne.n	800307a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2204      	movs	r2, #4
 8003060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003064:	88fa      	ldrh	r2, [r7, #6]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f912 	bl	800329a <HAL_SPI_TransmitReceive>
 8003076:	4603      	mov	r3, r0
 8003078:	e10b      	b.n	8003292 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307a:	f7fd ff1b 	bl	8000eb4 <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_SPI_Receive+0x62>
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e100      	b.n	8003292 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_SPI_Receive+0x74>
 800309a:	2302      	movs	r3, #2
 800309c:	e0f9      	b.n	8003292 <HAL_SPI_Receive+0x268>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2204      	movs	r2, #4
 80030aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030f0:	d908      	bls.n	8003104 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	e007      	b.n	8003114 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003112:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311c:	d10f      	bne.n	800313e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800312c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b40      	cmp	r3, #64	@ 0x40
 800314a:	d007      	beq.n	800315c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800315a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003164:	d875      	bhi.n	8003252 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003166:	e037      	b.n	80031d8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d117      	bne.n	80031a6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f103 020c 	add.w	r2, r3, #12
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	7812      	ldrb	r2, [r2, #0]
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80031a4:	e018      	b.n	80031d8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a6:	f7fd fe85 	bl	8000eb4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d803      	bhi.n	80031be <HAL_SPI_Receive+0x194>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d102      	bne.n	80031c4 <HAL_SPI_Receive+0x19a>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e05c      	b.n	8003292 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1c1      	bne.n	8003168 <HAL_SPI_Receive+0x13e>
 80031e4:	e03b      	b.n	800325e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d115      	bne.n	8003220 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	b292      	uxth	r2, r2
 8003200:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	1c9a      	adds	r2, r3, #2
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800321e:	e018      	b.n	8003252 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003220:	f7fd fe48 	bl	8000eb4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d803      	bhi.n	8003238 <HAL_SPI_Receive+0x20e>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	d102      	bne.n	800323e <HAL_SPI_Receive+0x214>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e01f      	b.n	8003292 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1c3      	bne.n	80031e6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	6839      	ldr	r1, [r7, #0]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fc6a 	bl	8003b3c <SPI_EndRxTransaction>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003290:	2300      	movs	r3, #0
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b08a      	sub	sp, #40	@ 0x28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032a8:	2301      	movs	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ac:	f7fd fe02 	bl	8000eb4 <HAL_GetTick>
 80032b0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032b8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032c0:	887b      	ldrh	r3, [r7, #2]
 80032c2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032c8:	7ffb      	ldrb	r3, [r7, #31]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00c      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x4e>
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032d4:	d106      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x4a>
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d001      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
 80032e6:	e1f3      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x60>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x60>
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1e8      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_SPI_TransmitReceive+0x72>
 8003308:	2302      	movs	r3, #2
 800330a:	e1e1      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x436>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b04      	cmp	r3, #4
 800331e:	d003      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2205      	movs	r2, #5
 8003324:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800336a:	d802      	bhi.n	8003372 <HAL_SPI_TransmitReceive+0xd8>
 800336c:	8abb      	ldrh	r3, [r7, #20]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d908      	bls.n	8003384 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	e007      	b.n	8003394 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003392:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d007      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033ba:	f240 8083 	bls.w	80034c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x132>
 80033c6:	8afb      	ldrh	r3, [r7, #22]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d16f      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f0:	e05c      	b.n	80034ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d11b      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x19e>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x19e>
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	2b01      	cmp	r3, #1
 800340e:	d113      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d11c      	bne.n	8003480 <HAL_SPI_TransmitReceive+0x1e6>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d016      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	b292      	uxth	r2, r2
 800345e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	1c9a      	adds	r2, r3, #2
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800347c:	2301      	movs	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003480:	f7fd fd18 	bl	8000eb4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348c:	429a      	cmp	r2, r3
 800348e:	d80d      	bhi.n	80034ac <HAL_SPI_TransmitReceive+0x212>
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d009      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e111      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d19d      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x158>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d197      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x158>
 80034c2:	e0e5      	b.n	8003690 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x23a>
 80034cc:	8afb      	ldrh	r3, [r7, #22]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	f040 80d1 	bne.w	8003676 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d912      	bls.n	8003504 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	881a      	ldrh	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ee:	1c9a      	adds	r2, r3, #2
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b02      	subs	r3, #2
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003502:	e0b8      	b.n	8003676 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352a:	e0a4      	b.n	8003676 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d134      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x30a>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02f      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x30a>
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	2b01      	cmp	r3, #1
 8003548:	d12c      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d912      	bls.n	800357a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b02      	subs	r3, #2
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003578:	e012      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d148      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x3aa>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d042      	beq.n	8003644 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d923      	bls.n	8003612 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	b292      	uxth	r2, r2
 80035d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b02      	subs	r3, #2
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d81f      	bhi.n	8003640 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	e016      	b.n	8003640 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f103 020c 	add.w	r2, r3, #12
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003640:	2301      	movs	r3, #1
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003644:	f7fd fc36 	bl	8000eb4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003650:	429a      	cmp	r2, r3
 8003652:	d803      	bhi.n	800365c <HAL_SPI_TransmitReceive+0x3c2>
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d102      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x3c8>
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e02c      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f af55 	bne.w	800352c <HAL_SPI_TransmitReceive+0x292>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	f47f af4e 	bne.w	800352c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003690:	6a3a      	ldr	r2, [r7, #32]
 8003692:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 faa9 	bl	8003bec <SPI_EndRxTxTransaction>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00e      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
  }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10e      	bne.n	8003718 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
    return;
 8003716:	e0ce      	b.n	80038b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_SPI_IRQHandler+0x5e>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
    return;
 8003734:	e0bf      	b.n	80038b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_SPI_IRQHandler+0x7e>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80b0 	beq.w	80038b6 <HAL_SPI_IRQHandler+0x1de>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80aa 	beq.w	80038b6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b03      	cmp	r3, #3
 8003776:	d011      	beq.n	800379c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	f043 0204 	orr.w	r2, r3, #4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	e00b      	b.n	80037b4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	693b      	ldr	r3, [r7, #16]
        return;
 80037b2:	e080      	b.n	80038b6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d014      	beq.n	80037e8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f6:	f043 0208 	orr.w	r2, r3, #8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003810:	2b00      	cmp	r3, #0
 8003812:	d04f      	beq.n	80038b4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003822:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <HAL_SPI_IRQHandler+0x168>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d034      	beq.n	80038aa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0203 	bic.w	r2, r2, #3
 800384e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	2b00      	cmp	r3, #0
 8003856:	d011      	beq.n	800387c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385c:	4a17      	ldr	r2, [pc, #92]	@ (80038bc <HAL_SPI_IRQHandler+0x1e4>)
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	4618      	mov	r0, r3
 8003866:	f7fd fca4 	bl	80011b2 <HAL_DMA_Abort_IT>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003874:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	4a0c      	ldr	r2, [pc, #48]	@ (80038bc <HAL_SPI_IRQHandler+0x1e4>)
 800388a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fc8e 	bl	80011b2 <HAL_DMA_Abort_IT>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80038a8:	e003      	b.n	80038b2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f808 	bl	80038c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80038b0:	e000      	b.n	80038b4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80038b2:	bf00      	nop
    return;
 80038b4:	bf00      	nop
  }
}
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	080038d5 	.word	0x080038d5

080038c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f7ff ffe5 	bl	80038c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003910:	f7fd fad0 	bl	8000eb4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	4413      	add	r3, r2
 800391e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003920:	f7fd fac8 	bl	8000eb4 <HAL_GetTick>
 8003924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003926:	4b39      	ldr	r3, [pc, #228]	@ (8003a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	015b      	lsls	r3, r3, #5
 800392c:	0d1b      	lsrs	r3, r3, #20
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003936:	e054      	b.n	80039e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d050      	beq.n	80039e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003940:	f7fd fab8 	bl	8000eb4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	429a      	cmp	r2, r3
 800394e:	d902      	bls.n	8003956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d13d      	bne.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800396e:	d111      	bne.n	8003994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003978:	d004      	beq.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003982:	d107      	bne.n	8003994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399c:	d10f      	bne.n	80039be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e017      	b.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3b01      	subs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	bf0c      	ite	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	2300      	movne	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d19b      	bne.n	8003938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000000 	.word	0x20000000

08003a10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	@ 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a22:	f7fd fa47 	bl	8000eb4 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4413      	add	r3, r2
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003a32:	f7fd fa3f 	bl	8000eb4 <HAL_GetTick>
 8003a36:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a40:	4b3d      	ldr	r3, [pc, #244]	@ (8003b38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00da      	lsls	r2, r3, #3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	0d1b      	lsrs	r3, r3, #20
 8003a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a58:	e060      	b.n	8003b1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a60:	d107      	bne.n	8003a72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d050      	beq.n	8003b1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a7a:	f7fd fa1b 	bl	8000eb4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d902      	bls.n	8003a90 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d13d      	bne.n	8003b0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aa8:	d111      	bne.n	8003ace <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab2:	d004      	beq.n	8003abe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003abc:	d107      	bne.n	8003ace <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003acc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad6:	d10f      	bne.n	8003af8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003af6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e010      	b.n	8003b2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d196      	bne.n	8003a5a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3728      	adds	r7, #40	@ 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000000 	.word	0x20000000

08003b3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b50:	d111      	bne.n	8003b76 <SPI_EndRxTransaction+0x3a>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b5a:	d004      	beq.n	8003b66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b64:	d107      	bne.n	8003b76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2180      	movs	r1, #128	@ 0x80
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7ff febd 	bl	8003900 <SPI_WaitFlagStateUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e023      	b.n	8003be4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ba4:	d11d      	bne.n	8003be2 <SPI_EndRxTransaction+0xa6>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bae:	d004      	beq.n	8003bba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb8:	d113      	bne.n	8003be2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff ff22 	bl	8003a10 <SPI_WaitFifoStateUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd6:	f043 0220 	orr.w	r2, r3, #32
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e000      	b.n	8003be4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff ff03 	bl	8003a10 <SPI_WaitFifoStateUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e027      	b.n	8003c70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	2180      	movs	r1, #128	@ 0x80
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff fe68 	bl	8003900 <SPI_WaitFlagStateUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e014      	b.n	8003c70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fedc 	bl	8003a10 <SPI_WaitFifoStateUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e000      	b.n	8003c70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e040      	b.n	8003d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd f80c 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	@ 0x24
 8003ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fe90 	bl	80049e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fbd5 	bl	8004474 <UART_SetConfig>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e01b      	b.n	8003d0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 ff0f 	bl	8004b28 <UART_CheckIdleState>
 8003d0a:	4603      	mov	r3, r0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d177      	bne.n	8003e1c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Transmit+0x24>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e070      	b.n	8003e1e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2221      	movs	r2, #33	@ 0x21
 8003d48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d4a:	f7fd f8b3 	bl	8000eb4 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d68:	d108      	bne.n	8003d7c <HAL_UART_Transmit+0x68>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	e003      	b.n	8003d84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d84:	e02f      	b.n	8003de6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2180      	movs	r1, #128	@ 0x80
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 ff71 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e03b      	b.n	8003e1e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	881a      	ldrh	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db8:	b292      	uxth	r2, r2
 8003dba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e007      	b.n	8003dd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1c9      	bne.n	8003d86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2140      	movs	r1, #64	@ 0x40
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 ff3b 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e005      	b.n	8003e1e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003e52:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003e56:	4013      	ands	r3, r2
 8003e58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d115      	bne.n	8003e90 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00f      	beq.n	8003e90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 82ca 	beq.w	800441a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
      }
      return;
 8003e8e:	e2c4      	b.n	800441a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8117 	beq.w	80040c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ea6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003eaa:	4b85      	ldr	r3, [pc, #532]	@ (80040c0 <HAL_UART_IRQHandler+0x298>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 810a 	beq.w	80040c8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d011      	beq.n	8003ee4 <HAL_UART_IRQHandler+0xbc>
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00b      	beq.n	8003ee4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d011      	beq.n	8003f14 <HAL_UART_IRQHandler+0xec>
 8003ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2202      	movs	r2, #2
 8003f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f0a:	f043 0204 	orr.w	r2, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d011      	beq.n	8003f44 <HAL_UART_IRQHandler+0x11c>
 8003f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2204      	movs	r2, #4
 8003f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3a:	f043 0202 	orr.w	r2, r3, #2
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d017      	beq.n	8003f80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00b      	beq.n	8003f80 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f76:	f043 0208 	orr.w	r2, r3, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d012      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x18a>
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8230 	beq.w	800441e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffa:	2b40      	cmp	r3, #64	@ 0x40
 8003ffc:	d005      	beq.n	800400a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004002:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004006:	2b00      	cmp	r3, #0
 8004008:	d04f      	beq.n	80040aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fea1 	bl	8004d52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401a:	2b40      	cmp	r3, #64	@ 0x40
 800401c:	d141      	bne.n	80040a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800403c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800404a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800404e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1d9      	bne.n	800401e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406e:	2b00      	cmp	r3, #0
 8004070:	d013      	beq.n	800409a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004076:	4a13      	ldr	r2, [pc, #76]	@ (80040c4 <HAL_UART_IRQHandler+0x29c>)
 8004078:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd f897 	bl	80011b2 <HAL_DMA_Abort_IT>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004094:	4610      	mov	r0, r2
 8004096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e00f      	b.n	80040ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9d4 	bl	8004448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e00b      	b.n	80040ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9d0 	bl	8004448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	e007      	b.n	80040ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9cc 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80040b8:	e1b1      	b.n	800441e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ba:	bf00      	nop
    return;
 80040bc:	e1af      	b.n	800441e <HAL_UART_IRQHandler+0x5f6>
 80040be:	bf00      	nop
 80040c0:	04000120 	.word	0x04000120
 80040c4:	08004e1b 	.word	0x08004e1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	f040 816a 	bne.w	80043a6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8163 	beq.w	80043a6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 815c 	beq.w	80043a6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2210      	movs	r2, #16
 80040f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b40      	cmp	r3, #64	@ 0x40
 8004102:	f040 80d4 	bne.w	80042ae <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004112:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80ad 	beq.w	8004276 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004126:	429a      	cmp	r2, r3
 8004128:	f080 80a5 	bcs.w	8004276 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004132:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 8086 	bne.w	8004254 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800415c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004172:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004176:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800417e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800418a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1da      	bne.n	8004148 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3308      	adds	r3, #8
 8004198:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3308      	adds	r3, #8
 80041b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e1      	bne.n	8004192 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3308      	adds	r3, #8
 80041d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e3      	bne.n	80041ce <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004236:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004238:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800423c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e4      	bne.n	8004214 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc ff71 	bl	8001136 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004266:	b29b      	uxth	r3, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	b29b      	uxth	r3, r3
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8f4 	bl	800445c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004274:	e0d5      	b.n	8004422 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800427c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004280:	429a      	cmp	r2, r3
 8004282:	f040 80ce 	bne.w	8004422 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b20      	cmp	r3, #32
 8004294:	f040 80c5 	bne.w	8004422 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8d8 	bl	800445c <HAL_UARTEx_RxEventCallback>
      return;
 80042ac:	e0b9      	b.n	8004422 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80ab 	beq.w	8004426 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80042d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80a6 	beq.w	8004426 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800430a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e4      	bne.n	80042da <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	623b      	str	r3, [r7, #32]
   return(result);
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3308      	adds	r3, #8
 8004330:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004334:	633a      	str	r2, [r7, #48]	@ 0x30
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800433a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e3      	bne.n	8004310 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	60fb      	str	r3, [r7, #12]
   return(result);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f023 0310 	bic.w	r3, r3, #16
 8004370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	69b9      	ldr	r1, [r7, #24]
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	617b      	str	r3, [r7, #20]
   return(result);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e4      	bne.n	800435c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f85c 	bl	800445c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043a4:	e03f      	b.n	8004426 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00e      	beq.n	80043d0 <HAL_UART_IRQHandler+0x5a8>
 80043b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80043c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fd66 	bl	8004e9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043ce:	e02d      	b.n	800442c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01c      	beq.n	800442a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
    }
    return;
 80043f8:	e017      	b.n	800442a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d012      	beq.n	800442c <HAL_UART_IRQHandler+0x604>
 8004406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fd17 	bl	8004e46 <UART_EndTransmit_IT>
    return;
 8004418:	e008      	b.n	800442c <HAL_UART_IRQHandler+0x604>
      return;
 800441a:	bf00      	nop
 800441c:	e006      	b.n	800442c <HAL_UART_IRQHandler+0x604>
    return;
 800441e:	bf00      	nop
 8004420:	e004      	b.n	800442c <HAL_UART_IRQHandler+0x604>
      return;
 8004422:	bf00      	nop
 8004424:	e002      	b.n	800442c <HAL_UART_IRQHandler+0x604>
      return;
 8004426:	bf00      	nop
 8004428:	e000      	b.n	800442c <HAL_UART_IRQHandler+0x604>
    return;
 800442a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800442c:	37e8      	adds	r7, #232	@ 0xe8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop

08004434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b08a      	sub	sp, #40	@ 0x28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4ba4      	ldr	r3, [pc, #656]	@ (8004734 <UART_SetConfig+0x2c0>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a99      	ldr	r2, [pc, #612]	@ (8004738 <UART_SetConfig+0x2c4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044dc:	4313      	orrs	r3, r2
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a90      	ldr	r2, [pc, #576]	@ (800473c <UART_SetConfig+0x2c8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d126      	bne.n	800454c <UART_SetConfig+0xd8>
 80044fe:	4b90      	ldr	r3, [pc, #576]	@ (8004740 <UART_SetConfig+0x2cc>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d81b      	bhi.n	8004544 <UART_SetConfig+0xd0>
 800450c:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <UART_SetConfig+0xa0>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	08004535 	.word	0x08004535
 800451c:	0800452d 	.word	0x0800452d
 8004520:	0800453d 	.word	0x0800453d
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452a:	e116      	b.n	800475a <UART_SetConfig+0x2e6>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004532:	e112      	b.n	800475a <UART_SetConfig+0x2e6>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453a:	e10e      	b.n	800475a <UART_SetConfig+0x2e6>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e10a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e106      	b.n	800475a <UART_SetConfig+0x2e6>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a7c      	ldr	r2, [pc, #496]	@ (8004744 <UART_SetConfig+0x2d0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d138      	bne.n	80045c8 <UART_SetConfig+0x154>
 8004556:	4b7a      	ldr	r3, [pc, #488]	@ (8004740 <UART_SetConfig+0x2cc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d82d      	bhi.n	80045c0 <UART_SetConfig+0x14c>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <UART_SetConfig+0xf8>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045c1 	.word	0x080045c1
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045c1 	.word	0x080045c1
 8004584:	080045c1 	.word	0x080045c1
 8004588:	080045c1 	.word	0x080045c1
 800458c:	080045a9 	.word	0x080045a9
 8004590:	080045c1 	.word	0x080045c1
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e0d8      	b.n	800475a <UART_SetConfig+0x2e6>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e0d4      	b.n	800475a <UART_SetConfig+0x2e6>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e0d0      	b.n	800475a <UART_SetConfig+0x2e6>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e0cc      	b.n	800475a <UART_SetConfig+0x2e6>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e0c8      	b.n	800475a <UART_SetConfig+0x2e6>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004748 <UART_SetConfig+0x2d4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d125      	bne.n	800461e <UART_SetConfig+0x1aa>
 80045d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004740 <UART_SetConfig+0x2cc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045dc:	2b30      	cmp	r3, #48	@ 0x30
 80045de:	d016      	beq.n	800460e <UART_SetConfig+0x19a>
 80045e0:	2b30      	cmp	r3, #48	@ 0x30
 80045e2:	d818      	bhi.n	8004616 <UART_SetConfig+0x1a2>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d00a      	beq.n	80045fe <UART_SetConfig+0x18a>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d814      	bhi.n	8004616 <UART_SetConfig+0x1a2>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <UART_SetConfig+0x182>
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d008      	beq.n	8004606 <UART_SetConfig+0x192>
 80045f4:	e00f      	b.n	8004616 <UART_SetConfig+0x1a2>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fc:	e0ad      	b.n	800475a <UART_SetConfig+0x2e6>
 80045fe:	2302      	movs	r3, #2
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004604:	e0a9      	b.n	800475a <UART_SetConfig+0x2e6>
 8004606:	2304      	movs	r3, #4
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460c:	e0a5      	b.n	800475a <UART_SetConfig+0x2e6>
 800460e:	2308      	movs	r3, #8
 8004610:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004614:	e0a1      	b.n	800475a <UART_SetConfig+0x2e6>
 8004616:	2310      	movs	r3, #16
 8004618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461c:	e09d      	b.n	800475a <UART_SetConfig+0x2e6>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a4a      	ldr	r2, [pc, #296]	@ (800474c <UART_SetConfig+0x2d8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d125      	bne.n	8004674 <UART_SetConfig+0x200>
 8004628:	4b45      	ldr	r3, [pc, #276]	@ (8004740 <UART_SetConfig+0x2cc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004632:	2bc0      	cmp	r3, #192	@ 0xc0
 8004634:	d016      	beq.n	8004664 <UART_SetConfig+0x1f0>
 8004636:	2bc0      	cmp	r3, #192	@ 0xc0
 8004638:	d818      	bhi.n	800466c <UART_SetConfig+0x1f8>
 800463a:	2b80      	cmp	r3, #128	@ 0x80
 800463c:	d00a      	beq.n	8004654 <UART_SetConfig+0x1e0>
 800463e:	2b80      	cmp	r3, #128	@ 0x80
 8004640:	d814      	bhi.n	800466c <UART_SetConfig+0x1f8>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <UART_SetConfig+0x1d8>
 8004646:	2b40      	cmp	r3, #64	@ 0x40
 8004648:	d008      	beq.n	800465c <UART_SetConfig+0x1e8>
 800464a:	e00f      	b.n	800466c <UART_SetConfig+0x1f8>
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004652:	e082      	b.n	800475a <UART_SetConfig+0x2e6>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465a:	e07e      	b.n	800475a <UART_SetConfig+0x2e6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004662:	e07a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466a:	e076      	b.n	800475a <UART_SetConfig+0x2e6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e072      	b.n	800475a <UART_SetConfig+0x2e6>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a35      	ldr	r2, [pc, #212]	@ (8004750 <UART_SetConfig+0x2dc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d12a      	bne.n	80046d4 <UART_SetConfig+0x260>
 800467e:	4b30      	ldr	r3, [pc, #192]	@ (8004740 <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004688:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800468c:	d01a      	beq.n	80046c4 <UART_SetConfig+0x250>
 800468e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004692:	d81b      	bhi.n	80046cc <UART_SetConfig+0x258>
 8004694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004698:	d00c      	beq.n	80046b4 <UART_SetConfig+0x240>
 800469a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800469e:	d815      	bhi.n	80046cc <UART_SetConfig+0x258>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x238>
 80046a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a8:	d008      	beq.n	80046bc <UART_SetConfig+0x248>
 80046aa:	e00f      	b.n	80046cc <UART_SetConfig+0x258>
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e052      	b.n	800475a <UART_SetConfig+0x2e6>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e04e      	b.n	800475a <UART_SetConfig+0x2e6>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e04a      	b.n	800475a <UART_SetConfig+0x2e6>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e046      	b.n	800475a <UART_SetConfig+0x2e6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e042      	b.n	800475a <UART_SetConfig+0x2e6>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <UART_SetConfig+0x2c4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d13a      	bne.n	8004754 <UART_SetConfig+0x2e0>
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046ec:	d01a      	beq.n	8004724 <UART_SetConfig+0x2b0>
 80046ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046f2:	d81b      	bhi.n	800472c <UART_SetConfig+0x2b8>
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f8:	d00c      	beq.n	8004714 <UART_SetConfig+0x2a0>
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046fe:	d815      	bhi.n	800472c <UART_SetConfig+0x2b8>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <UART_SetConfig+0x298>
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004708:	d008      	beq.n	800471c <UART_SetConfig+0x2a8>
 800470a:	e00f      	b.n	800472c <UART_SetConfig+0x2b8>
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004712:	e022      	b.n	800475a <UART_SetConfig+0x2e6>
 8004714:	2302      	movs	r3, #2
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471a:	e01e      	b.n	800475a <UART_SetConfig+0x2e6>
 800471c:	2304      	movs	r3, #4
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004722:	e01a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004724:	2308      	movs	r3, #8
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e016      	b.n	800475a <UART_SetConfig+0x2e6>
 800472c:	2310      	movs	r3, #16
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004732:	e012      	b.n	800475a <UART_SetConfig+0x2e6>
 8004734:	efff69f3 	.word	0xefff69f3
 8004738:	40008000 	.word	0x40008000
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	40004c00 	.word	0x40004c00
 8004750:	40005000 	.word	0x40005000
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a9f      	ldr	r2, [pc, #636]	@ (80049dc <UART_SetConfig+0x568>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d17a      	bne.n	800485a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004764:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004768:	2b08      	cmp	r3, #8
 800476a:	d824      	bhi.n	80047b6 <UART_SetConfig+0x342>
 800476c:	a201      	add	r2, pc, #4	@ (adr r2, 8004774 <UART_SetConfig+0x300>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004799 	.word	0x08004799
 8004778:	080047b7 	.word	0x080047b7
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047b7 	.word	0x080047b7
 8004784:	080047a7 	.word	0x080047a7
 8004788:	080047b7 	.word	0x080047b7
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047b7 	.word	0x080047b7
 8004794:	080047af 	.word	0x080047af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004798:	f7fd fce6 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 800479c:	61f8      	str	r0, [r7, #28]
        break;
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a0:	4b8f      	ldr	r3, [pc, #572]	@ (80049e0 <UART_SetConfig+0x56c>)
 80047a2:	61fb      	str	r3, [r7, #28]
        break;
 80047a4:	e00d      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a6:	f7fd fc47 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 80047aa:	61f8      	str	r0, [r7, #28]
        break;
 80047ac:	e009      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	61fb      	str	r3, [r7, #28]
        break;
 80047b4:	e005      	b.n	80047c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80fb 	beq.w	80049c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d305      	bcc.n	80047e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d903      	bls.n	80047ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047ec:	e0e8      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2200      	movs	r2, #0
 80047f2:	461c      	mov	r4, r3
 80047f4:	4615      	mov	r5, r2
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	022b      	lsls	r3, r5, #8
 8004800:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004804:	0222      	lsls	r2, r4, #8
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	6849      	ldr	r1, [r1, #4]
 800480a:	0849      	lsrs	r1, r1, #1
 800480c:	2000      	movs	r0, #0
 800480e:	4688      	mov	r8, r1
 8004810:	4681      	mov	r9, r0
 8004812:	eb12 0a08 	adds.w	sl, r2, r8
 8004816:	eb43 0b09 	adc.w	fp, r3, r9
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	f7fb fd20 	bl	8000270 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4613      	mov	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800483e:	d308      	bcc.n	8004852 <UART_SetConfig+0x3de>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004846:	d204      	bcs.n	8004852 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e0b6      	b.n	80049c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004858:	e0b2      	b.n	80049c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004862:	d15e      	bne.n	8004922 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004864:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004868:	2b08      	cmp	r3, #8
 800486a:	d828      	bhi.n	80048be <UART_SetConfig+0x44a>
 800486c:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <UART_SetConfig+0x400>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	080048bf 	.word	0x080048bf
 8004884:	080048af 	.word	0x080048af
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048bf 	.word	0x080048bf
 8004890:	080048bf 	.word	0x080048bf
 8004894:	080048b7 	.word	0x080048b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7fd fc66 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 800489c:	61f8      	str	r0, [r7, #28]
        break;
 800489e:	e014      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fd fc78 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 80048a4:	61f8      	str	r0, [r7, #28]
        break;
 80048a6:	e010      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a8:	4b4d      	ldr	r3, [pc, #308]	@ (80049e0 <UART_SetConfig+0x56c>)
 80048aa:	61fb      	str	r3, [r7, #28]
        break;
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ae:	f7fd fbc3 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 80048b2:	61f8      	str	r0, [r7, #28]
        break;
 80048b4:	e009      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ba:	61fb      	str	r3, [r7, #28]
        break;
 80048bc:	e005      	b.n	80048ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d077      	beq.n	80049c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005a      	lsls	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0f      	cmp	r3, #15
 80048ea:	d916      	bls.n	800491a <UART_SetConfig+0x4a6>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f2:	d212      	bcs.n	800491a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f023 030f 	bic.w	r3, r3, #15
 80048fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	b29a      	uxth	r2, r3
 800490a:	8afb      	ldrh	r3, [r7, #22]
 800490c:	4313      	orrs	r3, r2
 800490e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	8afa      	ldrh	r2, [r7, #22]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e052      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004920:	e04e      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004922:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004926:	2b08      	cmp	r3, #8
 8004928:	d827      	bhi.n	800497a <UART_SetConfig+0x506>
 800492a:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0x4bc>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800497b 	.word	0x0800497b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fd fc08 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8004958:	61f8      	str	r0, [r7, #28]
        break;
 800495a:	e014      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fd fc1a 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8004960:	61f8      	str	r0, [r7, #28]
        break;
 8004962:	e010      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <UART_SetConfig+0x56c>)
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e00d      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fd fb65 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 800496e:	61f8      	str	r0, [r7, #28]
        break;
 8004970:	e009      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004976:	61fb      	str	r3, [r7, #28]
        break;
 8004978:	e005      	b.n	8004986 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004984:	bf00      	nop
    }

    if (pclk != 0U)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d019      	beq.n	80049c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	085a      	lsrs	r2, r3, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	d909      	bls.n	80049ba <UART_SetConfig+0x546>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ac:	d205      	bcs.n	80049ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
 80049b8:	e002      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3728      	adds	r7, #40	@ 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	40008000 	.word	0x40008000
 80049e0:	00f42400 	.word	0x00f42400

080049e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01a      	beq.n	8004afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ae2:	d10a      	bne.n	8004afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b098      	sub	sp, #96	@ 0x60
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b38:	f7fc f9bc 	bl	8000eb4 <HAL_GetTick>
 8004b3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d12e      	bne.n	8004baa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f88c 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d021      	beq.n	8004baa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e6      	bne.n	8004b66 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e062      	b.n	8004c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d149      	bne.n	8004c4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f856 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d03c      	beq.n	8004c4c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	623b      	str	r3, [r7, #32]
   return(result);
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	69b9      	ldr	r1, [r7, #24]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	617b      	str	r3, [r7, #20]
   return(result);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e5      	bne.n	8004c04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e011      	b.n	8004c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3758      	adds	r7, #88	@ 0x58
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c88:	e04f      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d04b      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fc f90f 	bl	8000eb4 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e04e      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d037      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b80      	cmp	r3, #128	@ 0x80
 8004cbe:	d034      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b40      	cmp	r3, #64	@ 0x40
 8004cc4:	d031      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d110      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f838 	bl	8004d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e029      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d04:	d111      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f81e 	bl	8004d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e00f      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d0a0      	beq.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b095      	sub	sp, #84	@ 0x54
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d118      	bne.n	8004dfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 0310 	bic.w	r3, r3, #16
 8004ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	613b      	str	r3, [r7, #16]
   return(result);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e6      	bne.n	8004dc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e0e:	bf00      	nop
 8004e10:	3754      	adds	r7, #84	@ 0x54
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f7ff fb05 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b088      	sub	sp, #32
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6979      	ldr	r1, [r7, #20]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e6      	bne.n	8004e4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fad1 	bl	8004434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e92:	bf00      	nop
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6892      	ldr	r2, [r2, #8]
 8004f0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6852      	ldr	r2, [r2, #4]
 8004f16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d103      	bne.n	8004f2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f56:	4b4f      	ldr	r3, [pc, #316]	@ (8005094 <xTaskIncrementTick+0x148>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 808f 	bne.w	800507e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f60:	4b4d      	ldr	r3, [pc, #308]	@ (8005098 <xTaskIncrementTick+0x14c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f68:	4a4b      	ldr	r2, [pc, #300]	@ (8005098 <xTaskIncrementTick+0x14c>)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d121      	bne.n	8004fb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f74:	4b49      	ldr	r3, [pc, #292]	@ (800509c <xTaskIncrementTick+0x150>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <xTaskIncrementTick+0x46>
 8004f96:	4b41      	ldr	r3, [pc, #260]	@ (800509c <xTaskIncrementTick+0x150>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	4b40      	ldr	r3, [pc, #256]	@ (80050a0 <xTaskIncrementTick+0x154>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a3e      	ldr	r2, [pc, #248]	@ (800509c <xTaskIncrementTick+0x150>)
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80050a0 <xTaskIncrementTick+0x154>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	4b3e      	ldr	r3, [pc, #248]	@ (80050a4 <xTaskIncrementTick+0x158>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80050a4 <xTaskIncrementTick+0x158>)
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	f000 f8e0 	bl	8005178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80050a8 <xTaskIncrementTick+0x15c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d348      	bcc.n	8005054 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fc2:	4b36      	ldr	r3, [pc, #216]	@ (800509c <xTaskIncrementTick+0x150>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fcc:	4b36      	ldr	r3, [pc, #216]	@ (80050a8 <xTaskIncrementTick+0x15c>)
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd2:	601a      	str	r2, [r3, #0]
					break;
 8004fd4:	e03e      	b.n	8005054 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd6:	4b31      	ldr	r3, [pc, #196]	@ (800509c <xTaskIncrementTick+0x150>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d203      	bcs.n	8004ff6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fee:	4a2e      	ldr	r2, [pc, #184]	@ (80050a8 <xTaskIncrementTick+0x15c>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ff4:	e02e      	b.n	8005054 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff ff7b 	bl	8004ef6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	3318      	adds	r3, #24
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff ff72 	bl	8004ef6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005016:	2201      	movs	r2, #1
 8005018:	409a      	lsls	r2, r3
 800501a:	4b24      	ldr	r3, [pc, #144]	@ (80050ac <xTaskIncrementTick+0x160>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	4a22      	ldr	r2, [pc, #136]	@ (80050ac <xTaskIncrementTick+0x160>)
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4a1f      	ldr	r2, [pc, #124]	@ (80050b0 <xTaskIncrementTick+0x164>)
 8005032:	441a      	add	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7ff ff37 	bl	8004eae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005044:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <xTaskIncrementTick+0x168>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	429a      	cmp	r2, r3
 800504c:	d3b9      	bcc.n	8004fc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800504e:	2301      	movs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005052:	e7b6      	b.n	8004fc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005054:	4b17      	ldr	r3, [pc, #92]	@ (80050b4 <xTaskIncrementTick+0x168>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505a:	4915      	ldr	r1, [pc, #84]	@ (80050b0 <xTaskIncrementTick+0x164>)
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d901      	bls.n	8005070 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005070:	4b11      	ldr	r3, [pc, #68]	@ (80050b8 <xTaskIncrementTick+0x16c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e004      	b.n	8005088 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800507e:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <xTaskIncrementTick+0x170>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a0d      	ldr	r2, [pc, #52]	@ (80050bc <xTaskIncrementTick+0x170>)
 8005086:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005088:	697b      	ldr	r3, [r7, #20]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	2000022c 	.word	0x2000022c
 8005098:	20000210 	.word	0x20000210
 800509c:	20000208 	.word	0x20000208
 80050a0:	2000020c 	.word	0x2000020c
 80050a4:	20000224 	.word	0x20000224
 80050a8:	20000228 	.word	0x20000228
 80050ac:	20000214 	.word	0x20000214
 80050b0:	2000017c 	.word	0x2000017c
 80050b4:	20000178 	.word	0x20000178
 80050b8:	20000220 	.word	0x20000220
 80050bc:	2000021c 	.word	0x2000021c

080050c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050c6:	4b27      	ldr	r3, [pc, #156]	@ (8005164 <vTaskSwitchContext+0xa4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050ce:	4b26      	ldr	r3, [pc, #152]	@ (8005168 <vTaskSwitchContext+0xa8>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050d4:	e040      	b.n	8005158 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80050d6:	4b24      	ldr	r3, [pc, #144]	@ (8005168 <vTaskSwitchContext+0xa8>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050dc:	4b23      	ldr	r3, [pc, #140]	@ (800516c <vTaskSwitchContext+0xac>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	fab3 f383 	clz	r3, r3
 80050e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80050ea:	7afb      	ldrb	r3, [r7, #11]
 80050ec:	f1c3 031f 	rsb	r3, r3, #31
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	491f      	ldr	r1, [pc, #124]	@ (8005170 <vTaskSwitchContext+0xb0>)
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	607b      	str	r3, [r7, #4]
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <vTaskSwitchContext+0x5a>
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4a11      	ldr	r2, [pc, #68]	@ (8005170 <vTaskSwitchContext+0xb0>)
 800512a:	4413      	add	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3308      	adds	r3, #8
 8005140:	429a      	cmp	r2, r3
 8005142:	d104      	bne.n	800514e <vTaskSwitchContext+0x8e>
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a07      	ldr	r2, [pc, #28]	@ (8005174 <vTaskSwitchContext+0xb4>)
 8005156:	6013      	str	r3, [r2, #0]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	2000022c 	.word	0x2000022c
 8005168:	20000220 	.word	0x20000220
 800516c:	20000214 	.word	0x20000214
 8005170:	2000017c 	.word	0x2000017c
 8005174:	20000178 	.word	0x20000178

08005178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800517e:	4b0c      	ldr	r3, [pc, #48]	@ (80051b0 <prvResetNextTaskUnblockTime+0x38>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005188:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <prvResetNextTaskUnblockTime+0x3c>)
 800518a:	f04f 32ff 	mov.w	r2, #4294967295
 800518e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005190:	e008      	b.n	80051a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005192:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <prvResetNextTaskUnblockTime+0x38>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	4a04      	ldr	r2, [pc, #16]	@ (80051b4 <prvResetNextTaskUnblockTime+0x3c>)
 80051a2:	6013      	str	r3, [r2, #0]
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	20000208 	.word	0x20000208
 80051b4:	20000228 	.word	0x20000228

080051b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051be:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <xTaskGetSchedulerState+0x34>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051c6:	2301      	movs	r3, #1
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	e008      	b.n	80051de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051cc:	4b08      	ldr	r3, [pc, #32]	@ (80051f0 <xTaskGetSchedulerState+0x38>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051d4:	2302      	movs	r3, #2
 80051d6:	607b      	str	r3, [r7, #4]
 80051d8:	e001      	b.n	80051de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051da:	2300      	movs	r3, #0
 80051dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051de:	687b      	ldr	r3, [r7, #4]
	}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	20000218 	.word	0x20000218
 80051f0:	2000022c 	.word	0x2000022c
	...

08005200 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005200:	4b07      	ldr	r3, [pc, #28]	@ (8005220 <pxCurrentTCBConst2>)
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	6808      	ldr	r0, [r1, #0]
 8005206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	f380 8809 	msr	PSP, r0
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8811 	msr	BASEPRI, r0
 800521a:	4770      	bx	lr
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst2>:
 8005220:	20000178 	.word	0x20000178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
	...

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b15      	ldr	r3, [pc, #84]	@ (8005290 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f01e 0f10 	tst.w	lr, #16
 8005240:	bf08      	it	eq
 8005242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	6010      	str	r0, [r2, #0]
 800524c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005254:	f380 8811 	msr	BASEPRI, r0
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f7ff ff2e 	bl	80050c0 <vTaskSwitchContext>
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f380 8811 	msr	BASEPRI, r0
 800526c:	bc09      	pop	{r0, r3}
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	6808      	ldr	r0, [r1, #0]
 8005272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005276:	f01e 0f10 	tst.w	lr, #16
 800527a:	bf08      	it	eq
 800527c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005280:	f380 8809 	msr	PSP, r0
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	f3af 8000 	nop.w

08005290 <pxCurrentTCBConst>:
 8005290:	20000178 	.word	0x20000178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
}
 80052b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052b2:	f7ff fe4b 	bl	8004f4c <xTaskIncrementTick>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052bc:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <xPortSysTickHandler+0x40>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <std>:
 80052dc:	2300      	movs	r3, #0
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	e9c0 3300 	strd	r3, r3, [r0]
 80052e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ea:	6083      	str	r3, [r0, #8]
 80052ec:	8181      	strh	r1, [r0, #12]
 80052ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80052f0:	81c2      	strh	r2, [r0, #14]
 80052f2:	6183      	str	r3, [r0, #24]
 80052f4:	4619      	mov	r1, r3
 80052f6:	2208      	movs	r2, #8
 80052f8:	305c      	adds	r0, #92	@ 0x5c
 80052fa:	f000 f9f9 	bl	80056f0 <memset>
 80052fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <std+0x58>)
 8005300:	6263      	str	r3, [r4, #36]	@ 0x24
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <std+0x5c>)
 8005304:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <std+0x60>)
 8005308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <std+0x64>)
 800530c:	6323      	str	r3, [r4, #48]	@ 0x30
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <std+0x68>)
 8005310:	6224      	str	r4, [r4, #32]
 8005312:	429c      	cmp	r4, r3
 8005314:	d006      	beq.n	8005324 <std+0x48>
 8005316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800531a:	4294      	cmp	r4, r2
 800531c:	d002      	beq.n	8005324 <std+0x48>
 800531e:	33d0      	adds	r3, #208	@ 0xd0
 8005320:	429c      	cmp	r4, r3
 8005322:	d105      	bne.n	8005330 <std+0x54>
 8005324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532c:	f000 ba58 	b.w	80057e0 <__retarget_lock_init_recursive>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	08005541 	.word	0x08005541
 8005338:	08005563 	.word	0x08005563
 800533c:	0800559b 	.word	0x0800559b
 8005340:	080055bf 	.word	0x080055bf
 8005344:	20000230 	.word	0x20000230

08005348 <stdio_exit_handler>:
 8005348:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <stdio_exit_handler+0xc>)
 800534a:	4903      	ldr	r1, [pc, #12]	@ (8005358 <stdio_exit_handler+0x10>)
 800534c:	4803      	ldr	r0, [pc, #12]	@ (800535c <stdio_exit_handler+0x14>)
 800534e:	f000 b869 	b.w	8005424 <_fwalk_sglue>
 8005352:	bf00      	nop
 8005354:	2000000c 	.word	0x2000000c
 8005358:	08006081 	.word	0x08006081
 800535c:	2000001c 	.word	0x2000001c

08005360 <cleanup_stdio>:
 8005360:	6841      	ldr	r1, [r0, #4]
 8005362:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <cleanup_stdio+0x34>)
 8005364:	4299      	cmp	r1, r3
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	d001      	beq.n	8005370 <cleanup_stdio+0x10>
 800536c:	f000 fe88 	bl	8006080 <_fflush_r>
 8005370:	68a1      	ldr	r1, [r4, #8]
 8005372:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <cleanup_stdio+0x38>)
 8005374:	4299      	cmp	r1, r3
 8005376:	d002      	beq.n	800537e <cleanup_stdio+0x1e>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 fe81 	bl	8006080 <_fflush_r>
 800537e:	68e1      	ldr	r1, [r4, #12]
 8005380:	4b06      	ldr	r3, [pc, #24]	@ (800539c <cleanup_stdio+0x3c>)
 8005382:	4299      	cmp	r1, r3
 8005384:	d004      	beq.n	8005390 <cleanup_stdio+0x30>
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	f000 be78 	b.w	8006080 <_fflush_r>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	bf00      	nop
 8005394:	20000230 	.word	0x20000230
 8005398:	20000298 	.word	0x20000298
 800539c:	20000300 	.word	0x20000300

080053a0 <global_stdio_init.part.0>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <global_stdio_init.part.0+0x30>)
 80053a4:	4c0b      	ldr	r4, [pc, #44]	@ (80053d4 <global_stdio_init.part.0+0x34>)
 80053a6:	4a0c      	ldr	r2, [pc, #48]	@ (80053d8 <global_stdio_init.part.0+0x38>)
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	2200      	movs	r2, #0
 80053ae:	2104      	movs	r1, #4
 80053b0:	f7ff ff94 	bl	80052dc <std>
 80053b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053b8:	2201      	movs	r2, #1
 80053ba:	2109      	movs	r1, #9
 80053bc:	f7ff ff8e 	bl	80052dc <std>
 80053c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053c4:	2202      	movs	r2, #2
 80053c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ca:	2112      	movs	r1, #18
 80053cc:	f7ff bf86 	b.w	80052dc <std>
 80053d0:	20000368 	.word	0x20000368
 80053d4:	20000230 	.word	0x20000230
 80053d8:	08005349 	.word	0x08005349

080053dc <__sfp_lock_acquire>:
 80053dc:	4801      	ldr	r0, [pc, #4]	@ (80053e4 <__sfp_lock_acquire+0x8>)
 80053de:	f000 ba00 	b.w	80057e2 <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	20000371 	.word	0x20000371

080053e8 <__sfp_lock_release>:
 80053e8:	4801      	ldr	r0, [pc, #4]	@ (80053f0 <__sfp_lock_release+0x8>)
 80053ea:	f000 b9fb 	b.w	80057e4 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	20000371 	.word	0x20000371

080053f4 <__sinit>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4604      	mov	r4, r0
 80053f8:	f7ff fff0 	bl	80053dc <__sfp_lock_acquire>
 80053fc:	6a23      	ldr	r3, [r4, #32]
 80053fe:	b11b      	cbz	r3, 8005408 <__sinit+0x14>
 8005400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005404:	f7ff bff0 	b.w	80053e8 <__sfp_lock_release>
 8005408:	4b04      	ldr	r3, [pc, #16]	@ (800541c <__sinit+0x28>)
 800540a:	6223      	str	r3, [r4, #32]
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__sinit+0x2c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f5      	bne.n	8005400 <__sinit+0xc>
 8005414:	f7ff ffc4 	bl	80053a0 <global_stdio_init.part.0>
 8005418:	e7f2      	b.n	8005400 <__sinit+0xc>
 800541a:	bf00      	nop
 800541c:	08005361 	.word	0x08005361
 8005420:	20000368 	.word	0x20000368

08005424 <_fwalk_sglue>:
 8005424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005428:	4607      	mov	r7, r0
 800542a:	4688      	mov	r8, r1
 800542c:	4614      	mov	r4, r2
 800542e:	2600      	movs	r6, #0
 8005430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005434:	f1b9 0901 	subs.w	r9, r9, #1
 8005438:	d505      	bpl.n	8005446 <_fwalk_sglue+0x22>
 800543a:	6824      	ldr	r4, [r4, #0]
 800543c:	2c00      	cmp	r4, #0
 800543e:	d1f7      	bne.n	8005430 <_fwalk_sglue+0xc>
 8005440:	4630      	mov	r0, r6
 8005442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d907      	bls.n	800545c <_fwalk_sglue+0x38>
 800544c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005450:	3301      	adds	r3, #1
 8005452:	d003      	beq.n	800545c <_fwalk_sglue+0x38>
 8005454:	4629      	mov	r1, r5
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	4306      	orrs	r6, r0
 800545c:	3568      	adds	r5, #104	@ 0x68
 800545e:	e7e9      	b.n	8005434 <_fwalk_sglue+0x10>

08005460 <iprintf>:
 8005460:	b40f      	push	{r0, r1, r2, r3}
 8005462:	b507      	push	{r0, r1, r2, lr}
 8005464:	4906      	ldr	r1, [pc, #24]	@ (8005480 <iprintf+0x20>)
 8005466:	ab04      	add	r3, sp, #16
 8005468:	6808      	ldr	r0, [r1, #0]
 800546a:	f853 2b04 	ldr.w	r2, [r3], #4
 800546e:	6881      	ldr	r1, [r0, #8]
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	f000 fadb 	bl	8005a2c <_vfiprintf_r>
 8005476:	b003      	add	sp, #12
 8005478:	f85d eb04 	ldr.w	lr, [sp], #4
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	20000018 	.word	0x20000018

08005484 <_puts_r>:
 8005484:	6a03      	ldr	r3, [r0, #32]
 8005486:	b570      	push	{r4, r5, r6, lr}
 8005488:	6884      	ldr	r4, [r0, #8]
 800548a:	4605      	mov	r5, r0
 800548c:	460e      	mov	r6, r1
 800548e:	b90b      	cbnz	r3, 8005494 <_puts_r+0x10>
 8005490:	f7ff ffb0 	bl	80053f4 <__sinit>
 8005494:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005496:	07db      	lsls	r3, r3, #31
 8005498:	d405      	bmi.n	80054a6 <_puts_r+0x22>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	0598      	lsls	r0, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_puts_r+0x22>
 80054a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a2:	f000 f99e 	bl	80057e2 <__retarget_lock_acquire_recursive>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	0719      	lsls	r1, r3, #28
 80054aa:	d502      	bpl.n	80054b2 <_puts_r+0x2e>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d135      	bne.n	800551e <_puts_r+0x9a>
 80054b2:	4621      	mov	r1, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 f8c5 	bl	8005644 <__swsetup_r>
 80054ba:	b380      	cbz	r0, 800551e <_puts_r+0x9a>
 80054bc:	f04f 35ff 	mov.w	r5, #4294967295
 80054c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054c2:	07da      	lsls	r2, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_puts_r+0x4e>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	059b      	lsls	r3, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_puts_r+0x4e>
 80054cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ce:	f000 f989 	bl	80057e4 <__retarget_lock_release_recursive>
 80054d2:	4628      	mov	r0, r5
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da04      	bge.n	80054e4 <_puts_r+0x60>
 80054da:	69a2      	ldr	r2, [r4, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	dc17      	bgt.n	8005510 <_puts_r+0x8c>
 80054e0:	290a      	cmp	r1, #10
 80054e2:	d015      	beq.n	8005510 <_puts_r+0x8c>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	7019      	strb	r1, [r3, #0]
 80054ec:	68a3      	ldr	r3, [r4, #8]
 80054ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054f2:	3b01      	subs	r3, #1
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d1ed      	bne.n	80054d6 <_puts_r+0x52>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	da11      	bge.n	8005522 <_puts_r+0x9e>
 80054fe:	4622      	mov	r2, r4
 8005500:	210a      	movs	r1, #10
 8005502:	4628      	mov	r0, r5
 8005504:	f000 f85f 	bl	80055c6 <__swbuf_r>
 8005508:	3001      	adds	r0, #1
 800550a:	d0d7      	beq.n	80054bc <_puts_r+0x38>
 800550c:	250a      	movs	r5, #10
 800550e:	e7d7      	b.n	80054c0 <_puts_r+0x3c>
 8005510:	4622      	mov	r2, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f857 	bl	80055c6 <__swbuf_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d1e7      	bne.n	80054ec <_puts_r+0x68>
 800551c:	e7ce      	b.n	80054bc <_puts_r+0x38>
 800551e:	3e01      	subs	r6, #1
 8005520:	e7e4      	b.n	80054ec <_puts_r+0x68>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	220a      	movs	r2, #10
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e7ee      	b.n	800550c <_puts_r+0x88>
	...

08005530 <puts>:
 8005530:	4b02      	ldr	r3, [pc, #8]	@ (800553c <puts+0xc>)
 8005532:	4601      	mov	r1, r0
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f7ff bfa5 	b.w	8005484 <_puts_r>
 800553a:	bf00      	nop
 800553c:	20000018 	.word	0x20000018

08005540 <__sread>:
 8005540:	b510      	push	{r4, lr}
 8005542:	460c      	mov	r4, r1
 8005544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005548:	f000 f8fc 	bl	8005744 <_read_r>
 800554c:	2800      	cmp	r0, #0
 800554e:	bfab      	itete	ge
 8005550:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005552:	89a3      	ldrhlt	r3, [r4, #12]
 8005554:	181b      	addge	r3, r3, r0
 8005556:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800555a:	bfac      	ite	ge
 800555c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800555e:	81a3      	strhlt	r3, [r4, #12]
 8005560:	bd10      	pop	{r4, pc}

08005562 <__swrite>:
 8005562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005566:	461f      	mov	r7, r3
 8005568:	898b      	ldrh	r3, [r1, #12]
 800556a:	05db      	lsls	r3, r3, #23
 800556c:	4605      	mov	r5, r0
 800556e:	460c      	mov	r4, r1
 8005570:	4616      	mov	r6, r2
 8005572:	d505      	bpl.n	8005580 <__swrite+0x1e>
 8005574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005578:	2302      	movs	r3, #2
 800557a:	2200      	movs	r2, #0
 800557c:	f000 f8d0 	bl	8005720 <_lseek_r>
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	4632      	mov	r2, r6
 800558e:	463b      	mov	r3, r7
 8005590:	4628      	mov	r0, r5
 8005592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005596:	f000 b8e7 	b.w	8005768 <_write_r>

0800559a <__sseek>:
 800559a:	b510      	push	{r4, lr}
 800559c:	460c      	mov	r4, r1
 800559e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a2:	f000 f8bd 	bl	8005720 <_lseek_r>
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	bf15      	itete	ne
 80055ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055b6:	81a3      	strheq	r3, [r4, #12]
 80055b8:	bf18      	it	ne
 80055ba:	81a3      	strhne	r3, [r4, #12]
 80055bc:	bd10      	pop	{r4, pc}

080055be <__sclose>:
 80055be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c2:	f000 b89d 	b.w	8005700 <_close_r>

080055c6 <__swbuf_r>:
 80055c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c8:	460e      	mov	r6, r1
 80055ca:	4614      	mov	r4, r2
 80055cc:	4605      	mov	r5, r0
 80055ce:	b118      	cbz	r0, 80055d8 <__swbuf_r+0x12>
 80055d0:	6a03      	ldr	r3, [r0, #32]
 80055d2:	b90b      	cbnz	r3, 80055d8 <__swbuf_r+0x12>
 80055d4:	f7ff ff0e 	bl	80053f4 <__sinit>
 80055d8:	69a3      	ldr	r3, [r4, #24]
 80055da:	60a3      	str	r3, [r4, #8]
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	071a      	lsls	r2, r3, #28
 80055e0:	d501      	bpl.n	80055e6 <__swbuf_r+0x20>
 80055e2:	6923      	ldr	r3, [r4, #16]
 80055e4:	b943      	cbnz	r3, 80055f8 <__swbuf_r+0x32>
 80055e6:	4621      	mov	r1, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	f000 f82b 	bl	8005644 <__swsetup_r>
 80055ee:	b118      	cbz	r0, 80055f8 <__swbuf_r+0x32>
 80055f0:	f04f 37ff 	mov.w	r7, #4294967295
 80055f4:	4638      	mov	r0, r7
 80055f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	6922      	ldr	r2, [r4, #16]
 80055fc:	1a98      	subs	r0, r3, r2
 80055fe:	6963      	ldr	r3, [r4, #20]
 8005600:	b2f6      	uxtb	r6, r6
 8005602:	4283      	cmp	r3, r0
 8005604:	4637      	mov	r7, r6
 8005606:	dc05      	bgt.n	8005614 <__swbuf_r+0x4e>
 8005608:	4621      	mov	r1, r4
 800560a:	4628      	mov	r0, r5
 800560c:	f000 fd38 	bl	8006080 <_fflush_r>
 8005610:	2800      	cmp	r0, #0
 8005612:	d1ed      	bne.n	80055f0 <__swbuf_r+0x2a>
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	3b01      	subs	r3, #1
 8005618:	60a3      	str	r3, [r4, #8]
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	6022      	str	r2, [r4, #0]
 8005620:	701e      	strb	r6, [r3, #0]
 8005622:	6962      	ldr	r2, [r4, #20]
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	429a      	cmp	r2, r3
 8005628:	d004      	beq.n	8005634 <__swbuf_r+0x6e>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	07db      	lsls	r3, r3, #31
 800562e:	d5e1      	bpl.n	80055f4 <__swbuf_r+0x2e>
 8005630:	2e0a      	cmp	r6, #10
 8005632:	d1df      	bne.n	80055f4 <__swbuf_r+0x2e>
 8005634:	4621      	mov	r1, r4
 8005636:	4628      	mov	r0, r5
 8005638:	f000 fd22 	bl	8006080 <_fflush_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	d0d9      	beq.n	80055f4 <__swbuf_r+0x2e>
 8005640:	e7d6      	b.n	80055f0 <__swbuf_r+0x2a>
	...

08005644 <__swsetup_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4b29      	ldr	r3, [pc, #164]	@ (80056ec <__swsetup_r+0xa8>)
 8005648:	4605      	mov	r5, r0
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	460c      	mov	r4, r1
 800564e:	b118      	cbz	r0, 8005658 <__swsetup_r+0x14>
 8005650:	6a03      	ldr	r3, [r0, #32]
 8005652:	b90b      	cbnz	r3, 8005658 <__swsetup_r+0x14>
 8005654:	f7ff fece 	bl	80053f4 <__sinit>
 8005658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800565c:	0719      	lsls	r1, r3, #28
 800565e:	d422      	bmi.n	80056a6 <__swsetup_r+0x62>
 8005660:	06da      	lsls	r2, r3, #27
 8005662:	d407      	bmi.n	8005674 <__swsetup_r+0x30>
 8005664:	2209      	movs	r2, #9
 8005666:	602a      	str	r2, [r5, #0]
 8005668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	f04f 30ff 	mov.w	r0, #4294967295
 8005672:	e033      	b.n	80056dc <__swsetup_r+0x98>
 8005674:	0758      	lsls	r0, r3, #29
 8005676:	d512      	bpl.n	800569e <__swsetup_r+0x5a>
 8005678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800567a:	b141      	cbz	r1, 800568e <__swsetup_r+0x4a>
 800567c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005680:	4299      	cmp	r1, r3
 8005682:	d002      	beq.n	800568a <__swsetup_r+0x46>
 8005684:	4628      	mov	r0, r5
 8005686:	f000 f8af 	bl	80057e8 <_free_r>
 800568a:	2300      	movs	r3, #0
 800568c:	6363      	str	r3, [r4, #52]	@ 0x34
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	2300      	movs	r3, #0
 8005698:	6063      	str	r3, [r4, #4]
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	f043 0308 	orr.w	r3, r3, #8
 80056a4:	81a3      	strh	r3, [r4, #12]
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	b94b      	cbnz	r3, 80056be <__swsetup_r+0x7a>
 80056aa:	89a3      	ldrh	r3, [r4, #12]
 80056ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056b4:	d003      	beq.n	80056be <__swsetup_r+0x7a>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 fd2f 	bl	800611c <__smakebuf_r>
 80056be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c2:	f013 0201 	ands.w	r2, r3, #1
 80056c6:	d00a      	beq.n	80056de <__swsetup_r+0x9a>
 80056c8:	2200      	movs	r2, #0
 80056ca:	60a2      	str	r2, [r4, #8]
 80056cc:	6962      	ldr	r2, [r4, #20]
 80056ce:	4252      	negs	r2, r2
 80056d0:	61a2      	str	r2, [r4, #24]
 80056d2:	6922      	ldr	r2, [r4, #16]
 80056d4:	b942      	cbnz	r2, 80056e8 <__swsetup_r+0xa4>
 80056d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80056da:	d1c5      	bne.n	8005668 <__swsetup_r+0x24>
 80056dc:	bd38      	pop	{r3, r4, r5, pc}
 80056de:	0799      	lsls	r1, r3, #30
 80056e0:	bf58      	it	pl
 80056e2:	6962      	ldrpl	r2, [r4, #20]
 80056e4:	60a2      	str	r2, [r4, #8]
 80056e6:	e7f4      	b.n	80056d2 <__swsetup_r+0x8e>
 80056e8:	2000      	movs	r0, #0
 80056ea:	e7f7      	b.n	80056dc <__swsetup_r+0x98>
 80056ec:	20000018 	.word	0x20000018

080056f0 <memset>:
 80056f0:	4402      	add	r2, r0
 80056f2:	4603      	mov	r3, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <_close_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d06      	ldr	r5, [pc, #24]	@ (800571c <_close_r+0x1c>)
 8005704:	2300      	movs	r3, #0
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	602b      	str	r3, [r5, #0]
 800570c:	f7fb fa27 	bl	8000b5e <_close>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_close_r+0x1a>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_close_r+0x1a>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	2000036c 	.word	0x2000036c

08005720 <_lseek_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4d07      	ldr	r5, [pc, #28]	@ (8005740 <_lseek_r+0x20>)
 8005724:	4604      	mov	r4, r0
 8005726:	4608      	mov	r0, r1
 8005728:	4611      	mov	r1, r2
 800572a:	2200      	movs	r2, #0
 800572c:	602a      	str	r2, [r5, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	f7fb fa3c 	bl	8000bac <_lseek>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_lseek_r+0x1e>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_lseek_r+0x1e>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	2000036c 	.word	0x2000036c

08005744 <_read_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d07      	ldr	r5, [pc, #28]	@ (8005764 <_read_r+0x20>)
 8005748:	4604      	mov	r4, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	2200      	movs	r2, #0
 8005750:	602a      	str	r2, [r5, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f7fb f9ca 	bl	8000aec <_read>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_read_r+0x1e>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_read_r+0x1e>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	2000036c 	.word	0x2000036c

08005768 <_write_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d07      	ldr	r5, [pc, #28]	@ (8005788 <_write_r+0x20>)
 800576c:	4604      	mov	r4, r0
 800576e:	4608      	mov	r0, r1
 8005770:	4611      	mov	r1, r2
 8005772:	2200      	movs	r2, #0
 8005774:	602a      	str	r2, [r5, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f7fb f9d5 	bl	8000b26 <_write>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_write_r+0x1e>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_write_r+0x1e>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	2000036c 	.word	0x2000036c

0800578c <__errno>:
 800578c:	4b01      	ldr	r3, [pc, #4]	@ (8005794 <__errno+0x8>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000018 	.word	0x20000018

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4d0d      	ldr	r5, [pc, #52]	@ (80057d0 <__libc_init_array+0x38>)
 800579c:	4c0d      	ldr	r4, [pc, #52]	@ (80057d4 <__libc_init_array+0x3c>)
 800579e:	1b64      	subs	r4, r4, r5
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	2600      	movs	r6, #0
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	4d0b      	ldr	r5, [pc, #44]	@ (80057d8 <__libc_init_array+0x40>)
 80057aa:	4c0c      	ldr	r4, [pc, #48]	@ (80057dc <__libc_init_array+0x44>)
 80057ac:	f000 fd24 	bl	80061f8 <_init>
 80057b0:	1b64      	subs	r4, r4, r5
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	2600      	movs	r6, #0
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	08006324 	.word	0x08006324
 80057d4:	08006324 	.word	0x08006324
 80057d8:	08006324 	.word	0x08006324
 80057dc:	08006328 	.word	0x08006328

080057e0 <__retarget_lock_init_recursive>:
 80057e0:	4770      	bx	lr

080057e2 <__retarget_lock_acquire_recursive>:
 80057e2:	4770      	bx	lr

080057e4 <__retarget_lock_release_recursive>:
 80057e4:	4770      	bx	lr
	...

080057e8 <_free_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4605      	mov	r5, r0
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d041      	beq.n	8005874 <_free_r+0x8c>
 80057f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f4:	1f0c      	subs	r4, r1, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfb8      	it	lt
 80057fa:	18e4      	addlt	r4, r4, r3
 80057fc:	f000 f8e0 	bl	80059c0 <__malloc_lock>
 8005800:	4a1d      	ldr	r2, [pc, #116]	@ (8005878 <_free_r+0x90>)
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	b933      	cbnz	r3, 8005814 <_free_r+0x2c>
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	6014      	str	r4, [r2, #0]
 800580a:	4628      	mov	r0, r5
 800580c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005810:	f000 b8dc 	b.w	80059cc <__malloc_unlock>
 8005814:	42a3      	cmp	r3, r4
 8005816:	d908      	bls.n	800582a <_free_r+0x42>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	1821      	adds	r1, r4, r0
 800581c:	428b      	cmp	r3, r1
 800581e:	bf01      	itttt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	1809      	addeq	r1, r1, r0
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	e7ed      	b.n	8005806 <_free_r+0x1e>
 800582a:	461a      	mov	r2, r3
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	b10b      	cbz	r3, 8005834 <_free_r+0x4c>
 8005830:	42a3      	cmp	r3, r4
 8005832:	d9fa      	bls.n	800582a <_free_r+0x42>
 8005834:	6811      	ldr	r1, [r2, #0]
 8005836:	1850      	adds	r0, r2, r1
 8005838:	42a0      	cmp	r0, r4
 800583a:	d10b      	bne.n	8005854 <_free_r+0x6c>
 800583c:	6820      	ldr	r0, [r4, #0]
 800583e:	4401      	add	r1, r0
 8005840:	1850      	adds	r0, r2, r1
 8005842:	4283      	cmp	r3, r0
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	d1e0      	bne.n	800580a <_free_r+0x22>
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6053      	str	r3, [r2, #4]
 800584e:	4408      	add	r0, r1
 8005850:	6010      	str	r0, [r2, #0]
 8005852:	e7da      	b.n	800580a <_free_r+0x22>
 8005854:	d902      	bls.n	800585c <_free_r+0x74>
 8005856:	230c      	movs	r3, #12
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	e7d6      	b.n	800580a <_free_r+0x22>
 800585c:	6820      	ldr	r0, [r4, #0]
 800585e:	1821      	adds	r1, r4, r0
 8005860:	428b      	cmp	r3, r1
 8005862:	bf04      	itt	eq
 8005864:	6819      	ldreq	r1, [r3, #0]
 8005866:	685b      	ldreq	r3, [r3, #4]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	bf04      	itt	eq
 800586c:	1809      	addeq	r1, r1, r0
 800586e:	6021      	streq	r1, [r4, #0]
 8005870:	6054      	str	r4, [r2, #4]
 8005872:	e7ca      	b.n	800580a <_free_r+0x22>
 8005874:	bd38      	pop	{r3, r4, r5, pc}
 8005876:	bf00      	nop
 8005878:	20000378 	.word	0x20000378

0800587c <sbrk_aligned>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4e0f      	ldr	r6, [pc, #60]	@ (80058bc <sbrk_aligned+0x40>)
 8005880:	460c      	mov	r4, r1
 8005882:	6831      	ldr	r1, [r6, #0]
 8005884:	4605      	mov	r5, r0
 8005886:	b911      	cbnz	r1, 800588e <sbrk_aligned+0x12>
 8005888:	f000 fca6 	bl	80061d8 <_sbrk_r>
 800588c:	6030      	str	r0, [r6, #0]
 800588e:	4621      	mov	r1, r4
 8005890:	4628      	mov	r0, r5
 8005892:	f000 fca1 	bl	80061d8 <_sbrk_r>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d103      	bne.n	80058a2 <sbrk_aligned+0x26>
 800589a:	f04f 34ff 	mov.w	r4, #4294967295
 800589e:	4620      	mov	r0, r4
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	1cc4      	adds	r4, r0, #3
 80058a4:	f024 0403 	bic.w	r4, r4, #3
 80058a8:	42a0      	cmp	r0, r4
 80058aa:	d0f8      	beq.n	800589e <sbrk_aligned+0x22>
 80058ac:	1a21      	subs	r1, r4, r0
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 fc92 	bl	80061d8 <_sbrk_r>
 80058b4:	3001      	adds	r0, #1
 80058b6:	d1f2      	bne.n	800589e <sbrk_aligned+0x22>
 80058b8:	e7ef      	b.n	800589a <sbrk_aligned+0x1e>
 80058ba:	bf00      	nop
 80058bc:	20000374 	.word	0x20000374

080058c0 <_malloc_r>:
 80058c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c4:	1ccd      	adds	r5, r1, #3
 80058c6:	f025 0503 	bic.w	r5, r5, #3
 80058ca:	3508      	adds	r5, #8
 80058cc:	2d0c      	cmp	r5, #12
 80058ce:	bf38      	it	cc
 80058d0:	250c      	movcc	r5, #12
 80058d2:	2d00      	cmp	r5, #0
 80058d4:	4606      	mov	r6, r0
 80058d6:	db01      	blt.n	80058dc <_malloc_r+0x1c>
 80058d8:	42a9      	cmp	r1, r5
 80058da:	d904      	bls.n	80058e6 <_malloc_r+0x26>
 80058dc:	230c      	movs	r3, #12
 80058de:	6033      	str	r3, [r6, #0]
 80058e0:	2000      	movs	r0, #0
 80058e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059bc <_malloc_r+0xfc>
 80058ea:	f000 f869 	bl	80059c0 <__malloc_lock>
 80058ee:	f8d8 3000 	ldr.w	r3, [r8]
 80058f2:	461c      	mov	r4, r3
 80058f4:	bb44      	cbnz	r4, 8005948 <_malloc_r+0x88>
 80058f6:	4629      	mov	r1, r5
 80058f8:	4630      	mov	r0, r6
 80058fa:	f7ff ffbf 	bl	800587c <sbrk_aligned>
 80058fe:	1c43      	adds	r3, r0, #1
 8005900:	4604      	mov	r4, r0
 8005902:	d158      	bne.n	80059b6 <_malloc_r+0xf6>
 8005904:	f8d8 4000 	ldr.w	r4, [r8]
 8005908:	4627      	mov	r7, r4
 800590a:	2f00      	cmp	r7, #0
 800590c:	d143      	bne.n	8005996 <_malloc_r+0xd6>
 800590e:	2c00      	cmp	r4, #0
 8005910:	d04b      	beq.n	80059aa <_malloc_r+0xea>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	4639      	mov	r1, r7
 8005916:	4630      	mov	r0, r6
 8005918:	eb04 0903 	add.w	r9, r4, r3
 800591c:	f000 fc5c 	bl	80061d8 <_sbrk_r>
 8005920:	4581      	cmp	r9, r0
 8005922:	d142      	bne.n	80059aa <_malloc_r+0xea>
 8005924:	6821      	ldr	r1, [r4, #0]
 8005926:	1a6d      	subs	r5, r5, r1
 8005928:	4629      	mov	r1, r5
 800592a:	4630      	mov	r0, r6
 800592c:	f7ff ffa6 	bl	800587c <sbrk_aligned>
 8005930:	3001      	adds	r0, #1
 8005932:	d03a      	beq.n	80059aa <_malloc_r+0xea>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	442b      	add	r3, r5
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	f8d8 3000 	ldr.w	r3, [r8]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	bb62      	cbnz	r2, 800599c <_malloc_r+0xdc>
 8005942:	f8c8 7000 	str.w	r7, [r8]
 8005946:	e00f      	b.n	8005968 <_malloc_r+0xa8>
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	1b52      	subs	r2, r2, r5
 800594c:	d420      	bmi.n	8005990 <_malloc_r+0xd0>
 800594e:	2a0b      	cmp	r2, #11
 8005950:	d917      	bls.n	8005982 <_malloc_r+0xc2>
 8005952:	1961      	adds	r1, r4, r5
 8005954:	42a3      	cmp	r3, r4
 8005956:	6025      	str	r5, [r4, #0]
 8005958:	bf18      	it	ne
 800595a:	6059      	strne	r1, [r3, #4]
 800595c:	6863      	ldr	r3, [r4, #4]
 800595e:	bf08      	it	eq
 8005960:	f8c8 1000 	streq.w	r1, [r8]
 8005964:	5162      	str	r2, [r4, r5]
 8005966:	604b      	str	r3, [r1, #4]
 8005968:	4630      	mov	r0, r6
 800596a:	f000 f82f 	bl	80059cc <__malloc_unlock>
 800596e:	f104 000b 	add.w	r0, r4, #11
 8005972:	1d23      	adds	r3, r4, #4
 8005974:	f020 0007 	bic.w	r0, r0, #7
 8005978:	1ac2      	subs	r2, r0, r3
 800597a:	bf1c      	itt	ne
 800597c:	1a1b      	subne	r3, r3, r0
 800597e:	50a3      	strne	r3, [r4, r2]
 8005980:	e7af      	b.n	80058e2 <_malloc_r+0x22>
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	42a3      	cmp	r3, r4
 8005986:	bf0c      	ite	eq
 8005988:	f8c8 2000 	streq.w	r2, [r8]
 800598c:	605a      	strne	r2, [r3, #4]
 800598e:	e7eb      	b.n	8005968 <_malloc_r+0xa8>
 8005990:	4623      	mov	r3, r4
 8005992:	6864      	ldr	r4, [r4, #4]
 8005994:	e7ae      	b.n	80058f4 <_malloc_r+0x34>
 8005996:	463c      	mov	r4, r7
 8005998:	687f      	ldr	r7, [r7, #4]
 800599a:	e7b6      	b.n	800590a <_malloc_r+0x4a>
 800599c:	461a      	mov	r2, r3
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d1fb      	bne.n	800599c <_malloc_r+0xdc>
 80059a4:	2300      	movs	r3, #0
 80059a6:	6053      	str	r3, [r2, #4]
 80059a8:	e7de      	b.n	8005968 <_malloc_r+0xa8>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 f80c 	bl	80059cc <__malloc_unlock>
 80059b4:	e794      	b.n	80058e0 <_malloc_r+0x20>
 80059b6:	6005      	str	r5, [r0, #0]
 80059b8:	e7d6      	b.n	8005968 <_malloc_r+0xa8>
 80059ba:	bf00      	nop
 80059bc:	20000378 	.word	0x20000378

080059c0 <__malloc_lock>:
 80059c0:	4801      	ldr	r0, [pc, #4]	@ (80059c8 <__malloc_lock+0x8>)
 80059c2:	f7ff bf0e 	b.w	80057e2 <__retarget_lock_acquire_recursive>
 80059c6:	bf00      	nop
 80059c8:	20000370 	.word	0x20000370

080059cc <__malloc_unlock>:
 80059cc:	4801      	ldr	r0, [pc, #4]	@ (80059d4 <__malloc_unlock+0x8>)
 80059ce:	f7ff bf09 	b.w	80057e4 <__retarget_lock_release_recursive>
 80059d2:	bf00      	nop
 80059d4:	20000370 	.word	0x20000370

080059d8 <__sfputc_r>:
 80059d8:	6893      	ldr	r3, [r2, #8]
 80059da:	3b01      	subs	r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	b410      	push	{r4}
 80059e0:	6093      	str	r3, [r2, #8]
 80059e2:	da08      	bge.n	80059f6 <__sfputc_r+0x1e>
 80059e4:	6994      	ldr	r4, [r2, #24]
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	db01      	blt.n	80059ee <__sfputc_r+0x16>
 80059ea:	290a      	cmp	r1, #10
 80059ec:	d103      	bne.n	80059f6 <__sfputc_r+0x1e>
 80059ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f2:	f7ff bde8 	b.w	80055c6 <__swbuf_r>
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	1c58      	adds	r0, r3, #1
 80059fa:	6010      	str	r0, [r2, #0]
 80059fc:	7019      	strb	r1, [r3, #0]
 80059fe:	4608      	mov	r0, r1
 8005a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <__sfputs_r>:
 8005a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a08:	4606      	mov	r6, r0
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	18d5      	adds	r5, r2, r3
 8005a10:	42ac      	cmp	r4, r5
 8005a12:	d101      	bne.n	8005a18 <__sfputs_r+0x12>
 8005a14:	2000      	movs	r0, #0
 8005a16:	e007      	b.n	8005a28 <__sfputs_r+0x22>
 8005a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a1c:	463a      	mov	r2, r7
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7ff ffda 	bl	80059d8 <__sfputc_r>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d1f3      	bne.n	8005a10 <__sfputs_r+0xa>
 8005a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a2c <_vfiprintf_r>:
 8005a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	460d      	mov	r5, r1
 8005a32:	b09d      	sub	sp, #116	@ 0x74
 8005a34:	4614      	mov	r4, r2
 8005a36:	4698      	mov	r8, r3
 8005a38:	4606      	mov	r6, r0
 8005a3a:	b118      	cbz	r0, 8005a44 <_vfiprintf_r+0x18>
 8005a3c:	6a03      	ldr	r3, [r0, #32]
 8005a3e:	b90b      	cbnz	r3, 8005a44 <_vfiprintf_r+0x18>
 8005a40:	f7ff fcd8 	bl	80053f4 <__sinit>
 8005a44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a46:	07d9      	lsls	r1, r3, #31
 8005a48:	d405      	bmi.n	8005a56 <_vfiprintf_r+0x2a>
 8005a4a:	89ab      	ldrh	r3, [r5, #12]
 8005a4c:	059a      	lsls	r2, r3, #22
 8005a4e:	d402      	bmi.n	8005a56 <_vfiprintf_r+0x2a>
 8005a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a52:	f7ff fec6 	bl	80057e2 <__retarget_lock_acquire_recursive>
 8005a56:	89ab      	ldrh	r3, [r5, #12]
 8005a58:	071b      	lsls	r3, r3, #28
 8005a5a:	d501      	bpl.n	8005a60 <_vfiprintf_r+0x34>
 8005a5c:	692b      	ldr	r3, [r5, #16]
 8005a5e:	b99b      	cbnz	r3, 8005a88 <_vfiprintf_r+0x5c>
 8005a60:	4629      	mov	r1, r5
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff fdee 	bl	8005644 <__swsetup_r>
 8005a68:	b170      	cbz	r0, 8005a88 <_vfiprintf_r+0x5c>
 8005a6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a6c:	07dc      	lsls	r4, r3, #31
 8005a6e:	d504      	bpl.n	8005a7a <_vfiprintf_r+0x4e>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	b01d      	add	sp, #116	@ 0x74
 8005a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	0598      	lsls	r0, r3, #22
 8005a7e:	d4f7      	bmi.n	8005a70 <_vfiprintf_r+0x44>
 8005a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a82:	f7ff feaf 	bl	80057e4 <__retarget_lock_release_recursive>
 8005a86:	e7f3      	b.n	8005a70 <_vfiprintf_r+0x44>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a96:	2330      	movs	r3, #48	@ 0x30
 8005a98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c48 <_vfiprintf_r+0x21c>
 8005a9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005aa0:	f04f 0901 	mov.w	r9, #1
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	469a      	mov	sl, r3
 8005aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aac:	b10a      	cbz	r2, 8005ab2 <_vfiprintf_r+0x86>
 8005aae:	2a25      	cmp	r2, #37	@ 0x25
 8005ab0:	d1f9      	bne.n	8005aa6 <_vfiprintf_r+0x7a>
 8005ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab6:	d00b      	beq.n	8005ad0 <_vfiprintf_r+0xa4>
 8005ab8:	465b      	mov	r3, fp
 8005aba:	4622      	mov	r2, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f7ff ffa1 	bl	8005a06 <__sfputs_r>
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	f000 80a7 	beq.w	8005c18 <_vfiprintf_r+0x1ec>
 8005aca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005acc:	445a      	add	r2, fp
 8005ace:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 809f 	beq.w	8005c18 <_vfiprintf_r+0x1ec>
 8005ada:	2300      	movs	r3, #0
 8005adc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae4:	f10a 0a01 	add.w	sl, sl, #1
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	9307      	str	r3, [sp, #28]
 8005aec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005af0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005af2:	4654      	mov	r4, sl
 8005af4:	2205      	movs	r2, #5
 8005af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afa:	4853      	ldr	r0, [pc, #332]	@ (8005c48 <_vfiprintf_r+0x21c>)
 8005afc:	f7fa fb68 	bl	80001d0 <memchr>
 8005b00:	9a04      	ldr	r2, [sp, #16]
 8005b02:	b9d8      	cbnz	r0, 8005b3c <_vfiprintf_r+0x110>
 8005b04:	06d1      	lsls	r1, r2, #27
 8005b06:	bf44      	itt	mi
 8005b08:	2320      	movmi	r3, #32
 8005b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b0e:	0713      	lsls	r3, r2, #28
 8005b10:	bf44      	itt	mi
 8005b12:	232b      	movmi	r3, #43	@ 0x2b
 8005b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b18:	f89a 3000 	ldrb.w	r3, [sl]
 8005b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1e:	d015      	beq.n	8005b4c <_vfiprintf_r+0x120>
 8005b20:	9a07      	ldr	r2, [sp, #28]
 8005b22:	4654      	mov	r4, sl
 8005b24:	2000      	movs	r0, #0
 8005b26:	f04f 0c0a 	mov.w	ip, #10
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b30:	3b30      	subs	r3, #48	@ 0x30
 8005b32:	2b09      	cmp	r3, #9
 8005b34:	d94b      	bls.n	8005bce <_vfiprintf_r+0x1a2>
 8005b36:	b1b0      	cbz	r0, 8005b66 <_vfiprintf_r+0x13a>
 8005b38:	9207      	str	r2, [sp, #28]
 8005b3a:	e014      	b.n	8005b66 <_vfiprintf_r+0x13a>
 8005b3c:	eba0 0308 	sub.w	r3, r0, r8
 8005b40:	fa09 f303 	lsl.w	r3, r9, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	9304      	str	r3, [sp, #16]
 8005b48:	46a2      	mov	sl, r4
 8005b4a:	e7d2      	b.n	8005af2 <_vfiprintf_r+0xc6>
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	1d19      	adds	r1, r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	9103      	str	r1, [sp, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bfbb      	ittet	lt
 8005b58:	425b      	neglt	r3, r3
 8005b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b5e:	9307      	strge	r3, [sp, #28]
 8005b60:	9307      	strlt	r3, [sp, #28]
 8005b62:	bfb8      	it	lt
 8005b64:	9204      	strlt	r2, [sp, #16]
 8005b66:	7823      	ldrb	r3, [r4, #0]
 8005b68:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b6a:	d10a      	bne.n	8005b82 <_vfiprintf_r+0x156>
 8005b6c:	7863      	ldrb	r3, [r4, #1]
 8005b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b70:	d132      	bne.n	8005bd8 <_vfiprintf_r+0x1ac>
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	1d1a      	adds	r2, r3, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	9203      	str	r2, [sp, #12]
 8005b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b7e:	3402      	adds	r4, #2
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c58 <_vfiprintf_r+0x22c>
 8005b86:	7821      	ldrb	r1, [r4, #0]
 8005b88:	2203      	movs	r2, #3
 8005b8a:	4650      	mov	r0, sl
 8005b8c:	f7fa fb20 	bl	80001d0 <memchr>
 8005b90:	b138      	cbz	r0, 8005ba2 <_vfiprintf_r+0x176>
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	eba0 000a 	sub.w	r0, r0, sl
 8005b98:	2240      	movs	r2, #64	@ 0x40
 8005b9a:	4082      	lsls	r2, r0
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	3401      	adds	r4, #1
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba6:	4829      	ldr	r0, [pc, #164]	@ (8005c4c <_vfiprintf_r+0x220>)
 8005ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bac:	2206      	movs	r2, #6
 8005bae:	f7fa fb0f 	bl	80001d0 <memchr>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d03f      	beq.n	8005c36 <_vfiprintf_r+0x20a>
 8005bb6:	4b26      	ldr	r3, [pc, #152]	@ (8005c50 <_vfiprintf_r+0x224>)
 8005bb8:	bb1b      	cbnz	r3, 8005c02 <_vfiprintf_r+0x1d6>
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	3307      	adds	r3, #7
 8005bbe:	f023 0307 	bic.w	r3, r3, #7
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	9303      	str	r3, [sp, #12]
 8005bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc8:	443b      	add	r3, r7
 8005bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bcc:	e76a      	b.n	8005aa4 <_vfiprintf_r+0x78>
 8005bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	e7a8      	b.n	8005b2a <_vfiprintf_r+0xfe>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	3401      	adds	r4, #1
 8005bdc:	9305      	str	r3, [sp, #20]
 8005bde:	4619      	mov	r1, r3
 8005be0:	f04f 0c0a 	mov.w	ip, #10
 8005be4:	4620      	mov	r0, r4
 8005be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bea:	3a30      	subs	r2, #48	@ 0x30
 8005bec:	2a09      	cmp	r2, #9
 8005bee:	d903      	bls.n	8005bf8 <_vfiprintf_r+0x1cc>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0c6      	beq.n	8005b82 <_vfiprintf_r+0x156>
 8005bf4:	9105      	str	r1, [sp, #20]
 8005bf6:	e7c4      	b.n	8005b82 <_vfiprintf_r+0x156>
 8005bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7f0      	b.n	8005be4 <_vfiprintf_r+0x1b8>
 8005c02:	ab03      	add	r3, sp, #12
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	462a      	mov	r2, r5
 8005c08:	4b12      	ldr	r3, [pc, #72]	@ (8005c54 <_vfiprintf_r+0x228>)
 8005c0a:	a904      	add	r1, sp, #16
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f3af 8000 	nop.w
 8005c12:	4607      	mov	r7, r0
 8005c14:	1c78      	adds	r0, r7, #1
 8005c16:	d1d6      	bne.n	8005bc6 <_vfiprintf_r+0x19a>
 8005c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c1a:	07d9      	lsls	r1, r3, #31
 8005c1c:	d405      	bmi.n	8005c2a <_vfiprintf_r+0x1fe>
 8005c1e:	89ab      	ldrh	r3, [r5, #12]
 8005c20:	059a      	lsls	r2, r3, #22
 8005c22:	d402      	bmi.n	8005c2a <_vfiprintf_r+0x1fe>
 8005c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c26:	f7ff fddd 	bl	80057e4 <__retarget_lock_release_recursive>
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	065b      	lsls	r3, r3, #25
 8005c2e:	f53f af1f 	bmi.w	8005a70 <_vfiprintf_r+0x44>
 8005c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c34:	e71e      	b.n	8005a74 <_vfiprintf_r+0x48>
 8005c36:	ab03      	add	r3, sp, #12
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <_vfiprintf_r+0x228>)
 8005c3e:	a904      	add	r1, sp, #16
 8005c40:	4630      	mov	r0, r6
 8005c42:	f000 f879 	bl	8005d38 <_printf_i>
 8005c46:	e7e4      	b.n	8005c12 <_vfiprintf_r+0x1e6>
 8005c48:	080062e8 	.word	0x080062e8
 8005c4c:	080062f2 	.word	0x080062f2
 8005c50:	00000000 	.word	0x00000000
 8005c54:	08005a07 	.word	0x08005a07
 8005c58:	080062ee 	.word	0x080062ee

08005c5c <_printf_common>:
 8005c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	4616      	mov	r6, r2
 8005c62:	4698      	mov	r8, r3
 8005c64:	688a      	ldr	r2, [r1, #8]
 8005c66:	690b      	ldr	r3, [r1, #16]
 8005c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	bfb8      	it	lt
 8005c70:	4613      	movlt	r3, r2
 8005c72:	6033      	str	r3, [r6, #0]
 8005c74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c78:	4607      	mov	r7, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b10a      	cbz	r2, 8005c82 <_printf_common+0x26>
 8005c7e:	3301      	adds	r3, #1
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	0699      	lsls	r1, r3, #26
 8005c86:	bf42      	ittt	mi
 8005c88:	6833      	ldrmi	r3, [r6, #0]
 8005c8a:	3302      	addmi	r3, #2
 8005c8c:	6033      	strmi	r3, [r6, #0]
 8005c8e:	6825      	ldr	r5, [r4, #0]
 8005c90:	f015 0506 	ands.w	r5, r5, #6
 8005c94:	d106      	bne.n	8005ca4 <_printf_common+0x48>
 8005c96:	f104 0a19 	add.w	sl, r4, #25
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	6832      	ldr	r2, [r6, #0]
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	dc26      	bgt.n	8005cf2 <_printf_common+0x96>
 8005ca4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	3b00      	subs	r3, #0
 8005cac:	bf18      	it	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	0692      	lsls	r2, r2, #26
 8005cb2:	d42b      	bmi.n	8005d0c <_printf_common+0xb0>
 8005cb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cb8:	4641      	mov	r1, r8
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c8      	blx	r9
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d01e      	beq.n	8005d00 <_printf_common+0xa4>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	6922      	ldr	r2, [r4, #16]
 8005cc6:	f003 0306 	and.w	r3, r3, #6
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	bf02      	ittt	eq
 8005cce:	68e5      	ldreq	r5, [r4, #12]
 8005cd0:	6833      	ldreq	r3, [r6, #0]
 8005cd2:	1aed      	subeq	r5, r5, r3
 8005cd4:	68a3      	ldr	r3, [r4, #8]
 8005cd6:	bf0c      	ite	eq
 8005cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cdc:	2500      	movne	r5, #0
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	bfc4      	itt	gt
 8005ce2:	1a9b      	subgt	r3, r3, r2
 8005ce4:	18ed      	addgt	r5, r5, r3
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	341a      	adds	r4, #26
 8005cea:	42b5      	cmp	r5, r6
 8005cec:	d11a      	bne.n	8005d24 <_printf_common+0xc8>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e008      	b.n	8005d04 <_printf_common+0xa8>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	47c8      	blx	r9
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d103      	bne.n	8005d08 <_printf_common+0xac>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d08:	3501      	adds	r5, #1
 8005d0a:	e7c6      	b.n	8005c9a <_printf_common+0x3e>
 8005d0c:	18e1      	adds	r1, r4, r3
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	2030      	movs	r0, #48	@ 0x30
 8005d12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d16:	4422      	add	r2, r4
 8005d18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d20:	3302      	adds	r3, #2
 8005d22:	e7c7      	b.n	8005cb4 <_printf_common+0x58>
 8005d24:	2301      	movs	r3, #1
 8005d26:	4622      	mov	r2, r4
 8005d28:	4641      	mov	r1, r8
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	47c8      	blx	r9
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d0e6      	beq.n	8005d00 <_printf_common+0xa4>
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7d9      	b.n	8005cea <_printf_common+0x8e>
	...

08005d38 <_printf_i>:
 8005d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	7e0f      	ldrb	r7, [r1, #24]
 8005d3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d40:	2f78      	cmp	r7, #120	@ 0x78
 8005d42:	4691      	mov	r9, r2
 8005d44:	4680      	mov	r8, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	469a      	mov	sl, r3
 8005d4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d4e:	d807      	bhi.n	8005d60 <_printf_i+0x28>
 8005d50:	2f62      	cmp	r7, #98	@ 0x62
 8005d52:	d80a      	bhi.n	8005d6a <_printf_i+0x32>
 8005d54:	2f00      	cmp	r7, #0
 8005d56:	f000 80d2 	beq.w	8005efe <_printf_i+0x1c6>
 8005d5a:	2f58      	cmp	r7, #88	@ 0x58
 8005d5c:	f000 80b9 	beq.w	8005ed2 <_printf_i+0x19a>
 8005d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d68:	e03a      	b.n	8005de0 <_printf_i+0xa8>
 8005d6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d6e:	2b15      	cmp	r3, #21
 8005d70:	d8f6      	bhi.n	8005d60 <_printf_i+0x28>
 8005d72:	a101      	add	r1, pc, #4	@ (adr r1, 8005d78 <_printf_i+0x40>)
 8005d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005de5 	.word	0x08005de5
 8005d80:	08005d61 	.word	0x08005d61
 8005d84:	08005d61 	.word	0x08005d61
 8005d88:	08005d61 	.word	0x08005d61
 8005d8c:	08005d61 	.word	0x08005d61
 8005d90:	08005de5 	.word	0x08005de5
 8005d94:	08005d61 	.word	0x08005d61
 8005d98:	08005d61 	.word	0x08005d61
 8005d9c:	08005d61 	.word	0x08005d61
 8005da0:	08005d61 	.word	0x08005d61
 8005da4:	08005ee5 	.word	0x08005ee5
 8005da8:	08005e0f 	.word	0x08005e0f
 8005dac:	08005e9f 	.word	0x08005e9f
 8005db0:	08005d61 	.word	0x08005d61
 8005db4:	08005d61 	.word	0x08005d61
 8005db8:	08005f07 	.word	0x08005f07
 8005dbc:	08005d61 	.word	0x08005d61
 8005dc0:	08005e0f 	.word	0x08005e0f
 8005dc4:	08005d61 	.word	0x08005d61
 8005dc8:	08005d61 	.word	0x08005d61
 8005dcc:	08005ea7 	.word	0x08005ea7
 8005dd0:	6833      	ldr	r3, [r6, #0]
 8005dd2:	1d1a      	adds	r2, r3, #4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6032      	str	r2, [r6, #0]
 8005dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ddc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005de0:	2301      	movs	r3, #1
 8005de2:	e09d      	b.n	8005f20 <_printf_i+0x1e8>
 8005de4:	6833      	ldr	r3, [r6, #0]
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	1d19      	adds	r1, r3, #4
 8005dea:	6031      	str	r1, [r6, #0]
 8005dec:	0606      	lsls	r6, r0, #24
 8005dee:	d501      	bpl.n	8005df4 <_printf_i+0xbc>
 8005df0:	681d      	ldr	r5, [r3, #0]
 8005df2:	e003      	b.n	8005dfc <_printf_i+0xc4>
 8005df4:	0645      	lsls	r5, r0, #25
 8005df6:	d5fb      	bpl.n	8005df0 <_printf_i+0xb8>
 8005df8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dfc:	2d00      	cmp	r5, #0
 8005dfe:	da03      	bge.n	8005e08 <_printf_i+0xd0>
 8005e00:	232d      	movs	r3, #45	@ 0x2d
 8005e02:	426d      	negs	r5, r5
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e08:	4859      	ldr	r0, [pc, #356]	@ (8005f70 <_printf_i+0x238>)
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	e011      	b.n	8005e32 <_printf_i+0xfa>
 8005e0e:	6821      	ldr	r1, [r4, #0]
 8005e10:	6833      	ldr	r3, [r6, #0]
 8005e12:	0608      	lsls	r0, r1, #24
 8005e14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e18:	d402      	bmi.n	8005e20 <_printf_i+0xe8>
 8005e1a:	0649      	lsls	r1, r1, #25
 8005e1c:	bf48      	it	mi
 8005e1e:	b2ad      	uxthmi	r5, r5
 8005e20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e22:	4853      	ldr	r0, [pc, #332]	@ (8005f70 <_printf_i+0x238>)
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	bf14      	ite	ne
 8005e28:	230a      	movne	r3, #10
 8005e2a:	2308      	moveq	r3, #8
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e32:	6866      	ldr	r6, [r4, #4]
 8005e34:	60a6      	str	r6, [r4, #8]
 8005e36:	2e00      	cmp	r6, #0
 8005e38:	bfa2      	ittt	ge
 8005e3a:	6821      	ldrge	r1, [r4, #0]
 8005e3c:	f021 0104 	bicge.w	r1, r1, #4
 8005e40:	6021      	strge	r1, [r4, #0]
 8005e42:	b90d      	cbnz	r5, 8005e48 <_printf_i+0x110>
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	d04b      	beq.n	8005ee0 <_printf_i+0x1a8>
 8005e48:	4616      	mov	r6, r2
 8005e4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e4e:	fb03 5711 	mls	r7, r3, r1, r5
 8005e52:	5dc7      	ldrb	r7, [r0, r7]
 8005e54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e58:	462f      	mov	r7, r5
 8005e5a:	42bb      	cmp	r3, r7
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	d9f4      	bls.n	8005e4a <_printf_i+0x112>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d10b      	bne.n	8005e7c <_printf_i+0x144>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07df      	lsls	r7, r3, #31
 8005e68:	d508      	bpl.n	8005e7c <_printf_i+0x144>
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	bfde      	ittt	le
 8005e72:	2330      	movle	r3, #48	@ 0x30
 8005e74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e7c:	1b92      	subs	r2, r2, r6
 8005e7e:	6122      	str	r2, [r4, #16]
 8005e80:	f8cd a000 	str.w	sl, [sp]
 8005e84:	464b      	mov	r3, r9
 8005e86:	aa03      	add	r2, sp, #12
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	f7ff fee6 	bl	8005c5c <_printf_common>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d14a      	bne.n	8005f2a <_printf_i+0x1f2>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b004      	add	sp, #16
 8005e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	f043 0320 	orr.w	r3, r3, #32
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	4833      	ldr	r0, [pc, #204]	@ (8005f74 <_printf_i+0x23c>)
 8005ea8:	2778      	movs	r7, #120	@ 0x78
 8005eaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6831      	ldr	r1, [r6, #0]
 8005eb2:	061f      	lsls	r7, r3, #24
 8005eb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eb8:	d402      	bmi.n	8005ec0 <_printf_i+0x188>
 8005eba:	065f      	lsls	r7, r3, #25
 8005ebc:	bf48      	it	mi
 8005ebe:	b2ad      	uxthmi	r5, r5
 8005ec0:	6031      	str	r1, [r6, #0]
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	bf44      	itt	mi
 8005ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eca:	6023      	strmi	r3, [r4, #0]
 8005ecc:	b11d      	cbz	r5, 8005ed6 <_printf_i+0x19e>
 8005ece:	2310      	movs	r3, #16
 8005ed0:	e7ac      	b.n	8005e2c <_printf_i+0xf4>
 8005ed2:	4827      	ldr	r0, [pc, #156]	@ (8005f70 <_printf_i+0x238>)
 8005ed4:	e7e9      	b.n	8005eaa <_printf_i+0x172>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	f023 0320 	bic.w	r3, r3, #32
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	e7f6      	b.n	8005ece <_printf_i+0x196>
 8005ee0:	4616      	mov	r6, r2
 8005ee2:	e7bd      	b.n	8005e60 <_printf_i+0x128>
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	6825      	ldr	r5, [r4, #0]
 8005ee8:	6961      	ldr	r1, [r4, #20]
 8005eea:	1d18      	adds	r0, r3, #4
 8005eec:	6030      	str	r0, [r6, #0]
 8005eee:	062e      	lsls	r6, r5, #24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	d501      	bpl.n	8005ef8 <_printf_i+0x1c0>
 8005ef4:	6019      	str	r1, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <_printf_i+0x1c6>
 8005ef8:	0668      	lsls	r0, r5, #25
 8005efa:	d5fb      	bpl.n	8005ef4 <_printf_i+0x1bc>
 8005efc:	8019      	strh	r1, [r3, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	4616      	mov	r6, r2
 8005f04:	e7bc      	b.n	8005e80 <_printf_i+0x148>
 8005f06:	6833      	ldr	r3, [r6, #0]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	6032      	str	r2, [r6, #0]
 8005f0c:	681e      	ldr	r6, [r3, #0]
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	2100      	movs	r1, #0
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7fa f95c 	bl	80001d0 <memchr>
 8005f18:	b108      	cbz	r0, 8005f1e <_printf_i+0x1e6>
 8005f1a:	1b80      	subs	r0, r0, r6
 8005f1c:	6060      	str	r0, [r4, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f28:	e7aa      	b.n	8005e80 <_printf_i+0x148>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d0ad      	beq.n	8005e94 <_printf_i+0x15c>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	d413      	bmi.n	8005f66 <_printf_i+0x22e>
 8005f3e:	68e0      	ldr	r0, [r4, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	4298      	cmp	r0, r3
 8005f44:	bfb8      	it	lt
 8005f46:	4618      	movlt	r0, r3
 8005f48:	e7a6      	b.n	8005e98 <_printf_i+0x160>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d09d      	beq.n	8005e94 <_printf_i+0x15c>
 8005f58:	3501      	adds	r5, #1
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	9903      	ldr	r1, [sp, #12]
 8005f5e:	1a5b      	subs	r3, r3, r1
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dcf2      	bgt.n	8005f4a <_printf_i+0x212>
 8005f64:	e7eb      	b.n	8005f3e <_printf_i+0x206>
 8005f66:	2500      	movs	r5, #0
 8005f68:	f104 0619 	add.w	r6, r4, #25
 8005f6c:	e7f5      	b.n	8005f5a <_printf_i+0x222>
 8005f6e:	bf00      	nop
 8005f70:	080062f9 	.word	0x080062f9
 8005f74:	0800630a 	.word	0x0800630a

08005f78 <__sflush_r>:
 8005f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	0716      	lsls	r6, r2, #28
 8005f82:	4605      	mov	r5, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	d454      	bmi.n	8006032 <__sflush_r+0xba>
 8005f88:	684b      	ldr	r3, [r1, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dc02      	bgt.n	8005f94 <__sflush_r+0x1c>
 8005f8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	dd48      	ble.n	8006026 <__sflush_r+0xae>
 8005f94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	d045      	beq.n	8006026 <__sflush_r+0xae>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fa0:	682f      	ldr	r7, [r5, #0]
 8005fa2:	6a21      	ldr	r1, [r4, #32]
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	d030      	beq.n	800600a <__sflush_r+0x92>
 8005fa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	0759      	lsls	r1, r3, #29
 8005fae:	d505      	bpl.n	8005fbc <__sflush_r+0x44>
 8005fb0:	6863      	ldr	r3, [r4, #4]
 8005fb2:	1ad2      	subs	r2, r2, r3
 8005fb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fb6:	b10b      	cbz	r3, 8005fbc <__sflush_r+0x44>
 8005fb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fc0:	6a21      	ldr	r1, [r4, #32]
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b0      	blx	r6
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	d106      	bne.n	8005fda <__sflush_r+0x62>
 8005fcc:	6829      	ldr	r1, [r5, #0]
 8005fce:	291d      	cmp	r1, #29
 8005fd0:	d82b      	bhi.n	800602a <__sflush_r+0xb2>
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800607c <__sflush_r+0x104>)
 8005fd4:	410a      	asrs	r2, r1
 8005fd6:	07d6      	lsls	r6, r2, #31
 8005fd8:	d427      	bmi.n	800602a <__sflush_r+0xb2>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	6062      	str	r2, [r4, #4]
 8005fde:	04d9      	lsls	r1, r3, #19
 8005fe0:	6922      	ldr	r2, [r4, #16]
 8005fe2:	6022      	str	r2, [r4, #0]
 8005fe4:	d504      	bpl.n	8005ff0 <__sflush_r+0x78>
 8005fe6:	1c42      	adds	r2, r0, #1
 8005fe8:	d101      	bne.n	8005fee <__sflush_r+0x76>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	b903      	cbnz	r3, 8005ff0 <__sflush_r+0x78>
 8005fee:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ff2:	602f      	str	r7, [r5, #0]
 8005ff4:	b1b9      	cbz	r1, 8006026 <__sflush_r+0xae>
 8005ff6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	d002      	beq.n	8006004 <__sflush_r+0x8c>
 8005ffe:	4628      	mov	r0, r5
 8006000:	f7ff fbf2 	bl	80057e8 <_free_r>
 8006004:	2300      	movs	r3, #0
 8006006:	6363      	str	r3, [r4, #52]	@ 0x34
 8006008:	e00d      	b.n	8006026 <__sflush_r+0xae>
 800600a:	2301      	movs	r3, #1
 800600c:	4628      	mov	r0, r5
 800600e:	47b0      	blx	r6
 8006010:	4602      	mov	r2, r0
 8006012:	1c50      	adds	r0, r2, #1
 8006014:	d1c9      	bne.n	8005faa <__sflush_r+0x32>
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0c6      	beq.n	8005faa <__sflush_r+0x32>
 800601c:	2b1d      	cmp	r3, #29
 800601e:	d001      	beq.n	8006024 <__sflush_r+0xac>
 8006020:	2b16      	cmp	r3, #22
 8006022:	d11e      	bne.n	8006062 <__sflush_r+0xea>
 8006024:	602f      	str	r7, [r5, #0]
 8006026:	2000      	movs	r0, #0
 8006028:	e022      	b.n	8006070 <__sflush_r+0xf8>
 800602a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800602e:	b21b      	sxth	r3, r3
 8006030:	e01b      	b.n	800606a <__sflush_r+0xf2>
 8006032:	690f      	ldr	r7, [r1, #16]
 8006034:	2f00      	cmp	r7, #0
 8006036:	d0f6      	beq.n	8006026 <__sflush_r+0xae>
 8006038:	0793      	lsls	r3, r2, #30
 800603a:	680e      	ldr	r6, [r1, #0]
 800603c:	bf08      	it	eq
 800603e:	694b      	ldreq	r3, [r1, #20]
 8006040:	600f      	str	r7, [r1, #0]
 8006042:	bf18      	it	ne
 8006044:	2300      	movne	r3, #0
 8006046:	eba6 0807 	sub.w	r8, r6, r7
 800604a:	608b      	str	r3, [r1, #8]
 800604c:	f1b8 0f00 	cmp.w	r8, #0
 8006050:	dde9      	ble.n	8006026 <__sflush_r+0xae>
 8006052:	6a21      	ldr	r1, [r4, #32]
 8006054:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006056:	4643      	mov	r3, r8
 8006058:	463a      	mov	r2, r7
 800605a:	4628      	mov	r0, r5
 800605c:	47b0      	blx	r6
 800605e:	2800      	cmp	r0, #0
 8006060:	dc08      	bgt.n	8006074 <__sflush_r+0xfc>
 8006062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006074:	4407      	add	r7, r0
 8006076:	eba8 0800 	sub.w	r8, r8, r0
 800607a:	e7e7      	b.n	800604c <__sflush_r+0xd4>
 800607c:	dfbffffe 	.word	0xdfbffffe

08006080 <_fflush_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	690b      	ldr	r3, [r1, #16]
 8006084:	4605      	mov	r5, r0
 8006086:	460c      	mov	r4, r1
 8006088:	b913      	cbnz	r3, 8006090 <_fflush_r+0x10>
 800608a:	2500      	movs	r5, #0
 800608c:	4628      	mov	r0, r5
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	b118      	cbz	r0, 800609a <_fflush_r+0x1a>
 8006092:	6a03      	ldr	r3, [r0, #32]
 8006094:	b90b      	cbnz	r3, 800609a <_fflush_r+0x1a>
 8006096:	f7ff f9ad 	bl	80053f4 <__sinit>
 800609a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f3      	beq.n	800608a <_fflush_r+0xa>
 80060a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060a4:	07d0      	lsls	r0, r2, #31
 80060a6:	d404      	bmi.n	80060b2 <_fflush_r+0x32>
 80060a8:	0599      	lsls	r1, r3, #22
 80060aa:	d402      	bmi.n	80060b2 <_fflush_r+0x32>
 80060ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ae:	f7ff fb98 	bl	80057e2 <__retarget_lock_acquire_recursive>
 80060b2:	4628      	mov	r0, r5
 80060b4:	4621      	mov	r1, r4
 80060b6:	f7ff ff5f 	bl	8005f78 <__sflush_r>
 80060ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060bc:	07da      	lsls	r2, r3, #31
 80060be:	4605      	mov	r5, r0
 80060c0:	d4e4      	bmi.n	800608c <_fflush_r+0xc>
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	059b      	lsls	r3, r3, #22
 80060c6:	d4e1      	bmi.n	800608c <_fflush_r+0xc>
 80060c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ca:	f7ff fb8b 	bl	80057e4 <__retarget_lock_release_recursive>
 80060ce:	e7dd      	b.n	800608c <_fflush_r+0xc>

080060d0 <__swhatbuf_r>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	460c      	mov	r4, r1
 80060d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d8:	2900      	cmp	r1, #0
 80060da:	b096      	sub	sp, #88	@ 0x58
 80060dc:	4615      	mov	r5, r2
 80060de:	461e      	mov	r6, r3
 80060e0:	da0d      	bge.n	80060fe <__swhatbuf_r+0x2e>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80060e8:	f04f 0100 	mov.w	r1, #0
 80060ec:	bf14      	ite	ne
 80060ee:	2340      	movne	r3, #64	@ 0x40
 80060f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80060f4:	2000      	movs	r0, #0
 80060f6:	6031      	str	r1, [r6, #0]
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	b016      	add	sp, #88	@ 0x58
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	466a      	mov	r2, sp
 8006100:	f000 f848 	bl	8006194 <_fstat_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	dbec      	blt.n	80060e2 <__swhatbuf_r+0x12>
 8006108:	9901      	ldr	r1, [sp, #4]
 800610a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800610e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006112:	4259      	negs	r1, r3
 8006114:	4159      	adcs	r1, r3
 8006116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800611a:	e7eb      	b.n	80060f4 <__swhatbuf_r+0x24>

0800611c <__smakebuf_r>:
 800611c:	898b      	ldrh	r3, [r1, #12]
 800611e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006120:	079d      	lsls	r5, r3, #30
 8006122:	4606      	mov	r6, r0
 8006124:	460c      	mov	r4, r1
 8006126:	d507      	bpl.n	8006138 <__smakebuf_r+0x1c>
 8006128:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	6123      	str	r3, [r4, #16]
 8006130:	2301      	movs	r3, #1
 8006132:	6163      	str	r3, [r4, #20]
 8006134:	b003      	add	sp, #12
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006138:	ab01      	add	r3, sp, #4
 800613a:	466a      	mov	r2, sp
 800613c:	f7ff ffc8 	bl	80060d0 <__swhatbuf_r>
 8006140:	9f00      	ldr	r7, [sp, #0]
 8006142:	4605      	mov	r5, r0
 8006144:	4639      	mov	r1, r7
 8006146:	4630      	mov	r0, r6
 8006148:	f7ff fbba 	bl	80058c0 <_malloc_r>
 800614c:	b948      	cbnz	r0, 8006162 <__smakebuf_r+0x46>
 800614e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006152:	059a      	lsls	r2, r3, #22
 8006154:	d4ee      	bmi.n	8006134 <__smakebuf_r+0x18>
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	f043 0302 	orr.w	r3, r3, #2
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	e7e2      	b.n	8006128 <__smakebuf_r+0xc>
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	6020      	str	r0, [r4, #0]
 8006166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	9b01      	ldr	r3, [sp, #4]
 800616e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006172:	b15b      	cbz	r3, 800618c <__smakebuf_r+0x70>
 8006174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006178:	4630      	mov	r0, r6
 800617a:	f000 f81d 	bl	80061b8 <_isatty_r>
 800617e:	b128      	cbz	r0, 800618c <__smakebuf_r+0x70>
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	81a3      	strh	r3, [r4, #12]
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	431d      	orrs	r5, r3
 8006190:	81a5      	strh	r5, [r4, #12]
 8006192:	e7cf      	b.n	8006134 <__smakebuf_r+0x18>

08006194 <_fstat_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	@ (80061b4 <_fstat_r+0x20>)
 8006198:	2300      	movs	r3, #0
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	f7fa fce8 	bl	8000b76 <_fstat>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d102      	bne.n	80061b0 <_fstat_r+0x1c>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	b103      	cbz	r3, 80061b0 <_fstat_r+0x1c>
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
 80061b2:	bf00      	nop
 80061b4:	2000036c 	.word	0x2000036c

080061b8 <_isatty_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d06      	ldr	r5, [pc, #24]	@ (80061d4 <_isatty_r+0x1c>)
 80061bc:	2300      	movs	r3, #0
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	f7fa fce7 	bl	8000b96 <_isatty>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_isatty_r+0x1a>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_isatty_r+0x1a>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	2000036c 	.word	0x2000036c

080061d8 <_sbrk_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d06      	ldr	r5, [pc, #24]	@ (80061f4 <_sbrk_r+0x1c>)
 80061dc:	2300      	movs	r3, #0
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	602b      	str	r3, [r5, #0]
 80061e4:	f7fa fcf0 	bl	8000bc8 <_sbrk>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_sbrk_r+0x1a>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_sbrk_r+0x1a>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	2000036c 	.word	0x2000036c

080061f8 <_init>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr

08006204 <_fini>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr
