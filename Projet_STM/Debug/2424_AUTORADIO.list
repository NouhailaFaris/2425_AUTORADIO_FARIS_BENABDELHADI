
2424_AUTORADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800c568  0800c568  0000d568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb9c  0800cb9c  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb9c  0800cb9c  0000db9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cba4  0800cba4  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cba4  0800cba4  0000dba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cba8  0800cba8  0000dba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800cbac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b04  2000006c  0800cc18  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800cc18  0000eb70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002755d  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005820  00000000  00000000  000355f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  0003ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a63  00000000  00000000  0003d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008201  00000000  00000000  0003ea83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bdaa  00000000  00000000  00046c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119dbb  00000000  00000000  00072a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c7e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009668  00000000  00000000  0018c82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00195e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c550 	.word	0x0800c550

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800c550 	.word	0x0800c550

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000584:	4a30      	ldr	r2, [pc, #192]	@ (8000648 <MX_ADC1_Init+0xe8>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000588:	4b2e      	ldr	r3, [pc, #184]	@ (8000644 <MX_ADC1_Init+0xe4>)
 800058a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b2c      	ldr	r3, [pc, #176]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000596:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800059c:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <MX_ADC1_Init+0xe4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a2:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a8:	4b26      	ldr	r3, [pc, #152]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ae:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c2:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005dc:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e4:	4817      	ldr	r0, [pc, #92]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005e6:	f001 fd5d 	bl	80020a4 <HAL_ADC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80005f0:	f000 fdaa 	bl	8001148 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4811      	ldr	r0, [pc, #68]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000600:	f002 ff02 	bl	8003408 <HAL_ADCEx_MultiModeConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800060a:	f000 fd9d 	bl	8001148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_ADC1_Init+0xec>)
 8000610:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000612:	2306      	movs	r3, #6
 8000614:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800061a:	237f      	movs	r3, #127	@ 0x7f
 800061c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800061e:	2304      	movs	r3, #4
 8000620:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	@ (8000644 <MX_ADC1_Init+0xe4>)
 800062c:	f002 f988 	bl	8002940 <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000636:	f000 fd87 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	@ 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000088 	.word	0x20000088
 8000648:	50040000 	.word	0x50040000
 800064c:	04300002 	.word	0x04300002

08000650 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a2e      	ldr	r2, [pc, #184]	@ (8000728 <HAL_ADC_MspInit+0xd8>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d156      	bne.n	8000720 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000672:	4b2e      	ldr	r3, [pc, #184]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a2d      	ldr	r2, [pc, #180]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 8000678:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b2b      	ldr	r3, [pc, #172]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b28      	ldr	r3, [pc, #160]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a27      	ldr	r2, [pc, #156]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b25      	ldr	r3, [pc, #148]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006a6:	230b      	movs	r3, #11
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	481e      	ldr	r0, [pc, #120]	@ (8000730 <HAL_ADC_MspInit+0xe0>)
 80006b6:	f003 fe0b 	bl	80042d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000738 <HAL_ADC_MspInit+0xe8>)
 80006be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006ea:	2220      	movs	r2, #32
 80006ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f4:	480f      	ldr	r0, [pc, #60]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 80006f6:	f003 fb75 	bl	8003de4 <HAL_DMA_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000700:	f000 fd22 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a0b      	ldr	r2, [pc, #44]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 8000708:	64da      	str	r2, [r3, #76]	@ 0x4c
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <HAL_ADC_MspInit+0xe4>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2105      	movs	r1, #5
 8000714:	2012      	movs	r0, #18
 8000716:	f003 f802 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800071a:	2012      	movs	r0, #18
 800071c:	f003 f81b 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	50040000 	.word	0x50040000
 800072c:	40021000 	.word	0x40021000
 8000730:	48000800 	.word	0x48000800
 8000734:	200000ec 	.word	0x200000ec
 8000738:	40020008 	.word	0x40020008

0800073c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2224      	movs	r2, #36	@ 0x24
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f00b f97d 	bl	800ba48 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000750:	4a12      	ldr	r2, [pc, #72]	@ (800079c <MX_DAC1_Init+0x60>)
 8000752:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000756:	f003 f818 	bl	800378a <HAL_DAC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000760:	f000 fcf2 	bl	8001148 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_DAC1_Init+0x5c>)
 8000780:	f003 f974 	bl	8003a6c <HAL_DAC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 fcdd 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	@ 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000134 	.word	0x20000134
 800079c:	40007400 	.word	0x40007400

080007a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a2f      	ldr	r2, [pc, #188]	@ (800087c <HAL_DAC_MspInit+0xdc>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d157      	bne.n	8000872 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000880 <HAL_DAC_MspInit+0xe0>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000880 <HAL_DAC_MspInit+0xe0>)
 80007c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80007cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <HAL_DAC_MspInit+0xe0>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <HAL_DAC_MspInit+0xe0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a28      	ldr	r2, [pc, #160]	@ (8000880 <HAL_DAC_MspInit+0xe0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <HAL_DAC_MspInit+0xe0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007f2:	2310      	movs	r3, #16
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000808:	f003 fd62 	bl	80042d0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 800080e:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <HAL_DAC_MspInit+0xe8>)
 8000810:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 8000814:	2206      	movs	r2, #6
 8000816:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 800081a:	2210      	movs	r2, #16
 800081c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 8000826:	2280      	movs	r2, #128	@ 0x80
 8000828:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 800082c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000830:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 8000834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000838:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 800083c:	2220      	movs	r2, #32
 800083e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000846:	480f      	ldr	r0, [pc, #60]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 8000848:	f003 facc 	bl	8003de4 <HAL_DMA_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000852:	f000 fc79 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <HAL_DAC_MspInit+0xe4>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2105      	movs	r1, #5
 8000866:	2036      	movs	r0, #54	@ 0x36
 8000868:	f002 ff59 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800086c:	2036      	movs	r0, #54	@ 0x36
 800086e:	f002 ff72 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	@ 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40007400 	.word	0x40007400
 8000880:	40021000 	.word	0x40021000
 8000884:	20000148 	.word	0x20000148
 8000888:	40020030 	.word	0x40020030

0800088c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_DMA_Init+0x68>)
 8000894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000896:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <MX_DMA_Init+0x68>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6493      	str	r3, [r2, #72]	@ 0x48
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_DMA_Init+0x68>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2105      	movs	r1, #5
 80008ae:	200b      	movs	r0, #11
 80008b0:	f002 ff35 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008b4:	200b      	movs	r0, #11
 80008b6:	f002 ff4e 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	200d      	movs	r0, #13
 80008c0:	f002 ff2d 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008c4:	200d      	movs	r0, #13
 80008c6:	f002 ff46 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2105      	movs	r1, #5
 80008ce:	2010      	movs	r0, #16
 80008d0:	f002 ff25 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008d4:	2010      	movs	r0, #16
 80008d6:	f002 ff3e 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2105      	movs	r1, #5
 80008de:	2011      	movs	r0, #17
 80008e0:	f002 ff1d 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80008e4:	2011      	movs	r0, #17
 80008e6:	f002 ff36 	bl	8003756 <HAL_NVIC_EnableIRQ>

}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4a07      	ldr	r2, [pc, #28]	@ (8000924 <vApplicationGetIdleTaskMemory+0x2c>)
 8000908:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4a06      	ldr	r2, [pc, #24]	@ (8000928 <vApplicationGetIdleTaskMemory+0x30>)
 800090e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2280      	movs	r2, #128	@ 0x80
 8000914:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000194 	.word	0x20000194
 8000928:	200001e8 	.word	0x200001e8

0800092c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_FREERTOS_Init+0x30>)
 8000934:	1d3c      	adds	r4, r7, #4
 8000936:	461d      	mov	r5, r3
 8000938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f009 fc11 	bl	800a170 <osThreadCreate>
 800094e:	4603      	mov	r3, r0
 8000950:	4a03      	ldr	r2, [pc, #12]	@ (8000960 <MX_FREERTOS_Init+0x34>)
 8000952:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bdb0      	pop	{r4, r5, r7, pc}
 800095c:	0800c574 	.word	0x0800c574
 8000960:	20000190 	.word	0x20000190

08000964 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f009 fc4b 	bl	800a208 <osDelay>
 8000972:	e7fb      	b.n	800096c <StartDefaultTask+0x8>

08000974 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b35      	ldr	r3, [pc, #212]	@ (8000a60 <MX_GPIO_Init+0xec>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a34      	ldr	r2, [pc, #208]	@ (8000a60 <MX_GPIO_Init+0xec>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <MX_GPIO_Init+0xec>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	4a28      	ldr	r2, [pc, #160]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c6:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <MX_GPIO_Init+0xec>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2121      	movs	r1, #33	@ 0x21
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f003 fe17 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2180      	movs	r1, #128	@ 0x80
 80009fa:	481a      	ldr	r0, [pc, #104]	@ (8000a64 <MX_GPIO_Init+0xf0>)
 80009fc:	f003 fe12 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4814      	ldr	r0, [pc, #80]	@ (8000a68 <MX_GPIO_Init+0xf4>)
 8000a18:	f003 fc5a 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000a1c:	2321      	movs	r3, #33	@ 0x21
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f003 fc4b 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a3a:	2380      	movs	r3, #128	@ 0x80
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <MX_GPIO_Init+0xf0>)
 8000a52:	f003 fc3d 	bl	80042d0 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	@ 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000800 	.word	0x48000800

08000a6c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000a72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae4 <MX_I2C2_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae8 <MX_I2C2_Init+0x7c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa6:	480e      	ldr	r0, [pc, #56]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000aa8:	f003 fdd4 	bl	8004654 <HAL_I2C_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab2:	f000 fb49 	bl	8001148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000aba:	f004 fc4f 	bl	800535c <HAL_I2CEx_ConfigAnalogFilter>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac4:	f000 fb40 	bl	8001148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_I2C2_Init+0x74>)
 8000acc:	f004 fc91 	bl	80053f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ad6:	f000 fb37 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200003e8 	.word	0x200003e8
 8000ae4:	40005800 	.word	0x40005800
 8000ae8:	10d19ce4 	.word	0x10d19ce4

08000aec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0ac      	sub	sp, #176	@ 0xb0
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2288      	movs	r2, #136	@ 0x88
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f00a ff9b 	bl	800ba48 <memset>
  if(i2cHandle->Instance==I2C2)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a21      	ldr	r2, [pc, #132]	@ (8000b9c <HAL_I2C_MspInit+0xb0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d13b      	bne.n	8000b94 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b1c:	2380      	movs	r3, #128	@ 0x80
 8000b1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f005 fb13 	bl	8006154 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b34:	f000 fb08 	bl	8001148 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <HAL_I2C_MspInit+0xb4>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <HAL_I2C_MspInit+0xb4>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <HAL_I2C_MspInit+0xb4>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b74:	4619      	mov	r1, r3
 8000b76:	480b      	ldr	r0, [pc, #44]	@ (8000ba4 <HAL_I2C_MspInit+0xb8>)
 8000b78:	f003 fbaa 	bl	80042d0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_I2C_MspInit+0xb4>)
 8000b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_I2C_MspInit+0xb4>)
 8000b82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_I2C_MspInit+0xb4>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b94:	bf00      	nop
 8000b96:	37b0      	adds	r7, #176	@ 0xb0
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40005800 	.word	0x40005800
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48000400 	.word	0x48000400

08000ba8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <__io_putchar+0x20>)
 8000bba:	f008 f9ed 	bl	8008f98 <HAL_UART_Transmit>
	return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000c8c 	.word	0x20000c8c

08000bcc <I2C_Scan>:

void I2C_Scan(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	printf("Scanning I2C bus\r\n");
 8000bd2:	4811      	ldr	r0, [pc, #68]	@ (8000c18 <I2C_Scan+0x4c>)
 8000bd4:	f00a fe58 	bl	800b888 <puts>
	for (uint16_t addr = 0; addr < 128; addr++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	80fb      	strh	r3, [r7, #6]
 8000bdc:	e011      	b.n	8000c02 <I2C_Scan+0x36>
		if (HAL_I2C_IsDeviceReady(&hi2c2, addr , 2, HAL_MAX_DELAY) == HAL_OK) {
 8000bde:	88f9      	ldrh	r1, [r7, #6]
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	2202      	movs	r2, #2
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <I2C_Scan+0x50>)
 8000be8:	f003 fffe 	bl	8004be8 <HAL_I2C_IsDeviceReady>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d104      	bne.n	8000bfc <I2C_Scan+0x30>
			printf("Périphérique trouvé à l'adresse 0x%02X\r\n", addr);
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480a      	ldr	r0, [pc, #40]	@ (8000c20 <I2C_Scan+0x54>)
 8000bf8:	f00a fdde 	bl	800b7b8 <iprintf>
	for (uint16_t addr = 0; addr < 128; addr++) {
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	80fb      	strh	r3, [r7, #6]
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c06:	d9ea      	bls.n	8000bde <I2C_Scan+0x12>
		}
	}
	printf("Scan terminé.\r\n");
 8000c08:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <I2C_Scan+0x58>)
 8000c0a:	f00a fe3d 	bl	800b888 <puts>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	0800c590 	.word	0x0800c590
 8000c1c:	200003e8 	.word	0x200003e8
 8000c20:	0800c5a4 	.word	0x0800c5a4
 8000c24:	0800c5d4 	.word	0x0800c5d4

08000c28 <Read_CHIP_ID_Debug>:

void Read_CHIP_ID_Debug(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af04      	add	r7, sp, #16
	uint8_t chip_id[2] = {0};
 8000c2e:	2300      	movs	r3, #0
 8000c30:	80bb      	strh	r3, [r7, #4]

	printf("Lecture du registre CHIP_ID \r\n");
 8000c32:	4819      	ldr	r0, [pc, #100]	@ (8000c98 <Read_CHIP_ID_Debug+0x70>)
 8000c34:	f00a fe28 	bl	800b888 <puts>

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, CHIP_ID_REG, I2C_MEMADD_SIZE_16BIT, chip_id, 2, HAL_MAX_DELAY);
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	2302      	movs	r3, #2
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2302      	movs	r3, #2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2114      	movs	r1, #20
 8000c4c:	4813      	ldr	r0, [pc, #76]	@ (8000c9c <Read_CHIP_ID_Debug+0x74>)
 8000c4e:	f003 feb1 	bl	80049b4 <HAL_I2C_Mem_Read>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) {
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10d      	bne.n	8000c78 <Read_CHIP_ID_Debug+0x50>
		// Appliquer le décalage de 8 bits pour le MSB
		uint16_t chip_id_val = (chip_id[0] << 8) | chip_id[1];
 8000c5c:	793b      	ldrb	r3, [r7, #4]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	797b      	ldrb	r3, [r7, #5]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	80fb      	strh	r3, [r7, #6]
		printf("CHIP_ID lu avec succès : 0x%04X\r\n", chip_id_val);
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <Read_CHIP_ID_Debug+0x78>)
 8000c72:	f00a fda1 	bl	800b7b8 <iprintf>
	} else {
		printf("Erreur : Impossible de lire le CHIP_ID\r\n");
		uint32_t i2c_error = HAL_I2C_GetError(&hi2c2);
		printf("Erreur I2C\r\n", i2c_error);
	}
}
 8000c76:	e00a      	b.n	8000c8e <Read_CHIP_ID_Debug+0x66>
		printf("Erreur : Impossible de lire le CHIP_ID\r\n");
 8000c78:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <Read_CHIP_ID_Debug+0x7c>)
 8000c7a:	f00a fe05 	bl	800b888 <puts>
		uint32_t i2c_error = HAL_I2C_GetError(&hi2c2);
 8000c7e:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <Read_CHIP_ID_Debug+0x74>)
 8000c80:	f004 f89e 	bl	8004dc0 <HAL_I2C_GetError>
 8000c84:	60b8      	str	r0, [r7, #8]
		printf("Erreur I2C\r\n", i2c_error);
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	4807      	ldr	r0, [pc, #28]	@ (8000ca8 <Read_CHIP_ID_Debug+0x80>)
 8000c8a:	f00a fd95 	bl	800b7b8 <iprintf>
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	0800c5e4 	.word	0x0800c5e4
 8000c9c:	200003e8 	.word	0x200003e8
 8000ca0:	0800c604 	.word	0x0800c604
 8000ca4:	0800c628 	.word	0x0800c628
 8000ca8:	0800c650 	.word	0x0800c650

08000cac <Read_Write_Test_Register>:
void Read_Write_Test_Register(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af04      	add	r7, sp, #16
	uint8_t read_data[2] = {0};
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	813b      	strh	r3, [r7, #8]
	uint16_t test_value = 0xABCD; // Exemple de valeur à écrire
 8000cb6:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8000cba:	81fb      	strh	r3, [r7, #14]
	uint8_t test_data[2] = { (test_value >> 8) & 0xFF, test_value & 0xFF };
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	713b      	strb	r3, [r7, #4]
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	717b      	strb	r3, [r7, #5]

	printf("Lecture du registre avant écriture\r\n");
 8000ccc:	4833      	ldr	r0, [pc, #204]	@ (8000d9c <Read_Write_Test_Register+0xf0>)
 8000cce:	f00a fddb 	bl	800b888 <puts>
	if (HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, read_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2302      	movs	r3, #2
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	2230      	movs	r2, #48	@ 0x30
 8000ce6:	2114      	movs	r1, #20
 8000ce8:	482d      	ldr	r0, [pc, #180]	@ (8000da0 <Read_Write_Test_Register+0xf4>)
 8000cea:	f003 fe63 	bl	80049b4 <HAL_I2C_Mem_Read>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10a      	bne.n	8000d0a <Read_Write_Test_Register+0x5e>
		uint16_t value = (read_data[0]) | read_data[1];
 8000cf4:	7a3a      	ldrb	r2, [r7, #8]
 8000cf6:	7a7b      	ldrb	r3, [r7, #9]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	81bb      	strh	r3, [r7, #12]
		printf("Valeur lue avant écriture : 0x%04X\r\n", value);
 8000cfe:	89bb      	ldrh	r3, [r7, #12]
 8000d00:	4619      	mov	r1, r3
 8000d02:	4828      	ldr	r0, [pc, #160]	@ (8000da4 <Read_Write_Test_Register+0xf8>)
 8000d04:	f00a fd58 	bl	800b7b8 <iprintf>
 8000d08:	e002      	b.n	8000d10 <Read_Write_Test_Register+0x64>
	} else {
		printf("Erreur lors de la lecture du registre avant écriture\r\n");
 8000d0a:	4827      	ldr	r0, [pc, #156]	@ (8000da8 <Read_Write_Test_Register+0xfc>)
 8000d0c:	f00a fdbc 	bl	800b888 <puts>
	}

	printf("Écriture dans le registre\r\n");
 8000d10:	4826      	ldr	r0, [pc, #152]	@ (8000dac <Read_Write_Test_Register+0x100>)
 8000d12:	f00a fdb9 	bl	800b888 <puts>
	if (HAL_I2C_Mem_Write(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, test_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	9301      	str	r3, [sp, #4]
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2302      	movs	r3, #2
 8000d26:	2230      	movs	r2, #48	@ 0x30
 8000d28:	2114      	movs	r1, #20
 8000d2a:	481d      	ldr	r0, [pc, #116]	@ (8000da0 <Read_Write_Test_Register+0xf4>)
 8000d2c:	f003 fd2e 	bl	800478c <HAL_I2C_Mem_Write>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d105      	bne.n	8000d42 <Read_Write_Test_Register+0x96>
		printf("Valeur écrite avec succès : 0x%04X\r\n", test_value);
 8000d36:	89fb      	ldrh	r3, [r7, #14]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481d      	ldr	r0, [pc, #116]	@ (8000db0 <Read_Write_Test_Register+0x104>)
 8000d3c:	f00a fd3c 	bl	800b7b8 <iprintf>
 8000d40:	e002      	b.n	8000d48 <Read_Write_Test_Register+0x9c>
	} else {
		printf("Erreur lors de l'écriture dans le registre\r\n");
 8000d42:	481c      	ldr	r0, [pc, #112]	@ (8000db4 <Read_Write_Test_Register+0x108>)
 8000d44:	f00a fda0 	bl	800b888 <puts>
	}

	printf("Lecture du registre après écriture\r\n");
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <Read_Write_Test_Register+0x10c>)
 8000d4a:	f00a fd9d 	bl	800b888 <puts>
	if (HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, read_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2302      	movs	r3, #2
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2302      	movs	r3, #2
 8000d60:	2230      	movs	r2, #48	@ 0x30
 8000d62:	2114      	movs	r1, #20
 8000d64:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <Read_Write_Test_Register+0xf4>)
 8000d66:	f003 fe25 	bl	80049b4 <HAL_I2C_Mem_Read>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10d      	bne.n	8000d8c <Read_Write_Test_Register+0xe0>
		uint16_t value = (read_data[0] << 8) | read_data[1];
 8000d70:	7a3b      	ldrb	r3, [r7, #8]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	7a7b      	ldrb	r3, [r7, #9]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	817b      	strh	r3, [r7, #10]
		printf("Valeur lue après écriture : 0x%04X\r\n", value);
 8000d80:	897b      	ldrh	r3, [r7, #10]
 8000d82:	4619      	mov	r1, r3
 8000d84:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <Read_Write_Test_Register+0x110>)
 8000d86:	f00a fd17 	bl	800b7b8 <iprintf>
	} else {
		printf("Erreur lors de la lecture du registre après écriture\r\n");
	}
}
 8000d8a:	e002      	b.n	8000d92 <Read_Write_Test_Register+0xe6>
		printf("Erreur lors de la lecture du registre après écriture\r\n");
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <Read_Write_Test_Register+0x114>)
 8000d8e:	f00a fd7b 	bl	800b888 <puts>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	0800c660 	.word	0x0800c660
 8000da0:	200003e8 	.word	0x200003e8
 8000da4:	0800c688 	.word	0x0800c688
 8000da8:	0800c6b0 	.word	0x0800c6b0
 8000dac:	0800c6e8 	.word	0x0800c6e8
 8000db0:	0800c704 	.word	0x0800c704
 8000db4:	0800c72c 	.word	0x0800c72c
 8000db8:	0800c75c 	.word	0x0800c75c
 8000dbc:	0800c784 	.word	0x0800c784
 8000dc0:	0800c7ac 	.word	0x0800c7ac

08000dc4 <Generate_Triangle_Wave>:
void Generate_Triangle_Wave(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
	for (int i = 0; i < TRIANGLE_STEPS / 2; i++) {
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e00f      	b.n	8000df0 <Generate_Triangle_Wave+0x2c>
		triangle_wave[i] = (4095 * i) / (TRIANGLE_STEPS / 2);  // Croissance linéaire
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	031b      	lsls	r3, r3, #12
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da00      	bge.n	8000dde <Generate_Triangle_Wave+0x1a>
 8000ddc:	337f      	adds	r3, #127	@ 0x7f
 8000dde:	11db      	asrs	r3, r3, #7
 8000de0:	b299      	uxth	r1, r3
 8000de2:	4a20      	ldr	r2, [pc, #128]	@ (8000e64 <Generate_Triangle_Wave+0xa0>)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < TRIANGLE_STEPS / 2; i++) {
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000df4:	ddec      	ble.n	8000dd0 <Generate_Triangle_Wave+0xc>
	}
	for (int i = TRIANGLE_STEPS / 2; i < TRIANGLE_STEPS; i++) {
 8000df6:	2380      	movs	r3, #128	@ 0x80
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	e015      	b.n	8000e28 <Generate_Triangle_Wave+0x64>
		triangle_wave[i] = 4095 - ((4095 * (i - TRIANGLE_STEPS / 2)) / (TRIANGLE_STEPS / 2));  // Décroissance linéaire
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f1a3 0280 	sub.w	r2, r3, #128	@ 0x80
 8000e02:	4613      	mov	r3, r2
 8000e04:	031b      	lsls	r3, r3, #12
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da00      	bge.n	8000e0e <Generate_Triangle_Wave+0x4a>
 8000e0c:	337f      	adds	r3, #127	@ 0x7f
 8000e0e:	11db      	asrs	r3, r3, #7
 8000e10:	425b      	negs	r3, r3
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000e18:	b299      	uxth	r1, r3
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <Generate_Triangle_Wave+0xa0>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = TRIANGLE_STEPS / 2; i < TRIANGLE_STEPS; i++) {
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2bff      	cmp	r3, #255	@ 0xff
 8000e2c:	dde6      	ble.n	8000dfc <Generate_Triangle_Wave+0x38>
	}

	// Ajout de vérifications avec printf
	printf("Signal triangulaire genere :\r\n");
 8000e2e:	480e      	ldr	r0, [pc, #56]	@ (8000e68 <Generate_Triangle_Wave+0xa4>)
 8000e30:	f00a fd2a 	bl	800b888 <puts>
	for (int i = 0; i < TRIANGLE_STEPS; i++) {
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	e00b      	b.n	8000e52 <Generate_Triangle_Wave+0x8e>
		printf("Echantillon %d : %d\r\n", i, triangle_wave[i]);
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <Generate_Triangle_Wave+0xa0>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e42:	461a      	mov	r2, r3
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <Generate_Triangle_Wave+0xa8>)
 8000e48:	f00a fcb6 	bl	800b7b8 <iprintf>
	for (int i = 0; i < TRIANGLE_STEPS; i++) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2bff      	cmp	r3, #255	@ 0xff
 8000e56:	ddf0      	ble.n	8000e3a <Generate_Triangle_Wave+0x76>
	}
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000063c 	.word	0x2000063c
 8000e68:	0800c7e4 	.word	0x0800c7e4
 8000e6c:	0800c804 	.word	0x0800c804

08000e70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e76:	f000 fe7f 	bl	8001b78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e7a:	f000 f8e5 	bl	8001048 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000e7e:	f000 f935 	bl	80010ec <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e82:	f7ff fd77 	bl	8000974 <MX_GPIO_Init>
	MX_DMA_Init();
 8000e86:	f7ff fd01 	bl	800088c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000e8a:	f000 fdb7 	bl	80019fc <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000e8e:	f000 fb49 	bl	8001524 <MX_SPI3_Init>
	MX_I2C2_Init();
 8000e92:	f7ff fdeb 	bl	8000a6c <MX_I2C2_Init>
	MX_SAI2_Init();
 8000e96:	f000 f95d 	bl	8001154 <MX_SAI2_Init>
	MX_DAC1_Init();
 8000e9a:	f7ff fc4f 	bl	800073c <MX_DAC1_Init>
	MX_TIM6_Init();
 8000e9e:	f000 fd51 	bl	8001944 <MX_TIM6_Init>
	MX_ADC1_Init();
 8000ea2:	f7ff fb5d 	bl	8000560 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000ea6:	4b56      	ldr	r3, [pc, #344]	@ (8001000 <main+0x190>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b54      	ldr	r3, [pc, #336]	@ (8001000 <main+0x190>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000eb4:	601a      	str	r2, [r3, #0]
	printf("Demarrage du systeme...\r\n");
 8000eb6:	4853      	ldr	r0, [pc, #332]	@ (8001004 <main+0x194>)
 8000eb8:	f00a fce6 	bl	800b888 <puts>
	I2C_Scan();
 8000ebc:	f7ff fe86 	bl	8000bcc <I2C_Scan>
	Read_CHIP_ID_Debug();
 8000ec0:	f7ff feb2 	bl	8000c28 <Read_CHIP_ID_Debug>
	Read_Write_Test_Register();
 8000ec4:	f7ff fef2 	bl	8000cac <Read_Write_Test_Register>
	printf("Début des tests des registres SGTL5000\r\n");
 8000ec8:	484f      	ldr	r0, [pc, #316]	@ (8001008 <main+0x198>)
 8000eca:	f00a fcdd 	bl	800b888 <puts>

	// Tester chaque registre
	Test_Register(&hi2c2, CHIP_ANA_POWER, 0x6AFF);
 8000ece:	f646 22ff 	movw	r2, #27391	@ 0x6aff
 8000ed2:	2130      	movs	r1, #48	@ 0x30
 8000ed4:	484d      	ldr	r0, [pc, #308]	@ (800100c <main+0x19c>)
 8000ed6:	f000 facf 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_LINREG_CTRL, 0x006C);
 8000eda:	226c      	movs	r2, #108	@ 0x6c
 8000edc:	2126      	movs	r1, #38	@ 0x26
 8000ede:	484b      	ldr	r0, [pc, #300]	@ (800100c <main+0x19c>)
 8000ee0:	f000 faca 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_REF_CTRL, 0x004E);
 8000ee4:	224e      	movs	r2, #78	@ 0x4e
 8000ee6:	2128      	movs	r1, #40	@ 0x28
 8000ee8:	4848      	ldr	r0, [pc, #288]	@ (800100c <main+0x19c>)
 8000eea:	f000 fac5 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_LINE_OUT_CTRL, 0x0322);
 8000eee:	f240 3222 	movw	r2, #802	@ 0x322
 8000ef2:	212c      	movs	r1, #44	@ 0x2c
 8000ef4:	4845      	ldr	r0, [pc, #276]	@ (800100c <main+0x19c>)
 8000ef6:	f000 fabf 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_SHORT_CTRL, 0x1106);
 8000efa:	f241 1206 	movw	r2, #4358	@ 0x1106
 8000efe:	213c      	movs	r1, #60	@ 0x3c
 8000f00:	4842      	ldr	r0, [pc, #264]	@ (800100c <main+0x19c>)
 8000f02:	f000 fab9 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_ANA_CTRL, 0x0133);
 8000f06:	f240 1233 	movw	r2, #307	@ 0x133
 8000f0a:	2124      	movs	r1, #36	@ 0x24
 8000f0c:	483f      	ldr	r0, [pc, #252]	@ (800100c <main+0x19c>)
 8000f0e:	f000 fab3 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_DIG_POWER, 0x0073);
 8000f12:	2273      	movs	r2, #115	@ 0x73
 8000f14:	2102      	movs	r1, #2
 8000f16:	483d      	ldr	r0, [pc, #244]	@ (800100c <main+0x19c>)
 8000f18:	f000 faae 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_LINE_OUT_VOL, 0x0505);
 8000f1c:	f240 5205 	movw	r2, #1285	@ 0x505
 8000f20:	212e      	movs	r1, #46	@ 0x2e
 8000f22:	483a      	ldr	r0, [pc, #232]	@ (800100c <main+0x19c>)
 8000f24:	f000 faa8 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_CLK_CTRL, 0x0002);
 8000f28:	2202      	movs	r2, #2
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4837      	ldr	r0, [pc, #220]	@ (800100c <main+0x19c>)
 8000f2e:	f000 faa3 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_I2S_CTRL, 0x0001);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2106      	movs	r1, #6
 8000f36:	4835      	ldr	r0, [pc, #212]	@ (800100c <main+0x19c>)
 8000f38:	f000 fa9e 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_ADCDAC_CTRL, 0x000C);
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	210e      	movs	r1, #14
 8000f40:	4832      	ldr	r0, [pc, #200]	@ (800100c <main+0x19c>)
 8000f42:	f000 fa99 	bl	8001478 <Test_Register>
	Test_Register(&hi2c2, CHIP_DAC_VOL, 0x3C3C);
 8000f46:	f643 423c 	movw	r2, #15420	@ 0x3c3c
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	482f      	ldr	r0, [pc, #188]	@ (800100c <main+0x19c>)
 8000f4e:	f000 fa93 	bl	8001478 <Test_Register>

	printf("Tests terminés.\r\n");
 8000f52:	482f      	ldr	r0, [pc, #188]	@ (8001010 <main+0x1a0>)
 8000f54:	f00a fc98 	bl	800b888 <puts>
	printf("Démarrage du système...\r\n");
 8000f58:	482e      	ldr	r0, [pc, #184]	@ (8001014 <main+0x1a4>)
 8000f5a:	f00a fc95 	bl	800b888 <puts>
	/* Démarrer la transmission DMA */
	if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, tx_buffer, BUFFER_SIZE) != HAL_OK) {
 8000f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f62:	492d      	ldr	r1, [pc, #180]	@ (8001018 <main+0x1a8>)
 8000f64:	4826      	ldr	r0, [pc, #152]	@ (8001000 <main+0x190>)
 8000f66:	f006 fe19 	bl	8007b9c <HAL_SAI_Transmit_DMA>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <main+0x10a>
		printf("Erreur : Impossible de démarrer la transmission I2S\r\n");
 8000f70:	482a      	ldr	r0, [pc, #168]	@ (800101c <main+0x1ac>)
 8000f72:	f00a fc89 	bl	800b888 <puts>
		Error_Handler();
 8000f76:	f000 f8e7 	bl	8001148 <Error_Handler>
	}

	printf("Transmission I2S démarrée avec succès\r\n");
 8000f7a:	4829      	ldr	r0, [pc, #164]	@ (8001020 <main+0x1b0>)
 8000f7c:	f00a fc84 	bl	800b888 <puts>


	// Génération du signal triangulaire
	Generate_Triangle_Wave();
 8000f80:	f7ff ff20 	bl	8000dc4 <Generate_Triangle_Wave>

	// Démarrer l'ADC
	status1 = HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, BUFFER_SIZE);
 8000f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f88:	4926      	ldr	r1, [pc, #152]	@ (8001024 <main+0x1b4>)
 8000f8a:	4827      	ldr	r0, [pc, #156]	@ (8001028 <main+0x1b8>)
 8000f8c:	f001 f9da 	bl	8002344 <HAL_ADC_Start_DMA>
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
	if (status1 != HAL_OK) {
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <main+0x138>
		printf("Erreur ADC DMA : %d\r\n", status1);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4823      	ldr	r0, [pc, #140]	@ (800102c <main+0x1bc>)
 8000fa0:	f00a fc0a 	bl	800b7b8 <iprintf>
		Error_Handler();
 8000fa4:	f000 f8d0 	bl	8001148 <Error_Handler>
	}

	// Démarrer le DAC
	status2 = HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)adc_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <main+0x1b4>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	481e      	ldr	r0, [pc, #120]	@ (8001030 <main+0x1c0>)
 8000fb6:	f002 fc0b 	bl	80037d0 <HAL_DAC_Start_DMA>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71bb      	strb	r3, [r7, #6]
	if (status2 != HAL_OK) {
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <main+0x162>
		printf("Erreur DAC DMA : %d\r\n", status2);
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481a      	ldr	r0, [pc, #104]	@ (8001034 <main+0x1c4>)
 8000fca:	f00a fbf5 	bl	800b7b8 <iprintf>
		Error_Handler();
 8000fce:	f000 f8bb 	bl	8001148 <Error_Handler>
	}

	// Démarrer le Timer 6 pour synchroniser les mises à jour du DAC
	if (HAL_TIM_Base_Start(&htim6) != HAL_OK) {
 8000fd2:	4819      	ldr	r0, [pc, #100]	@ (8001038 <main+0x1c8>)
 8000fd4:	f007 fca4 	bl	8008920 <HAL_TIM_Base_Start>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <main+0x178>
		printf("Erreur : Impossible de démarrer le Timer 6\r\n");
 8000fde:	4817      	ldr	r0, [pc, #92]	@ (800103c <main+0x1cc>)
 8000fe0:	f00a fc52 	bl	800b888 <puts>
		Error_Handler();
 8000fe4:	f000 f8b0 	bl	8001148 <Error_Handler>
	}
	printf("Initialisation terminée...\r\n");
 8000fe8:	4815      	ldr	r0, [pc, #84]	@ (8001040 <main+0x1d0>)
 8000fea:	f00a fc4d 	bl	800b888 <puts>
	printf("Signal triangulaire envoyé au DAC...\r\n");
 8000fee:	4815      	ldr	r0, [pc, #84]	@ (8001044 <main+0x1d4>)
 8000ff0:	f00a fc4a 	bl	800b888 <puts>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000ff4:	f7ff fc9a 	bl	800092c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000ff8:	f009 f8b3 	bl	800a162 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <main+0x18c>
 8001000:	20000a3c 	.word	0x20000a3c
 8001004:	0800c81c 	.word	0x0800c81c
 8001008:	0800c838 	.word	0x0800c838
 800100c:	200003e8 	.word	0x200003e8
 8001010:	0800c864 	.word	0x0800c864
 8001014:	0800c878 	.word	0x0800c878
 8001018:	2000043c 	.word	0x2000043c
 800101c:	0800c894 	.word	0x0800c894
 8001020:	0800c8cc 	.word	0x0800c8cc
 8001024:	2000083c 	.word	0x2000083c
 8001028:	20000088 	.word	0x20000088
 800102c:	0800c8f8 	.word	0x0800c8f8
 8001030:	20000134 	.word	0x20000134
 8001034:	0800c910 	.word	0x0800c910
 8001038:	20000c40 	.word	0x20000c40
 800103c:	0800c928 	.word	0x0800c928
 8001040:	0800c958 	.word	0x0800c958
 8001044:	0800c978 	.word	0x0800c978

08001048 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b096      	sub	sp, #88	@ 0x58
 800104c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2244      	movs	r2, #68	@ 0x44
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00a fcf6 	bl	800ba48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800106a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800106e:	f004 fa1b 	bl	80054a8 <HAL_PWREx_ControlVoltageScaling>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001078:	f000 f866 	bl	8001148 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001084:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001086:	2310      	movs	r3, #16
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108e:	2302      	movs	r3, #2
 8001090:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001096:	230a      	movs	r3, #10
 8001098:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800109a:	2307      	movs	r3, #7
 800109c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800109e:	2302      	movs	r3, #2
 80010a0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fa52 	bl	8005554 <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x72>
	{
		Error_Handler();
 80010b6:	f000 f847 	bl	8001148 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	2303      	movs	r3, #3
 80010c0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ce:	463b      	mov	r3, r7
 80010d0:	2104      	movs	r1, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fe1a 	bl	8005d0c <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80010de:	f000 f833 	bl	8001148 <Error_Handler>
	}
}
 80010e2:	bf00      	nop
 80010e4:	3758      	adds	r7, #88	@ 0x58
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0a2      	sub	sp, #136	@ 0x88
 80010f0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2288      	movs	r2, #136	@ 0x88
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00a fca5 	bl	800ba48 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_ADC;
 80010fe:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001102:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001104:	2300      	movs	r3, #0
 8001106:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001108:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800110c:	67bb      	str	r3, [r7, #120]	@ 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8001116:	230d      	movs	r3, #13
 8001118:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 800111a:	2311      	movs	r3, #17
 800111c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800111e:	2302      	movs	r3, #2
 8001120:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <PeriphCommonClock_Config+0x58>)
 8001128:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4618      	mov	r0, r3
 800112e:	f005 f811 	bl	8006154 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8001138:	f000 f806 	bl	8001148 <Error_Handler>
	}
}
 800113c:	bf00      	nop
 800113e:	3788      	adds	r7, #136	@ 0x88
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	01010000 	.word	0x01010000

08001148 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_SAI2_Init+0xb0>)
 800115a:	4a2b      	ldr	r2, [pc, #172]	@ (8001208 <MX_SAI2_Init+0xb4>)
 800115c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <MX_SAI2_Init+0xb0>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_SAI2_Init+0xb0>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_SAI2_Init+0xb0>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_SAI2_Init+0xb0>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_SAI2_Init+0xb0>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_SAI2_Init+0xb0>)
 800117e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001182:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_SAI2_Init+0xb0>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_SAI2_Init+0xb0>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_SAI2_Init+0xb0>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_SAI2_Init+0xb0>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800119c:	2302      	movs	r3, #2
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	4818      	ldr	r0, [pc, #96]	@ (8001204 <MX_SAI2_Init+0xb0>)
 80011a4:	f006 faf0 	bl	8007788 <HAL_SAI_InitProtocol>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 80011ae:	f7ff ffcb 	bl	8001148 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011b4:	4a16      	ldr	r2, [pc, #88]	@ (8001210 <MX_SAI2_Init+0xbc>)
 80011b6:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011ba:	2203      	movs	r2, #3
 80011bc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80011e8:	2302      	movs	r3, #2
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	4807      	ldr	r0, [pc, #28]	@ (800120c <MX_SAI2_Init+0xb8>)
 80011f0:	f006 faca 	bl	8007788 <HAL_SAI_InitProtocol>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 80011fa:	f7ff ffa5 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000a3c 	.word	0x20000a3c
 8001208:	40015804 	.word	0x40015804
 800120c:	20000ac0 	.word	0x20000ac0
 8001210:	40015824 	.word	0x40015824

08001214 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a64      	ldr	r2, [pc, #400]	@ (80013b4 <HAL_SAI_MspInit+0x1a0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d15e      	bne.n	80012e4 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001226:	4b64      	ldr	r3, [pc, #400]	@ (80013b8 <HAL_SAI_MspInit+0x1a4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d113      	bne.n	8001256 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800122e:	4b63      	ldr	r3, [pc, #396]	@ (80013bc <HAL_SAI_MspInit+0x1a8>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001232:	4a62      	ldr	r2, [pc, #392]	@ (80013bc <HAL_SAI_MspInit+0x1a8>)
 8001234:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001238:	6613      	str	r3, [r2, #96]	@ 0x60
 800123a:	4b60      	ldr	r3, [pc, #384]	@ (80013bc <HAL_SAI_MspInit+0x1a8>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	204b      	movs	r0, #75	@ 0x4b
 800124c:	f002 fa67 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001250:	204b      	movs	r0, #75	@ 0x4b
 8001252:	f002 fa80 	bl	8003756 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8001256:	4b58      	ldr	r3, [pc, #352]	@ (80013b8 <HAL_SAI_MspInit+0x1a4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a56      	ldr	r2, [pc, #344]	@ (80013b8 <HAL_SAI_MspInit+0x1a4>)
 800125e:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001260:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001272:	230d      	movs	r3, #13
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4850      	ldr	r0, [pc, #320]	@ (80013c0 <HAL_SAI_MspInit+0x1ac>)
 800127e:	f003 f827 	bl	80042d0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8001282:	4b50      	ldr	r3, [pc, #320]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 8001284:	4a50      	ldr	r2, [pc, #320]	@ (80013c8 <HAL_SAI_MspInit+0x1b4>)
 8001286:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8001288:	4b4e      	ldr	r3, [pc, #312]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 800128a:	2201      	movs	r2, #1
 800128c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128e:	4b4d      	ldr	r3, [pc, #308]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 8001290:	2210      	movs	r2, #16
 8001292:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001294:	4b4b      	ldr	r3, [pc, #300]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800129a:	4b4a      	ldr	r3, [pc, #296]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012a0:	4b48      	ldr	r3, [pc, #288]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a6:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012a8:	4b46      	ldr	r3, [pc, #280]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ae:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80012b0:	4b44      	ldr	r3, [pc, #272]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012b2:	2220      	movs	r2, #32
 80012b4:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80012b6:	4b43      	ldr	r3, [pc, #268]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80012bc:	4841      	ldr	r0, [pc, #260]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012be:	f002 fd91 	bl	8003de4 <HAL_DMA_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80012c8:	f7ff ff3e 	bl	8001148 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a3d      	ldr	r2, [pc, #244]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80012d2:	4a3c      	ldr	r2, [pc, #240]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3a      	ldr	r2, [pc, #232]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012dc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80012de:	4a39      	ldr	r2, [pc, #228]	@ (80013c4 <HAL_SAI_MspInit+0x1b0>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a38      	ldr	r2, [pc, #224]	@ (80013cc <HAL_SAI_MspInit+0x1b8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d15e      	bne.n	80013ac <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80012ee:	4b32      	ldr	r3, [pc, #200]	@ (80013b8 <HAL_SAI_MspInit+0x1a4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d113      	bne.n	800131e <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80012f6:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <HAL_SAI_MspInit+0x1a8>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fa:	4a30      	ldr	r2, [pc, #192]	@ (80013bc <HAL_SAI_MspInit+0x1a8>)
 80012fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001300:	6613      	str	r3, [r2, #96]	@ 0x60
 8001302:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <HAL_SAI_MspInit+0x1a8>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2105      	movs	r1, #5
 8001312:	204b      	movs	r0, #75	@ 0x4b
 8001314:	f002 fa03 	bl	800371e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001318:	204b      	movs	r0, #75	@ 0x4b
 800131a:	f002 fa1c 	bl	8003756 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <HAL_SAI_MspInit+0x1a4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a24      	ldr	r2, [pc, #144]	@ (80013b8 <HAL_SAI_MspInit+0x1a4>)
 8001326:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800133a:	230d      	movs	r3, #13
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4822      	ldr	r0, [pc, #136]	@ (80013d0 <HAL_SAI_MspInit+0x1bc>)
 8001346:	f002 ffc3 	bl	80042d0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 800134a:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 800134c:	4a22      	ldr	r2, [pc, #136]	@ (80013d8 <HAL_SAI_MspInit+0x1c4>)
 800134e:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8001350:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 8001352:	2201      	movs	r2, #1
 8001354:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 8001364:	2280      	movs	r2, #128	@ 0x80
 8001366:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 800136a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 8001372:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001376:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 800137a:	2220      	movs	r2, #32
 800137c:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001384:	4813      	ldr	r0, [pc, #76]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 8001386:	f002 fd2d 	bl	8003de4 <HAL_DMA_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8001390:	f7ff feda 	bl	8001148 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 8001398:	671a      	str	r2, [r3, #112]	@ 0x70
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 80013a4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80013a6:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_SAI_MspInit+0x1c0>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	@ 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40015804 	.word	0x40015804
 80013b8:	20000bd4 	.word	0x20000bd4
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000400 	.word	0x48000400
 80013c4:	20000b44 	.word	0x20000b44
 80013c8:	4002006c 	.word	0x4002006c
 80013cc:	40015824 	.word	0x40015824
 80013d0:	48000800 	.word	0x48000800
 80013d4:	20000b8c 	.word	0x20000b8c
 80013d8:	40020080 	.word	0x40020080

080013dc <SGTL5000_WriteRegister>:

#include "sgtl5000.h"
#include <stdio.h>

// Fonction pour écrire dans un registre
HAL_StatusTypeDef SGTL5000_WriteRegister(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t value) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af04      	add	r7, sp, #16
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	803b      	strh	r3, [r7, #0]
    uint8_t data[2] = {
 80013ec:	883b      	ldrh	r3, [r7, #0]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	733b      	strb	r3, [r7, #12]
 80013f6:	883b      	ldrh	r3, [r7, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	737b      	strb	r3, [r7, #13]
        (value >> 8) & 0xFF, // MSB de la valeur
        value & 0xFF         // LSB de la valeur
    };

    // Utilisation de HAL_I2C_Mem_Write
    return HAL_I2C_Mem_Write(hi2c, SGTL5000_I2C_ADDR, reg, I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY);
 80013fc:	887a      	ldrh	r2, [r7, #2]
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2302      	movs	r3, #2
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2302      	movs	r3, #2
 8001410:	2114      	movs	r1, #20
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f003 f9ba 	bl	800478c <HAL_I2C_Mem_Write>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <SGTL5000_ReadRegister>:

// Fonction pour lire un registre
HAL_StatusTypeDef SGTL5000_ReadRegister(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t *value) {
 8001422:	b580      	push	{r7, lr}
 8001424:	b08a      	sub	sp, #40	@ 0x28
 8001426:	af04      	add	r7, sp, #16
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	460b      	mov	r3, r1
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	817b      	strh	r3, [r7, #10]
    uint8_t data[2] = { 0 };
 8001430:	2300      	movs	r3, #0
 8001432:	82bb      	strh	r3, [r7, #20]

    // Utilisation de HAL_I2C_Mem_Read
    if (HAL_I2C_Mem_Read(hi2c, SGTL5000_I2C_ADDR, reg, I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001434:	897a      	ldrh	r2, [r7, #10]
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2302      	movs	r3, #2
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2302      	movs	r3, #2
 8001448:	2114      	movs	r1, #20
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f003 fab2 	bl	80049b4 <HAL_I2C_Mem_Read>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SGTL5000_ReadRegister+0x38>
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00a      	b.n	8001470 <SGTL5000_ReadRegister+0x4e>
    }

    // Combiner les octets pour former une valeur 16 bits
    *value = (data[0] << 8) | data[1];
 800145a:	7d3b      	ldrb	r3, [r7, #20]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	7d7b      	ldrb	r3, [r7, #21]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <Test_Register>:

    return status;
}

// Fonction de test d'un registre
void Test_Register(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t write_value) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	803b      	strh	r3, [r7, #0]
    uint16_t read_value = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	81fb      	strh	r3, [r7, #14]

    // Écriture dans le registre
    if (SGTL5000_WriteRegister(hi2c, reg, write_value) == HAL_OK) {
 800148c:	883a      	ldrh	r2, [r7, #0]
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SGTL5000_WriteRegister>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d110      	bne.n	80014c0 <Test_Register+0x48>
        printf("Écriture réussie dans le registre 0x%04X avec la valeur 0x%04X\r\n", reg, write_value);
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	883a      	ldrh	r2, [r7, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4819      	ldr	r0, [pc, #100]	@ (800150c <Test_Register+0x94>)
 80014a6:	f00a f987 	bl	800b7b8 <iprintf>
        printf("Erreur lors de l'écriture dans le registre 0x%04X\r\n", reg);
        return;
    }

    // Lecture du registre
    if (SGTL5000_ReadRegister(hi2c, reg, &read_value) == HAL_OK) {
 80014aa:	f107 020e 	add.w	r2, r7, #14
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffb5 	bl	8001422 <SGTL5000_ReadRegister>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d11e      	bne.n	80014fc <Test_Register+0x84>
 80014be:	e005      	b.n	80014cc <Test_Register+0x54>
        printf("Erreur lors de l'écriture dans le registre 0x%04X\r\n", reg);
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4812      	ldr	r0, [pc, #72]	@ (8001510 <Test_Register+0x98>)
 80014c6:	f00a f977 	bl	800b7b8 <iprintf>
 80014ca:	e01c      	b.n	8001506 <Test_Register+0x8e>
        printf("Lecture réussie du registre 0x%04X. Valeur lue : 0x%04X\r\n", reg, read_value);
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	89fa      	ldrh	r2, [r7, #14]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4810      	ldr	r0, [pc, #64]	@ (8001514 <Test_Register+0x9c>)
 80014d4:	f00a f970 	bl	800b7b8 <iprintf>

        // Vérification
        if (read_value == write_value) {
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	883a      	ldrh	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d105      	bne.n	80014ec <Test_Register+0x74>
            printf("Test réussi pour le registre 0x%04X. La valeur correspond.\r\n", reg);
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <Test_Register+0xa0>)
 80014e6:	f00a f967 	bl	800b7b8 <iprintf>
 80014ea:	e00c      	b.n	8001506 <Test_Register+0x8e>
        } else {
            printf("Erreur : La valeur lue 0x%04X ne correspond pas à la valeur écrite 0x%04X.\r\n", read_value, write_value);
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	4619      	mov	r1, r3
 80014f0:	883b      	ldrh	r3, [r7, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4809      	ldr	r0, [pc, #36]	@ (800151c <Test_Register+0xa4>)
 80014f6:	f00a f95f 	bl	800b7b8 <iprintf>
 80014fa:	e004      	b.n	8001506 <Test_Register+0x8e>
        }
    } else {
        printf("Erreur lors de la lecture du registre 0x%04X\r\n", reg);
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <Test_Register+0xa8>)
 8001502:	f00a f959 	bl	800b7b8 <iprintf>
    }
}
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	0800c9a0 	.word	0x0800c9a0
 8001510:	0800c9e4 	.word	0x0800c9e4
 8001514:	0800ca1c 	.word	0x0800ca1c
 8001518:	0800ca58 	.word	0x0800ca58
 800151c:	0800ca98 	.word	0x0800ca98
 8001520:	0800cae8 	.word	0x0800cae8

08001524 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <MX_SPI3_Init+0x74>)
 800152a:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <MX_SPI3_Init+0x78>)
 800152c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001530:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001534:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001536:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_SPI3_Init+0x74>)
 800153e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001542:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <MX_SPI3_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001556:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_SPI3_Init+0x74>)
 800155a:	2210      	movs	r2, #16
 800155c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <MX_SPI3_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001572:	2207      	movs	r2, #7
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_SPI3_Init+0x74>)
 800157e:	2208      	movs	r2, #8
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_SPI3_Init+0x74>)
 8001584:	f006 ffbf 	bl	8008506 <HAL_SPI_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800158e:	f7ff fddb 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000bd8 	.word	0x20000bd8
 800159c:	40003c00 	.word	0x40003c00

080015a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a29      	ldr	r2, [pc, #164]	@ (8001664 <HAL_SPI_MspInit+0xc4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d14c      	bne.n	800165c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015c2:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a28      	ldr	r2, [pc, #160]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 80015c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ce:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	4a22      	ldr	r2, [pc, #136]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <HAL_SPI_MspInit+0xc8>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800160a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800161c:	2306      	movs	r3, #6
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4811      	ldr	r0, [pc, #68]	@ (800166c <HAL_SPI_MspInit+0xcc>)
 8001628:	f002 fe52 	bl	80042d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800162c:	2320      	movs	r3, #32
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800163c:	2306      	movs	r3, #6
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	480a      	ldr	r0, [pc, #40]	@ (8001670 <HAL_SPI_MspInit+0xd0>)
 8001648:	f002 fe42 	bl	80042d0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2105      	movs	r1, #5
 8001650:	2033      	movs	r0, #51	@ 0x33
 8001652:	f002 f864 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001656:	2033      	movs	r0, #51	@ 0x33
 8001658:	f002 f87d 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	@ 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40003c00 	.word	0x40003c00
 8001668:	40021000 	.word	0x40021000
 800166c:	48000800 	.word	0x48000800
 8001670:	48000400 	.word	0x48000400

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_MspInit+0x4c>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	4a10      	ldr	r2, [pc, #64]	@ (80016c0 <HAL_MspInit+0x4c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6613      	str	r3, [r2, #96]	@ 0x60
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_MspInit+0x4c>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <HAL_MspInit+0x4c>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <HAL_MspInit+0x4c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	6593      	str	r3, [r2, #88]	@ 0x58
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_MspInit+0x4c>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	210f      	movs	r1, #15
 80016ae:	f06f 0001 	mvn.w	r0, #1
 80016b2:	f002 f834 	bl	800371e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <NMI_Handler+0x4>

080016cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <MemManage_Handler+0x4>

080016dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 fa97 	bl	8001c30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001702:	f009 fb11 	bl	800ad28 <xTaskGetSchedulerState>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d001      	beq.n	8001710 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800170c:	f009 fd54 	bl	800b1b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <DMA1_Channel1_IRQHandler+0x10>)
 800171a:	f002 fcfa 	bl	8004112 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200000ec 	.word	0x200000ec

08001728 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <DMA1_Channel3_IRQHandler+0x10>)
 800172e:	f002 fcf0 	bl	8004112 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000148 	.word	0x20000148

0800173c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA1_Channel6_IRQHandler+0x10>)
 8001742:	f002 fce6 	bl	8004112 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000b44 	.word	0x20000b44

08001750 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <DMA1_Channel7_IRQHandler+0x10>)
 8001756:	f002 fcdc 	bl	8004112 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000b8c 	.word	0x20000b8c

08001764 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <ADC1_2_IRQHandler+0x10>)
 800176a:	f000 fea7 	bl	80024bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000088 	.word	0x20000088

08001778 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <USART2_IRQHandler+0x10>)
 800177e:	f007 fc95 	bl	80090ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000c8c 	.word	0x20000c8c

0800178c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <SPI3_IRQHandler+0x10>)
 8001792:	f006 ff5b 	bl	800864c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000bd8 	.word	0x20000bd8

080017a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017a4:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <TIM6_DAC_IRQHandler+0x14>)
 80017a6:	f007 f923 	bl	80089f0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <TIM6_DAC_IRQHandler+0x18>)
 80017ac:	f002 f8dc 	bl	8003968 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000c40 	.word	0x20000c40
 80017b8:	20000134 	.word	0x20000134

080017bc <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80017c0:	4803      	ldr	r0, [pc, #12]	@ (80017d0 <SAI2_IRQHandler+0x14>)
 80017c2:	f006 fa9b 	bl	8007cfc <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80017c6:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <SAI2_IRQHandler+0x18>)
 80017c8:	f006 fa98 	bl	8007cfc <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000a3c 	.word	0x20000a3c
 80017d4:	20000ac0 	.word	0x20000ac0

080017d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
  }

  return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f9bb 	bl	8000ba8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf1      	blt.n	8001824 <_write+0x12>
  }
  return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001872:	605a      	str	r2, [r3, #4]
  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f00a f8fe 	bl	800bae4 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20018000 	.word	0x20018000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000c3c 	.word	0x20000c3c
 800191c:	20001b70 	.word	0x20001b70

08001920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <MX_TIM6_Init+0x64>)
 8001956:	4a15      	ldr	r2, [pc, #84]	@ (80019ac <MX_TIM6_Init+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <MX_TIM6_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <MX_TIM6_Init+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <MX_TIM6_Init+0x64>)
 8001968:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800196c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <MX_TIM6_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001974:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <MX_TIM6_Init+0x64>)
 8001976:	f006 ff7c 	bl	8008872 <HAL_TIM_Base_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001980:	f7ff fbe2 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <MX_TIM6_Init+0x64>)
 8001992:	f007 fa0d 	bl	8008db0 <HAL_TIMEx_MasterConfigSynchronization>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800199c:	f7ff fbd4 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000c40 	.word	0x20000c40
 80019ac:	40001000 	.word	0x40001000

080019b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <HAL_TIM_Base_MspInit+0x44>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d113      	bne.n	80019ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_TIM_Base_MspInit+0x48>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	4a0c      	ldr	r2, [pc, #48]	@ (80019f8 <HAL_TIM_Base_MspInit+0x48>)
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <HAL_TIM_Base_MspInit+0x48>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	2036      	movs	r0, #54	@ 0x36
 80019e0:	f001 fe9d 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019e4:	2036      	movs	r0, #54	@ 0x36
 80019e6:	f001 feb6 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40001000 	.word	0x40001000
 80019f8:	40021000 	.word	0x40021000

080019fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a02:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <MX_USART2_UART_Init+0x5c>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_USART2_UART_Init+0x58>)
 8001a40:	f007 fa5c 	bl	8008efc <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a4a:	f7ff fb7d 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000c8c 	.word	0x20000c8c
 8001a58:	40004400 	.word	0x40004400

08001a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0ac      	sub	sp, #176	@ 0xb0
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2288      	movs	r2, #136	@ 0x88
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f009 ffe3 	bl	800ba48 <memset>
  if(uartHandle->Instance==USART2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a25      	ldr	r2, [pc, #148]	@ (8001b1c <HAL_UART_MspInit+0xc0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d143      	bne.n	8001b14 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f004 fb5b 	bl	8006154 <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aa4:	f7ff fb50 	bl	8001148 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	4a1c      	ldr	r2, [pc, #112]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	4a16      	ldr	r2, [pc, #88]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <HAL_UART_MspInit+0xc4>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af0:	2307      	movs	r3, #7
 8001af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b00:	f002 fbe6 	bl	80042d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2105      	movs	r1, #5
 8001b08:	2026      	movs	r0, #38	@ 0x26
 8001b0a:	f001 fe08 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b0e:	2026      	movs	r0, #38	@ 0x26
 8001b10:	f001 fe21 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b14:	bf00      	nop
 8001b16:	37b0      	adds	r7, #176	@ 0xb0
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40021000 	.word	0x40021000

08001b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b28:	f7ff fefa 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopForever+0xe>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopForever+0x16>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f009 ffcd 	bl	800baf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b56:	f7ff f98b 	bl	8000e70 <main>

08001b5a <LoopForever>:

LoopForever:
    b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b68:	0800cbac 	.word	0x0800cbac
  ldr r2, =_sbss
 8001b6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b70:	20001b70 	.word	0x20001b70

08001b74 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC3_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_Init+0x3c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <HAL_Init+0x3c>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f001 fdba 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b94:	200f      	movs	r0, #15
 8001b96:	f000 f80f 	bl	8001bb8 <HAL_InitTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	e001      	b.n	8001baa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba6:	f7ff fd65 	bl	8001674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bc4:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <HAL_InitTick+0x6c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <HAL_InitTick+0x70>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <HAL_InitTick+0x6c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fdc5 	bl	8003772 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d809      	bhi.n	8001c08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f001 fd8f 	bl	800371e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c00:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <HAL_InitTick+0x74>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e007      	b.n	8001c18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e004      	b.n	8001c18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	e001      	b.n	8001c18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000d14 	.word	0x20000d14

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000d14 	.word	0x20000d14

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3360      	adds	r3, #96	@ 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <LL_ADC_SetOffset+0x44>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	03fff000 	.word	0x03fff000

08001d68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3360      	adds	r3, #96	@ 0x60
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3360      	adds	r3, #96	@ 0x60
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3330      	adds	r3, #48	@ 0x30
 8001e00:	461a      	mov	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	4413      	add	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	211f      	movs	r1, #31
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	f003 011f 	and.w	r1, r3, #31
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	431a      	orrs	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b087      	sub	sp, #28
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3314      	adds	r3, #20
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	0e5b      	lsrs	r3, r3, #25
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	4413      	add	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	0d1b      	lsrs	r3, r3, #20
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2107      	movs	r1, #7
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0d1b      	lsrs	r3, r3, #20
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0318 	and.w	r3, r3, #24
 8001ee6:	4908      	ldr	r1, [pc, #32]	@ (8001f08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ee8:	40d9      	lsrs	r1, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	400b      	ands	r3, r1
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	0007ffff 	.word	0x0007ffff

08001f0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 031f 	and.w	r3, r3, #31
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6093      	str	r3, [r2, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f7c:	d101      	bne.n	8001f82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fcc:	d101      	bne.n	8001fd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <LL_ADC_IsEnabled+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <LL_ADC_IsEnabled+0x1a>
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800203e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002042:	f043 0204 	orr.w	r2, r3, #4
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b04      	cmp	r3, #4
 8002068:	d101      	bne.n	800206e <LL_ADC_REG_IsConversionOngoing+0x18>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b08      	cmp	r3, #8
 800208e:	d101      	bne.n	8002094 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b089      	sub	sp, #36	@ 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e130      	b.n	8002320 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7fe fabf 	bl	8000650 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff3f 	bl	8001f68 <LL_ADC_IsDeepPowerDownEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff25 	bl	8001f44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff5a 	bl	8001fb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff3e 	bl	8001f90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002114:	4b84      	ldr	r3, [pc, #528]	@ (8002328 <HAL_ADC_Init+0x284>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	4a84      	ldr	r2, [pc, #528]	@ (800232c <HAL_ADC_Init+0x288>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	3301      	adds	r3, #1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002128:	e002      	b.n	8002130 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3b01      	subs	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f9      	bne.n	800212a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff3c 	bl	8001fb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff75 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 800216c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80c9 	bne.w	800230e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 80c5 	bne.w	800230e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800218c:	f043 0202 	orr.w	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff35 	bl	8002008 <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d115      	bne.n	80021d0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a4:	4862      	ldr	r0, [pc, #392]	@ (8002330 <HAL_ADC_Init+0x28c>)
 80021a6:	f7ff ff2f 	bl	8002008 <LL_ADC_IsEnabled>
 80021aa:	4604      	mov	r4, r0
 80021ac:	4861      	ldr	r0, [pc, #388]	@ (8002334 <HAL_ADC_Init+0x290>)
 80021ae:	f7ff ff2b 	bl	8002008 <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	431c      	orrs	r4, r3
 80021b6:	4860      	ldr	r0, [pc, #384]	@ (8002338 <HAL_ADC_Init+0x294>)
 80021b8:	f7ff ff26 	bl	8002008 <LL_ADC_IsEnabled>
 80021bc:	4603      	mov	r3, r0
 80021be:	4323      	orrs	r3, r4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4619      	mov	r1, r3
 80021ca:	485c      	ldr	r0, [pc, #368]	@ (800233c <HAL_ADC_Init+0x298>)
 80021cc:	f7ff fd74 	bl	8001cb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7e5b      	ldrb	r3, [r3, #25]
 80021d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d106      	bne.n	800220c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	3b01      	subs	r3, #1
 8002204:	045b      	lsls	r3, r3, #17
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d009      	beq.n	8002228 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b44      	ldr	r3, [pc, #272]	@ (8002340 <HAL_ADC_Init+0x29c>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	69b9      	ldr	r1, [r7, #24]
 8002238:	430b      	orrs	r3, r1
 800223a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff1b 	bl	800207c <LL_ADC_INJ_IsConversionOngoing>
 8002246:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d13d      	bne.n	80022ca <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d13a      	bne.n	80022ca <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002258:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002260:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002270:	f023 0302 	bic.w	r3, r3, #2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	69b9      	ldr	r1, [r7, #24]
 800227a:	430b      	orrs	r3, r1
 800227c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002284:	2b01      	cmp	r3, #1
 8002286:	d118      	bne.n	80022ba <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022aa:	430a      	orrs	r2, r1
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	611a      	str	r2, [r3, #16]
 80022b8:	e007      	b.n	80022ca <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10c      	bne.n	80022ec <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	f023 010f 	bic.w	r1, r3, #15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ea:	e007      	b.n	80022fc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 020f 	bic.w	r2, r2, #15
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	f023 0303 	bic.w	r3, r3, #3
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	@ 0x54
 800230c:	e007      	b.n	800231e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800231e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3724      	adds	r7, #36	@ 0x24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd90      	pop	{r4, r7, pc}
 8002328:	20000000 	.word	0x20000000
 800232c:	053e2d63 	.word	0x053e2d63
 8002330:	50040000 	.word	0x50040000
 8002334:	50040100 	.word	0x50040100
 8002338:	50040200 	.word	0x50040200
 800233c:	50040300 	.word	0x50040300
 8002340:	fff0c007 	.word	0xfff0c007

08002344 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002350:	4853      	ldr	r0, [pc, #332]	@ (80024a0 <HAL_ADC_Start_DMA+0x15c>)
 8002352:	f7ff fddb 	bl	8001f0c <LL_ADC_GetMultimode>
 8002356:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe7a 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 8093 	bne.w	8002490 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_ADC_Start_DMA+0x34>
 8002374:	2302      	movs	r3, #2
 8002376:	e08e      	b.n	8002496 <HAL_ADC_Start_DMA+0x152>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a47      	ldr	r2, [pc, #284]	@ (80024a4 <HAL_ADC_Start_DMA+0x160>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d008      	beq.n	800239c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d002      	beq.n	800239c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b09      	cmp	r3, #9
 800239a:	d172      	bne.n	8002482 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fec1 	bl	8003124 <ADC_Enable>
 80023a2:	4603      	mov	r3, r0
 80023a4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d165      	bne.n	8002478 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a38      	ldr	r2, [pc, #224]	@ (80024a8 <HAL_ADC_Start_DMA+0x164>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d002      	beq.n	80023d0 <HAL_ADC_Start_DMA+0x8c>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_Start_DMA+0x8e>
 80023d0:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <HAL_ADC_Start_DMA+0x168>)
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d002      	beq.n	80023e0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d105      	bne.n	80023ec <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f023 0206 	bic.w	r2, r3, #6
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	659a      	str	r2, [r3, #88]	@ 0x58
 8002404:	e002      	b.n	800240c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002410:	4a27      	ldr	r2, [pc, #156]	@ (80024b0 <HAL_ADC_Start_DMA+0x16c>)
 8002412:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002418:	4a26      	ldr	r2, [pc, #152]	@ (80024b4 <HAL_ADC_Start_DMA+0x170>)
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002420:	4a25      	ldr	r2, [pc, #148]	@ (80024b8 <HAL_ADC_Start_DMA+0x174>)
 8002422:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	221c      	movs	r2, #28
 800242a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0210 	orr.w	r2, r2, #16
 8002442:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3340      	adds	r3, #64	@ 0x40
 800245e:	4619      	mov	r1, r3
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f001 fd76 	bl	8003f54 <HAL_DMA_Start_IT>
 8002468:	4603      	mov	r3, r0
 800246a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fddc 	bl	800202e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002476:	e00d      	b.n	8002494 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002480:	e008      	b.n	8002494 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800248e:	e001      	b.n	8002494 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002494:	7dfb      	ldrb	r3, [r7, #23]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	50040300 	.word	0x50040300
 80024a4:	50040200 	.word	0x50040200
 80024a8:	50040100 	.word	0x50040100
 80024ac:	50040000 	.word	0x50040000
 80024b0:	08003231 	.word	0x08003231
 80024b4:	08003309 	.word	0x08003309
 80024b8:	08003325 	.word	0x08003325

080024bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	@ 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d8:	4882      	ldr	r0, [pc, #520]	@ (80026e4 <HAL_ADC_IRQHandler+0x228>)
 80024da:	f7ff fd17 	bl	8001f0c <LL_ADC_GetMultimode>
 80024de:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d017      	beq.n	800251a <HAL_ADC_IRQHandler+0x5e>
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 ff71 	bl	80033f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2202      	movs	r2, #2
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <HAL_ADC_IRQHandler+0x72>
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8083 	beq.w	8002640 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d07d      	beq.n	8002640 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fc32 	bl	8001dca <LL_ADC_REG_IsTriggerSourceSWStart>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d062      	beq.n	8002632 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5d      	ldr	r2, [pc, #372]	@ (80026e8 <HAL_ADC_IRQHandler+0x22c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d002      	beq.n	800257c <HAL_ADC_IRQHandler+0xc0>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	e000      	b.n	800257e <HAL_ADC_IRQHandler+0xc2>
 800257c:	4b5b      	ldr	r3, [pc, #364]	@ (80026ec <HAL_ADC_IRQHandler+0x230>)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4293      	cmp	r3, r2
 8002584:	d008      	beq.n	8002598 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b05      	cmp	r3, #5
 8002590:	d002      	beq.n	8002598 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b09      	cmp	r3, #9
 8002596:	d104      	bne.n	80025a2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	e00c      	b.n	80025bc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a50      	ldr	r2, [pc, #320]	@ (80026e8 <HAL_ADC_IRQHandler+0x22c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d002      	beq.n	80025b2 <HAL_ADC_IRQHandler+0xf6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	e000      	b.n	80025b4 <HAL_ADC_IRQHandler+0xf8>
 80025b2:	4b4e      	ldr	r3, [pc, #312]	@ (80026ec <HAL_ADC_IRQHandler+0x230>)
 80025b4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d135      	bne.n	8002632 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d12e      	bne.n	8002632 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fd3c 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11a      	bne.n	800261a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 020c 	bic.w	r2, r2, #12
 80025f2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d112      	bne.n	8002632 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
 8002618:	e00b      	b.n	8002632 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f95c 	bl	80028f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	220c      	movs	r2, #12
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_ADC_IRQHandler+0x198>
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10b      	bne.n	800266c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 809f 	beq.w	800279e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8099 	beq.w	800279e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fbdd 	bl	8001e48 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800268e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fb98 	bl	8001dca <LL_ADC_REG_IsTriggerSourceSWStart>
 800269a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a11      	ldr	r2, [pc, #68]	@ (80026e8 <HAL_ADC_IRQHandler+0x22c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d002      	beq.n	80026ac <HAL_ADC_IRQHandler+0x1f0>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e000      	b.n	80026ae <HAL_ADC_IRQHandler+0x1f2>
 80026ac:	4b0f      	ldr	r3, [pc, #60]	@ (80026ec <HAL_ADC_IRQHandler+0x230>)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d008      	beq.n	80026c8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d002      	beq.n	80026c8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	d104      	bne.n	80026d2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	e013      	b.n	80026fa <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_ADC_IRQHandler+0x22c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_ADC_IRQHandler+0x234>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e007      	b.n	80026f2 <HAL_ADC_IRQHandler+0x236>
 80026e2:	bf00      	nop
 80026e4:	50040300 	.word	0x50040300
 80026e8:	50040100 	.word	0x50040100
 80026ec:	50040000 	.word	0x50040000
 80026f0:	4b7d      	ldr	r3, [pc, #500]	@ (80028e8 <HAL_ADC_IRQHandler+0x42c>)
 80026f2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d047      	beq.n	8002790 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_ADC_IRQHandler+0x25e>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d03f      	beq.n	8002790 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002716:	2b00      	cmp	r3, #0
 8002718:	d13a      	bne.n	8002790 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002724:	2b40      	cmp	r3, #64	@ 0x40
 8002726:	d133      	bne.n	8002790 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d12e      	bne.n	8002790 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fca0 	bl	800207c <LL_ADC_INJ_IsConversionOngoing>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11a      	bne.n	8002778 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002750:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d112      	bne.n	8002790 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	@ 0x54
 8002776:	e00b      	b.n	8002790 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	f043 0210 	orr.w	r2, r3, #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fe07 	bl	80033a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2260      	movs	r2, #96	@ 0x60
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d011      	beq.n	80027cc <HAL_ADC_IRQHandler+0x310>
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8aa 	bl	8002918 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2280      	movs	r2, #128	@ 0x80
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d012      	beq.n	80027fc <HAL_ADC_IRQHandler+0x340>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fded 	bl	80033cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d012      	beq.n	800282c <HAL_ADC_IRQHandler+0x370>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00d      	beq.n	800282c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002814:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fddf 	bl	80033e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800282a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d036      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x3e8>
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d031      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002848:	2301      	movs	r3, #1
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
 800284c:	e014      	b.n	8002878 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002854:	4825      	ldr	r0, [pc, #148]	@ (80028ec <HAL_ADC_IRQHandler+0x430>)
 8002856:	f7ff fb67 	bl	8001f28 <LL_ADC_GetMultiDMATransfer>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002860:	2301      	movs	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
 8002864:	e008      	b.n	8002878 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002874:	2301      	movs	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10e      	bne.n	800289c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002882:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f848 	bl	800292c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2210      	movs	r2, #16
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d018      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x424>
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028bc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	f043 0208 	orr.w	r2, r3, #8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fd6c 	bl	80033b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80028e0:	bf00      	nop
 80028e2:	3728      	adds	r7, #40	@ 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	50040000 	.word	0x50040000
 80028ec:	50040300 	.word	0x50040300

080028f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0b6      	sub	sp, #216	@ 0xd8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x22>
 800295e:	2302      	movs	r3, #2
 8002960:	e3c9      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x7b6>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fb71 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 83aa 	bne.w	80030d0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b05      	cmp	r3, #5
 800298a:	d824      	bhi.n	80029d6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	3b02      	subs	r3, #2
 8002992:	2b03      	cmp	r3, #3
 8002994:	d81b      	bhi.n	80029ce <HAL_ADC_ConfigChannel+0x8e>
 8002996:	a201      	add	r2, pc, #4	@ (adr r2, 800299c <HAL_ADC_ConfigChannel+0x5c>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029b5 	.word	0x080029b5
 80029a4:	080029bd 	.word	0x080029bd
 80029a8:	080029c5 	.word	0x080029c5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80029ac:	230c      	movs	r3, #12
 80029ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029b2:	e010      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80029b4:	2312      	movs	r3, #18
 80029b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029ba:	e00c      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80029bc:	2318      	movs	r3, #24
 80029be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029c2:	e008      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80029c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029cc:	e003      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80029ce:	2306      	movs	r3, #6
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029d4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80029e4:	f7ff fa04 	bl	8001df0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fb32 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 80029f2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb3e 	bl	800207c <LL_ADC_INJ_IsConversionOngoing>
 8002a00:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f040 81a4 	bne.w	8002d56 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 819f 	bne.w	8002d56 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6819      	ldr	r1, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f7ff fa22 	bl	8001e6e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	08db      	lsrs	r3, r3, #3
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d00a      	beq.n	8002a62 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6919      	ldr	r1, [r3, #16]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a5c:	f7ff f960 	bl	8001d20 <LL_ADC_SetOffset>
 8002a60:	e179      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff f97d 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x14e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f972 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002a84:	4603      	mov	r3, r0
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	e01e      	b.n	8002acc <HAL_ADC_ConfigChannel+0x18c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f967 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ab4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002abc:	2320      	movs	r3, #32
 8002abe:	e004      	b.n	8002aca <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002ac0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x1a4>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	e018      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1d6>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e004      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002b0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d106      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff f936 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f91a 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x214>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f90f 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	f003 021f 	and.w	r2, r3, #31
 8002b52:	e01e      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x252>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff f904 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e004      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x26a>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	0e9b      	lsrs	r3, r3, #26
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	e018      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x29c>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e004      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d106      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2200      	movs	r2, #0
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f8d3 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff f8b7 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x2da>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2102      	movs	r1, #2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f8ac 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	e01e      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x318>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f8a1 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e004      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x330>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	e014      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x35a>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e004      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d106      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f874 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2103      	movs	r1, #3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f858 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x398>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f84d 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	f003 021f 	and.w	r2, r3, #31
 8002cd6:	e017      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3c8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2103      	movs	r1, #3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f842 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cf2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e003      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x3e0>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	e011      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x404>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d30:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e003      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002d3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d106      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2103      	movs	r1, #3
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff f81f 	bl	8001d94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f954 	bl	8002008 <LL_ADC_IsEnabled>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 8140 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f7ff f8a5 	bl	8001ec4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a8f      	ldr	r2, [pc, #572]	@ (8002fbc <HAL_ADC_ConfigChannel+0x67c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	f040 8131 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x46e>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2b09      	cmp	r3, #9
 8002da4:	bf94      	ite	ls
 8002da6:	2301      	movls	r3, #1
 8002da8:	2300      	movhi	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	e019      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x4a2>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e003      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002dca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	bf94      	ite	ls
 8002ddc:	2301      	movls	r3, #1
 8002dde:	2300      	movhi	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d079      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d107      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x4c2>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	0e9b      	lsrs	r3, r3, #26
 8002df8:	3301      	adds	r3, #1
 8002dfa:	069b      	lsls	r3, r3, #26
 8002dfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e00:	e015      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x4ee>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e12:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	069b      	lsls	r3, r3, #26
 8002e2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x50e>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	0e9b      	lsrs	r3, r3, #26
 8002e40:	3301      	adds	r3, #1
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	e017      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x53e>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e003      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	ea42 0103 	orr.w	r1, r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x564>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 021f 	and.w	r2, r3, #31
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	051b      	lsls	r3, r3, #20
 8002ea2:	e018      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x596>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e003      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f003 021f 	and.w	r2, r3, #31
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	e081      	b.n	8002fde <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x5b6>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	3301      	adds	r3, #1
 8002eee:	069b      	lsls	r3, r3, #26
 8002ef0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ef4:	e015      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x5e2>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e003      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	069b      	lsls	r3, r3, #26
 8002f1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x602>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	e017      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x632>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	61bb      	str	r3, [r7, #24]
  return result;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e003      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	ea42 0103 	orr.w	r1, r2, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10d      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x65e>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 021f 	and.w	r2, r3, #31
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	3b1e      	subs	r3, #30
 8002f96:	051b      	lsls	r3, r3, #20
 8002f98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f9c:	e01e      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x69c>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	60fb      	str	r3, [r7, #12]
  return result;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d104      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e006      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x688>
 8002fba:	bf00      	nop
 8002fbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 021f 	and.w	r2, r3, #31
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3b1e      	subs	r3, #30
 8002fd6:	051b      	lsls	r3, r3, #20
 8002fd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fdc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fe ff43 	bl	8001e6e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b44      	ldr	r3, [pc, #272]	@ (8003100 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d07a      	beq.n	80030ea <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff4:	4843      	ldr	r0, [pc, #268]	@ (8003104 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ff6:	f7fe fe85 	bl	8001d04 <LL_ADC_GetCommonPathInternalCh>
 8002ffa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a41      	ldr	r2, [pc, #260]	@ (8003108 <HAL_ADC_ConfigChannel+0x7c8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d12c      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003008:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800300c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d126      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3c      	ldr	r2, [pc, #240]	@ (800310c <HAL_ADC_ConfigChannel+0x7cc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_ADC_ConfigChannel+0x6e8>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3b      	ldr	r2, [pc, #236]	@ (8003110 <HAL_ADC_ConfigChannel+0x7d0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d15d      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800302c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003030:	4619      	mov	r1, r3
 8003032:	4834      	ldr	r0, [pc, #208]	@ (8003104 <HAL_ADC_ConfigChannel+0x7c4>)
 8003034:	f7fe fe53 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003038:	4b36      	ldr	r3, [pc, #216]	@ (8003114 <HAL_ADC_ConfigChannel+0x7d4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	4a36      	ldr	r2, [pc, #216]	@ (8003118 <HAL_ADC_ConfigChannel+0x7d8>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003052:	e002      	b.n	800305a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	3b01      	subs	r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f9      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003060:	e040      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2d      	ldr	r2, [pc, #180]	@ (800311c <HAL_ADC_ConfigChannel+0x7dc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d118      	bne.n	800309e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800306c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003070:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d112      	bne.n	800309e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a23      	ldr	r2, [pc, #140]	@ (800310c <HAL_ADC_ConfigChannel+0x7cc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_ADC_ConfigChannel+0x74c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a22      	ldr	r2, [pc, #136]	@ (8003110 <HAL_ADC_ConfigChannel+0x7d0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d12d      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800308c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003090:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003094:	4619      	mov	r1, r3
 8003096:	481b      	ldr	r0, [pc, #108]	@ (8003104 <HAL_ADC_ConfigChannel+0x7c4>)
 8003098:	f7fe fe21 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800309c:	e024      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003120 <HAL_ADC_ConfigChannel+0x7e0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d120      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11a      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a14      	ldr	r2, [pc, #80]	@ (800310c <HAL_ADC_ConfigChannel+0x7cc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d115      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030c6:	4619      	mov	r1, r3
 80030c8:	480e      	ldr	r0, [pc, #56]	@ (8003104 <HAL_ADC_ConfigChannel+0x7c4>)
 80030ca:	f7fe fe08 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
 80030ce:	e00c      	b.n	80030ea <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80030e2:	e002      	b.n	80030ea <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	37d8      	adds	r7, #216	@ 0xd8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	80080000 	.word	0x80080000
 8003104:	50040300 	.word	0x50040300
 8003108:	c7520000 	.word	0xc7520000
 800310c:	50040000 	.word	0x50040000
 8003110:	50040200 	.word	0x50040200
 8003114:	20000000 	.word	0x20000000
 8003118:	053e2d63 	.word	0x053e2d63
 800311c:	cb840000 	.word	0xcb840000
 8003120:	80000001 	.word	0x80000001

08003124 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe ff67 	bl	8002008 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d169      	bne.n	8003214 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <ADC_Enable+0xfc>)
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	f043 0210 	orr.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e055      	b.n	8003216 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe ff36 	bl	8001fe0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003174:	482b      	ldr	r0, [pc, #172]	@ (8003224 <ADC_Enable+0x100>)
 8003176:	f7fe fdc5 	bl	8001d04 <LL_ADC_GetCommonPathInternalCh>
 800317a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800317c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003184:	4b28      	ldr	r3, [pc, #160]	@ (8003228 <ADC_Enable+0x104>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	4a28      	ldr	r2, [pc, #160]	@ (800322c <ADC_Enable+0x108>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800319e:	e002      	b.n	80031a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f9      	bne.n	80031a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031ac:	f7fe fd54 	bl	8001c58 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031b2:	e028      	b.n	8003206 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe ff25 	bl	8002008 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d104      	bne.n	80031ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe ff09 	bl	8001fe0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ce:	f7fe fd43 	bl	8001c58 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d914      	bls.n	8003206 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d00d      	beq.n	8003206 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ee:	f043 0210 	orr.w	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e007      	b.n	8003216 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d1cf      	bne.n	80031b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	8000003f 	.word	0x8000003f
 8003224:	50040300 	.word	0x50040300
 8003228:	20000000 	.word	0x20000000
 800322c:	053e2d63 	.word	0x053e2d63

08003230 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d14b      	bne.n	80032e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d021      	beq.n	80032a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe fdae 	bl	8001dca <LL_ADC_REG_IsTriggerSourceSWStart>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d032      	beq.n	80032da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d12b      	bne.n	80032da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11f      	bne.n	80032da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80032a6:	e018      	b.n	80032da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d111      	bne.n	80032da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fb08 	bl	80028f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032e0:	e00e      	b.n	8003300 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f7ff fb1c 	bl	800292c <HAL_ADC_ErrorCallback>
}
 80032f4:	e004      	b.n	8003300 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff faf4 	bl	8002904 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003336:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003342:	f043 0204 	orr.w	r2, r3, #4
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff faee 	bl	800292c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <LL_ADC_IsEnabled>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <LL_ADC_IsEnabled+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_ADC_IsEnabled+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_REG_IsConversionOngoing>:
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d101      	bne.n	8003396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b09f      	sub	sp, #124	@ 0x7c
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e093      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800342e:	2300      	movs	r3, #0
 8003430:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003432:	2300      	movs	r3, #0
 8003434:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a47      	ldr	r2, [pc, #284]	@ (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d102      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003440:	4b46      	ldr	r3, [pc, #280]	@ (800355c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	e001      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e072      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff87 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 8003470:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ff81 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d154      	bne.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003484:	2b00      	cmp	r3, #0
 8003486:	d151      	bne.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003488:	4b35      	ldr	r3, [pc, #212]	@ (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800348a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02c      	beq.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034a6:	035b      	lsls	r3, r3, #13
 80034a8:	430b      	orrs	r3, r1
 80034aa:	431a      	orrs	r2, r3
 80034ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b0:	4829      	ldr	r0, [pc, #164]	@ (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034b2:	f7ff ff51 	bl	8003358 <LL_ADC_IsEnabled>
 80034b6:	4604      	mov	r4, r0
 80034b8:	4828      	ldr	r0, [pc, #160]	@ (800355c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034ba:	f7ff ff4d 	bl	8003358 <LL_ADC_IsEnabled>
 80034be:	4603      	mov	r3, r0
 80034c0:	431c      	orrs	r4, r3
 80034c2:	4828      	ldr	r0, [pc, #160]	@ (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034c4:	f7ff ff48 	bl	8003358 <LL_ADC_IsEnabled>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4323      	orrs	r3, r4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d137      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034d8:	f023 030f 	bic.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6811      	ldr	r1, [r2, #0]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	6892      	ldr	r2, [r2, #8]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ec:	e028      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034fa:	4817      	ldr	r0, [pc, #92]	@ (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034fc:	f7ff ff2c 	bl	8003358 <LL_ADC_IsEnabled>
 8003500:	4604      	mov	r4, r0
 8003502:	4816      	ldr	r0, [pc, #88]	@ (800355c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003504:	f7ff ff28 	bl	8003358 <LL_ADC_IsEnabled>
 8003508:	4603      	mov	r3, r0
 800350a:	431c      	orrs	r4, r3
 800350c:	4815      	ldr	r0, [pc, #84]	@ (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800350e:	f7ff ff23 	bl	8003358 <LL_ADC_IsEnabled>
 8003512:	4603      	mov	r3, r0
 8003514:	4323      	orrs	r3, r4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d112      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800351a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003522:	f023 030f 	bic.w	r3, r3, #15
 8003526:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003528:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800352a:	e009      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800353e:	e000      	b.n	8003542 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003540:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800354a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800354e:	4618      	mov	r0, r3
 8003550:	377c      	adds	r7, #124	@ 0x7c
 8003552:	46bd      	mov	sp, r7
 8003554:	bd90      	pop	{r4, r7, pc}
 8003556:	bf00      	nop
 8003558:	50040000 	.word	0x50040000
 800355c:	50040100 	.word	0x50040100
 8003560:	50040300 	.word	0x50040300
 8003564:	50040200 	.word	0x50040200

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	@ (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	@ (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	2b00      	cmp	r3, #0
 800361a:	db0a      	blt.n	8003632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	490c      	ldr	r1, [pc, #48]	@ (8003654 <__NVIC_SetPriority+0x4c>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	440b      	add	r3, r1
 800362c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003630:	e00a      	b.n	8003648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4908      	ldr	r1, [pc, #32]	@ (8003658 <__NVIC_SetPriority+0x50>)
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3b04      	subs	r3, #4
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	440b      	add	r3, r1
 8003646:	761a      	strb	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	@ 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f1c3 0307 	rsb	r3, r3, #7
 8003676:	2b04      	cmp	r3, #4
 8003678:	bf28      	it	cs
 800367a:	2304      	movcs	r3, #4
 800367c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3304      	adds	r3, #4
 8003682:	2b06      	cmp	r3, #6
 8003684:	d902      	bls.n	800368c <NVIC_EncodePriority+0x30>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3b03      	subs	r3, #3
 800368a:	e000      	b.n	800368e <NVIC_EncodePriority+0x32>
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	401a      	ands	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a4:	f04f 31ff 	mov.w	r1, #4294967295
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43d9      	mvns	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	4313      	orrs	r3, r2
         );
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	@ 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d4:	d301      	bcc.n	80036da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00f      	b.n	80036fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <SysTick_Config+0x40>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e2:	210f      	movs	r1, #15
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	f7ff ff8e 	bl	8003608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <SysTick_Config+0x40>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <SysTick_Config+0x40>)
 80036f4:	2207      	movs	r2, #7
 80036f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	e000e010 	.word	0xe000e010

08003708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff29 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003730:	f7ff ff3e 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 8003734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	6978      	ldr	r0, [r7, #20]
 800373c:	f7ff ff8e 	bl	800365c <NVIC_EncodePriority>
 8003740:	4602      	mov	r2, r0
 8003742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff5d 	bl	8003608 <__NVIC_SetPriority>
}
 800374e:	bf00      	nop
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff31 	bl	80035cc <__NVIC_EnableIRQ>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffa2 	bl	80036c4 <SysTick_Config>
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e014      	b.n	80037c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	791b      	ldrb	r3, [r3, #4]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fc fff7 	bl	80007a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	795b      	ldrb	r3, [r3, #5]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_DAC_Start_DMA+0x1e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0ab      	b.n	8003946 <HAL_DAC_Start_DMA+0x176>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2202      	movs	r2, #2
 80037f8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d12f      	bne.n	8003860 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a52      	ldr	r2, [pc, #328]	@ (8003950 <HAL_DAC_Start_DMA+0x180>)
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a51      	ldr	r2, [pc, #324]	@ (8003954 <HAL_DAC_Start_DMA+0x184>)
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a50      	ldr	r2, [pc, #320]	@ (8003958 <HAL_DAC_Start_DMA+0x188>)
 8003816:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003826:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d013      	beq.n	8003856 <HAL_DAC_Start_DMA+0x86>
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d845      	bhi.n	80038c0 <HAL_DAC_Start_DMA+0xf0>
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_DAC_Start_DMA+0x72>
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d005      	beq.n	800384c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003840:	e03e      	b.n	80038c0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3308      	adds	r3, #8
 8003848:	613b      	str	r3, [r7, #16]
        break;
 800384a:	e03c      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	613b      	str	r3, [r7, #16]
        break;
 8003854:	e037      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3310      	adds	r3, #16
 800385c:	613b      	str	r3, [r7, #16]
        break;
 800385e:	e032      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a3d      	ldr	r2, [pc, #244]	@ (800395c <HAL_DAC_Start_DMA+0x18c>)
 8003866:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a3c      	ldr	r2, [pc, #240]	@ (8003960 <HAL_DAC_Start_DMA+0x190>)
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a3b      	ldr	r2, [pc, #236]	@ (8003964 <HAL_DAC_Start_DMA+0x194>)
 8003876:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003886:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d013      	beq.n	80038b6 <HAL_DAC_Start_DMA+0xe6>
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d817      	bhi.n	80038c4 <HAL_DAC_Start_DMA+0xf4>
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_DAC_Start_DMA+0xd2>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d005      	beq.n	80038ac <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80038a0:	e010      	b.n	80038c4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	613b      	str	r3, [r7, #16]
        break;
 80038aa:	e00c      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3318      	adds	r3, #24
 80038b2:	613b      	str	r3, [r7, #16]
        break;
 80038b4:	e007      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	331c      	adds	r3, #28
 80038bc:	613b      	str	r3, [r7, #16]
        break;
 80038be:	e002      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80038c4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6898      	ldr	r0, [r3, #8]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	f000 fb35 	bl	8003f54 <HAL_DMA_Start_IT>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
 80038ee:	e010      	b.n	8003912 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80038fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68d8      	ldr	r0, [r3, #12]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	f000 fb23 	bl	8003f54 <HAL_DMA_Start_IT>
 800390e:	4603      	mov	r3, r0
 8003910:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2201      	movs	r2, #1
 800392c:	409a      	lsls	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e005      	b.n	8003944 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	08003cbb 	.word	0x08003cbb
 8003954:	08003cdd 	.word	0x08003cdd
 8003958:	08003cf9 	.word	0x08003cf9
 800395c:	08003d77 	.word	0x08003d77
 8003960:	08003d99 	.word	0x08003d99
 8003964:	08003db5 	.word	0x08003db5

08003968 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800397e:	d120      	bne.n	80039c2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800398a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800398e:	d118      	bne.n	80039c2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2204      	movs	r2, #4
 8003994:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039ba:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f84b 	bl	8003a58 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039d0:	d120      	bne.n	8003a14 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e0:	d118      	bne.n	8003a14 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2204      	movs	r2, #4
 80039e6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f043 0202 	orr.w	r2, r3, #2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9a7 	bl	8003d62 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	795b      	ldrb	r3, [r3, #5]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_DAC_ConfigChannel+0x1c>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e114      	b.n	8003cb2 <HAL_DAC_ConfigChannel+0x246>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2202      	movs	r2, #2
 8003a92:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	f040 8081 	bne.w	8003ba0 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003a9e:	f7fe f8db 	bl	8001c58 <HAL_GetTick>
 8003aa2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d140      	bne.n	8003b2c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003aaa:	e018      	b.n	8003ade <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003aac:	f7fe f8d4 	bl	8001c58 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d911      	bls.n	8003ade <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f043 0208 	orr.w	r2, r3, #8
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0e9      	b.n	8003cb2 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1df      	bne.n	8003aac <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003aec:	2001      	movs	r0, #1
 8003aee:	f7fe f8bf 	bl	8001c70 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	6992      	ldr	r2, [r2, #24]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40
 8003afc:	e023      	b.n	8003b46 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003afe:	f7fe f8ab 	bl	8001c58 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d90f      	bls.n	8003b2c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	da0a      	bge.n	8003b2c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f043 0208 	orr.w	r2, r3, #8
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2203      	movs	r2, #3
 8003b26:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e0c2      	b.n	8003cb2 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	dbe3      	blt.n	8003afe <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003b36:	2001      	movs	r0, #1
 8003b38:	f7fe f89a 	bl	8001c70 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	6992      	ldr	r2, [r2, #24]
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	ea02 0103 	and.w	r1, r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	21ff      	movs	r1, #255	@ 0xff
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	ea02 0103 	and.w	r1, r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	409a      	lsls	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d11d      	bne.n	8003be4 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	221f      	movs	r2, #31
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2207      	movs	r2, #7
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	400a      	ands	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	22c0      	movs	r2, #192	@ 0xc0
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff fea7 	bl	8003a1c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	711a      	strb	r2, [r3, #4]
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff fea0 	bl	8003a30 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f043 0204 	orr.w	r2, r3, #4
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff fe96 	bl	8003a44 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	711a      	strb	r2, [r3, #4]
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff ffce 	bl	8003d26 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	711a      	strb	r2, [r3, #4]
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ffc7 	bl	8003d3a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f7ff ffbd 	bl	8003d4e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	711a      	strb	r2, [r3, #4]
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e098      	b.n	8003f28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8003f34 <HAL_DMA_Init+0x150>)
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d80f      	bhi.n	8003e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b4b      	ldr	r3, [pc, #300]	@ (8003f38 <HAL_DMA_Init+0x154>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f3c <HAL_DMA_Init+0x158>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	009a      	lsls	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a48      	ldr	r2, [pc, #288]	@ (8003f40 <HAL_DMA_Init+0x15c>)
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e20:	e00e      	b.n	8003e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b46      	ldr	r3, [pc, #280]	@ (8003f44 <HAL_DMA_Init+0x160>)
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a43      	ldr	r2, [pc, #268]	@ (8003f3c <HAL_DMA_Init+0x158>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	009a      	lsls	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a42      	ldr	r2, [pc, #264]	@ (8003f48 <HAL_DMA_Init+0x164>)
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e9a:	d039      	beq.n	8003f10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	4a27      	ldr	r2, [pc, #156]	@ (8003f40 <HAL_DMA_Init+0x15c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d11a      	bne.n	8003edc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ea6:	4b29      	ldr	r3, [pc, #164]	@ (8003f4c <HAL_DMA_Init+0x168>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	f003 031c 	and.w	r3, r3, #28
 8003eb2:	210f      	movs	r1, #15
 8003eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	4924      	ldr	r1, [pc, #144]	@ (8003f4c <HAL_DMA_Init+0x168>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ec0:	4b22      	ldr	r3, [pc, #136]	@ (8003f4c <HAL_DMA_Init+0x168>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	f003 031c 	and.w	r3, r3, #28
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	491d      	ldr	r1, [pc, #116]	@ (8003f4c <HAL_DMA_Init+0x168>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
 8003eda:	e019      	b.n	8003f10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003edc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f50 <HAL_DMA_Init+0x16c>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee4:	f003 031c 	and.w	r3, r3, #28
 8003ee8:	210f      	movs	r1, #15
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	4917      	ldr	r1, [pc, #92]	@ (8003f50 <HAL_DMA_Init+0x16c>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ef6:	4b16      	ldr	r3, [pc, #88]	@ (8003f50 <HAL_DMA_Init+0x16c>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f003 031c 	and.w	r3, r3, #28
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	4911      	ldr	r1, [pc, #68]	@ (8003f50 <HAL_DMA_Init+0x16c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40020407 	.word	0x40020407
 8003f38:	bffdfff8 	.word	0xbffdfff8
 8003f3c:	cccccccd 	.word	0xcccccccd
 8003f40:	40020000 	.word	0x40020000
 8003f44:	bffdfbf8 	.word	0xbffdfbf8
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	400200a8 	.word	0x400200a8
 8003f50:	400204a8 	.word	0x400204a8

08003f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_DMA_Start_IT+0x20>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e04b      	b.n	800400c <HAL_DMA_Start_IT+0xb8>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d13a      	bne.n	8003ffe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f95f 	bl	8004270 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 020e 	orr.w	r2, r2, #14
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e00f      	b.n	8003fec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0204 	bic.w	r2, r2, #4
 8003fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 020a 	orr.w	r2, r2, #10
 8003fea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e005      	b.n	800400a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004006:	2302      	movs	r3, #2
 8004008:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800400a:	7dfb      	ldrb	r3, [r7, #23]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d008      	beq.n	800403e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2204      	movs	r2, #4
 8004030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e022      	b.n	8004084 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 020e 	bic.w	r2, r2, #14
 800404c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f003 021c 	and.w	r2, r3, #28
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f202 	lsl.w	r2, r1, r2
 8004070:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d005      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2204      	movs	r2, #4
 80040ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	e029      	b.n	8004108 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 020e 	bic.w	r2, r2, #14
 80040c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0201 	bic.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d8:	f003 021c 	and.w	r2, r3, #28
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	2101      	movs	r1, #1
 80040e2:	fa01 f202 	lsl.w	r2, r1, r2
 80040e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
    }
  }
  return status;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f003 031c 	and.w	r3, r3, #28
 8004132:	2204      	movs	r2, #4
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d026      	beq.n	800418c <HAL_DMA_IRQHandler+0x7a>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d021      	beq.n	800418c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0204 	bic.w	r2, r2, #4
 8004164:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f003 021c 	and.w	r2, r3, #28
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	2104      	movs	r1, #4
 8004174:	fa01 f202 	lsl.w	r2, r1, r2
 8004178:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	2b00      	cmp	r3, #0
 8004180:	d071      	beq.n	8004266 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800418a:	e06c      	b.n	8004266 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004190:	f003 031c 	and.w	r3, r3, #28
 8004194:	2202      	movs	r2, #2
 8004196:	409a      	lsls	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d02e      	beq.n	80041fe <HAL_DMA_IRQHandler+0xec>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d029      	beq.n	80041fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 020a 	bic.w	r2, r2, #10
 80041c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d4:	f003 021c 	and.w	r2, r3, #28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	2102      	movs	r1, #2
 80041de:	fa01 f202 	lsl.w	r2, r1, r2
 80041e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d038      	beq.n	8004266 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041fc:	e033      	b.n	8004266 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f003 031c 	and.w	r3, r3, #28
 8004206:	2208      	movs	r2, #8
 8004208:	409a      	lsls	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d02a      	beq.n	8004268 <HAL_DMA_IRQHandler+0x156>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d025      	beq.n	8004268 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 020e 	bic.w	r2, r2, #14
 800422a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004230:	f003 021c 	and.w	r2, r3, #28
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	2101      	movs	r1, #1
 800423a:	fa01 f202 	lsl.w	r2, r1, r2
 800423e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004266:	bf00      	nop
 8004268:	bf00      	nop
}
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f003 021c 	and.w	r2, r3, #28
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d108      	bne.n	80042b4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042b2:	e007      	b.n	80042c4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042de:	e17f      	b.n	80045e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2101      	movs	r1, #1
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8171 	beq.w	80045da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d005      	beq.n	8004310 <HAL_GPIO_Init+0x40>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d130      	bne.n	8004372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004346:	2201      	movs	r2, #1
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 0201 	and.w	r2, r3, #1
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b03      	cmp	r3, #3
 800437c:	d118      	bne.n	80043b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004384:	2201      	movs	r2, #1
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	08db      	lsrs	r3, r3, #3
 800439a:	f003 0201 	and.w	r2, r3, #1
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d017      	beq.n	80043ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	2203      	movs	r2, #3
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d123      	bne.n	8004440 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	08da      	lsrs	r2, r3, #3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3208      	adds	r2, #8
 8004400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	220f      	movs	r2, #15
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	08da      	lsrs	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3208      	adds	r2, #8
 800443a:	6939      	ldr	r1, [r7, #16]
 800443c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	2203      	movs	r2, #3
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0203 	and.w	r2, r3, #3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80ac 	beq.w	80045da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004482:	4b5f      	ldr	r3, [pc, #380]	@ (8004600 <HAL_GPIO_Init+0x330>)
 8004484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004486:	4a5e      	ldr	r2, [pc, #376]	@ (8004600 <HAL_GPIO_Init+0x330>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6613      	str	r3, [r2, #96]	@ 0x60
 800448e:	4b5c      	ldr	r3, [pc, #368]	@ (8004600 <HAL_GPIO_Init+0x330>)
 8004490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800449a:	4a5a      	ldr	r2, [pc, #360]	@ (8004604 <HAL_GPIO_Init+0x334>)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	3302      	adds	r3, #2
 80044a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	220f      	movs	r2, #15
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4013      	ands	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044c4:	d025      	beq.n	8004512 <HAL_GPIO_Init+0x242>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004608 <HAL_GPIO_Init+0x338>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01f      	beq.n	800450e <HAL_GPIO_Init+0x23e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a4e      	ldr	r2, [pc, #312]	@ (800460c <HAL_GPIO_Init+0x33c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d019      	beq.n	800450a <HAL_GPIO_Init+0x23a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004610 <HAL_GPIO_Init+0x340>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_GPIO_Init+0x236>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004614 <HAL_GPIO_Init+0x344>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00d      	beq.n	8004502 <HAL_GPIO_Init+0x232>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004618 <HAL_GPIO_Init+0x348>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <HAL_GPIO_Init+0x22e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4a      	ldr	r2, [pc, #296]	@ (800461c <HAL_GPIO_Init+0x34c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_GPIO_Init+0x22a>
 80044f6:	2306      	movs	r3, #6
 80044f8:	e00c      	b.n	8004514 <HAL_GPIO_Init+0x244>
 80044fa:	2307      	movs	r3, #7
 80044fc:	e00a      	b.n	8004514 <HAL_GPIO_Init+0x244>
 80044fe:	2305      	movs	r3, #5
 8004500:	e008      	b.n	8004514 <HAL_GPIO_Init+0x244>
 8004502:	2304      	movs	r3, #4
 8004504:	e006      	b.n	8004514 <HAL_GPIO_Init+0x244>
 8004506:	2303      	movs	r3, #3
 8004508:	e004      	b.n	8004514 <HAL_GPIO_Init+0x244>
 800450a:	2302      	movs	r3, #2
 800450c:	e002      	b.n	8004514 <HAL_GPIO_Init+0x244>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_GPIO_Init+0x244>
 8004512:	2300      	movs	r3, #0
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	f002 0203 	and.w	r2, r2, #3
 800451a:	0092      	lsls	r2, r2, #2
 800451c:	4093      	lsls	r3, r2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004524:	4937      	ldr	r1, [pc, #220]	@ (8004604 <HAL_GPIO_Init+0x334>)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	3302      	adds	r3, #2
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004532:	4b3b      	ldr	r3, [pc, #236]	@ (8004620 <HAL_GPIO_Init+0x350>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	43db      	mvns	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004556:	4a32      	ldr	r2, [pc, #200]	@ (8004620 <HAL_GPIO_Init+0x350>)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800455c:	4b30      	ldr	r3, [pc, #192]	@ (8004620 <HAL_GPIO_Init+0x350>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	43db      	mvns	r3, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004580:	4a27      	ldr	r2, [pc, #156]	@ (8004620 <HAL_GPIO_Init+0x350>)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004586:	4b26      	ldr	r3, [pc, #152]	@ (8004620 <HAL_GPIO_Init+0x350>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004620 <HAL_GPIO_Init+0x350>)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_GPIO_Init+0x350>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045d4:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <HAL_GPIO_Init+0x350>)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	3301      	adds	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f47f ae78 	bne.w	80042e0 <HAL_GPIO_Init+0x10>
  }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	40010000 	.word	0x40010000
 8004608:	48000400 	.word	0x48000400
 800460c:	48000800 	.word	0x48000800
 8004610:	48000c00 	.word	0x48000c00
 8004614:	48001000 	.word	0x48001000
 8004618:	48001400 	.word	0x48001400
 800461c:	48001800 	.word	0x48001800
 8004620:	40010400 	.word	0x40010400

08004624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]
 8004630:	4613      	mov	r3, r2
 8004632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004634:	787b      	ldrb	r3, [r7, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004640:	e002      	b.n	8004648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e08d      	b.n	8004782 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fa36 	bl	8000aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	@ 0x24
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d107      	bne.n	80046ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ca:	609a      	str	r2, [r3, #8]
 80046cc:	e006      	b.n	80046dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80046da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d108      	bne.n	80046f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046f2:	605a      	str	r2, [r3, #4]
 80046f4:	e007      	b.n	8004706 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	4608      	mov	r0, r1
 8004796:	4611      	mov	r1, r2
 8004798:	461a      	mov	r2, r3
 800479a:	4603      	mov	r3, r0
 800479c:	817b      	strh	r3, [r7, #10]
 800479e:	460b      	mov	r3, r1
 80047a0:	813b      	strh	r3, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	f040 80f9 	bne.w	80049a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_I2C_Mem_Write+0x34>
 80047ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0ed      	b.n	80049a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_I2C_Mem_Write+0x4e>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e0e6      	b.n	80049a8 <HAL_I2C_Mem_Write+0x21c>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047e2:	f7fd fa39 	bl	8001c58 <HAL_GetTick>
 80047e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2319      	movs	r3, #25
 80047ee:	2201      	movs	r2, #1
 80047f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fbbb 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0d1      	b.n	80049a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2221      	movs	r2, #33	@ 0x21
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2240      	movs	r2, #64	@ 0x40
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800482c:	88f8      	ldrh	r0, [r7, #6]
 800482e:	893a      	ldrh	r2, [r7, #8]
 8004830:	8979      	ldrh	r1, [r7, #10]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4603      	mov	r3, r0
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 facb 	bl	8004dd8 <I2C_RequestMemoryWrite>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0a9      	b.n	80049a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2bff      	cmp	r3, #255	@ 0xff
 800485c:	d90e      	bls.n	800487c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	22ff      	movs	r2, #255	@ 0xff
 8004862:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004868:	b2da      	uxtb	r2, r3
 800486a:	8979      	ldrh	r1, [r7, #10]
 800486c:	2300      	movs	r3, #0
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fd3f 	bl	80052f8 <I2C_TransferConfig>
 800487a:	e00f      	b.n	800489c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488a:	b2da      	uxtb	r2, r3
 800488c:	8979      	ldrh	r1, [r7, #10]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fd2e 	bl	80052f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fbbe 	bl	8005022 <I2C_WaitOnTXISFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e07b      	b.n	80049a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d034      	beq.n	8004954 <HAL_I2C_Mem_Write+0x1c8>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d130      	bne.n	8004954 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	2200      	movs	r2, #0
 80048fa:	2180      	movs	r1, #128	@ 0x80
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fb37 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e04d      	b.n	80049a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	2bff      	cmp	r3, #255	@ 0xff
 8004914:	d90e      	bls.n	8004934 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	22ff      	movs	r2, #255	@ 0xff
 800491a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004920:	b2da      	uxtb	r2, r3
 8004922:	8979      	ldrh	r1, [r7, #10]
 8004924:	2300      	movs	r3, #0
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fce3 	bl	80052f8 <I2C_TransferConfig>
 8004932:	e00f      	b.n	8004954 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004942:	b2da      	uxtb	r2, r3
 8004944:	8979      	ldrh	r1, [r7, #10]
 8004946:	2300      	movs	r3, #0
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fcd2 	bl	80052f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d19e      	bne.n	800489c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fba4 	bl	80050b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e01a      	b.n	80049a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2220      	movs	r2, #32
 8004978:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <HAL_I2C_Mem_Write+0x224>)
 8004986:	400b      	ands	r3, r1
 8004988:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e000      	b.n	80049a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
  }
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	fe00e800 	.word	0xfe00e800

080049b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	460b      	mov	r3, r1
 80049c8:	813b      	strh	r3, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	f040 80fd 	bne.w	8004bd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_I2C_Mem_Read+0x34>
 80049e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0f1      	b.n	8004bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_I2C_Mem_Read+0x4e>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e0ea      	b.n	8004bd8 <HAL_I2C_Mem_Read+0x224>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a0a:	f7fd f925 	bl	8001c58 <HAL_GetTick>
 8004a0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	2319      	movs	r3, #25
 8004a16:	2201      	movs	r2, #1
 8004a18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 faa7 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0d5      	b.n	8004bd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2222      	movs	r2, #34	@ 0x22
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2240      	movs	r2, #64	@ 0x40
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a3a      	ldr	r2, [r7, #32]
 8004a46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a54:	88f8      	ldrh	r0, [r7, #6]
 8004a56:	893a      	ldrh	r2, [r7, #8]
 8004a58:	8979      	ldrh	r1, [r7, #10]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4603      	mov	r3, r0
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fa0b 	bl	8004e80 <I2C_RequestMemoryRead>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0ad      	b.n	8004bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2bff      	cmp	r3, #255	@ 0xff
 8004a84:	d90e      	bls.n	8004aa4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	8979      	ldrh	r1, [r7, #10]
 8004a94:	4b52      	ldr	r3, [pc, #328]	@ (8004be0 <HAL_I2C_Mem_Read+0x22c>)
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fc2b 	bl	80052f8 <I2C_TransferConfig>
 8004aa2:	e00f      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	8979      	ldrh	r1, [r7, #10]
 8004ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8004be0 <HAL_I2C_Mem_Read+0x22c>)
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fc1a 	bl	80052f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aca:	2200      	movs	r2, #0
 8004acc:	2104      	movs	r1, #4
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fa4e 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e07c      	b.n	8004bd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d034      	beq.n	8004b84 <HAL_I2C_Mem_Read+0x1d0>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d130      	bne.n	8004b84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2180      	movs	r1, #128	@ 0x80
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 fa1f 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e04d      	b.n	8004bd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2bff      	cmp	r3, #255	@ 0xff
 8004b44:	d90e      	bls.n	8004b64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	8979      	ldrh	r1, [r7, #10]
 8004b54:	2300      	movs	r3, #0
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fbcb 	bl	80052f8 <I2C_TransferConfig>
 8004b62:	e00f      	b.n	8004b84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	8979      	ldrh	r1, [r7, #10]
 8004b76:	2300      	movs	r3, #0
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fbba 	bl	80052f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d19a      	bne.n	8004ac4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fa8c 	bl	80050b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e01a      	b.n	8004bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6859      	ldr	r1, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_I2C_Mem_Read+0x230>)
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	80002400 	.word	0x80002400
 8004be4:	fe00e800 	.word	0xfe00e800

08004be8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	@ 0x28
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	f040 80d6 	bne.w	8004db6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c18:	d101      	bne.n	8004c1e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0cc      	b.n	8004db8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_I2C_IsDeviceReady+0x44>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0c5      	b.n	8004db8 <HAL_I2C_IsDeviceReady+0x1d0>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2224      	movs	r2, #36	@ 0x24
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d107      	bne.n	8004c5a <HAL_I2C_IsDeviceReady+0x72>
 8004c4a:	897b      	ldrh	r3, [r7, #10]
 8004c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004c58:	e006      	b.n	8004c68 <HAL_I2C_IsDeviceReady+0x80>
 8004c5a:	897b      	ldrh	r3, [r7, #10]
 8004c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c64:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004c6e:	f7fc fff3 	bl	8001c58 <HAL_GetTick>
 8004c72:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004ca0:	e034      	b.n	8004d0c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d01a      	beq.n	8004ce0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fc ffd5 	bl	8001c58 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <HAL_I2C_IsDeviceReady+0xd8>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10f      	bne.n	8004ce0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e06b      	b.n	8004db8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d0c:	7ffb      	ldrb	r3, [r7, #31]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <HAL_I2C_IsDeviceReady+0x130>
 8004d12:	7fbb      	ldrb	r3, [r7, #30]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0c4      	beq.n	8004ca2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d01a      	beq.n	8004d5c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2120      	movs	r1, #32
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f91d 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e03b      	b.n	8004db8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2220      	movs	r2, #32
 8004d46:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e02d      	b.n	8004db8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	2120      	movs	r1, #32
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f902 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e020      	b.n	8004db8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2210      	movs	r2, #16
 8004d7c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2220      	movs	r2, #32
 8004d84:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	f63f af56 	bhi.w	8004c42 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	817b      	strh	r3, [r7, #10]
 8004dea:	460b      	mov	r3, r1
 8004dec:	813b      	strh	r3, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	8979      	ldrh	r1, [r7, #10]
 8004df8:	4b20      	ldr	r3, [pc, #128]	@ (8004e7c <I2C_RequestMemoryWrite+0xa4>)
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fa79 	bl	80052f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	69b9      	ldr	r1, [r7, #24]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f909 	bl	8005022 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e02c      	b.n	8004e74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d105      	bne.n	8004e2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e20:	893b      	ldrh	r3, [r7, #8]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e2a:	e015      	b.n	8004e58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e2c:	893b      	ldrh	r3, [r7, #8]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	69b9      	ldr	r1, [r7, #24]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f8ef 	bl	8005022 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e012      	b.n	8004e74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e4e:	893b      	ldrh	r3, [r7, #8]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2180      	movs	r1, #128	@ 0x80
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f884 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	80002000 	.word	0x80002000

08004e80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	817b      	strh	r3, [r7, #10]
 8004e92:	460b      	mov	r3, r1
 8004e94:	813b      	strh	r3, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	8979      	ldrh	r1, [r7, #10]
 8004ea0:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <I2C_RequestMemoryRead+0xa4>)
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fa26 	bl	80052f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f8b6 	bl	8005022 <I2C_WaitOnTXISFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e02c      	b.n	8004f1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d105      	bne.n	8004ed2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec6:	893b      	ldrh	r3, [r7, #8]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ed0:	e015      	b.n	8004efe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ed2:	893b      	ldrh	r3, [r7, #8]
 8004ed4:	0a1b      	lsrs	r3, r3, #8
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f89c 	bl	8005022 <I2C_WaitOnTXISFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e012      	b.n	8004f1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef4:	893b      	ldrh	r3, [r7, #8]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2200      	movs	r2, #0
 8004f06:	2140      	movs	r1, #64	@ 0x40
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f831 	bl	8004f70 <I2C_WaitOnFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	80002000 	.word	0x80002000

08004f28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d103      	bne.n	8004f46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2200      	movs	r2, #0
 8004f44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d007      	beq.n	8004f64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	619a      	str	r2, [r3, #24]
  }
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f80:	e03b      	b.n	8004ffa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f8d6 	bl	8005138 <I2C_IsErrorOccurred>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e041      	b.n	800501a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d02d      	beq.n	8004ffa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9e:	f7fc fe5b 	bl	8001c58 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d302      	bcc.n	8004fb4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d122      	bne.n	8004ffa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d113      	bne.n	8004ffa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e00f      	b.n	800501a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699a      	ldr	r2, [r3, #24]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	bf0c      	ite	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	2300      	movne	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	429a      	cmp	r2, r3
 8005016:	d0b4      	beq.n	8004f82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800502e:	e033      	b.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f87f 	bl	8005138 <I2C_IsErrorOccurred>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e031      	b.n	80050a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d025      	beq.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504c:	f7fc fe04 	bl	8001c58 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	d302      	bcc.n	8005062 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11a      	bne.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d013      	beq.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e007      	b.n	80050a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d1c4      	bne.n	8005030 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050bc:	e02f      	b.n	800511e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f838 	bl	8005138 <I2C_IsErrorOccurred>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e02d      	b.n	800512e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d2:	f7fc fdc1 	bl	8001c58 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d302      	bcc.n	80050e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d11a      	bne.n	800511e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d013      	beq.n	800511e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e007      	b.n	800512e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b20      	cmp	r3, #32
 800512a:	d1c8      	bne.n	80050be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	@ 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d068      	beq.n	8005236 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2210      	movs	r2, #16
 800516a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800516c:	e049      	b.n	8005202 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005174:	d045      	beq.n	8005202 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005176:	f7fc fd6f 	bl	8001c58 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	d302      	bcc.n	800518c <I2C_IsErrorOccurred+0x54>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d13a      	bne.n	8005202 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005196:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800519e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ae:	d121      	bne.n	80051f4 <I2C_IsErrorOccurred+0xbc>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051b6:	d01d      	beq.n	80051f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d01a      	beq.n	80051f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051ce:	f7fc fd43 	bl	8001c58 <HAL_GetTick>
 80051d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051d4:	e00e      	b.n	80051f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051d6:	f7fc fd3f 	bl	8001c58 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b19      	cmp	r3, #25
 80051e2:	d907      	bls.n	80051f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	f043 0320 	orr.w	r3, r3, #32
 80051ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80051f2:	e006      	b.n	8005202 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d1e9      	bne.n	80051d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b20      	cmp	r3, #32
 800520e:	d003      	beq.n	8005218 <I2C_IsErrorOccurred+0xe0>
 8005210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0aa      	beq.n	800516e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2220      	movs	r2, #32
 8005226:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005258:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f043 0308 	orr.w	r3, r3, #8
 8005270:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800527a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00b      	beq.n	80052a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	f043 0302 	orr.w	r3, r3, #2
 8005292:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800529c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80052a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01c      	beq.n	80052e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff fe3b 	bl	8004f28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <I2C_IsErrorOccurred+0x1bc>)
 80052be:	400b      	ands	r3, r1
 80052c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80052e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3728      	adds	r7, #40	@ 0x28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	fe00e800 	.word	0xfe00e800

080052f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	607b      	str	r3, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	817b      	strh	r3, [r7, #10]
 8005306:	4613      	mov	r3, r2
 8005308:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005310:	7a7b      	ldrb	r3, [r7, #9]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005318:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	4313      	orrs	r3, r2
 8005322:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005326:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	0d5b      	lsrs	r3, r3, #21
 8005332:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005336:	4b08      	ldr	r3, [pc, #32]	@ (8005358 <I2C_TransferConfig+0x60>)
 8005338:	430b      	orrs	r3, r1
 800533a:	43db      	mvns	r3, r3
 800533c:	ea02 0103 	and.w	r1, r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	03ff63ff 	.word	0x03ff63ff

0800535c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b20      	cmp	r3, #32
 8005370:	d138      	bne.n	80053e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800537c:	2302      	movs	r3, #2
 800537e:	e032      	b.n	80053e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2224      	movs	r2, #36	@ 0x24
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e000      	b.n	80053e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b20      	cmp	r3, #32
 8005406:	d139      	bne.n	800547c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005412:	2302      	movs	r3, #2
 8005414:	e033      	b.n	800547e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2224      	movs	r2, #36	@ 0x24
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	e000      	b.n	800547e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800547c:	2302      	movs	r3, #2
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005490:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40007000 	.word	0x40007000

080054a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b6:	d130      	bne.n	800551a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b8:	4b23      	ldr	r3, [pc, #140]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c4:	d038      	beq.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054c6:	4b20      	ldr	r3, [pc, #128]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054d6:	4b1d      	ldr	r3, [pc, #116]	@ (800554c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2232      	movs	r2, #50	@ 0x32
 80054dc:	fb02 f303 	mul.w	r3, r2, r3
 80054e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	0c9b      	lsrs	r3, r3, #18
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ec:	e002      	b.n	80054f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054f4:	4b14      	ldr	r3, [pc, #80]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005500:	d102      	bne.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f2      	bne.n	80054ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005508:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005514:	d110      	bne.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e00f      	b.n	800553a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800551a:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005526:	d007      	beq.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005528:	4b07      	ldr	r3, [pc, #28]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005530:	4a05      	ldr	r2, [pc, #20]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005536:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40007000 	.word	0x40007000
 800554c:	20000000 	.word	0x20000000
 8005550:	431bde83 	.word	0x431bde83

08005554 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e3ca      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005566:	4b97      	ldr	r3, [pc, #604]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005570:	4b94      	ldr	r3, [pc, #592]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80e4 	beq.w	8005750 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_RCC_OscConfig+0x4a>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b0c      	cmp	r3, #12
 8005592:	f040 808b 	bne.w	80056ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b01      	cmp	r3, #1
 800559a:	f040 8087 	bne.w	80056ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800559e:	4b89      	ldr	r3, [pc, #548]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCC_OscConfig+0x62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e3a2      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1a      	ldr	r2, [r3, #32]
 80055ba:	4b82      	ldr	r3, [pc, #520]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <HAL_RCC_OscConfig+0x7c>
 80055c6:	4b7f      	ldr	r3, [pc, #508]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055ce:	e005      	b.n	80055dc <HAL_RCC_OscConfig+0x88>
 80055d0:	4b7c      	ldr	r3, [pc, #496]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80055d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d6:	091b      	lsrs	r3, r3, #4
 80055d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055dc:	4293      	cmp	r3, r2
 80055de:	d223      	bcs.n	8005628 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fd55 	bl	8006094 <RCC_SetFlashLatencyFromMSIRange>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e383      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055f4:	4b73      	ldr	r3, [pc, #460]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a72      	ldr	r2, [pc, #456]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80055fa:	f043 0308 	orr.w	r3, r3, #8
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4b70      	ldr	r3, [pc, #448]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	496d      	ldr	r1, [pc, #436]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005612:	4b6c      	ldr	r3, [pc, #432]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	4968      	ldr	r1, [pc, #416]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
 8005626:	e025      	b.n	8005674 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005628:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a65      	ldr	r2, [pc, #404]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 800562e:	f043 0308 	orr.w	r3, r3, #8
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	4b63      	ldr	r3, [pc, #396]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	4960      	ldr	r1, [pc, #384]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005646:	4b5f      	ldr	r3, [pc, #380]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	495b      	ldr	r1, [pc, #364]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fd15 	bl	8006094 <RCC_SetFlashLatencyFromMSIRange>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e343      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005674:	f000 fc4a 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8005678:	4602      	mov	r2, r0
 800567a:	4b52      	ldr	r3, [pc, #328]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	4950      	ldr	r1, [pc, #320]	@ (80057c8 <HAL_RCC_OscConfig+0x274>)
 8005686:	5ccb      	ldrb	r3, [r1, r3]
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	4a4e      	ldr	r2, [pc, #312]	@ (80057cc <HAL_RCC_OscConfig+0x278>)
 8005692:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005694:	4b4e      	ldr	r3, [pc, #312]	@ (80057d0 <HAL_RCC_OscConfig+0x27c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7fc fa8d 	bl	8001bb8 <HAL_InitTick>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d052      	beq.n	800574e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	e327      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d032      	beq.n	800571a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056b4:	4b43      	ldr	r3, [pc, #268]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a42      	ldr	r2, [pc, #264]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056c0:	f7fc faca 	bl	8001c58 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056c8:	f7fc fac6 	bl	8001c58 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e310      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056da:	4b3a      	ldr	r3, [pc, #232]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056e6:	4b37      	ldr	r3, [pc, #220]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a36      	ldr	r2, [pc, #216]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80056ec:	f043 0308 	orr.w	r3, r3, #8
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4b34      	ldr	r3, [pc, #208]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	4931      	ldr	r1, [pc, #196]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005704:	4b2f      	ldr	r3, [pc, #188]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	492c      	ldr	r1, [pc, #176]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]
 8005718:	e01a      	b.n	8005750 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800571a:	4b2a      	ldr	r3, [pc, #168]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a29      	ldr	r2, [pc, #164]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005726:	f7fc fa97 	bl	8001c58 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800572e:	f7fc fa93 	bl	8001c58 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e2dd      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005740:	4b20      	ldr	r3, [pc, #128]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x1da>
 800574c:	e000      	b.n	8005750 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800574e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d074      	beq.n	8005846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b08      	cmp	r3, #8
 8005760:	d005      	beq.n	800576e <HAL_RCC_OscConfig+0x21a>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d10e      	bne.n	8005786 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d10b      	bne.n	8005786 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576e:	4b15      	ldr	r3, [pc, #84]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d064      	beq.n	8005844 <HAL_RCC_OscConfig+0x2f0>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d160      	bne.n	8005844 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e2ba      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800578e:	d106      	bne.n	800579e <HAL_RCC_OscConfig+0x24a>
 8005790:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a0b      	ldr	r2, [pc, #44]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 8005796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	e026      	b.n	80057ec <HAL_RCC_OscConfig+0x298>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057a6:	d115      	bne.n	80057d4 <HAL_RCC_OscConfig+0x280>
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a05      	ldr	r2, [pc, #20]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80057ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b03      	ldr	r3, [pc, #12]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a02      	ldr	r2, [pc, #8]	@ (80057c4 <HAL_RCC_OscConfig+0x270>)
 80057ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	e014      	b.n	80057ec <HAL_RCC_OscConfig+0x298>
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000
 80057c8:	0800cb20 	.word	0x0800cb20
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000004 	.word	0x20000004
 80057d4:	4ba0      	ldr	r3, [pc, #640]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a9f      	ldr	r2, [pc, #636]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80057da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4b9d      	ldr	r3, [pc, #628]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a9c      	ldr	r2, [pc, #624]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80057e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fc fa30 	bl	8001c58 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fc:	f7fc fa2c 	bl	8001c58 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	@ 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e276      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800580e:	4b92      	ldr	r3, [pc, #584]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x2a8>
 800581a:	e014      	b.n	8005846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fc fa1c 	bl	8001c58 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005824:	f7fc fa18 	bl	8001c58 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	@ 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e262      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005836:	4b88      	ldr	r3, [pc, #544]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x2d0>
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d060      	beq.n	8005914 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b04      	cmp	r3, #4
 8005856:	d005      	beq.n	8005864 <HAL_RCC_OscConfig+0x310>
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b0c      	cmp	r3, #12
 800585c:	d119      	bne.n	8005892 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d116      	bne.n	8005892 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005864:	4b7c      	ldr	r3, [pc, #496]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_RCC_OscConfig+0x328>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e23f      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587c:	4b76      	ldr	r3, [pc, #472]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	061b      	lsls	r3, r3, #24
 800588a:	4973      	ldr	r1, [pc, #460]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 800588c:	4313      	orrs	r3, r2
 800588e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005890:	e040      	b.n	8005914 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d023      	beq.n	80058e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800589a:	4b6f      	ldr	r3, [pc, #444]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6e      	ldr	r2, [pc, #440]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80058a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a6:	f7fc f9d7 	bl	8001c58 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ae:	f7fc f9d3 	bl	8001c58 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e21d      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058c0:	4b65      	ldr	r3, [pc, #404]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058cc:	4b62      	ldr	r3, [pc, #392]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	495f      	ldr	r1, [pc, #380]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
 80058e0:	e018      	b.n	8005914 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a5c      	ldr	r2, [pc, #368]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80058e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fc f9b3 	bl	8001c58 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f6:	f7fc f9af 	bl	8001c58 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e1f9      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005908:	4b53      	ldr	r3, [pc, #332]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d03c      	beq.n	800599a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01c      	beq.n	8005962 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005928:	4b4b      	ldr	r3, [pc, #300]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 800592a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800592e:	4a4a      	ldr	r2, [pc, #296]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005938:	f7fc f98e 	bl	8001c58 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005940:	f7fc f98a 	bl	8001c58 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e1d4      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005952:	4b41      	ldr	r3, [pc, #260]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ef      	beq.n	8005940 <HAL_RCC_OscConfig+0x3ec>
 8005960:	e01b      	b.n	800599a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005962:	4b3d      	ldr	r3, [pc, #244]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005968:	4a3b      	ldr	r2, [pc, #236]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005972:	f7fc f971 	bl	8001c58 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597a:	f7fc f96d 	bl	8001c58 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e1b7      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800598c:	4b32      	ldr	r3, [pc, #200]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 800598e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ef      	bne.n	800597a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80a6 	beq.w	8005af4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a8:	2300      	movs	r3, #0
 80059aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b8:	4b27      	ldr	r3, [pc, #156]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059bc:	4a26      	ldr	r2, [pc, #152]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059c4:	4b24      	ldr	r3, [pc, #144]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 80059c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d0:	2301      	movs	r3, #1
 80059d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059d4:	4b21      	ldr	r3, [pc, #132]	@ (8005a5c <HAL_RCC_OscConfig+0x508>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d118      	bne.n	8005a12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059e0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a5c <HAL_RCC_OscConfig+0x508>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a5c <HAL_RCC_OscConfig+0x508>)
 80059e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ec:	f7fc f934 	bl	8001c58 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f4:	f7fc f930 	bl	8001c58 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e17a      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a06:	4b15      	ldr	r3, [pc, #84]	@ (8005a5c <HAL_RCC_OscConfig+0x508>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d108      	bne.n	8005a2c <HAL_RCC_OscConfig+0x4d8>
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a20:	4a0d      	ldr	r2, [pc, #52]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a2a:	e029      	b.n	8005a80 <HAL_RCC_OscConfig+0x52c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b05      	cmp	r3, #5
 8005a32:	d115      	bne.n	8005a60 <HAL_RCC_OscConfig+0x50c>
 8005a34:	4b08      	ldr	r3, [pc, #32]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3a:	4a07      	ldr	r2, [pc, #28]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005a3c:	f043 0304 	orr.w	r3, r3, #4
 8005a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a44:	4b04      	ldr	r3, [pc, #16]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	4a03      	ldr	r2, [pc, #12]	@ (8005a58 <HAL_RCC_OscConfig+0x504>)
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a54:	e014      	b.n	8005a80 <HAL_RCC_OscConfig+0x52c>
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	40007000 	.word	0x40007000
 8005a60:	4b9c      	ldr	r3, [pc, #624]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a66:	4a9b      	ldr	r2, [pc, #620]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a70:	4b98      	ldr	r3, [pc, #608]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	4a97      	ldr	r2, [pc, #604]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005a78:	f023 0304 	bic.w	r3, r3, #4
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d016      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a88:	f7fc f8e6 	bl	8001c58 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a90:	f7fc f8e2 	bl	8001c58 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e12a      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aa6:	4b8b      	ldr	r3, [pc, #556]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0ed      	beq.n	8005a90 <HAL_RCC_OscConfig+0x53c>
 8005ab4:	e015      	b.n	8005ae2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab6:	f7fc f8cf 	bl	8001c58 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005abc:	e00a      	b.n	8005ad4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fc f8cb 	bl	8001c58 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e113      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ad4:	4b7f      	ldr	r3, [pc, #508]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1ed      	bne.n	8005abe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ae2:	7ffb      	ldrb	r3, [r7, #31]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aec:	4a79      	ldr	r2, [pc, #484]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80fe 	beq.w	8005cfa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	f040 80d0 	bne.w	8005ca8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b08:	4b72      	ldr	r3, [pc, #456]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f003 0203 	and.w	r2, r3, #3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d130      	bne.n	8005b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b26:	3b01      	subs	r3, #1
 8005b28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d127      	bne.n	8005b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d11f      	bne.n	8005b7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b48:	2a07      	cmp	r2, #7
 8005b4a:	bf14      	ite	ne
 8005b4c:	2201      	movne	r2, #1
 8005b4e:	2200      	moveq	r2, #0
 8005b50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d113      	bne.n	8005b7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	3b01      	subs	r3, #1
 8005b64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d109      	bne.n	8005b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	3b01      	subs	r3, #1
 8005b78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d06e      	beq.n	8005c5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	d069      	beq.n	8005c58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b84:	4b53      	ldr	r3, [pc, #332]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b90:	4b50      	ldr	r3, [pc, #320]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0ad      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bac:	f7fc f854 	bl	8001c58 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fc f850 	bl	8001c58 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e09a      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc6:	4b43      	ldr	r3, [pc, #268]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd2:	4b40      	ldr	r3, [pc, #256]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	4b40      	ldr	r3, [pc, #256]	@ (8005cd8 <HAL_RCC_OscConfig+0x784>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005be2:	3a01      	subs	r2, #1
 8005be4:	0112      	lsls	r2, r2, #4
 8005be6:	4311      	orrs	r1, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bec:	0212      	lsls	r2, r2, #8
 8005bee:	4311      	orrs	r1, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005bf4:	0852      	lsrs	r2, r2, #1
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	0552      	lsls	r2, r2, #21
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c00:	0852      	lsrs	r2, r2, #1
 8005c02:	3a01      	subs	r2, #1
 8005c04:	0652      	lsls	r2, r2, #25
 8005c06:	4311      	orrs	r1, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c0c:	0912      	lsrs	r2, r2, #4
 8005c0e:	0452      	lsls	r2, r2, #17
 8005c10:	430a      	orrs	r2, r1
 8005c12:	4930      	ldr	r1, [pc, #192]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c18:	4b2e      	ldr	r3, [pc, #184]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c24:	4b2b      	ldr	r3, [pc, #172]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c30:	f7fc f812 	bl	8001c58 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c38:	f7fc f80e 	bl	8001c58 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e058      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c4a:	4b22      	ldr	r3, [pc, #136]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c56:	e050      	b.n	8005cfa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e04f      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d148      	bne.n	8005cfa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c68:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a19      	ldr	r2, [pc, #100]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c74:	4b17      	ldr	r3, [pc, #92]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a16      	ldr	r2, [pc, #88]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c80:	f7fb ffea 	bl	8001c58 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fb ffe6 	bl	8001c58 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e030      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x734>
 8005ca6:	e028      	b.n	8005cfa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b0c      	cmp	r3, #12
 8005cac:	d023      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cae:	4b09      	ldr	r3, [pc, #36]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a08      	ldr	r2, [pc, #32]	@ (8005cd4 <HAL_RCC_OscConfig+0x780>)
 8005cb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fb ffcd 	bl	8001c58 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc0:	e00c      	b.n	8005cdc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc2:	f7fb ffc9 	bl	8001c58 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d905      	bls.n	8005cdc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e013      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cdc:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <HAL_RCC_OscConfig+0x7b0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1ec      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ce8:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <HAL_RCC_OscConfig+0x7b0>)
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	4905      	ldr	r1, [pc, #20]	@ (8005d04 <HAL_RCC_OscConfig+0x7b0>)
 8005cee:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <HAL_RCC_OscConfig+0x7b4>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60cb      	str	r3, [r1, #12]
 8005cf4:	e001      	b.n	8005cfa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	feeefffc 	.word	0xfeeefffc

08005d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0e7      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d20:	4b75      	ldr	r3, [pc, #468]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d910      	bls.n	8005d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2e:	4b72      	ldr	r3, [pc, #456]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 0207 	bic.w	r2, r3, #7
 8005d36:	4970      	ldr	r1, [pc, #448]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d001      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0cf      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d010      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	4b66      	ldr	r3, [pc, #408]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d908      	bls.n	8005d7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d6c:	4b63      	ldr	r3, [pc, #396]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	4960      	ldr	r1, [pc, #384]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d04c      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d107      	bne.n	8005da2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d92:	4b5a      	ldr	r3, [pc, #360]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d121      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e0a6      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d107      	bne.n	8005dba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005daa:	4b54      	ldr	r3, [pc, #336]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d115      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e09a      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e08e      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e086      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005de2:	4b46      	ldr	r3, [pc, #280]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f023 0203 	bic.w	r2, r3, #3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	4943      	ldr	r1, [pc, #268]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df4:	f7fb ff30 	bl	8001c58 <HAL_GetTick>
 8005df8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfa:	e00a      	b.n	8005e12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dfc:	f7fb ff2c 	bl	8001c58 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e06e      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e12:	4b3a      	ldr	r3, [pc, #232]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 020c 	and.w	r2, r3, #12
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d1eb      	bne.n	8005dfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	4b31      	ldr	r3, [pc, #196]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d208      	bcs.n	8005e52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e40:	4b2e      	ldr	r3, [pc, #184]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	492b      	ldr	r1, [pc, #172]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e52:	4b29      	ldr	r3, [pc, #164]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d210      	bcs.n	8005e82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e60:	4b25      	ldr	r3, [pc, #148]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 0207 	bic.w	r2, r3, #7
 8005e68:	4923      	ldr	r1, [pc, #140]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e70:	4b21      	ldr	r3, [pc, #132]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d001      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e036      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	4918      	ldr	r1, [pc, #96]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eac:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	4910      	ldr	r1, [pc, #64]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ec0:	f000 f824 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <HAL_RCC_ClockConfig+0x1f0>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	091b      	lsrs	r3, r3, #4
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	490b      	ldr	r1, [pc, #44]	@ (8005f00 <HAL_RCC_ClockConfig+0x1f4>)
 8005ed2:	5ccb      	ldrb	r3, [r1, r3]
 8005ed4:	f003 031f 	and.w	r3, r3, #31
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8005edc:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <HAL_RCC_ClockConfig+0x1f8>)
 8005ede:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ee0:	4b09      	ldr	r3, [pc, #36]	@ (8005f08 <HAL_RCC_ClockConfig+0x1fc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fb fe67 	bl	8001bb8 <HAL_InitTick>
 8005eea:	4603      	mov	r3, r0
 8005eec:	72fb      	strb	r3, [r7, #11]

  return status;
 8005eee:	7afb      	ldrb	r3, [r7, #11]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40022000 	.word	0x40022000
 8005efc:	40021000 	.word	0x40021000
 8005f00:	0800cb20 	.word	0x0800cb20
 8005f04:	20000000 	.word	0x20000000
 8005f08:	20000004 	.word	0x20000004

08005f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b089      	sub	sp, #36	@ 0x24
 8005f10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f24:	4b3b      	ldr	r3, [pc, #236]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0x34>
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b0c      	cmp	r3, #12
 8005f38:	d121      	bne.n	8005f7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d11e      	bne.n	8005f7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f40:	4b34      	ldr	r3, [pc, #208]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d107      	bne.n	8005f5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f4c:	4b31      	ldr	r3, [pc, #196]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	e005      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f68:	4a2b      	ldr	r2, [pc, #172]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d102      	bne.n	8005f8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f84:	4b25      	ldr	r3, [pc, #148]	@ (800601c <HAL_RCC_GetSysClockFreq+0x110>)
 8005f86:	61bb      	str	r3, [r7, #24]
 8005f88:	e004      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f90:	4b23      	ldr	r3, [pc, #140]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b0c      	cmp	r3, #12
 8005f98:	d134      	bne.n	8006004 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d003      	beq.n	8005fb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d003      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0xac>
 8005fb0:	e005      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800601c <HAL_RCC_GetSysClockFreq+0x110>)
 8005fb4:	617b      	str	r3, [r7, #20]
      break;
 8005fb6:	e005      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fb8:	4b19      	ldr	r3, [pc, #100]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fba:	617b      	str	r3, [r7, #20]
      break;
 8005fbc:	e002      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	617b      	str	r3, [r7, #20]
      break;
 8005fc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fc4:	4b13      	ldr	r3, [pc, #76]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	091b      	lsrs	r3, r3, #4
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	3301      	adds	r3, #1
 8005fd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	0a1b      	lsrs	r3, r3, #8
 8005fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	fb03 f202 	mul.w	r2, r3, r2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	0e5b      	lsrs	r3, r3, #25
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006004:	69bb      	ldr	r3, [r7, #24]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3724      	adds	r7, #36	@ 0x24
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000
 8006018:	0800cb38 	.word	0x0800cb38
 800601c:	00f42400 	.word	0x00f42400
 8006020:	007a1200 	.word	0x007a1200

08006024 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006028:	4b03      	ldr	r3, [pc, #12]	@ (8006038 <HAL_RCC_GetHCLKFreq+0x14>)
 800602a:	681b      	ldr	r3, [r3, #0]
}
 800602c:	4618      	mov	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000000 	.word	0x20000000

0800603c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006040:	f7ff fff0 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 8006044:	4602      	mov	r2, r0
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	4904      	ldr	r1, [pc, #16]	@ (8006064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006052:	5ccb      	ldrb	r3, [r1, r3]
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40021000 	.word	0x40021000
 8006064:	0800cb30 	.word	0x0800cb30

08006068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800606c:	f7ff ffda 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	0adb      	lsrs	r3, r3, #11
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4904      	ldr	r1, [pc, #16]	@ (8006090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40021000 	.word	0x40021000
 8006090:	0800cb30 	.word	0x0800cb30

08006094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060a0:	4b2a      	ldr	r3, [pc, #168]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060ac:	f7ff f9ee 	bl	800548c <HAL_PWREx_GetVoltageRange>
 80060b0:	6178      	str	r0, [r7, #20]
 80060b2:	e014      	b.n	80060de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060b4:	4b25      	ldr	r3, [pc, #148]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b8:	4a24      	ldr	r2, [pc, #144]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060be:	6593      	str	r3, [r2, #88]	@ 0x58
 80060c0:	4b22      	ldr	r3, [pc, #136]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060cc:	f7ff f9de 	bl	800548c <HAL_PWREx_GetVoltageRange>
 80060d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060d2:	4b1e      	ldr	r3, [pc, #120]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d6:	4a1d      	ldr	r2, [pc, #116]	@ (800614c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e4:	d10b      	bne.n	80060fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b80      	cmp	r3, #128	@ 0x80
 80060ea:	d919      	bls.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80060f0:	d902      	bls.n	80060f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060f2:	2302      	movs	r3, #2
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	e013      	b.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060f8:	2301      	movs	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	e010      	b.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b80      	cmp	r3, #128	@ 0x80
 8006102:	d902      	bls.n	800610a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006104:	2303      	movs	r3, #3
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	e00a      	b.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b80      	cmp	r3, #128	@ 0x80
 800610e:	d102      	bne.n	8006116 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006110:	2302      	movs	r3, #2
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	e004      	b.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b70      	cmp	r3, #112	@ 0x70
 800611a:	d101      	bne.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800611c:	2301      	movs	r3, #1
 800611e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f023 0207 	bic.w	r2, r3, #7
 8006128:	4909      	ldr	r1, [pc, #36]	@ (8006150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006130:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	429a      	cmp	r2, r3
 800613c:	d001      	beq.n	8006142 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40021000 	.word	0x40021000
 8006150:	40022000 	.word	0x40022000

08006154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800615c:	2300      	movs	r3, #0
 800615e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006160:	2300      	movs	r3, #0
 8006162:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800616c:	2b00      	cmp	r3, #0
 800616e:	d041      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006174:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006178:	d02a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800617a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800617e:	d824      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006180:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006184:	d008      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006186:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800618a:	d81e      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006194:	d010      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006196:	e018      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006198:	4b86      	ldr	r3, [pc, #536]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	4a85      	ldr	r2, [pc, #532]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061a4:	e015      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3304      	adds	r3, #4
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 f829 	bl	8007204 <RCCEx_PLLSAI1_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061b6:	e00c      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3320      	adds	r3, #32
 80061bc:	2100      	movs	r1, #0
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f914 	bl	80073ec <RCCEx_PLLSAI2_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061c8:	e003      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	74fb      	strb	r3, [r7, #19]
      break;
 80061ce:	e000      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d2:	7cfb      	ldrb	r3, [r7, #19]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061d8:	4b76      	ldr	r3, [pc, #472]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e6:	4973      	ldr	r1, [pc, #460]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80061ee:	e001      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	7cfb      	ldrb	r3, [r7, #19]
 80061f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d041      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006204:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006208:	d02a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800620a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800620e:	d824      	bhi.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006210:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006214:	d008      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006216:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800621a:	d81e      	bhi.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006224:	d010      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006226:	e018      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006228:	4b62      	ldr	r3, [pc, #392]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4a61      	ldr	r2, [pc, #388]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006232:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006234:	e015      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	2100      	movs	r1, #0
 800623c:	4618      	mov	r0, r3
 800623e:	f000 ffe1 	bl	8007204 <RCCEx_PLLSAI1_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006246:	e00c      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3320      	adds	r3, #32
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f001 f8cc 	bl	80073ec <RCCEx_PLLSAI2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006258:	e003      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	74fb      	strb	r3, [r7, #19]
      break;
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006262:	7cfb      	ldrb	r3, [r7, #19]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006268:	4b52      	ldr	r3, [pc, #328]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006276:	494f      	ldr	r1, [pc, #316]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800627e:	e001      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	7cfb      	ldrb	r3, [r7, #19]
 8006282:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80a0 	beq.w	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006292:	2300      	movs	r3, #0
 8006294:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006296:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ac:	4b41      	ldr	r3, [pc, #260]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b0:	4a40      	ldr	r2, [pc, #256]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80062b8:	4b3e      	ldr	r3, [pc, #248]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	60bb      	str	r3, [r7, #8]
 80062c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062c4:	2301      	movs	r3, #1
 80062c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062c8:	4b3b      	ldr	r3, [pc, #236]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3a      	ldr	r2, [pc, #232]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062d4:	f7fb fcc0 	bl	8001c58 <HAL_GetTick>
 80062d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062da:	e009      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062dc:	f7fb fcbc 	bl	8001c58 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d902      	bls.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	74fb      	strb	r3, [r7, #19]
        break;
 80062ee:	e005      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062f0:	4b31      	ldr	r3, [pc, #196]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0ef      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80062fc:	7cfb      	ldrb	r3, [r7, #19]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d15c      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006302:	4b2c      	ldr	r3, [pc, #176]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006308:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800630c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01f      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	429a      	cmp	r2, r3
 800631e:	d019      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006320:	4b24      	ldr	r3, [pc, #144]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006326:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800632a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800632c:	4b21      	ldr	r3, [pc, #132]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006332:	4a20      	ldr	r2, [pc, #128]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800633c:	4b1d      	ldr	r3, [pc, #116]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006342:	4a1c      	ldr	r2, [pc, #112]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800634c:	4a19      	ldr	r2, [pc, #100]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d016      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635e:	f7fb fc7b 	bl	8001c58 <HAL_GetTick>
 8006362:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006364:	e00b      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006366:	f7fb fc77 	bl	8001c58 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006374:	4293      	cmp	r3, r2
 8006376:	d902      	bls.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	74fb      	strb	r3, [r7, #19]
            break;
 800637c:	e006      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800637e:	4b0d      	ldr	r3, [pc, #52]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0ec      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800638c:	7cfb      	ldrb	r3, [r7, #19]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10c      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006392:	4b08      	ldr	r3, [pc, #32]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063a2:	4904      	ldr	r1, [pc, #16]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063aa:	e009      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ac:	7cfb      	ldrb	r3, [r7, #19]
 80063ae:	74bb      	strb	r3, [r7, #18]
 80063b0:	e006      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80063b2:	bf00      	nop
 80063b4:	40021000 	.word	0x40021000
 80063b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	7cfb      	ldrb	r3, [r7, #19]
 80063be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063c0:	7c7b      	ldrb	r3, [r7, #17]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d105      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c6:	4b9e      	ldr	r3, [pc, #632]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ca:	4a9d      	ldr	r2, [pc, #628]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063de:	4b98      	ldr	r3, [pc, #608]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e4:	f023 0203 	bic.w	r2, r3, #3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	4994      	ldr	r1, [pc, #592]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006400:	4b8f      	ldr	r3, [pc, #572]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006406:	f023 020c 	bic.w	r2, r3, #12
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640e:	498c      	ldr	r1, [pc, #560]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006422:	4b87      	ldr	r3, [pc, #540]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006428:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	4983      	ldr	r1, [pc, #524]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006444:	4b7e      	ldr	r3, [pc, #504]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006452:	497b      	ldr	r1, [pc, #492]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006466:	4b76      	ldr	r3, [pc, #472]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006474:	4972      	ldr	r1, [pc, #456]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006488:	4b6d      	ldr	r3, [pc, #436]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006496:	496a      	ldr	r1, [pc, #424]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064aa:	4b65      	ldr	r3, [pc, #404]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b8:	4961      	ldr	r1, [pc, #388]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064da:	4959      	ldr	r1, [pc, #356]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064ee:	4b54      	ldr	r3, [pc, #336]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064fc:	4950      	ldr	r1, [pc, #320]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006510:	4b4b      	ldr	r3, [pc, #300]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006516:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651e:	4948      	ldr	r1, [pc, #288]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006520:	4313      	orrs	r3, r2
 8006522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006532:	4b43      	ldr	r3, [pc, #268]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006538:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006540:	493f      	ldr	r1, [pc, #252]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d028      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006554:	4b3a      	ldr	r3, [pc, #232]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006562:	4937      	ldr	r1, [pc, #220]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800656e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006572:	d106      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006574:	4b32      	ldr	r3, [pc, #200]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a31      	ldr	r2, [pc, #196]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800657e:	60d3      	str	r3, [r2, #12]
 8006580:	e011      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006586:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800658a:	d10c      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	2101      	movs	r1, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fe36 	bl	8007204 <RCCEx_PLLSAI1_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800659c:	7cfb      	ldrb	r3, [r7, #19]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80065a2:	7cfb      	ldrb	r3, [r7, #19]
 80065a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d028      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065b2:	4b23      	ldr	r3, [pc, #140]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c0:	491f      	ldr	r1, [pc, #124]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065d0:	d106      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065dc:	60d3      	str	r3, [r2, #12]
 80065de:	e011      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	2101      	movs	r1, #1
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fe07 	bl	8007204 <RCCEx_PLLSAI1_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065fa:	7cfb      	ldrb	r3, [r7, #19]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006600:	7cfb      	ldrb	r3, [r7, #19]
 8006602:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02b      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006610:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006616:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800661e:	4908      	ldr	r1, [pc, #32]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800662e:	d109      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006630:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	4a02      	ldr	r2, [pc, #8]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800663a:	60d3      	str	r3, [r2, #12]
 800663c:	e014      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800664c:	d10c      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3304      	adds	r3, #4
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fdd5 	bl	8007204 <RCCEx_PLLSAI1_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800665e:	7cfb      	ldrb	r3, [r7, #19]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d02f      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006674:	4b2b      	ldr	r3, [pc, #172]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006682:	4928      	ldr	r1, [pc, #160]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800668e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006692:	d10d      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	2102      	movs	r1, #2
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fdb2 	bl	8007204 <RCCEx_PLLSAI1_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066aa:	7cfb      	ldrb	r3, [r7, #19]
 80066ac:	74bb      	strb	r3, [r7, #18]
 80066ae:	e011      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b8:	d10c      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3320      	adds	r3, #32
 80066be:	2102      	movs	r1, #2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fe93 	bl	80073ec <RCCEx_PLLSAI2_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ca:	7cfb      	ldrb	r3, [r7, #19]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066d0:	7cfb      	ldrb	r3, [r7, #19]
 80066d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066e0:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066ee:	490d      	ldr	r1, [pc, #52]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006702:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006708:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006712:	4904      	ldr	r1, [pc, #16]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800671a:	7cbb      	ldrb	r3, [r7, #18]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40021000 	.word	0x40021000

08006728 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800673a:	d13e      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800673c:	4bb2      	ldr	r3, [pc, #712]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006746:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800674e:	d028      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006756:	f200 8542 	bhi.w	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006760:	d005      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006768:	d00e      	beq.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800676a:	f000 bd38 	b.w	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800676e:	4ba6      	ldr	r3, [pc, #664]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	f040 8532 	bne.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800677e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006782:	61fb      	str	r3, [r7, #28]
      break;
 8006784:	f000 bd2d 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006788:	4b9f      	ldr	r3, [pc, #636]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800678a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	f040 8527 	bne.w	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8006798:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800679c:	61fb      	str	r3, [r7, #28]
      break;
 800679e:	f000 bd22 	b.w	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067a2:	4b99      	ldr	r3, [pc, #612]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ae:	f040 851c 	bne.w	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80067b2:	4b96      	ldr	r3, [pc, #600]	@ (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80067b4:	61fb      	str	r3, [r7, #28]
      break;
 80067b6:	f000 bd18 	b.w	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067ba:	4b93      	ldr	r3, [pc, #588]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d036      	beq.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d840      	bhi.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d003      	beq.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d020      	beq.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80067dc:	e039      	b.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80067de:	4b8a      	ldr	r3, [pc, #552]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d116      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80067ea:	4b87      	ldr	r3, [pc, #540]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80067f6:	4b84      	ldr	r3, [pc, #528]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	091b      	lsrs	r3, r3, #4
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	e005      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006802:	4b81      	ldr	r3, [pc, #516]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	4a80      	ldr	r2, [pc, #512]	@ (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006814:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006816:	e01f      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
      break;
 800681c:	e01c      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800681e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800682a:	d102      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800682c:	4b79      	ldr	r3, [pc, #484]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800682e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006830:	e012      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
      break;
 8006836:	e00f      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006838:	4b73      	ldr	r3, [pc, #460]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006844:	d102      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006846:	4b74      	ldr	r3, [pc, #464]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006848:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800684a:	e005      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	61bb      	str	r3, [r7, #24]
      break;
 8006850:	e002      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	61bb      	str	r3, [r7, #24]
      break;
 8006856:	bf00      	nop
    }

    switch(PeriphClk)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800685e:	f000 80dd 	beq.w	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006868:	f200 84c1 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006872:	f000 80d3 	beq.w	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800687c:	f200 84b7 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006886:	f000 835f 	beq.w	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006890:	f200 84ad 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689a:	f000 847e 	beq.w	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068a4:	f200 84a3 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068ae:	f000 82cd 	beq.w	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068b8:	f200 8499 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c2:	f000 80ab 	beq.w	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068cc:	f200 848f 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d6:	f000 8090 	beq.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e0:	f200 8485 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ea:	d07f      	beq.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f2:	f200 847c 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fc:	f000 8403 	beq.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006906:	f200 8472 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006910:	f000 83af 	beq.w	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691a:	f200 8468 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006924:	f000 8379 	beq.w	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692e:	f200 845e 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b80      	cmp	r3, #128	@ 0x80
 8006936:	f000 8344 	beq.w	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b80      	cmp	r3, #128	@ 0x80
 800693e:	f200 8456 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b20      	cmp	r3, #32
 8006946:	d84b      	bhi.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 844f 	beq.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	2b1f      	cmp	r3, #31
 8006956:	f200 844a 	bhi.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800695a:	a201      	add	r2, pc, #4	@ (adr r2, 8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006b49 	.word	0x08006b49
 8006964:	08006bb7 	.word	0x08006bb7
 8006968:	080071ef 	.word	0x080071ef
 800696c:	08006c4b 	.word	0x08006c4b
 8006970:	080071ef 	.word	0x080071ef
 8006974:	080071ef 	.word	0x080071ef
 8006978:	080071ef 	.word	0x080071ef
 800697c:	08006cd1 	.word	0x08006cd1
 8006980:	080071ef 	.word	0x080071ef
 8006984:	080071ef 	.word	0x080071ef
 8006988:	080071ef 	.word	0x080071ef
 800698c:	080071ef 	.word	0x080071ef
 8006990:	080071ef 	.word	0x080071ef
 8006994:	080071ef 	.word	0x080071ef
 8006998:	080071ef 	.word	0x080071ef
 800699c:	08006d49 	.word	0x08006d49
 80069a0:	080071ef 	.word	0x080071ef
 80069a4:	080071ef 	.word	0x080071ef
 80069a8:	080071ef 	.word	0x080071ef
 80069ac:	080071ef 	.word	0x080071ef
 80069b0:	080071ef 	.word	0x080071ef
 80069b4:	080071ef 	.word	0x080071ef
 80069b8:	080071ef 	.word	0x080071ef
 80069bc:	080071ef 	.word	0x080071ef
 80069c0:	080071ef 	.word	0x080071ef
 80069c4:	080071ef 	.word	0x080071ef
 80069c8:	080071ef 	.word	0x080071ef
 80069cc:	080071ef 	.word	0x080071ef
 80069d0:	080071ef 	.word	0x080071ef
 80069d4:	080071ef 	.word	0x080071ef
 80069d8:	080071ef 	.word	0x080071ef
 80069dc:	08006dcb 	.word	0x08006dcb
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b40      	cmp	r3, #64	@ 0x40
 80069e4:	f000 82c1 	beq.w	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80069e8:	f000 bc01 	b.w	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80069f2:	f000 fdd9 	bl	80075a8 <RCCEx_GetSAIxPeriphCLKFreq>
 80069f6:	61f8      	str	r0, [r7, #28]
      break;
 80069f8:	e3fa      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80069fa:	69b9      	ldr	r1, [r7, #24]
 80069fc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006a00:	f000 fdd2 	bl	80075a8 <RCCEx_GetSAIxPeriphCLKFreq>
 8006a04:	61f8      	str	r0, [r7, #28]
      break;
 8006a06:	e3f3      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	0003d090 	.word	0x0003d090
 8006a10:	0800cb38 	.word	0x0800cb38
 8006a14:	00f42400 	.word	0x00f42400
 8006a18:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006a1c:	4ba9      	ldr	r3, [pc, #676]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a22:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a2e:	d00c      	beq.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a36:	d87f      	bhi.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a3e:	d04e      	beq.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a46:	d01d      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8006a48:	e076      	b.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006a4a:	4b9e      	ldr	r3, [pc, #632]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d172      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006a56:	4b9b      	ldr	r3, [pc, #620]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8006a62:	4b98      	ldr	r3, [pc, #608]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	091b      	lsrs	r3, r3, #4
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	e005      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8006a6e:	4b95      	ldr	r3, [pc, #596]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	4a93      	ldr	r2, [pc, #588]	@ (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a80:	61fb      	str	r3, [r7, #28]
          break;
 8006a82:	e05b      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a84:	4b8f      	ldr	r3, [pc, #572]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a90:	d156      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006a92:	4b8c      	ldr	r3, [pc, #560]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a9e:	d14f      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006aa0:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aaa:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	fb03 f202 	mul.w	r2, r3, r2
 8006ab4:	4b83      	ldr	r3, [pc, #524]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	3301      	adds	r3, #1
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	0d5b      	lsrs	r3, r3, #21
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	61fb      	str	r3, [r7, #28]
          break;
 8006adc:	e030      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006ade:	4b79      	ldr	r3, [pc, #484]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aea:	d12b      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006aec:	4b75      	ldr	r3, [pc, #468]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006af4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006af8:	d124      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006afa:	4b72      	ldr	r3, [pc, #456]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b04:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	fb03 f202 	mul.w	r2, r3, r2
 8006b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	091b      	lsrs	r3, r3, #4
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	3301      	adds	r3, #1
 8006b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006b20:	4b68      	ldr	r3, [pc, #416]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	0d5b      	lsrs	r3, r3, #21
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b34:	61fb      	str	r3, [r7, #28]
          break;
 8006b36:	e005      	b.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8006b38:	bf00      	nop
 8006b3a:	e359      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b3c:	bf00      	nop
 8006b3e:	e357      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b40:	bf00      	nop
 8006b42:	e355      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b44:	bf00      	nop
        break;
 8006b46:	e353      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006b48:	4b5e      	ldr	r3, [pc, #376]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d827      	bhi.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006b79 	.word	0x08006b79
 8006b68:	08006b81 	.word	0x08006b81
 8006b6c:	08006b95 	.word	0x08006b95
          frequency = HAL_RCC_GetPCLK2Freq();
 8006b70:	f7ff fa7a 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8006b74:	61f8      	str	r0, [r7, #28]
          break;
 8006b76:	e01d      	b.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b78:	f7ff f9c8 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006b7c:	61f8      	str	r0, [r7, #28]
          break;
 8006b7e:	e019      	b.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b80:	4b50      	ldr	r3, [pc, #320]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8c:	d10f      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8006b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006b90:	61fb      	str	r3, [r7, #28]
          break;
 8006b92:	e00c      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b94:	4b4b      	ldr	r3, [pc, #300]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d107      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ba6:	61fb      	str	r3, [r7, #28]
          break;
 8006ba8:	e003      	b.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8006baa:	bf00      	nop
 8006bac:	e320      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006bae:	bf00      	nop
 8006bb0:	e31e      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006bb2:	bf00      	nop
        break;
 8006bb4:	e31c      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006bb6:	4b43      	ldr	r3, [pc, #268]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbc:	f003 030c 	and.w	r3, r3, #12
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b0c      	cmp	r3, #12
 8006bc6:	d83a      	bhi.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006c05 	.word	0x08006c05
 8006bd4:	08006c3f 	.word	0x08006c3f
 8006bd8:	08006c3f 	.word	0x08006c3f
 8006bdc:	08006c3f 	.word	0x08006c3f
 8006be0:	08006c0d 	.word	0x08006c0d
 8006be4:	08006c3f 	.word	0x08006c3f
 8006be8:	08006c3f 	.word	0x08006c3f
 8006bec:	08006c3f 	.word	0x08006c3f
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c3f 	.word	0x08006c3f
 8006bf8:	08006c3f 	.word	0x08006c3f
 8006bfc:	08006c3f 	.word	0x08006c3f
 8006c00:	08006c29 	.word	0x08006c29
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c04:	f7ff fa1a 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006c08:	61f8      	str	r0, [r7, #28]
          break;
 8006c0a:	e01d      	b.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c0c:	f7ff f97e 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006c10:	61f8      	str	r0, [r7, #28]
          break;
 8006c12:	e019      	b.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c14:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c20:	d10f      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8006c22:	4b2a      	ldr	r3, [pc, #168]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006c24:	61fb      	str	r3, [r7, #28]
          break;
 8006c26:	e00c      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c28:	4b26      	ldr	r3, [pc, #152]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d107      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8006c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c3a:	61fb      	str	r3, [r7, #28]
          break;
 8006c3c:	e003      	b.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8006c3e:	bf00      	nop
 8006c40:	e2d6      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006c42:	bf00      	nop
 8006c44:	e2d4      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006c46:	bf00      	nop
        break;
 8006c48:	e2d2      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b30      	cmp	r3, #48	@ 0x30
 8006c5a:	d021      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b30      	cmp	r3, #48	@ 0x30
 8006c60:	d829      	bhi.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d011      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d823      	bhi.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b10      	cmp	r3, #16
 8006c78:	d004      	beq.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8006c7a:	e01c      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c7c:	f7ff f9de 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006c80:	61f8      	str	r0, [r7, #28]
          break;
 8006c82:	e01d      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c84:	f7ff f942 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006c88:	61f8      	str	r0, [r7, #28]
          break;
 8006c8a:	e019      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c98:	d10f      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006c9c:	61fb      	str	r3, [r7, #28]
          break;
 8006c9e:	e00c      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ca0:	4b08      	ldr	r3, [pc, #32]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d107      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8006cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cb2:	61fb      	str	r3, [r7, #28]
          break;
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8006cb6:	bf00      	nop
 8006cb8:	e29a      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006cba:	bf00      	nop
 8006cbc:	e298      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006cbe:	bf00      	nop
        break;
 8006cc0:	e296      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006cc2:	bf00      	nop
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	0800cb38 	.word	0x0800cb38
 8006ccc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006cd0:	4b9b      	ldr	r3, [pc, #620]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ce0:	d021      	beq.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ce6:	d829      	bhi.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	2b80      	cmp	r3, #128	@ 0x80
 8006cec:	d011      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b80      	cmp	r3, #128	@ 0x80
 8006cf2:	d823      	bhi.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	2b40      	cmp	r3, #64	@ 0x40
 8006cfe:	d004      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006d00:	e01c      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d02:	f7ff f99b 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006d06:	61f8      	str	r0, [r7, #28]
          break;
 8006d08:	e01d      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d0a:	f7ff f8ff 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006d0e:	61f8      	str	r0, [r7, #28]
          break;
 8006d10:	e019      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d12:	4b8b      	ldr	r3, [pc, #556]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1e:	d10f      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8006d20:	4b88      	ldr	r3, [pc, #544]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006d22:	61fb      	str	r3, [r7, #28]
          break;
 8006d24:	e00c      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d26:	4b86      	ldr	r3, [pc, #536]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d107      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8006d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d38:	61fb      	str	r3, [r7, #28]
          break;
 8006d3a:	e003      	b.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8006d3c:	bf00      	nop
 8006d3e:	e257      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006d40:	bf00      	nop
 8006d42:	e255      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006d44:	bf00      	nop
        break;
 8006d46:	e253      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006d48:	4b7d      	ldr	r3, [pc, #500]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d5a:	d025      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d62:	d82c      	bhi.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6a:	d013      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d72:	d824      	bhi.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d004      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d80:	d004      	beq.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8006d82:	e01c      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d84:	f7ff f95a 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006d88:	61f8      	str	r0, [r7, #28]
          break;
 8006d8a:	e01d      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d8c:	f7ff f8be 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006d90:	61f8      	str	r0, [r7, #28]
          break;
 8006d92:	e019      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d94:	4b6a      	ldr	r3, [pc, #424]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da0:	d10f      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8006da2:	4b68      	ldr	r3, [pc, #416]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006da4:	61fb      	str	r3, [r7, #28]
          break;
 8006da6:	e00c      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006da8:	4b65      	ldr	r3, [pc, #404]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d107      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8006db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dba:	61fb      	str	r3, [r7, #28]
          break;
 8006dbc:	e003      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8006dbe:	bf00      	nop
 8006dc0:	e216      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006dc2:	bf00      	nop
 8006dc4:	e214      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006dc6:	bf00      	nop
        break;
 8006dc8:	e212      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006dca:	4b5d      	ldr	r3, [pc, #372]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ddc:	d025      	beq.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de4:	d82c      	bhi.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dec:	d013      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df4:	d824      	bhi.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e02:	d004      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8006e04:	e01c      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e06:	f7ff f919 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006e0a:	61f8      	str	r0, [r7, #28]
          break;
 8006e0c:	e01d      	b.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e0e:	f7ff f87d 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006e12:	61f8      	str	r0, [r7, #28]
          break;
 8006e14:	e019      	b.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e16:	4b4a      	ldr	r3, [pc, #296]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e22:	d10f      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8006e24:	4b47      	ldr	r3, [pc, #284]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006e26:	61fb      	str	r3, [r7, #28]
          break;
 8006e28:	e00c      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e2a:	4b45      	ldr	r3, [pc, #276]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d107      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8006e38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e3c:	61fb      	str	r3, [r7, #28]
          break;
 8006e3e:	e003      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8006e40:	bf00      	nop
 8006e42:	e1d5      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006e44:	bf00      	nop
 8006e46:	e1d3      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006e48:	bf00      	nop
        break;
 8006e4a:	e1d1      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e5e:	d00c      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e66:	d864      	bhi.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e6e:	d008      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e76:	d030      	beq.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8006e78:	e05b      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7ff f847 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006e7e:	61f8      	str	r0, [r7, #28]
          break;
 8006e80:	e05c      	b.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006e82:	4b2f      	ldr	r3, [pc, #188]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e8e:	d152      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8006e90:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d04c      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e9c:	4b28      	ldr	r3, [pc, #160]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	0a1b      	lsrs	r3, r3, #8
 8006ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	fb03 f202 	mul.w	r2, r3, r2
 8006eb0:	4b23      	ldr	r3, [pc, #140]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	3301      	adds	r3, #1
 8006ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	0e5b      	lsrs	r3, r3, #25
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	3301      	adds	r3, #1
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed6:	61fb      	str	r3, [r7, #28]
          break;
 8006ed8:	e02d      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8006eda:	4b19      	ldr	r3, [pc, #100]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee6:	d128      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006ee8:	4b15      	ldr	r3, [pc, #84]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d022      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006ef4:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	fb03 f202 	mul.w	r2, r3, r2
 8006f08:	4b0d      	ldr	r3, [pc, #52]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	091b      	lsrs	r3, r3, #4
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	3301      	adds	r3, #1
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006f1a:	4b09      	ldr	r3, [pc, #36]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	0e5b      	lsrs	r3, r3, #25
 8006f20:	f003 0303 	and.w	r3, r3, #3
 8006f24:	3301      	adds	r3, #1
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2e:	61fb      	str	r3, [r7, #28]
          break;
 8006f30:	e003      	b.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8006f32:	bf00      	nop
 8006f34:	e15c      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006f36:	bf00      	nop
 8006f38:	e15a      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006f3a:	bf00      	nop
        break;
 8006f3c:	e158      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006f3e:	bf00      	nop
 8006f40:	40021000 	.word	0x40021000
 8006f44:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006f48:	4b9d      	ldr	r3, [pc, #628]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f52:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006f5a:	f7ff f885 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8006f5e:	61f8      	str	r0, [r7, #28]
        break;
 8006f60:	e146      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f62:	f7fe ffd3 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006f66:	61f8      	str	r0, [r7, #28]
        break;
 8006f68:	e142      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006f6a:	4b95      	ldr	r3, [pc, #596]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f70:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f7c:	d013      	beq.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f84:	d819      	bhi.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f92:	d004      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8006f94:	e011      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f96:	f7ff f851 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006f9a:	61f8      	str	r0, [r7, #28]
          break;
 8006f9c:	e010      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f9e:	f7fe ffb5 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006fa2:	61f8      	str	r0, [r7, #28]
          break;
 8006fa4:	e00c      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fa6:	4b86      	ldr	r3, [pc, #536]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fb2:	d104      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8006fb4:	4b83      	ldr	r3, [pc, #524]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006fb6:	61fb      	str	r3, [r7, #28]
          break;
 8006fb8:	e001      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8006fba:	bf00      	nop
 8006fbc:	e118      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006fbe:	bf00      	nop
        break;
 8006fc0:	e116      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fd4:	d013      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fdc:	d819      	bhi.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fea:	d004      	beq.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8006fec:	e011      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fee:	f7ff f825 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8006ff2:	61f8      	str	r0, [r7, #28]
          break;
 8006ff4:	e010      	b.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ff6:	f7fe ff89 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006ffa:	61f8      	str	r0, [r7, #28]
          break;
 8006ffc:	e00c      	b.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ffe:	4b70      	ldr	r3, [pc, #448]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800700a:	d104      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800700c:	4b6d      	ldr	r3, [pc, #436]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800700e:	61fb      	str	r3, [r7, #28]
          break;
 8007010:	e001      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8007012:	bf00      	nop
 8007014:	e0ec      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007016:	bf00      	nop
        break;
 8007018:	e0ea      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800701a:	4b69      	ldr	r3, [pc, #420]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007020:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800702c:	d013      	beq.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007034:	d819      	bhi.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007042:	d004      	beq.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8007044:	e011      	b.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007046:	f7fe fff9 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 800704a:	61f8      	str	r0, [r7, #28]
          break;
 800704c:	e010      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800704e:	f7fe ff5d 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8007052:	61f8      	str	r0, [r7, #28]
          break;
 8007054:	e00c      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007056:	4b5a      	ldr	r3, [pc, #360]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800705e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007062:	d104      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8007064:	4b57      	ldr	r3, [pc, #348]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8007066:	61fb      	str	r3, [r7, #28]
          break;
 8007068:	e001      	b.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800706a:	bf00      	nop
 800706c:	e0c0      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800706e:	bf00      	nop
        break;
 8007070:	e0be      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007072:	4b53      	ldr	r3, [pc, #332]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007078:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007084:	d02c      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800708c:	d833      	bhi.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007094:	d01a      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800709c:	d82b      	bhi.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070aa:	d004      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80070ac:	e023      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070ae:	f7fe ffc5 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 80070b2:	61f8      	str	r0, [r7, #28]
          break;
 80070b4:	e026      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80070b6:	4b42      	ldr	r3, [pc, #264]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d11a      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80070c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070c8:	61fb      	str	r3, [r7, #28]
          break;
 80070ca:	e016      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070cc:	4b3c      	ldr	r3, [pc, #240]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d8:	d111      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80070da:	4b3a      	ldr	r3, [pc, #232]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80070dc:	61fb      	str	r3, [r7, #28]
          break;
 80070de:	e00e      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070e0:	4b37      	ldr	r3, [pc, #220]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d109      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80070ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f2:	61fb      	str	r3, [r7, #28]
          break;
 80070f4:	e005      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80070f6:	bf00      	nop
 80070f8:	e07a      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80070fa:	bf00      	nop
 80070fc:	e078      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80070fe:	bf00      	nop
 8007100:	e076      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007102:	bf00      	nop
        break;
 8007104:	e074      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007106:	4b2e      	ldr	r3, [pc, #184]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007118:	d02c      	beq.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007120:	d833      	bhi.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007128:	d01a      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007130:	d82b      	bhi.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800713e:	d004      	beq.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8007140:	e023      	b.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007142:	f7fe ff7b 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8007146:	61f8      	str	r0, [r7, #28]
          break;
 8007148:	e026      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800714a:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800714c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b02      	cmp	r3, #2
 8007156:	d11a      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8007158:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800715c:	61fb      	str	r3, [r7, #28]
          break;
 800715e:	e016      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007160:	4b17      	ldr	r3, [pc, #92]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716c:	d111      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800716e:	4b15      	ldr	r3, [pc, #84]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8007170:	61fb      	str	r3, [r7, #28]
          break;
 8007172:	e00e      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007174:	4b12      	ldr	r3, [pc, #72]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b02      	cmp	r3, #2
 8007180:	d109      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8007182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007186:	61fb      	str	r3, [r7, #28]
          break;
 8007188:	e005      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800718a:	bf00      	nop
 800718c:	e030      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800718e:	bf00      	nop
 8007190:	e02e      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007192:	bf00      	nop
 8007194:	e02c      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007196:	bf00      	nop
        break;
 8007198:	e02a      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800719a:	4b09      	ldr	r3, [pc, #36]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b2:	d009      	beq.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80071b4:	e012      	b.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80071b6:	f7fe ff41 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 80071ba:	61f8      	str	r0, [r7, #28]
          break;
 80071bc:	e00e      	b.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80071be:	bf00      	nop
 80071c0:	40021000 	.word	0x40021000
 80071c4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c8:	4b0c      	ldr	r3, [pc, #48]	@ (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071d4:	d101      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80071d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80071d8:	61fb      	str	r3, [r7, #28]
          break;
 80071da:	bf00      	nop
        break;
 80071dc:	e008      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80071de:	bf00      	nop
 80071e0:	e006      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80071e2:	bf00      	nop
 80071e4:	e004      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80071e6:	bf00      	nop
 80071e8:	e002      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80071ee:	bf00      	nop
    }
  }

  return(frequency);
 80071f0:	69fb      	ldr	r3, [r7, #28]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40021000 	.word	0x40021000
 8007200:	00f42400 	.word	0x00f42400

08007204 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007212:	4b75      	ldr	r3, [pc, #468]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d018      	beq.n	8007250 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800721e:	4b72      	ldr	r3, [pc, #456]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f003 0203 	and.w	r2, r3, #3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d10d      	bne.n	800724a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
       ||
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007236:	4b6c      	ldr	r3, [pc, #432]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	091b      	lsrs	r3, r3, #4
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
       ||
 8007246:	429a      	cmp	r2, r3
 8007248:	d047      	beq.n	80072da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	73fb      	strb	r3, [r7, #15]
 800724e:	e044      	b.n	80072da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b03      	cmp	r3, #3
 8007256:	d018      	beq.n	800728a <RCCEx_PLLSAI1_Config+0x86>
 8007258:	2b03      	cmp	r3, #3
 800725a:	d825      	bhi.n	80072a8 <RCCEx_PLLSAI1_Config+0xa4>
 800725c:	2b01      	cmp	r3, #1
 800725e:	d002      	beq.n	8007266 <RCCEx_PLLSAI1_Config+0x62>
 8007260:	2b02      	cmp	r3, #2
 8007262:	d009      	beq.n	8007278 <RCCEx_PLLSAI1_Config+0x74>
 8007264:	e020      	b.n	80072a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007266:	4b60      	ldr	r3, [pc, #384]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d11d      	bne.n	80072ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007276:	e01a      	b.n	80072ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007278:	4b5b      	ldr	r3, [pc, #364]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007280:	2b00      	cmp	r3, #0
 8007282:	d116      	bne.n	80072b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007288:	e013      	b.n	80072b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800728a:	4b57      	ldr	r3, [pc, #348]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10f      	bne.n	80072b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007296:	4b54      	ldr	r3, [pc, #336]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072a6:	e006      	b.n	80072b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
      break;
 80072ac:	e004      	b.n	80072b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80072ae:	bf00      	nop
 80072b0:	e002      	b.n	80072b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80072b2:	bf00      	nop
 80072b4:	e000      	b.n	80072b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80072b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10d      	bne.n	80072da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80072be:	4b4a      	ldr	r3, [pc, #296]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6819      	ldr	r1, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	430b      	orrs	r3, r1
 80072d4:	4944      	ldr	r1, [pc, #272]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d17d      	bne.n	80073dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80072e0:	4b41      	ldr	r3, [pc, #260]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a40      	ldr	r2, [pc, #256]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ec:	f7fa fcb4 	bl	8001c58 <HAL_GetTick>
 80072f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80072f2:	e009      	b.n	8007308 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072f4:	f7fa fcb0 	bl	8001c58 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d902      	bls.n	8007308 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	73fb      	strb	r3, [r7, #15]
        break;
 8007306:	e005      	b.n	8007314 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007308:	4b37      	ldr	r3, [pc, #220]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1ef      	bne.n	80072f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d160      	bne.n	80073dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d111      	bne.n	8007344 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007320:	4b31      	ldr	r3, [pc, #196]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6892      	ldr	r2, [r2, #8]
 8007330:	0211      	lsls	r1, r2, #8
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	68d2      	ldr	r2, [r2, #12]
 8007336:	0912      	lsrs	r2, r2, #4
 8007338:	0452      	lsls	r2, r2, #17
 800733a:	430a      	orrs	r2, r1
 800733c:	492a      	ldr	r1, [pc, #168]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800733e:	4313      	orrs	r3, r2
 8007340:	610b      	str	r3, [r1, #16]
 8007342:	e027      	b.n	8007394 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d112      	bne.n	8007370 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800734a:	4b27      	ldr	r3, [pc, #156]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007352:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6892      	ldr	r2, [r2, #8]
 800735a:	0211      	lsls	r1, r2, #8
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6912      	ldr	r2, [r2, #16]
 8007360:	0852      	lsrs	r2, r2, #1
 8007362:	3a01      	subs	r2, #1
 8007364:	0552      	lsls	r2, r2, #21
 8007366:	430a      	orrs	r2, r1
 8007368:	491f      	ldr	r1, [pc, #124]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800736a:	4313      	orrs	r3, r2
 800736c:	610b      	str	r3, [r1, #16]
 800736e:	e011      	b.n	8007394 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007370:	4b1d      	ldr	r3, [pc, #116]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007378:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6892      	ldr	r2, [r2, #8]
 8007380:	0211      	lsls	r1, r2, #8
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6952      	ldr	r2, [r2, #20]
 8007386:	0852      	lsrs	r2, r2, #1
 8007388:	3a01      	subs	r2, #1
 800738a:	0652      	lsls	r2, r2, #25
 800738c:	430a      	orrs	r2, r1
 800738e:	4916      	ldr	r1, [pc, #88]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007390:	4313      	orrs	r3, r2
 8007392:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007394:	4b14      	ldr	r3, [pc, #80]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a13      	ldr	r2, [pc, #76]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800739a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800739e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a0:	f7fa fc5a 	bl	8001c58 <HAL_GetTick>
 80073a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073a6:	e009      	b.n	80073bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073a8:	f7fa fc56 	bl	8001c58 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d902      	bls.n	80073bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	73fb      	strb	r3, [r7, #15]
          break;
 80073ba:	e005      	b.n	80073c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073bc:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0ef      	beq.n	80073a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80073ce:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073d0:	691a      	ldr	r2, [r3, #16]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	4904      	ldr	r1, [pc, #16]	@ (80073e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	40021000 	.word	0x40021000

080073ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80073fa:	4b6a      	ldr	r3, [pc, #424]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d018      	beq.n	8007438 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007406:	4b67      	ldr	r3, [pc, #412]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0203 	and.w	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d10d      	bne.n	8007432 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
       ||
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800741e:	4b61      	ldr	r3, [pc, #388]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
       ||
 800742e:	429a      	cmp	r2, r3
 8007430:	d047      	beq.n	80074c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	e044      	b.n	80074c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d018      	beq.n	8007472 <RCCEx_PLLSAI2_Config+0x86>
 8007440:	2b03      	cmp	r3, #3
 8007442:	d825      	bhi.n	8007490 <RCCEx_PLLSAI2_Config+0xa4>
 8007444:	2b01      	cmp	r3, #1
 8007446:	d002      	beq.n	800744e <RCCEx_PLLSAI2_Config+0x62>
 8007448:	2b02      	cmp	r3, #2
 800744a:	d009      	beq.n	8007460 <RCCEx_PLLSAI2_Config+0x74>
 800744c:	e020      	b.n	8007490 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800744e:	4b55      	ldr	r3, [pc, #340]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d11d      	bne.n	8007496 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800745e:	e01a      	b.n	8007496 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007460:	4b50      	ldr	r3, [pc, #320]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007468:	2b00      	cmp	r3, #0
 800746a:	d116      	bne.n	800749a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007470:	e013      	b.n	800749a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007472:	4b4c      	ldr	r3, [pc, #304]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10f      	bne.n	800749e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800747e:	4b49      	ldr	r3, [pc, #292]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800748e:	e006      	b.n	800749e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
      break;
 8007494:	e004      	b.n	80074a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007496:	bf00      	nop
 8007498:	e002      	b.n	80074a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800749e:	bf00      	nop
    }

    if(status == HAL_OK)
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10d      	bne.n	80074c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074a6:	4b3f      	ldr	r3, [pc, #252]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6819      	ldr	r1, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	430b      	orrs	r3, r1
 80074bc:	4939      	ldr	r1, [pc, #228]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d167      	bne.n	8007598 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80074c8:	4b36      	ldr	r3, [pc, #216]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a35      	ldr	r2, [pc, #212]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d4:	f7fa fbc0 	bl	8001c58 <HAL_GetTick>
 80074d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80074da:	e009      	b.n	80074f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074dc:	f7fa fbbc 	bl	8001c58 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d902      	bls.n	80074f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	73fb      	strb	r3, [r7, #15]
        break;
 80074ee:	e005      	b.n	80074fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80074f0:	4b2c      	ldr	r3, [pc, #176]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1ef      	bne.n	80074dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d14a      	bne.n	8007598 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d111      	bne.n	800752c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007508:	4b26      	ldr	r3, [pc, #152]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6892      	ldr	r2, [r2, #8]
 8007518:	0211      	lsls	r1, r2, #8
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68d2      	ldr	r2, [r2, #12]
 800751e:	0912      	lsrs	r2, r2, #4
 8007520:	0452      	lsls	r2, r2, #17
 8007522:	430a      	orrs	r2, r1
 8007524:	491f      	ldr	r1, [pc, #124]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007526:	4313      	orrs	r3, r2
 8007528:	614b      	str	r3, [r1, #20]
 800752a:	e011      	b.n	8007550 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800752c:	4b1d      	ldr	r3, [pc, #116]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6892      	ldr	r2, [r2, #8]
 800753c:	0211      	lsls	r1, r2, #8
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6912      	ldr	r2, [r2, #16]
 8007542:	0852      	lsrs	r2, r2, #1
 8007544:	3a01      	subs	r2, #1
 8007546:	0652      	lsls	r2, r2, #25
 8007548:	430a      	orrs	r2, r1
 800754a:	4916      	ldr	r1, [pc, #88]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800754c:	4313      	orrs	r3, r2
 800754e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007550:	4b14      	ldr	r3, [pc, #80]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a13      	ldr	r2, [pc, #76]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800755a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755c:	f7fa fb7c 	bl	8001c58 <HAL_GetTick>
 8007560:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007562:	e009      	b.n	8007578 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007564:	f7fa fb78 	bl	8001c58 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d902      	bls.n	8007578 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	73fb      	strb	r3, [r7, #15]
          break;
 8007576:	e005      	b.n	8007584 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007578:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0ef      	beq.n	8007564 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800758a:	4b06      	ldr	r3, [pc, #24]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800758c:	695a      	ldr	r2, [r3, #20]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	4904      	ldr	r1, [pc, #16]	@ (80075a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007594:	4313      	orrs	r3, r2
 8007596:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40021000 	.word	0x40021000

080075a8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b089      	sub	sp, #36	@ 0x24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c4:	d10c      	bne.n	80075e0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80075c6:	4b6e      	ldr	r3, [pc, #440]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075cc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80075d0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80075d8:	d112      	bne.n	8007600 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80075da:	4b6a      	ldr	r3, [pc, #424]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80075dc:	61fb      	str	r3, [r7, #28]
 80075de:	e00f      	b.n	8007600 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e6:	d10b      	bne.n	8007600 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80075e8:	4b65      	ldr	r3, [pc, #404]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ee:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80075f2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075fa:	d101      	bne.n	8007600 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80075fc:	4b61      	ldr	r3, [pc, #388]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80075fe:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f040 80b4 	bne.w	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007612:	d003      	beq.n	800761c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800761a:	d135      	bne.n	8007688 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800761c:	4b58      	ldr	r3, [pc, #352]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007628:	f040 80a1 	bne.w	800776e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800762c:	4b54      	ldr	r3, [pc, #336]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 809a 	beq.w	800776e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800763a:	4b51      	ldr	r3, [pc, #324]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	091b      	lsrs	r3, r3, #4
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	3301      	adds	r3, #1
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800764e:	4b4c      	ldr	r3, [pc, #304]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007658:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007660:	4b47      	ldr	r3, [pc, #284]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800766c:	2311      	movs	r3, #17
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	e001      	b.n	8007676 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8007672:	2307      	movs	r3, #7
 8007674:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	fb03 f202 	mul.w	r2, r3, r2
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	fbb2 f3f3 	udiv	r3, r2, r3
 8007684:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007686:	e072      	b.n	800776e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d133      	bne.n	80076f6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800768e:	4b3c      	ldr	r3, [pc, #240]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800769a:	d169      	bne.n	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800769c:	4b38      	ldr	r3, [pc, #224]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d063      	beq.n	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80076a8:	4b35      	ldr	r3, [pc, #212]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	091b      	lsrs	r3, r3, #4
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	3301      	adds	r3, #1
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80076bc:	4b30      	ldr	r3, [pc, #192]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80076ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80076da:	2311      	movs	r3, #17
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e001      	b.n	80076e4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80076e0:	2307      	movs	r3, #7
 80076e2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	fb03 f202 	mul.w	r2, r3, r2
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	e03c      	b.n	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076fc:	d003      	beq.n	8007706 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007704:	d134      	bne.n	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007706:	4b1e      	ldr	r3, [pc, #120]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800770e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007712:	d12d      	bne.n	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8007714:	4b1a      	ldr	r3, [pc, #104]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d027      	beq.n	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007720:	4b17      	ldr	r3, [pc, #92]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	3301      	adds	r3, #1
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007734:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007746:	4b0e      	ldr	r3, [pc, #56]	@ (8007780 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8007752:	2311      	movs	r3, #17
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e001      	b.n	800775c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8007758:	2307      	movs	r3, #7
 800775a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	fb03 f202 	mul.w	r2, r3, r2
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	fbb2 f3f3 	udiv	r3, r2, r3
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	e000      	b.n	8007770 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800776e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007770:	69fb      	ldr	r3, [r7, #28]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3724      	adds	r7, #36	@ 0x24
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40021000 	.word	0x40021000
 8007784:	001fff68 	.word	0x001fff68

08007788 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d904      	bls.n	80077a6 <HAL_SAI_InitProtocol+0x1e>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	3b03      	subs	r3, #3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d812      	bhi.n	80077ca <HAL_SAI_InitProtocol+0x42>
 80077a4:	e008      	b.n	80077b8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fc67 	bl	8008080 <SAI_InitI2S>
 80077b2:	4603      	mov	r3, r0
 80077b4:	75fb      	strb	r3, [r7, #23]
      break;
 80077b6:	e00b      	b.n	80077d0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fd10 	bl	80081e4 <SAI_InitPCM>
 80077c4:	4603      	mov	r3, r0
 80077c6:	75fb      	strb	r3, [r7, #23]
      break;
 80077c8:	e002      	b.n	80077d0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
      break;
 80077ce:	bf00      	nop
  }

  if (status == HAL_OK)
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f808 	bl	80077ec <HAL_SAI_Init>
 80077dc:	4603      	mov	r3, r0
 80077de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e155      	b.n	8007aaa <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7f9 fcfe 	bl	8001214 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fd9d 	bl	8008358 <SAI_Disable>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e140      	b.n	8007aaa <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d00c      	beq.n	8007852 <HAL_SAI_Init+0x66>
 8007838:	2b02      	cmp	r3, #2
 800783a:	d80d      	bhi.n	8007858 <HAL_SAI_Init+0x6c>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_SAI_Init+0x5a>
 8007840:	2b01      	cmp	r3, #1
 8007842:	d003      	beq.n	800784c <HAL_SAI_Init+0x60>
 8007844:	e008      	b.n	8007858 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	61fb      	str	r3, [r7, #28]
      break;
 800784a:	e008      	b.n	800785e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800784c:	2310      	movs	r3, #16
 800784e:	61fb      	str	r3, [r7, #28]
      break;
 8007850:	e005      	b.n	800785e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007852:	2320      	movs	r3, #32
 8007854:	61fb      	str	r3, [r7, #28]
      break;
 8007856:	e002      	b.n	800785e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	61fb      	str	r3, [r7, #28]
      break;
 800785c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	2b03      	cmp	r3, #3
 8007864:	d81d      	bhi.n	80078a2 <HAL_SAI_Init+0xb6>
 8007866:	a201      	add	r2, pc, #4	@ (adr r2, 800786c <HAL_SAI_Init+0x80>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	0800787d 	.word	0x0800787d
 8007870:	08007883 	.word	0x08007883
 8007874:	0800788b 	.word	0x0800788b
 8007878:	08007893 	.word	0x08007893
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]
      break;
 8007880:	e012      	b.n	80078a8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007886:	617b      	str	r3, [r7, #20]
      break;
 8007888:	e00e      	b.n	80078a8 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800788a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800788e:	617b      	str	r3, [r7, #20]
      break;
 8007890:	e00a      	b.n	80078a8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007892:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007896:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	61fb      	str	r3, [r7, #28]
      break;
 80078a0:	e002      	b.n	80078a8 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
      break;
 80078a6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a81      	ldr	r2, [pc, #516]	@ (8007ab4 <HAL_SAI_Init+0x2c8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d004      	beq.n	80078bc <HAL_SAI_Init+0xd0>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a80      	ldr	r2, [pc, #512]	@ (8007ab8 <HAL_SAI_Init+0x2cc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d103      	bne.n	80078c4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80078bc:	4a7f      	ldr	r2, [pc, #508]	@ (8007abc <HAL_SAI_Init+0x2d0>)
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	e002      	b.n	80078ca <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80078c4:	4a7e      	ldr	r2, [pc, #504]	@ (8007ac0 <HAL_SAI_Init+0x2d4>)
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d041      	beq.n	8007956 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a77      	ldr	r2, [pc, #476]	@ (8007ab4 <HAL_SAI_Init+0x2c8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d004      	beq.n	80078e6 <HAL_SAI_Init+0xfa>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a75      	ldr	r2, [pc, #468]	@ (8007ab8 <HAL_SAI_Init+0x2cc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d105      	bne.n	80078f2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80078e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80078ea:	f7fe ff1d 	bl	8006728 <HAL_RCCEx_GetPeriphCLKFreq>
 80078ee:	6138      	str	r0, [r7, #16]
 80078f0:	e004      	b.n	80078fc <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80078f2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80078f6:	f7fe ff17 	bl	8006728 <HAL_RCCEx_GetPeriphCLKFreq>
 80078fa:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	461a      	mov	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	025b      	lsls	r3, r3, #9
 800790e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007912:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4a6b      	ldr	r2, [pc, #428]	@ (8007ac4 <HAL_SAI_Init+0x2d8>)
 8007918:	fba2 2303 	umull	r2, r3, r2, r3
 800791c:	08da      	lsrs	r2, r3, #3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007922:	68f9      	ldr	r1, [r7, #12]
 8007924:	4b67      	ldr	r3, [pc, #412]	@ (8007ac4 <HAL_SAI_Init+0x2d8>)
 8007926:	fba3 2301 	umull	r2, r3, r3, r1
 800792a:	08da      	lsrs	r2, r3, #3
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	1aca      	subs	r2, r1, r3
 8007936:	2a08      	cmp	r2, #8
 8007938:	d904      	bls.n	8007944 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007948:	2b04      	cmp	r3, #4
 800794a:	d104      	bne.n	8007956 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	085a      	lsrs	r2, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_SAI_Init+0x17a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d109      	bne.n	800797a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_SAI_Init+0x186>
 800796e:	2300      	movs	r3, #0
 8007970:	e001      	b.n	8007976 <HAL_SAI_Init+0x18a>
 8007972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	e008      	b.n	800798c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797e:	2b01      	cmp	r3, #1
 8007980:	d102      	bne.n	8007988 <HAL_SAI_Init+0x19c>
 8007982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007986:	e000      	b.n	800798a <HAL_SAI_Init+0x19e>
 8007988:	2300      	movs	r3, #0
 800798a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6819      	ldr	r1, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b4c      	ldr	r3, [pc, #304]	@ (8007ac8 <HAL_SAI_Init+0x2dc>)
 8007998:	400b      	ands	r3, r1
 800799a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6819      	ldr	r1, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079aa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079b0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b6:	431a      	orrs	r2, r3
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80079c4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079d0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	051b      	lsls	r3, r3, #20
 80079d8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80079f0:	f023 030f 	bic.w	r3, r3, #15
 80079f4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6859      	ldr	r1, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6899      	ldr	r1, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007acc <HAL_SAI_Init+0x2e0>)
 8007a20:	400b      	ands	r3, r1
 8007a22:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6899      	ldr	r1, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a34:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007a3a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007a40:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a46:	3b01      	subs	r3, #1
 8007a48:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007a4a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68d9      	ldr	r1, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007a62:	400b      	ands	r3, r1
 8007a64:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68d9      	ldr	r1, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a74:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a7a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a7c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a82:	3b01      	subs	r3, #1
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3720      	adds	r7, #32
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40015404 	.word	0x40015404
 8007ab8:	40015424 	.word	0x40015424
 8007abc:	40015400 	.word	0x40015400
 8007ac0:	40015800 	.word	0x40015800
 8007ac4:	cccccccd 	.word	0xcccccccd
 8007ac8:	ff05c010 	.word	0xff05c010
 8007acc:	fff88000 	.word	0xfff88000

08007ad0 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_SAI_Abort+0x1a>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e053      	b.n	8007b92 <HAL_SAI_Abort+0xc2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fc30 	bl	8008358 <SAI_Disable>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b10:	d125      	bne.n	8007b5e <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007b20:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b12      	cmp	r3, #18
 8007b2c:	d108      	bne.n	8007b40 <HAL_SAI_Abort+0x70>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fc fa6a 	bl	8004014 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b22      	cmp	r3, #34	@ 0x22
 8007b4a:	d108      	bne.n	8007b5e <HAL_SAI_Abort+0x8e>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fc fa5b 	bl	8004014 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0208 	orr.w	r2, r2, #8
 8007b7e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007baa:	f7fa f855 	bl	8001c58 <HAL_GetTick>
 8007bae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_SAI_Transmit_DMA+0x20>
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e093      	b.n	8007ce8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f040 808c 	bne.w	8007ce6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_SAI_Transmit_DMA+0x40>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e085      	b.n	8007ce8 <HAL_SAI_Transmit_DMA+0x14c>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	88fa      	ldrh	r2, [r7, #6]
 8007bee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	88fa      	ldrh	r2, [r7, #6]
 8007bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2212      	movs	r2, #18
 8007c06:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c0e:	4a38      	ldr	r2, [pc, #224]	@ (8007cf0 <HAL_SAI_Transmit_DMA+0x154>)
 8007c10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c16:	4a37      	ldr	r2, [pc, #220]	@ (8007cf4 <HAL_SAI_Transmit_DMA+0x158>)
 8007c18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c1e:	4a36      	ldr	r2, [pc, #216]	@ (8007cf8 <HAL_SAI_Transmit_DMA+0x15c>)
 8007c20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c26:	2200      	movs	r2, #0
 8007c28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c32:	4619      	mov	r1, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	331c      	adds	r3, #28
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c42:	f7fc f987 	bl	8003f54 <HAL_DMA_Start_IT>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e047      	b.n	8007ce8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fb44 	bl	80082e8 <SAI_InterruptFlag>
 8007c60:	4601      	mov	r1, r0
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007c7e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007c80:	e015      	b.n	8007cae <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007c82:	f7f9 ffe9 	bl	8001c58 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c90:	d90d      	bls.n	8007cae <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e01c      	b.n	8007ce8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0e2      	beq.n	8007c82 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007cd8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e000      	b.n	8007ce8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8007ce6:	2302      	movs	r3, #2
  }
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	0800842b 	.word	0x0800842b
 8007cf4:	080083cd 	.word	0x080083cd
 8007cf8:	08008447 	.word	0x08008447

08007cfc <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8192 	beq.w	8008036 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d009      	beq.n	8007d48 <HAL_SAI_IRQHandler+0x4c>
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
 8007d46:	e176      	b.n	8008036 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d01e      	beq.n	8007d90 <HAL_SAI_IRQHandler+0x94>
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d019      	beq.n	8007d90 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2201      	movs	r2, #1
 8007d62:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b22      	cmp	r3, #34	@ 0x22
 8007d6e:	d101      	bne.n	8007d74 <HAL_SAI_IRQHandler+0x78>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <HAL_SAI_IRQHandler+0x7a>
 8007d74:	2302      	movs	r3, #2
 8007d76:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f96f 	bl	800806c <HAL_SAI_ErrorCallback>
 8007d8e:	e152      	b.n	8008036 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d011      	beq.n	8007dbe <HAL_SAI_IRQHandler+0xc2>
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00c      	beq.n	8007dbe <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2202      	movs	r2, #2
 8007daa:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 8140 	beq.w	8008036 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dba:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8007dbc:	e13b      	b.n	8008036 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f003 0320 	and.w	r3, r3, #32
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d055      	beq.n	8007e74 <HAL_SAI_IRQHandler+0x178>
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d050      	beq.n	8007e74 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de0:	f043 0204 	orr.w	r2, r3, #4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d038      	beq.n	8007e66 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d016      	beq.n	8007e2a <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e00:	4a8f      	ldr	r2, [pc, #572]	@ (8008040 <HAL_SAI_IRQHandler+0x344>)
 8007e02:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fc f941 	bl	8004090 <HAL_DMA_Abort_IT>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f921 	bl	800806c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80fc 	beq.w	800802c <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e38:	4a81      	ldr	r2, [pc, #516]	@ (8008040 <HAL_SAI_IRQHandler+0x344>)
 8007e3a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fc f925 	bl	8004090 <HAL_DMA_Abort_IT>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80ef 	beq.w	800802c <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f904 	bl	800806c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007e64:	e0e2      	b.n	800802c <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fe32 	bl	8007ad0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f8fd 	bl	800806c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007e72:	e0db      	b.n	800802c <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d055      	beq.n	8007f2a <HAL_SAI_IRQHandler+0x22e>
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d050      	beq.n	8007f2a <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2240      	movs	r2, #64	@ 0x40
 8007e8e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e96:	f043 0208 	orr.w	r2, r3, #8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d038      	beq.n	8007f1c <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d016      	beq.n	8007ee0 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb6:	4a62      	ldr	r2, [pc, #392]	@ (8008040 <HAL_SAI_IRQHandler+0x344>)
 8007eb8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fc f8e6 	bl	8004090 <HAL_DMA_Abort_IT>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8c6 	bl	800806c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80a3 	beq.w	8008030 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eee:	4a54      	ldr	r2, [pc, #336]	@ (8008040 <HAL_SAI_IRQHandler+0x344>)
 8007ef0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fc f8ca 	bl	8004090 <HAL_DMA_Abort_IT>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8096 	beq.w	8008030 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8a9 	bl	800806c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007f1a:	e089      	b.n	8008030 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fdd7 	bl	8007ad0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f8a2 	bl	800806c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007f28:	e082      	b.n	8008030 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d061      	beq.n	8007ff8 <HAL_SAI_IRQHandler+0x2fc>
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d05c      	beq.n	8007ff8 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2204      	movs	r2, #4
 8007f44:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f4c:	f043 0220 	orr.w	r2, r3, #32
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d036      	beq.n	8007fce <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d016      	beq.n	8007f96 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f6c:	4a34      	ldr	r2, [pc, #208]	@ (8008040 <HAL_SAI_IRQHandler+0x344>)
 8007f6e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fc f88b 	bl	8004090 <HAL_DMA_Abort_IT>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f86b 	bl	800806c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d04a      	beq.n	8008034 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa2:	4a27      	ldr	r2, [pc, #156]	@ (8008040 <HAL_SAI_IRQHandler+0x344>)
 8007fa4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fc f870 	bl	8004090 <HAL_DMA_Abort_IT>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d03e      	beq.n	8008034 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f850 	bl	800806c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007fcc:	e032      	b.n	8008034 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f04f 32ff 	mov.w	r2, #4294967295
 8007fde:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f83b 	bl	800806c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007ff6:	e01d      	b.n	8008034 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d019      	beq.n	8008036 <HAL_SAI_IRQHandler+0x33a>
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	2b00      	cmp	r3, #0
 800800a:	d014      	beq.n	8008036 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2210      	movs	r2, #16
 8008012:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800801a:	f043 0210 	orr.w	r2, r3, #16
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f821 	bl	800806c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800802a:	e004      	b.n	8008036 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800802c:	bf00      	nop
 800802e:	e002      	b.n	8008036 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008034:	bf00      	nop
}
 8008036:	bf00      	nop
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	08008499 	.word	0x08008499

08008044 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <SAI_InitI2S+0x2e>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d103      	bne.n	80080b6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80080b4:	e002      	b.n	80080bc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80080c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e077      	b.n	80081d6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d107      	bne.n	80080fc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80080f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80080fa:	e006      	b.n	800810a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008102:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b03      	cmp	r3, #3
 800810e:	d84f      	bhi.n	80081b0 <SAI_InitI2S+0x130>
 8008110:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <SAI_InitI2S+0x98>)
 8008112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008116:	bf00      	nop
 8008118:	08008129 	.word	0x08008129
 800811c:	0800814b 	.word	0x0800814b
 8008120:	0800816d 	.word	0x0800816d
 8008124:	0800818f 	.word	0x0800818f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2280      	movs	r2, #128	@ 0x80
 800812c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	085b      	lsrs	r3, r3, #1
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	011a      	lsls	r2, r3, #4
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2240      	movs	r2, #64	@ 0x40
 8008146:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8008148:	e035      	b.n	80081b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2280      	movs	r2, #128	@ 0x80
 800814e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	085b      	lsrs	r3, r3, #1
 8008154:	019a      	lsls	r2, r3, #6
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2280      	movs	r2, #128	@ 0x80
 8008168:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800816a:	e024      	b.n	80081b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	22c0      	movs	r2, #192	@ 0xc0
 8008170:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	019a      	lsls	r2, r3, #6
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2280      	movs	r2, #128	@ 0x80
 800818a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800818c:	e013      	b.n	80081b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	22e0      	movs	r2, #224	@ 0xe0
 8008192:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	085b      	lsrs	r3, r3, #1
 8008198:	019a      	lsls	r2, r3, #6
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2280      	movs	r2, #128	@ 0x80
 80081ac:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80081ae:	e002      	b.n	80081b6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	75fb      	strb	r3, [r7, #23]
      break;
 80081b4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d10b      	bne.n	80081d4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d102      	bne.n	80081c8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2210      	movs	r2, #16
 80081c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d102      	bne.n	80081d4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2208      	movs	r2, #8
 80081d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop

080081e4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <SAI_InitPCM+0x2e>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d103      	bne.n	800821a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008218:	e002      	b.n	8008220 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800822c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008234:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008248:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b04      	cmp	r3, #4
 800824e:	d103      	bne.n	8008258 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	645a      	str	r2, [r3, #68]	@ 0x44
 8008256:	e002      	b.n	800825e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	220d      	movs	r2, #13
 800825c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d837      	bhi.n	80082d4 <SAI_InitPCM+0xf0>
 8008264:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <SAI_InitPCM+0x88>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	0800827d 	.word	0x0800827d
 8008270:	08008293 	.word	0x08008293
 8008274:	080082a9 	.word	0x080082a9
 8008278:	080082bf 	.word	0x080082bf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2280      	movs	r2, #128	@ 0x80
 8008280:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	011a      	lsls	r2, r3, #4
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2240      	movs	r2, #64	@ 0x40
 800828e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8008290:	e023      	b.n	80082da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2280      	movs	r2, #128	@ 0x80
 8008296:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2280      	movs	r2, #128	@ 0x80
 80082a4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80082a6:	e018      	b.n	80082da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	22c0      	movs	r2, #192	@ 0xc0
 80082ac:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2280      	movs	r2, #128	@ 0x80
 80082ba:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80082bc:	e00d      	b.n	80082da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	22e0      	movs	r2, #224	@ 0xe0
 80082c2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2280      	movs	r2, #128	@ 0x80
 80082d0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80082d2:	e002      	b.n	80082da <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	bf00      	nop
  }

  return status;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d103      	bne.n	8008306 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f043 0308 	orr.w	r3, r3, #8
 8008304:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830a:	2b08      	cmp	r3, #8
 800830c:	d10b      	bne.n	8008326 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008312:	2b03      	cmp	r3, #3
 8008314:	d003      	beq.n	800831e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d103      	bne.n	8008326 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f043 0310 	orr.w	r3, r3, #16
 8008324:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	2b03      	cmp	r3, #3
 800832c:	d003      	beq.n	8008336 <SAI_InterruptFlag+0x4e>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d104      	bne.n	8008340 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e003      	b.n	8008348 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f043 0304 	orr.w	r3, r3, #4
 8008346:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008348:	68fb      	ldr	r3, [r7, #12]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
	...

08008358 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008360:	4b18      	ldr	r3, [pc, #96]	@ (80083c4 <SAI_Disable+0x6c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a18      	ldr	r2, [pc, #96]	@ (80083c8 <SAI_Disable+0x70>)
 8008366:	fba2 2303 	umull	r2, r3, r2, r3
 800836a:	0b1b      	lsrs	r3, r3, #12
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008382:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10a      	bne.n	80083a0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008390:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	72fb      	strb	r3, [r7, #11]
      break;
 800839e:	e009      	b.n	80083b4 <SAI_Disable+0x5c>
    }
    count--;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e7      	bne.n	8008384 <SAI_Disable+0x2c>

  return status;
 80083b4:	7afb      	ldrb	r3, [r7, #11]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20000000 	.word	0x20000000
 80083c8:	95cbec1b 	.word	0x95cbec1b

080083cc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d01c      	beq.n	800841c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80083f8:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80083fa:	2100      	movs	r1, #0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff ff73 	bl	80082e8 <SAI_InterruptFlag>
 8008402:	4603      	mov	r3, r0
 8008404:	43d9      	mvns	r1, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	400a      	ands	r2, r1
 8008412:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7ff fe11 	bl	8008044 <HAL_SAI_TxCpltCallback>
#endif
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008436:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f7ff fe0d 	bl	8008058 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008452:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800845a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008472:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff ff6f 	bl	8008358 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff fdee 	bl	800806c <HAL_SAI_ErrorCallback>
#endif
}
 8008490:	bf00      	nop
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80084b4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2200      	movs	r2, #0
 80084bc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f04f 32ff 	mov.w	r2, #4294967295
 80084c6:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	d00a      	beq.n	80084e8 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7ff ff40 	bl	8008358 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0208 	orr.w	r2, r2, #8
 80084e6:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff fdb7 	bl	800806c <HAL_SAI_ErrorCallback>
#endif
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e095      	b.n	8008644 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851c:	2b00      	cmp	r3, #0
 800851e:	d108      	bne.n	8008532 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008528:	d009      	beq.n	800853e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	61da      	str	r2, [r3, #28]
 8008530:	e005      	b.n	800853e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7f9 f821 	bl	80015a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008574:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800857e:	d902      	bls.n	8008586 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	e002      	b.n	800858c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800858a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008594:	d007      	beq.n	80085a6 <HAL_SPI_Init+0xa0>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800859e:	d002      	beq.n	80085a6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	431a      	orrs	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e8:	ea42 0103 	orr.w	r1, r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	0c1b      	lsrs	r3, r3, #16
 8008602:	f003 0204 	and.w	r2, r3, #4
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008614:	f003 0308 	and.w	r3, r3, #8
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008622:	ea42 0103 	orr.w	r1, r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10e      	bne.n	800868c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
    return;
 800868a:	e0ce      	b.n	800882a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <HAL_SPI_IRQHandler+0x5e>
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869c:	2b00      	cmp	r3, #0
 800869e:	d004      	beq.n	80086aa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	4798      	blx	r3
    return;
 80086a8:	e0bf      	b.n	800882a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <HAL_SPI_IRQHandler+0x7e>
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d105      	bne.n	80086ca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80b0 	beq.w	800882a <HAL_SPI_IRQHandler+0x1de>
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 80aa 	beq.w	800882a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d023      	beq.n	8008728 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d011      	beq.n	8008710 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086f0:	f043 0204 	orr.w	r2, r3, #4
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	e00b      	b.n	8008728 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	613b      	str	r3, [r7, #16]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	613b      	str	r3, [r7, #16]
 8008724:	693b      	ldr	r3, [r7, #16]
        return;
 8008726:	e080      	b.n	800882a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d014      	beq.n	800875c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008736:	f043 0201 	orr.w	r2, r3, #1
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00c      	beq.n	8008780 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800876a:	f043 0208 	orr.w	r2, r3, #8
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008772:	2300      	movs	r3, #0
 8008774:	60bb      	str	r3, [r7, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	60bb      	str	r3, [r7, #8]
 800877e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008784:	2b00      	cmp	r3, #0
 8008786:	d04f      	beq.n	8008828 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008796:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <HAL_SPI_IRQHandler+0x168>
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d034      	beq.n	800881e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0203 	bic.w	r2, r2, #3
 80087c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d011      	beq.n	80087f0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d0:	4a17      	ldr	r2, [pc, #92]	@ (8008830 <HAL_SPI_IRQHandler+0x1e4>)
 80087d2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fb fc59 	bl	8004090 <HAL_DMA_Abort_IT>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d016      	beq.n	8008826 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008830 <HAL_SPI_IRQHandler+0x1e4>)
 80087fe:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008804:	4618      	mov	r0, r3
 8008806:	f7fb fc43 	bl	8004090 <HAL_DMA_Abort_IT>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008814:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800881c:	e003      	b.n	8008826 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f808 	bl	8008834 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008824:	e000      	b.n	8008828 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008826:	bf00      	nop
    return;
 8008828:	bf00      	nop
  }
}
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	08008849 	.word	0x08008849

08008834 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008854:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7ff ffe5 	bl	8008834 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e049      	b.n	8008918 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d106      	bne.n	800889e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7f9 f889 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2202      	movs	r2, #2
 80088a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4619      	mov	r1, r3
 80088b0:	4610      	mov	r0, r2
 80088b2:	f000 f9d7 	bl	8008c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b01      	cmp	r3, #1
 8008932:	d001      	beq.n	8008938 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e047      	b.n	80089c8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a23      	ldr	r2, [pc, #140]	@ (80089d4 <HAL_TIM_Base_Start+0xb4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d01d      	beq.n	8008986 <HAL_TIM_Base_Start+0x66>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008952:	d018      	beq.n	8008986 <HAL_TIM_Base_Start+0x66>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a1f      	ldr	r2, [pc, #124]	@ (80089d8 <HAL_TIM_Base_Start+0xb8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d013      	beq.n	8008986 <HAL_TIM_Base_Start+0x66>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1e      	ldr	r2, [pc, #120]	@ (80089dc <HAL_TIM_Base_Start+0xbc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00e      	beq.n	8008986 <HAL_TIM_Base_Start+0x66>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1c      	ldr	r2, [pc, #112]	@ (80089e0 <HAL_TIM_Base_Start+0xc0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d009      	beq.n	8008986 <HAL_TIM_Base_Start+0x66>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1b      	ldr	r2, [pc, #108]	@ (80089e4 <HAL_TIM_Base_Start+0xc4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d004      	beq.n	8008986 <HAL_TIM_Base_Start+0x66>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a19      	ldr	r2, [pc, #100]	@ (80089e8 <HAL_TIM_Base_Start+0xc8>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d115      	bne.n	80089b2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	4b17      	ldr	r3, [pc, #92]	@ (80089ec <HAL_TIM_Base_Start+0xcc>)
 800898e:	4013      	ands	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b06      	cmp	r3, #6
 8008996:	d015      	beq.n	80089c4 <HAL_TIM_Base_Start+0xa4>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800899e:	d011      	beq.n	80089c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0201 	orr.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b0:	e008      	b.n	80089c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0201 	orr.w	r2, r2, #1
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e000      	b.n	80089c6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40000400 	.word	0x40000400
 80089dc:	40000800 	.word	0x40000800
 80089e0:	40000c00 	.word	0x40000c00
 80089e4:	40013400 	.word	0x40013400
 80089e8:	40014000 	.word	0x40014000
 80089ec:	00010007 	.word	0x00010007

080089f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d020      	beq.n	8008a54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0202 	mvn.w	r2, #2
 8008a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f8f3 	bl	8008c26 <HAL_TIM_IC_CaptureCallback>
 8008a40:	e005      	b.n	8008a4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f8e5 	bl	8008c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f8f6 	bl	8008c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d020      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01b      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f06f 0204 	mvn.w	r2, #4
 8008a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f8cd 	bl	8008c26 <HAL_TIM_IC_CaptureCallback>
 8008a8c:	e005      	b.n	8008a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f8bf 	bl	8008c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f8d0 	bl	8008c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d020      	beq.n	8008aec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 0308 	and.w	r3, r3, #8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d01b      	beq.n	8008aec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0208 	mvn.w	r2, #8
 8008abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2204      	movs	r2, #4
 8008ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f8a7 	bl	8008c26 <HAL_TIM_IC_CaptureCallback>
 8008ad8:	e005      	b.n	8008ae6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f899 	bl	8008c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f8aa 	bl	8008c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f003 0310 	and.w	r3, r3, #16
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d020      	beq.n	8008b38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d01b      	beq.n	8008b38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0210 	mvn.w	r2, #16
 8008b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f881 	bl	8008c26 <HAL_TIM_IC_CaptureCallback>
 8008b24:	e005      	b.n	8008b32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f873 	bl	8008c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f884 	bl	8008c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00c      	beq.n	8008b5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d007      	beq.n	8008b5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f06f 0201 	mvn.w	r2, #1
 8008b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f851 	bl	8008bfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00c      	beq.n	8008b8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f9a5 	bl	8008ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00c      	beq.n	8008bae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d007      	beq.n	8008bae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f99d 	bl	8008ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00c      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d007      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f83e 	bl	8008c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f003 0320 	and.w	r3, r3, #32
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00c      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d007      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f06f 0220 	mvn.w	r2, #32
 8008bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f965 	bl	8008ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c1a:	bf00      	nop
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
	...

08008c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a46      	ldr	r2, [pc, #280]	@ (8008d90 <TIM_Base_SetConfig+0x12c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c82:	d00f      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a43      	ldr	r2, [pc, #268]	@ (8008d94 <TIM_Base_SetConfig+0x130>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00b      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a42      	ldr	r2, [pc, #264]	@ (8008d98 <TIM_Base_SetConfig+0x134>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d007      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a41      	ldr	r2, [pc, #260]	@ (8008d9c <TIM_Base_SetConfig+0x138>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d003      	beq.n	8008ca4 <TIM_Base_SetConfig+0x40>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a40      	ldr	r2, [pc, #256]	@ (8008da0 <TIM_Base_SetConfig+0x13c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d108      	bne.n	8008cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a35      	ldr	r2, [pc, #212]	@ (8008d90 <TIM_Base_SetConfig+0x12c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d01f      	beq.n	8008cfe <TIM_Base_SetConfig+0x9a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc4:	d01b      	beq.n	8008cfe <TIM_Base_SetConfig+0x9a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a32      	ldr	r2, [pc, #200]	@ (8008d94 <TIM_Base_SetConfig+0x130>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d017      	beq.n	8008cfe <TIM_Base_SetConfig+0x9a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a31      	ldr	r2, [pc, #196]	@ (8008d98 <TIM_Base_SetConfig+0x134>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d013      	beq.n	8008cfe <TIM_Base_SetConfig+0x9a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a30      	ldr	r2, [pc, #192]	@ (8008d9c <TIM_Base_SetConfig+0x138>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00f      	beq.n	8008cfe <TIM_Base_SetConfig+0x9a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8008da0 <TIM_Base_SetConfig+0x13c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00b      	beq.n	8008cfe <TIM_Base_SetConfig+0x9a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8008da4 <TIM_Base_SetConfig+0x140>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d007      	beq.n	8008cfe <TIM_Base_SetConfig+0x9a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8008da8 <TIM_Base_SetConfig+0x144>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d003      	beq.n	8008cfe <TIM_Base_SetConfig+0x9a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8008dac <TIM_Base_SetConfig+0x148>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d108      	bne.n	8008d10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a16      	ldr	r2, [pc, #88]	@ (8008d90 <TIM_Base_SetConfig+0x12c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00f      	beq.n	8008d5c <TIM_Base_SetConfig+0xf8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a18      	ldr	r2, [pc, #96]	@ (8008da0 <TIM_Base_SetConfig+0x13c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d00b      	beq.n	8008d5c <TIM_Base_SetConfig+0xf8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a17      	ldr	r2, [pc, #92]	@ (8008da4 <TIM_Base_SetConfig+0x140>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d007      	beq.n	8008d5c <TIM_Base_SetConfig+0xf8>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a16      	ldr	r2, [pc, #88]	@ (8008da8 <TIM_Base_SetConfig+0x144>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_Base_SetConfig+0xf8>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a15      	ldr	r2, [pc, #84]	@ (8008dac <TIM_Base_SetConfig+0x148>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d103      	bne.n	8008d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d105      	bne.n	8008d82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f023 0201 	bic.w	r2, r3, #1
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	611a      	str	r2, [r3, #16]
  }
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40012c00 	.word	0x40012c00
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40013400 	.word	0x40013400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40014400 	.word	0x40014400
 8008dac:	40014800 	.word	0x40014800

08008db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e068      	b.n	8008e9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a2e      	ldr	r2, [pc, #184]	@ (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d004      	beq.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a2d      	ldr	r2, [pc, #180]	@ (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d108      	bne.n	8008e0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d01d      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e3a:	d018      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d013      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00e      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a18      	ldr	r2, [pc, #96]	@ (8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d009      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a13      	ldr	r2, [pc, #76]	@ (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d004      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a14      	ldr	r2, [pc, #80]	@ (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d10c      	bne.n	8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	40012c00 	.word	0x40012c00
 8008eac:	40013400 	.word	0x40013400
 8008eb0:	40000400 	.word	0x40000400
 8008eb4:	40000800 	.word	0x40000800
 8008eb8:	40000c00 	.word	0x40000c00
 8008ebc:	40014000 	.word	0x40014000

08008ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e040      	b.n	8008f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7f8 fd9c 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2224      	movs	r2, #36	@ 0x24
 8008f28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0201 	bic.w	r2, r2, #1
 8008f38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fe90 	bl	8009c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fbd5 	bl	80096f8 <UART_SetConfig>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e01b      	b.n	8008f90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689a      	ldr	r2, [r3, #8]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 ff0f 	bl	8009dac <UART_CheckIdleState>
 8008f8e:	4603      	mov	r3, r0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08a      	sub	sp, #40	@ 0x28
 8008f9c:	af02      	add	r7, sp, #8
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d177      	bne.n	80090a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <HAL_UART_Transmit+0x24>
 8008fb6:	88fb      	ldrh	r3, [r7, #6]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e070      	b.n	80090a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2221      	movs	r2, #33	@ 0x21
 8008fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fce:	f7f8 fe43 	bl	8001c58 <HAL_GetTick>
 8008fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	88fa      	ldrh	r2, [r7, #6]
 8008fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fec:	d108      	bne.n	8009000 <HAL_UART_Transmit+0x68>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d104      	bne.n	8009000 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	e003      	b.n	8009008 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009004:	2300      	movs	r3, #0
 8009006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009008:	e02f      	b.n	800906a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2200      	movs	r2, #0
 8009012:	2180      	movs	r1, #128	@ 0x80
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 ff71 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2220      	movs	r2, #32
 8009024:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e03b      	b.n	80090a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10b      	bne.n	8009048 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	881a      	ldrh	r2, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800903c:	b292      	uxth	r2, r2
 800903e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	3302      	adds	r3, #2
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	e007      	b.n	8009058 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	3301      	adds	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800905e:	b29b      	uxth	r3, r3
 8009060:	3b01      	subs	r3, #1
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009070:	b29b      	uxth	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1c9      	bne.n	800900a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2200      	movs	r2, #0
 800907e:	2140      	movs	r1, #64	@ 0x40
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 ff3b 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d004      	beq.n	8009096 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e005      	b.n	80090a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2220      	movs	r2, #32
 800909a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	e000      	b.n	80090a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80090a0:	2302      	movs	r3, #2
  }
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3720      	adds	r7, #32
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b0ba      	sub	sp, #232	@ 0xe8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80090d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80090da:	4013      	ands	r3, r2
 80090dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80090e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d115      	bne.n	8009114 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80090e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00f      	beq.n	8009114 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80090f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d009      	beq.n	8009114 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 82ca 	beq.w	800969e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	4798      	blx	r3
      }
      return;
 8009112:	e2c4      	b.n	800969e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 8117 	beq.w	800934c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800911e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800912a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800912e:	4b85      	ldr	r3, [pc, #532]	@ (8009344 <HAL_UART_IRQHandler+0x298>)
 8009130:	4013      	ands	r3, r2
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 810a 	beq.w	800934c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b00      	cmp	r3, #0
 8009142:	d011      	beq.n	8009168 <HAL_UART_IRQHandler+0xbc>
 8009144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2201      	movs	r2, #1
 8009156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800915e:	f043 0201 	orr.w	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d011      	beq.n	8009198 <HAL_UART_IRQHandler+0xec>
 8009174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00b      	beq.n	8009198 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2202      	movs	r2, #2
 8009186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800918e:	f043 0204 	orr.w	r2, r3, #4
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d011      	beq.n	80091c8 <HAL_UART_IRQHandler+0x11c>
 80091a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2204      	movs	r2, #4
 80091b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091be:	f043 0202 	orr.w	r2, r3, #2
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d017      	beq.n	8009204 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80091d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d105      	bne.n	80091ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80091e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00b      	beq.n	8009204 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2208      	movs	r2, #8
 80091f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091fa:	f043 0208 	orr.w	r2, r3, #8
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800920c:	2b00      	cmp	r3, #0
 800920e:	d012      	beq.n	8009236 <HAL_UART_IRQHandler+0x18a>
 8009210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800922c:	f043 0220 	orr.w	r2, r3, #32
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8230 	beq.w	80096a2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009246:	f003 0320 	and.w	r3, r3, #32
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00d      	beq.n	800926a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800924e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800925e:	2b00      	cmp	r3, #0
 8009260:	d003      	beq.n	800926a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009270:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800927e:	2b40      	cmp	r3, #64	@ 0x40
 8009280:	d005      	beq.n	800928e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009286:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800928a:	2b00      	cmp	r3, #0
 800928c:	d04f      	beq.n	800932e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fea1 	bl	8009fd6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929e:	2b40      	cmp	r3, #64	@ 0x40
 80092a0:	d141      	bne.n	8009326 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3308      	adds	r3, #8
 80092a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3308      	adds	r3, #8
 80092ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80092d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80092da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80092de:	e841 2300 	strex	r3, r2, [r1]
 80092e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80092e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1d9      	bne.n	80092a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d013      	beq.n	800931e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fa:	4a13      	ldr	r2, [pc, #76]	@ (8009348 <HAL_UART_IRQHandler+0x29c>)
 80092fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009302:	4618      	mov	r0, r3
 8009304:	f7fa fec4 	bl	8004090 <HAL_DMA_Abort_IT>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d017      	beq.n	800933e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800931c:	e00f      	b.n	800933e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f9d4 	bl	80096cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009324:	e00b      	b.n	800933e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9d0 	bl	80096cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932c:	e007      	b.n	800933e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f9cc 	bl	80096cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800933c:	e1b1      	b.n	80096a2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933e:	bf00      	nop
    return;
 8009340:	e1af      	b.n	80096a2 <HAL_UART_IRQHandler+0x5f6>
 8009342:	bf00      	nop
 8009344:	04000120 	.word	0x04000120
 8009348:	0800a09f 	.word	0x0800a09f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009350:	2b01      	cmp	r3, #1
 8009352:	f040 816a 	bne.w	800962a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800935a:	f003 0310 	and.w	r3, r3, #16
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 8163 	beq.w	800962a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 815c 	beq.w	800962a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2210      	movs	r2, #16
 8009378:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009384:	2b40      	cmp	r3, #64	@ 0x40
 8009386:	f040 80d4 	bne.w	8009532 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009396:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 80ad 	beq.w	80094fa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80093a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093aa:	429a      	cmp	r2, r3
 80093ac:	f080 80a5 	bcs.w	80094fa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f040 8086 	bne.w	80094d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80093e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80093f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009402:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800940e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1da      	bne.n	80093cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3308      	adds	r3, #8
 800941c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3308      	adds	r3, #8
 8009436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800943a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800943e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800944c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e1      	bne.n	8009416 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3308      	adds	r3, #8
 8009472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009478:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800947c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e3      	bne.n	8009452 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094a8:	f023 0310 	bic.w	r3, r3, #16
 80094ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e4      	bne.n	8009498 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fa fd9e 	bl	8004014 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f8f4 	bl	80096e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80094f8:	e0d5      	b.n	80096a6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009500:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009504:	429a      	cmp	r2, r3
 8009506:	f040 80ce 	bne.w	80096a6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b20      	cmp	r3, #32
 8009518:	f040 80c5 	bne.w	80096a6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f8d8 	bl	80096e0 <HAL_UARTEx_RxEventCallback>
      return;
 8009530:	e0b9      	b.n	80096a6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800953e:	b29b      	uxth	r3, r3
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 80ab 	beq.w	80096aa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 80a6 	beq.w	80096aa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800956c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009572:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009580:	647b      	str	r3, [r7, #68]	@ 0x44
 8009582:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800958e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e4      	bne.n	800955e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3308      	adds	r3, #8
 800959a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	623b      	str	r3, [r7, #32]
   return(result);
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	f023 0301 	bic.w	r3, r3, #1
 80095aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3308      	adds	r3, #8
 80095b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80095ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e3      	bne.n	8009594 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f023 0310 	bic.w	r3, r3, #16
 80095f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	461a      	mov	r2, r3
 80095fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009602:	61fb      	str	r3, [r7, #28]
 8009604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009606:	69b9      	ldr	r1, [r7, #24]
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	e841 2300 	strex	r3, r2, [r1]
 800960e:	617b      	str	r3, [r7, #20]
   return(result);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1e4      	bne.n	80095e0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2202      	movs	r2, #2
 800961a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800961c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f85c 	bl	80096e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009628:	e03f      	b.n	80096aa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800962a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800962e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00e      	beq.n	8009654 <HAL_UART_IRQHandler+0x5a8>
 8009636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800963a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d008      	beq.n	8009654 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800964a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fd66 	bl	800a11e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009652:	e02d      	b.n	80096b0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00e      	beq.n	800967e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009668:	2b00      	cmp	r3, #0
 800966a:	d008      	beq.n	800967e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009670:	2b00      	cmp	r3, #0
 8009672:	d01c      	beq.n	80096ae <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	4798      	blx	r3
    }
    return;
 800967c:	e017      	b.n	80096ae <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800967e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	d012      	beq.n	80096b0 <HAL_UART_IRQHandler+0x604>
 800968a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800968e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00c      	beq.n	80096b0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fd17 	bl	800a0ca <UART_EndTransmit_IT>
    return;
 800969c:	e008      	b.n	80096b0 <HAL_UART_IRQHandler+0x604>
      return;
 800969e:	bf00      	nop
 80096a0:	e006      	b.n	80096b0 <HAL_UART_IRQHandler+0x604>
    return;
 80096a2:	bf00      	nop
 80096a4:	e004      	b.n	80096b0 <HAL_UART_IRQHandler+0x604>
      return;
 80096a6:	bf00      	nop
 80096a8:	e002      	b.n	80096b0 <HAL_UART_IRQHandler+0x604>
      return;
 80096aa:	bf00      	nop
 80096ac:	e000      	b.n	80096b0 <HAL_UART_IRQHandler+0x604>
    return;
 80096ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80096b0:	37e8      	adds	r7, #232	@ 0xe8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop

080096b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096fc:	b08a      	sub	sp, #40	@ 0x28
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689a      	ldr	r2, [r3, #8]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	431a      	orrs	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	431a      	orrs	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	4313      	orrs	r3, r2
 800971e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4ba4      	ldr	r3, [pc, #656]	@ (80099b8 <UART_SetConfig+0x2c0>)
 8009728:	4013      	ands	r3, r2
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	6812      	ldr	r2, [r2, #0]
 800972e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009730:	430b      	orrs	r3, r1
 8009732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a99      	ldr	r2, [pc, #612]	@ (80099bc <UART_SetConfig+0x2c4>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d004      	beq.n	8009764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009760:	4313      	orrs	r3, r2
 8009762:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009774:	430a      	orrs	r2, r1
 8009776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a90      	ldr	r2, [pc, #576]	@ (80099c0 <UART_SetConfig+0x2c8>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d126      	bne.n	80097d0 <UART_SetConfig+0xd8>
 8009782:	4b90      	ldr	r3, [pc, #576]	@ (80099c4 <UART_SetConfig+0x2cc>)
 8009784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	2b03      	cmp	r3, #3
 800978e:	d81b      	bhi.n	80097c8 <UART_SetConfig+0xd0>
 8009790:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <UART_SetConfig+0xa0>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097a9 	.word	0x080097a9
 800979c:	080097b9 	.word	0x080097b9
 80097a0:	080097b1 	.word	0x080097b1
 80097a4:	080097c1 	.word	0x080097c1
 80097a8:	2301      	movs	r3, #1
 80097aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097ae:	e116      	b.n	80099de <UART_SetConfig+0x2e6>
 80097b0:	2302      	movs	r3, #2
 80097b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097b6:	e112      	b.n	80099de <UART_SetConfig+0x2e6>
 80097b8:	2304      	movs	r3, #4
 80097ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097be:	e10e      	b.n	80099de <UART_SetConfig+0x2e6>
 80097c0:	2308      	movs	r3, #8
 80097c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097c6:	e10a      	b.n	80099de <UART_SetConfig+0x2e6>
 80097c8:	2310      	movs	r3, #16
 80097ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097ce:	e106      	b.n	80099de <UART_SetConfig+0x2e6>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a7c      	ldr	r2, [pc, #496]	@ (80099c8 <UART_SetConfig+0x2d0>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d138      	bne.n	800984c <UART_SetConfig+0x154>
 80097da:	4b7a      	ldr	r3, [pc, #488]	@ (80099c4 <UART_SetConfig+0x2cc>)
 80097dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097e0:	f003 030c 	and.w	r3, r3, #12
 80097e4:	2b0c      	cmp	r3, #12
 80097e6:	d82d      	bhi.n	8009844 <UART_SetConfig+0x14c>
 80097e8:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <UART_SetConfig+0xf8>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	08009825 	.word	0x08009825
 80097f4:	08009845 	.word	0x08009845
 80097f8:	08009845 	.word	0x08009845
 80097fc:	08009845 	.word	0x08009845
 8009800:	08009835 	.word	0x08009835
 8009804:	08009845 	.word	0x08009845
 8009808:	08009845 	.word	0x08009845
 800980c:	08009845 	.word	0x08009845
 8009810:	0800982d 	.word	0x0800982d
 8009814:	08009845 	.word	0x08009845
 8009818:	08009845 	.word	0x08009845
 800981c:	08009845 	.word	0x08009845
 8009820:	0800983d 	.word	0x0800983d
 8009824:	2300      	movs	r3, #0
 8009826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800982a:	e0d8      	b.n	80099de <UART_SetConfig+0x2e6>
 800982c:	2302      	movs	r3, #2
 800982e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009832:	e0d4      	b.n	80099de <UART_SetConfig+0x2e6>
 8009834:	2304      	movs	r3, #4
 8009836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800983a:	e0d0      	b.n	80099de <UART_SetConfig+0x2e6>
 800983c:	2308      	movs	r3, #8
 800983e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009842:	e0cc      	b.n	80099de <UART_SetConfig+0x2e6>
 8009844:	2310      	movs	r3, #16
 8009846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800984a:	e0c8      	b.n	80099de <UART_SetConfig+0x2e6>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a5e      	ldr	r2, [pc, #376]	@ (80099cc <UART_SetConfig+0x2d4>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d125      	bne.n	80098a2 <UART_SetConfig+0x1aa>
 8009856:	4b5b      	ldr	r3, [pc, #364]	@ (80099c4 <UART_SetConfig+0x2cc>)
 8009858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009860:	2b30      	cmp	r3, #48	@ 0x30
 8009862:	d016      	beq.n	8009892 <UART_SetConfig+0x19a>
 8009864:	2b30      	cmp	r3, #48	@ 0x30
 8009866:	d818      	bhi.n	800989a <UART_SetConfig+0x1a2>
 8009868:	2b20      	cmp	r3, #32
 800986a:	d00a      	beq.n	8009882 <UART_SetConfig+0x18a>
 800986c:	2b20      	cmp	r3, #32
 800986e:	d814      	bhi.n	800989a <UART_SetConfig+0x1a2>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <UART_SetConfig+0x182>
 8009874:	2b10      	cmp	r3, #16
 8009876:	d008      	beq.n	800988a <UART_SetConfig+0x192>
 8009878:	e00f      	b.n	800989a <UART_SetConfig+0x1a2>
 800987a:	2300      	movs	r3, #0
 800987c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009880:	e0ad      	b.n	80099de <UART_SetConfig+0x2e6>
 8009882:	2302      	movs	r3, #2
 8009884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009888:	e0a9      	b.n	80099de <UART_SetConfig+0x2e6>
 800988a:	2304      	movs	r3, #4
 800988c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009890:	e0a5      	b.n	80099de <UART_SetConfig+0x2e6>
 8009892:	2308      	movs	r3, #8
 8009894:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009898:	e0a1      	b.n	80099de <UART_SetConfig+0x2e6>
 800989a:	2310      	movs	r3, #16
 800989c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098a0:	e09d      	b.n	80099de <UART_SetConfig+0x2e6>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a4a      	ldr	r2, [pc, #296]	@ (80099d0 <UART_SetConfig+0x2d8>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d125      	bne.n	80098f8 <UART_SetConfig+0x200>
 80098ac:	4b45      	ldr	r3, [pc, #276]	@ (80099c4 <UART_SetConfig+0x2cc>)
 80098ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80098b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80098b8:	d016      	beq.n	80098e8 <UART_SetConfig+0x1f0>
 80098ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80098bc:	d818      	bhi.n	80098f0 <UART_SetConfig+0x1f8>
 80098be:	2b80      	cmp	r3, #128	@ 0x80
 80098c0:	d00a      	beq.n	80098d8 <UART_SetConfig+0x1e0>
 80098c2:	2b80      	cmp	r3, #128	@ 0x80
 80098c4:	d814      	bhi.n	80098f0 <UART_SetConfig+0x1f8>
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d002      	beq.n	80098d0 <UART_SetConfig+0x1d8>
 80098ca:	2b40      	cmp	r3, #64	@ 0x40
 80098cc:	d008      	beq.n	80098e0 <UART_SetConfig+0x1e8>
 80098ce:	e00f      	b.n	80098f0 <UART_SetConfig+0x1f8>
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098d6:	e082      	b.n	80099de <UART_SetConfig+0x2e6>
 80098d8:	2302      	movs	r3, #2
 80098da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098de:	e07e      	b.n	80099de <UART_SetConfig+0x2e6>
 80098e0:	2304      	movs	r3, #4
 80098e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098e6:	e07a      	b.n	80099de <UART_SetConfig+0x2e6>
 80098e8:	2308      	movs	r3, #8
 80098ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098ee:	e076      	b.n	80099de <UART_SetConfig+0x2e6>
 80098f0:	2310      	movs	r3, #16
 80098f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098f6:	e072      	b.n	80099de <UART_SetConfig+0x2e6>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a35      	ldr	r2, [pc, #212]	@ (80099d4 <UART_SetConfig+0x2dc>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d12a      	bne.n	8009958 <UART_SetConfig+0x260>
 8009902:	4b30      	ldr	r3, [pc, #192]	@ (80099c4 <UART_SetConfig+0x2cc>)
 8009904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009908:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800990c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009910:	d01a      	beq.n	8009948 <UART_SetConfig+0x250>
 8009912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009916:	d81b      	bhi.n	8009950 <UART_SetConfig+0x258>
 8009918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800991c:	d00c      	beq.n	8009938 <UART_SetConfig+0x240>
 800991e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009922:	d815      	bhi.n	8009950 <UART_SetConfig+0x258>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <UART_SetConfig+0x238>
 8009928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800992c:	d008      	beq.n	8009940 <UART_SetConfig+0x248>
 800992e:	e00f      	b.n	8009950 <UART_SetConfig+0x258>
 8009930:	2300      	movs	r3, #0
 8009932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009936:	e052      	b.n	80099de <UART_SetConfig+0x2e6>
 8009938:	2302      	movs	r3, #2
 800993a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800993e:	e04e      	b.n	80099de <UART_SetConfig+0x2e6>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009946:	e04a      	b.n	80099de <UART_SetConfig+0x2e6>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800994e:	e046      	b.n	80099de <UART_SetConfig+0x2e6>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009956:	e042      	b.n	80099de <UART_SetConfig+0x2e6>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a17      	ldr	r2, [pc, #92]	@ (80099bc <UART_SetConfig+0x2c4>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d13a      	bne.n	80099d8 <UART_SetConfig+0x2e0>
 8009962:	4b18      	ldr	r3, [pc, #96]	@ (80099c4 <UART_SetConfig+0x2cc>)
 8009964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800996c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009970:	d01a      	beq.n	80099a8 <UART_SetConfig+0x2b0>
 8009972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009976:	d81b      	bhi.n	80099b0 <UART_SetConfig+0x2b8>
 8009978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800997c:	d00c      	beq.n	8009998 <UART_SetConfig+0x2a0>
 800997e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009982:	d815      	bhi.n	80099b0 <UART_SetConfig+0x2b8>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <UART_SetConfig+0x298>
 8009988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800998c:	d008      	beq.n	80099a0 <UART_SetConfig+0x2a8>
 800998e:	e00f      	b.n	80099b0 <UART_SetConfig+0x2b8>
 8009990:	2300      	movs	r3, #0
 8009992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009996:	e022      	b.n	80099de <UART_SetConfig+0x2e6>
 8009998:	2302      	movs	r3, #2
 800999a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800999e:	e01e      	b.n	80099de <UART_SetConfig+0x2e6>
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099a6:	e01a      	b.n	80099de <UART_SetConfig+0x2e6>
 80099a8:	2308      	movs	r3, #8
 80099aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099ae:	e016      	b.n	80099de <UART_SetConfig+0x2e6>
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099b6:	e012      	b.n	80099de <UART_SetConfig+0x2e6>
 80099b8:	efff69f3 	.word	0xefff69f3
 80099bc:	40008000 	.word	0x40008000
 80099c0:	40013800 	.word	0x40013800
 80099c4:	40021000 	.word	0x40021000
 80099c8:	40004400 	.word	0x40004400
 80099cc:	40004800 	.word	0x40004800
 80099d0:	40004c00 	.word	0x40004c00
 80099d4:	40005000 	.word	0x40005000
 80099d8:	2310      	movs	r3, #16
 80099da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a9f      	ldr	r2, [pc, #636]	@ (8009c60 <UART_SetConfig+0x568>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d17a      	bne.n	8009ade <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80099ec:	2b08      	cmp	r3, #8
 80099ee:	d824      	bhi.n	8009a3a <UART_SetConfig+0x342>
 80099f0:	a201      	add	r2, pc, #4	@ (adr r2, 80099f8 <UART_SetConfig+0x300>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a1d 	.word	0x08009a1d
 80099fc:	08009a3b 	.word	0x08009a3b
 8009a00:	08009a25 	.word	0x08009a25
 8009a04:	08009a3b 	.word	0x08009a3b
 8009a08:	08009a2b 	.word	0x08009a2b
 8009a0c:	08009a3b 	.word	0x08009a3b
 8009a10:	08009a3b 	.word	0x08009a3b
 8009a14:	08009a3b 	.word	0x08009a3b
 8009a18:	08009a33 	.word	0x08009a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a1c:	f7fc fb0e 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8009a20:	61f8      	str	r0, [r7, #28]
        break;
 8009a22:	e010      	b.n	8009a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a24:	4b8f      	ldr	r3, [pc, #572]	@ (8009c64 <UART_SetConfig+0x56c>)
 8009a26:	61fb      	str	r3, [r7, #28]
        break;
 8009a28:	e00d      	b.n	8009a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a2a:	f7fc fa6f 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8009a2e:	61f8      	str	r0, [r7, #28]
        break;
 8009a30:	e009      	b.n	8009a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a36:	61fb      	str	r3, [r7, #28]
        break;
 8009a38:	e005      	b.n	8009a46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 80fb 	beq.w	8009c44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	4413      	add	r3, r2
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d305      	bcc.n	8009a6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d903      	bls.n	8009a72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009a70:	e0e8      	b.n	8009c44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	2200      	movs	r2, #0
 8009a76:	461c      	mov	r4, r3
 8009a78:	4615      	mov	r5, r2
 8009a7a:	f04f 0200 	mov.w	r2, #0
 8009a7e:	f04f 0300 	mov.w	r3, #0
 8009a82:	022b      	lsls	r3, r5, #8
 8009a84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009a88:	0222      	lsls	r2, r4, #8
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	6849      	ldr	r1, [r1, #4]
 8009a8e:	0849      	lsrs	r1, r1, #1
 8009a90:	2000      	movs	r0, #0
 8009a92:	4688      	mov	r8, r1
 8009a94:	4681      	mov	r9, r0
 8009a96:	eb12 0a08 	adds.w	sl, r2, r8
 8009a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	603b      	str	r3, [r7, #0]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aac:	4650      	mov	r0, sl
 8009aae:	4659      	mov	r1, fp
 8009ab0:	f7f6 fbde 	bl	8000270 <__aeabi_uldivmod>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4613      	mov	r3, r2
 8009aba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ac2:	d308      	bcc.n	8009ad6 <UART_SetConfig+0x3de>
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aca:	d204      	bcs.n	8009ad6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	60da      	str	r2, [r3, #12]
 8009ad4:	e0b6      	b.n	8009c44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009adc:	e0b2      	b.n	8009c44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ae6:	d15e      	bne.n	8009ba6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	d828      	bhi.n	8009b42 <UART_SetConfig+0x44a>
 8009af0:	a201      	add	r2, pc, #4	@ (adr r2, 8009af8 <UART_SetConfig+0x400>)
 8009af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af6:	bf00      	nop
 8009af8:	08009b1d 	.word	0x08009b1d
 8009afc:	08009b25 	.word	0x08009b25
 8009b00:	08009b2d 	.word	0x08009b2d
 8009b04:	08009b43 	.word	0x08009b43
 8009b08:	08009b33 	.word	0x08009b33
 8009b0c:	08009b43 	.word	0x08009b43
 8009b10:	08009b43 	.word	0x08009b43
 8009b14:	08009b43 	.word	0x08009b43
 8009b18:	08009b3b 	.word	0x08009b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b1c:	f7fc fa8e 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8009b20:	61f8      	str	r0, [r7, #28]
        break;
 8009b22:	e014      	b.n	8009b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b24:	f7fc faa0 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8009b28:	61f8      	str	r0, [r7, #28]
        break;
 8009b2a:	e010      	b.n	8009b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8009c64 <UART_SetConfig+0x56c>)
 8009b2e:	61fb      	str	r3, [r7, #28]
        break;
 8009b30:	e00d      	b.n	8009b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b32:	f7fc f9eb 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8009b36:	61f8      	str	r0, [r7, #28]
        break;
 8009b38:	e009      	b.n	8009b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b3e:	61fb      	str	r3, [r7, #28]
        break;
 8009b40:	e005      	b.n	8009b4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d077      	beq.n	8009c44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	005a      	lsls	r2, r3, #1
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	085b      	lsrs	r3, r3, #1
 8009b5e:	441a      	add	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	2b0f      	cmp	r3, #15
 8009b6e:	d916      	bls.n	8009b9e <UART_SetConfig+0x4a6>
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b76:	d212      	bcs.n	8009b9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f023 030f 	bic.w	r3, r3, #15
 8009b80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	085b      	lsrs	r3, r3, #1
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	8afb      	ldrh	r3, [r7, #22]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	8afa      	ldrh	r2, [r7, #22]
 8009b9a:	60da      	str	r2, [r3, #12]
 8009b9c:	e052      	b.n	8009c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009ba4:	e04e      	b.n	8009c44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d827      	bhi.n	8009bfe <UART_SetConfig+0x506>
 8009bae:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb4 <UART_SetConfig+0x4bc>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009be1 	.word	0x08009be1
 8009bbc:	08009be9 	.word	0x08009be9
 8009bc0:	08009bff 	.word	0x08009bff
 8009bc4:	08009bef 	.word	0x08009bef
 8009bc8:	08009bff 	.word	0x08009bff
 8009bcc:	08009bff 	.word	0x08009bff
 8009bd0:	08009bff 	.word	0x08009bff
 8009bd4:	08009bf7 	.word	0x08009bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd8:	f7fc fa30 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8009bdc:	61f8      	str	r0, [r7, #28]
        break;
 8009bde:	e014      	b.n	8009c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be0:	f7fc fa42 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8009be4:	61f8      	str	r0, [r7, #28]
        break;
 8009be6:	e010      	b.n	8009c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009be8:	4b1e      	ldr	r3, [pc, #120]	@ (8009c64 <UART_SetConfig+0x56c>)
 8009bea:	61fb      	str	r3, [r7, #28]
        break;
 8009bec:	e00d      	b.n	8009c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bee:	f7fc f98d 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8009bf2:	61f8      	str	r0, [r7, #28]
        break;
 8009bf4:	e009      	b.n	8009c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bfa:	61fb      	str	r3, [r7, #28]
        break;
 8009bfc:	e005      	b.n	8009c0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009c08:	bf00      	nop
    }

    if (pclk != 0U)
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d019      	beq.n	8009c44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	085a      	lsrs	r2, r3, #1
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	441a      	add	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	2b0f      	cmp	r3, #15
 8009c28:	d909      	bls.n	8009c3e <UART_SetConfig+0x546>
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c30:	d205      	bcs.n	8009c3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	60da      	str	r2, [r3, #12]
 8009c3c:	e002      	b.n	8009c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009c50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3728      	adds	r7, #40	@ 0x28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c5e:	bf00      	nop
 8009c60:	40008000 	.word	0x40008000
 8009c64:	00f42400 	.word	0x00f42400

08009c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c74:	f003 0308 	and.w	r3, r3, #8
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cda:	f003 0304 	and.w	r3, r3, #4
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfc:	f003 0310 	and.w	r3, r3, #16
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00a      	beq.n	8009d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1e:	f003 0320 	and.w	r3, r3, #32
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00a      	beq.n	8009d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	430a      	orrs	r2, r1
 8009d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01a      	beq.n	8009d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d66:	d10a      	bne.n	8009d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	605a      	str	r2, [r3, #4]
  }
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b098      	sub	sp, #96	@ 0x60
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dbc:	f7f7 ff4c 	bl	8001c58 <HAL_GetTick>
 8009dc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0308 	and.w	r3, r3, #8
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	d12e      	bne.n	8009e2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f88c 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d021      	beq.n	8009e2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e6      	bne.n	8009dea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e062      	b.n	8009ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	d149      	bne.n	8009ed0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e44:	2200      	movs	r2, #0
 8009e46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f856 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d03c      	beq.n	8009ed0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	623b      	str	r3, [r7, #32]
   return(result);
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e6      	bne.n	8009e56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	e853 3f00 	ldrex	r3, [r3]
 8009e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 0301 	bic.w	r3, r3, #1
 8009e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ea8:	61fa      	str	r2, [r7, #28]
 8009eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	69b9      	ldr	r1, [r7, #24]
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e5      	bne.n	8009e88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e011      	b.n	8009ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3758      	adds	r7, #88	@ 0x58
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f0c:	e04f      	b.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f14:	d04b      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f16:	f7f7 fe9f 	bl	8001c58 <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d302      	bcc.n	8009f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e04e      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0304 	and.w	r3, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d037      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b80      	cmp	r3, #128	@ 0x80
 8009f42:	d034      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b40      	cmp	r3, #64	@ 0x40
 8009f48:	d031      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	f003 0308 	and.w	r3, r3, #8
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d110      	bne.n	8009f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 f838 	bl	8009fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2208      	movs	r2, #8
 8009f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e029      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f88:	d111      	bne.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 f81e 	bl	8009fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e00f      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	69da      	ldr	r2, [r3, #28]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	bf0c      	ite	eq
 8009fbe:	2301      	moveq	r3, #1
 8009fc0:	2300      	movne	r3, #0
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d0a0      	beq.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b095      	sub	sp, #84	@ 0x54
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe6:	e853 3f00 	ldrex	r3, [r3]
 8009fea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ffe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a002:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a004:	e841 2300 	strex	r3, r2, [r1]
 800a008:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e6      	bne.n	8009fde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3308      	adds	r3, #8
 800a016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f023 0301 	bic.w	r3, r3, #1
 800a026:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3308      	adds	r3, #8
 800a02e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e5      	bne.n	800a010 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d118      	bne.n	800a07e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	e853 3f00 	ldrex	r3, [r3]
 800a058:	60bb      	str	r3, [r7, #8]
   return(result);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	f023 0310 	bic.w	r3, r3, #16
 800a060:	647b      	str	r3, [r7, #68]	@ 0x44
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a06a:	61bb      	str	r3, [r7, #24]
 800a06c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6979      	ldr	r1, [r7, #20]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	613b      	str	r3, [r7, #16]
   return(result);
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e6      	bne.n	800a04c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2220      	movs	r2, #32
 800a082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a092:	bf00      	nop
 800a094:	3754      	adds	r7, #84	@ 0x54
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f7ff fb05 	bl	80096cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b088      	sub	sp, #32
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	61bb      	str	r3, [r7, #24]
 800a0f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	6979      	ldr	r1, [r7, #20]
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	e841 2300 	strex	r3, r2, [r1]
 800a0fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1e6      	bne.n	800a0d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2220      	movs	r2, #32
 800a108:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff fad1 	bl	80096b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a116:	bf00      	nop
 800a118:	3720      	adds	r7, #32
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a126:	bf00      	nop
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a132:	b480      	push	{r7}
 800a134:	b085      	sub	sp, #20
 800a136:	af00      	add	r7, sp, #0
 800a138:	4603      	mov	r3, r0
 800a13a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a144:	2b84      	cmp	r3, #132	@ 0x84
 800a146:	d005      	beq.n	800a154 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a148:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	3303      	adds	r3, #3
 800a152:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a154:	68fb      	ldr	r3, [r7, #12]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a166:	f000 fae5 	bl	800a734 <vTaskStartScheduler>
  
  return osOK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a172:	b089      	sub	sp, #36	@ 0x24
 800a174:	af04      	add	r7, sp, #16
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d020      	beq.n	800a1c4 <osThreadCreate+0x54>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01c      	beq.n	800a1c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685c      	ldr	r4, [r3, #4]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	691e      	ldr	r6, [r3, #16]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7ff ffc8 	bl	800a132 <makeFreeRtosPriority>
 800a1a2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a1ac:	9202      	str	r2, [sp, #8]
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	9100      	str	r1, [sp, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 f8ed 	bl	800a398 <xTaskCreateStatic>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	e01c      	b.n	800a1fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685c      	ldr	r4, [r3, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a1d0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff ffaa 	bl	800a132 <makeFreeRtosPriority>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	9200      	str	r2, [sp, #0]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	4632      	mov	r2, r6
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f000 f932 	bl	800a458 <xTaskCreate>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d001      	beq.n	800a1fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e000      	b.n	800a200 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a208 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <osDelay+0x16>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	e000      	b.n	800a220 <osDelay+0x18>
 800a21e:	2301      	movs	r3, #1
 800a220:	4618      	mov	r0, r3
 800a222:	f000 fa51 	bl	800a6c8 <vTaskDelay>
  
  return osOK;
 800a226:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f103 0208 	add.w	r2, r3, #8
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f04f 32ff 	mov.w	r2, #4294967295
 800a248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f103 0208 	add.w	r2, r3, #8
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f103 0208 	add.w	r2, r3, #8
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a28a:	b480      	push	{r7}
 800a28c:	b085      	sub	sp, #20
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	601a      	str	r2, [r3, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d103      	bne.n	800a2f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	e00c      	b.n	800a30c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e002      	b.n	800a300 <vListInsert+0x2e>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d2f6      	bcs.n	800a2fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	601a      	str	r2, [r3, #0]
}
 800a338:	bf00      	nop
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6892      	ldr	r2, [r2, #8]
 800a35a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6852      	ldr	r2, [r2, #4]
 800a364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d103      	bne.n	800a378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	1e5a      	subs	r2, r3, #1
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08e      	sub	sp, #56	@ 0x38
 800a39c:	af04      	add	r7, sp, #16
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10b      	bne.n	800a3c4 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3be:	bf00      	nop
 800a3c0:	bf00      	nop
 800a3c2:	e7fd      	b.n	800a3c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10b      	bne.n	800a3e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	61fb      	str	r3, [r7, #28]
}
 800a3dc:	bf00      	nop
 800a3de:	bf00      	nop
 800a3e0:	e7fd      	b.n	800a3de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3e2:	2354      	movs	r3, #84	@ 0x54
 800a3e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	2b54      	cmp	r3, #84	@ 0x54
 800a3ea:	d00b      	beq.n	800a404 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	61bb      	str	r3, [r7, #24]
}
 800a3fe:	bf00      	nop
 800a400:	bf00      	nop
 800a402:	e7fd      	b.n	800a400 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a404:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01e      	beq.n	800a44a <xTaskCreateStatic+0xb2>
 800a40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d01b      	beq.n	800a44a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a414:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a41a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	2202      	movs	r2, #2
 800a420:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a424:	2300      	movs	r3, #0
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	f107 0314 	add.w	r3, r7, #20
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	68b9      	ldr	r1, [r7, #8]
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 f850 	bl	800a4e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a442:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a444:	f000 f8d6 	bl	800a5f4 <prvAddNewTaskToReadyList>
 800a448:	e001      	b.n	800a44e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a44e:	697b      	ldr	r3, [r7, #20]
	}
 800a450:	4618      	mov	r0, r3
 800a452:	3728      	adds	r7, #40	@ 0x28
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08c      	sub	sp, #48	@ 0x30
 800a45c:	af04      	add	r7, sp, #16
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	4613      	mov	r3, r2
 800a466:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 fef3 	bl	800b258 <pvPortMalloc>
 800a472:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00e      	beq.n	800a498 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a47a:	2054      	movs	r0, #84	@ 0x54
 800a47c:	f000 feec 	bl	800b258 <pvPortMalloc>
 800a480:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a48e:	e005      	b.n	800a49c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a490:	6978      	ldr	r0, [r7, #20]
 800a492:	f000 ffaf 	bl	800b3f4 <vPortFree>
 800a496:	e001      	b.n	800a49c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d017      	beq.n	800a4d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4aa:	88fa      	ldrh	r2, [r7, #6]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9303      	str	r3, [sp, #12]
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	9302      	str	r3, [sp, #8]
 800a4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	68b9      	ldr	r1, [r7, #8]
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 f80e 	bl	800a4e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4c6:	69f8      	ldr	r0, [r7, #28]
 800a4c8:	f000 f894 	bl	800a5f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	61bb      	str	r3, [r7, #24]
 800a4d0:	e002      	b.n	800a4d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a4d8:	69bb      	ldr	r3, [r7, #24]
	}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3720      	adds	r7, #32
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b088      	sub	sp, #32
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	f023 0307 	bic.w	r3, r3, #7
 800a508:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	f003 0307 	and.w	r3, r3, #7
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00b      	beq.n	800a52c <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	617b      	str	r3, [r7, #20]
}
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	e7fd      	b.n	800a528 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d01f      	beq.n	800a572 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a532:	2300      	movs	r3, #0
 800a534:	61fb      	str	r3, [r7, #28]
 800a536:	e012      	b.n	800a55e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	4413      	add	r3, r2
 800a53e:	7819      	ldrb	r1, [r3, #0]
 800a540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	4413      	add	r3, r2
 800a546:	3334      	adds	r3, #52	@ 0x34
 800a548:	460a      	mov	r2, r1
 800a54a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	4413      	add	r3, r2
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d006      	beq.n	800a566 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	3301      	adds	r3, #1
 800a55c:	61fb      	str	r3, [r7, #28]
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	2b0f      	cmp	r3, #15
 800a562:	d9e9      	bls.n	800a538 <prvInitialiseNewTask+0x56>
 800a564:	e000      	b.n	800a568 <prvInitialiseNewTask+0x86>
			{
				break;
 800a566:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a570:	e003      	b.n	800a57a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57c:	2b06      	cmp	r3, #6
 800a57e:	d901      	bls.n	800a584 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a580:	2306      	movs	r3, #6
 800a582:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a588:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a58e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	2200      	movs	r2, #0
 800a594:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a598:	3304      	adds	r3, #4
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fe68 	bl	800a270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	3318      	adds	r3, #24
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7ff fe63 	bl	800a270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b2:	f1c3 0207 	rsb	r2, r3, #7
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	68f9      	ldr	r1, [r7, #12]
 800a5d2:	69b8      	ldr	r0, [r7, #24]
 800a5d4:	f000 fc2c 	bl	800ae30 <pxPortInitialiseStack>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5ea:	bf00      	nop
 800a5ec:	3720      	adds	r7, #32
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5fc:	f000 fd4c 	bl	800b098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a600:	4b2a      	ldr	r3, [pc, #168]	@ (800a6ac <prvAddNewTaskToReadyList+0xb8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	4a29      	ldr	r2, [pc, #164]	@ (800a6ac <prvAddNewTaskToReadyList+0xb8>)
 800a608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a60a:	4b29      	ldr	r3, [pc, #164]	@ (800a6b0 <prvAddNewTaskToReadyList+0xbc>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d109      	bne.n	800a626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a612:	4a27      	ldr	r2, [pc, #156]	@ (800a6b0 <prvAddNewTaskToReadyList+0xbc>)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a618:	4b24      	ldr	r3, [pc, #144]	@ (800a6ac <prvAddNewTaskToReadyList+0xb8>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d110      	bne.n	800a642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a620:	f000 fac4 	bl	800abac <prvInitialiseTaskLists>
 800a624:	e00d      	b.n	800a642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a626:	4b23      	ldr	r3, [pc, #140]	@ (800a6b4 <prvAddNewTaskToReadyList+0xc0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d109      	bne.n	800a642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a62e:	4b20      	ldr	r3, [pc, #128]	@ (800a6b0 <prvAddNewTaskToReadyList+0xbc>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a638:	429a      	cmp	r2, r3
 800a63a:	d802      	bhi.n	800a642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a63c:	4a1c      	ldr	r2, [pc, #112]	@ (800a6b0 <prvAddNewTaskToReadyList+0xbc>)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a642:	4b1d      	ldr	r3, [pc, #116]	@ (800a6b8 <prvAddNewTaskToReadyList+0xc4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3301      	adds	r3, #1
 800a648:	4a1b      	ldr	r2, [pc, #108]	@ (800a6b8 <prvAddNewTaskToReadyList+0xc4>)
 800a64a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a650:	2201      	movs	r2, #1
 800a652:	409a      	lsls	r2, r3
 800a654:	4b19      	ldr	r3, [pc, #100]	@ (800a6bc <prvAddNewTaskToReadyList+0xc8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4313      	orrs	r3, r2
 800a65a:	4a18      	ldr	r2, [pc, #96]	@ (800a6bc <prvAddNewTaskToReadyList+0xc8>)
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4a15      	ldr	r2, [pc, #84]	@ (800a6c0 <prvAddNewTaskToReadyList+0xcc>)
 800a66c:	441a      	add	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3304      	adds	r3, #4
 800a672:	4619      	mov	r1, r3
 800a674:	4610      	mov	r0, r2
 800a676:	f7ff fe08 	bl	800a28a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a67a:	f000 fd3f 	bl	800b0fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a67e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <prvAddNewTaskToReadyList+0xc0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00e      	beq.n	800a6a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a686:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b0 <prvAddNewTaskToReadyList+0xbc>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a690:	429a      	cmp	r2, r3
 800a692:	d207      	bcs.n	800a6a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a694:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c4 <prvAddNewTaskToReadyList+0xd0>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	20000e18 	.word	0x20000e18
 800a6b0:	20000d18 	.word	0x20000d18
 800a6b4:	20000e24 	.word	0x20000e24
 800a6b8:	20000e34 	.word	0x20000e34
 800a6bc:	20000e20 	.word	0x20000e20
 800a6c0:	20000d1c 	.word	0x20000d1c
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d018      	beq.n	800a70c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6da:	4b14      	ldr	r3, [pc, #80]	@ (800a72c <vTaskDelay+0x64>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <vTaskDelay+0x32>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	60bb      	str	r3, [r7, #8]
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop
 800a6f8:	e7fd      	b.n	800a6f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a6fa:	f000 f87d 	bl	800a7f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6fe:	2100      	movs	r1, #0
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fb2f 	bl	800ad64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a706:	f000 f885 	bl	800a814 <xTaskResumeAll>
 800a70a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d107      	bne.n	800a722 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a712:	4b07      	ldr	r3, [pc, #28]	@ (800a730 <vTaskDelay+0x68>)
 800a714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a722:	bf00      	nop
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20000e40 	.word	0x20000e40
 800a730:	e000ed04 	.word	0xe000ed04

0800a734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08a      	sub	sp, #40	@ 0x28
 800a738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a73e:	2300      	movs	r3, #0
 800a740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a742:	463a      	mov	r2, r7
 800a744:	1d39      	adds	r1, r7, #4
 800a746:	f107 0308 	add.w	r3, r7, #8
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7f6 f8d4 	bl	80008f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	9202      	str	r2, [sp, #8]
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	2300      	movs	r3, #0
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	2300      	movs	r3, #0
 800a760:	460a      	mov	r2, r1
 800a762:	491f      	ldr	r1, [pc, #124]	@ (800a7e0 <vTaskStartScheduler+0xac>)
 800a764:	481f      	ldr	r0, [pc, #124]	@ (800a7e4 <vTaskStartScheduler+0xb0>)
 800a766:	f7ff fe17 	bl	800a398 <xTaskCreateStatic>
 800a76a:	4603      	mov	r3, r0
 800a76c:	4a1e      	ldr	r2, [pc, #120]	@ (800a7e8 <vTaskStartScheduler+0xb4>)
 800a76e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a770:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e8 <vTaskStartScheduler+0xb4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a778:	2301      	movs	r3, #1
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	e001      	b.n	800a782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a77e:	2300      	movs	r3, #0
 800a780:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d116      	bne.n	800a7b6 <vTaskStartScheduler+0x82>
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	613b      	str	r3, [r7, #16]
}
 800a79a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a79c:	4b13      	ldr	r3, [pc, #76]	@ (800a7ec <vTaskStartScheduler+0xb8>)
 800a79e:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7a4:	4b12      	ldr	r3, [pc, #72]	@ (800a7f0 <vTaskStartScheduler+0xbc>)
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7aa:	4b12      	ldr	r3, [pc, #72]	@ (800a7f4 <vTaskStartScheduler+0xc0>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7b0:	f000 fbce 	bl	800af50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7b4:	e00f      	b.n	800a7d6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7bc:	d10b      	bne.n	800a7d6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	60fb      	str	r3, [r7, #12]
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	e7fd      	b.n	800a7d2 <vTaskStartScheduler+0x9e>
}
 800a7d6:	bf00      	nop
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	0800cb18 	.word	0x0800cb18
 800a7e4:	0800ab7d 	.word	0x0800ab7d
 800a7e8:	20000e3c 	.word	0x20000e3c
 800a7ec:	20000e38 	.word	0x20000e38
 800a7f0:	20000e24 	.word	0x20000e24
 800a7f4:	20000e1c 	.word	0x20000e1c

0800a7f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a7fc:	4b04      	ldr	r3, [pc, #16]	@ (800a810 <vTaskSuspendAll+0x18>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3301      	adds	r3, #1
 800a802:	4a03      	ldr	r2, [pc, #12]	@ (800a810 <vTaskSuspendAll+0x18>)
 800a804:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a806:	bf00      	nop
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	20000e40 	.word	0x20000e40

0800a814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a81e:	2300      	movs	r3, #0
 800a820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a822:	4b42      	ldr	r3, [pc, #264]	@ (800a92c <xTaskResumeAll+0x118>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <xTaskResumeAll+0x2e>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	603b      	str	r3, [r7, #0]
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	e7fd      	b.n	800a83e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a842:	f000 fc29 	bl	800b098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a846:	4b39      	ldr	r3, [pc, #228]	@ (800a92c <xTaskResumeAll+0x118>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	4a37      	ldr	r2, [pc, #220]	@ (800a92c <xTaskResumeAll+0x118>)
 800a84e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a850:	4b36      	ldr	r3, [pc, #216]	@ (800a92c <xTaskResumeAll+0x118>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d161      	bne.n	800a91c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a858:	4b35      	ldr	r3, [pc, #212]	@ (800a930 <xTaskResumeAll+0x11c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d05d      	beq.n	800a91c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a860:	e02e      	b.n	800a8c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a862:	4b34      	ldr	r3, [pc, #208]	@ (800a934 <xTaskResumeAll+0x120>)
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3318      	adds	r3, #24
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff fd68 	bl	800a344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	3304      	adds	r3, #4
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff fd63 	bl	800a344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a882:	2201      	movs	r2, #1
 800a884:	409a      	lsls	r2, r3
 800a886:	4b2c      	ldr	r3, [pc, #176]	@ (800a938 <xTaskResumeAll+0x124>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	4a2a      	ldr	r2, [pc, #168]	@ (800a938 <xTaskResumeAll+0x124>)
 800a88e:	6013      	str	r3, [r2, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4a27      	ldr	r2, [pc, #156]	@ (800a93c <xTaskResumeAll+0x128>)
 800a89e:	441a      	add	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	f7ff fcef 	bl	800a28a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b0:	4b23      	ldr	r3, [pc, #140]	@ (800a940 <xTaskResumeAll+0x12c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d302      	bcc.n	800a8c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a8ba:	4b22      	ldr	r3, [pc, #136]	@ (800a944 <xTaskResumeAll+0x130>)
 800a8bc:	2201      	movs	r2, #1
 800a8be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a934 <xTaskResumeAll+0x120>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1cc      	bne.n	800a862 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8ce:	f000 fa0b 	bl	800ace8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a948 <xTaskResumeAll+0x134>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d010      	beq.n	800a900 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8de:	f000 f837 	bl	800a950 <xTaskIncrementTick>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a8e8:	4b16      	ldr	r3, [pc, #88]	@ (800a944 <xTaskResumeAll+0x130>)
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1f1      	bne.n	800a8de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a8fa:	4b13      	ldr	r3, [pc, #76]	@ (800a948 <xTaskResumeAll+0x134>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a900:	4b10      	ldr	r3, [pc, #64]	@ (800a944 <xTaskResumeAll+0x130>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d009      	beq.n	800a91c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a908:	2301      	movs	r3, #1
 800a90a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a90c:	4b0f      	ldr	r3, [pc, #60]	@ (800a94c <xTaskResumeAll+0x138>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a91c:	f000 fbee 	bl	800b0fc <vPortExitCritical>

	return xAlreadyYielded;
 800a920:	68bb      	ldr	r3, [r7, #8]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000e40 	.word	0x20000e40
 800a930:	20000e18 	.word	0x20000e18
 800a934:	20000dd8 	.word	0x20000dd8
 800a938:	20000e20 	.word	0x20000e20
 800a93c:	20000d1c 	.word	0x20000d1c
 800a940:	20000d18 	.word	0x20000d18
 800a944:	20000e2c 	.word	0x20000e2c
 800a948:	20000e28 	.word	0x20000e28
 800a94c:	e000ed04 	.word	0xe000ed04

0800a950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a956:	2300      	movs	r3, #0
 800a958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a95a:	4b4f      	ldr	r3, [pc, #316]	@ (800aa98 <xTaskIncrementTick+0x148>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f040 808f 	bne.w	800aa82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a964:	4b4d      	ldr	r3, [pc, #308]	@ (800aa9c <xTaskIncrementTick+0x14c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3301      	adds	r3, #1
 800a96a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a96c:	4a4b      	ldr	r2, [pc, #300]	@ (800aa9c <xTaskIncrementTick+0x14c>)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d121      	bne.n	800a9bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a978:	4b49      	ldr	r3, [pc, #292]	@ (800aaa0 <xTaskIncrementTick+0x150>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00b      	beq.n	800a99a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	603b      	str	r3, [r7, #0]
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop
 800a998:	e7fd      	b.n	800a996 <xTaskIncrementTick+0x46>
 800a99a:	4b41      	ldr	r3, [pc, #260]	@ (800aaa0 <xTaskIncrementTick+0x150>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	4b40      	ldr	r3, [pc, #256]	@ (800aaa4 <xTaskIncrementTick+0x154>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a3e      	ldr	r2, [pc, #248]	@ (800aaa0 <xTaskIncrementTick+0x150>)
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	4a3e      	ldr	r2, [pc, #248]	@ (800aaa4 <xTaskIncrementTick+0x154>)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	4b3e      	ldr	r3, [pc, #248]	@ (800aaa8 <xTaskIncrementTick+0x158>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	4a3c      	ldr	r2, [pc, #240]	@ (800aaa8 <xTaskIncrementTick+0x158>)
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	f000 f996 	bl	800ace8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9bc:	4b3b      	ldr	r3, [pc, #236]	@ (800aaac <xTaskIncrementTick+0x15c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d348      	bcc.n	800aa58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9c6:	4b36      	ldr	r3, [pc, #216]	@ (800aaa0 <xTaskIncrementTick+0x150>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d104      	bne.n	800a9da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d0:	4b36      	ldr	r3, [pc, #216]	@ (800aaac <xTaskIncrementTick+0x15c>)
 800a9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d6:	601a      	str	r2, [r3, #0]
					break;
 800a9d8:	e03e      	b.n	800aa58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9da:	4b31      	ldr	r3, [pc, #196]	@ (800aaa0 <xTaskIncrementTick+0x150>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d203      	bcs.n	800a9fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9f2:	4a2e      	ldr	r2, [pc, #184]	@ (800aaac <xTaskIncrementTick+0x15c>)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9f8:	e02e      	b.n	800aa58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff fca0 	bl	800a344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d004      	beq.n	800aa16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	3318      	adds	r3, #24
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff fc97 	bl	800a344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	409a      	lsls	r2, r3
 800aa1e:	4b24      	ldr	r3, [pc, #144]	@ (800aab0 <xTaskIncrementTick+0x160>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	4a22      	ldr	r2, [pc, #136]	@ (800aab0 <xTaskIncrementTick+0x160>)
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4a1f      	ldr	r2, [pc, #124]	@ (800aab4 <xTaskIncrementTick+0x164>)
 800aa36:	441a      	add	r2, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f7ff fc23 	bl	800a28a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa48:	4b1b      	ldr	r3, [pc, #108]	@ (800aab8 <xTaskIncrementTick+0x168>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d3b9      	bcc.n	800a9c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aa52:	2301      	movs	r3, #1
 800aa54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa56:	e7b6      	b.n	800a9c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa58:	4b17      	ldr	r3, [pc, #92]	@ (800aab8 <xTaskIncrementTick+0x168>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa5e:	4915      	ldr	r1, [pc, #84]	@ (800aab4 <xTaskIncrementTick+0x164>)
 800aa60:	4613      	mov	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d901      	bls.n	800aa74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aa70:	2301      	movs	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa74:	4b11      	ldr	r3, [pc, #68]	@ (800aabc <xTaskIncrementTick+0x16c>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d007      	beq.n	800aa8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	617b      	str	r3, [r7, #20]
 800aa80:	e004      	b.n	800aa8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa82:	4b0f      	ldr	r3, [pc, #60]	@ (800aac0 <xTaskIncrementTick+0x170>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3301      	adds	r3, #1
 800aa88:	4a0d      	ldr	r2, [pc, #52]	@ (800aac0 <xTaskIncrementTick+0x170>)
 800aa8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa8c:	697b      	ldr	r3, [r7, #20]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	20000e40 	.word	0x20000e40
 800aa9c:	20000e1c 	.word	0x20000e1c
 800aaa0:	20000dd0 	.word	0x20000dd0
 800aaa4:	20000dd4 	.word	0x20000dd4
 800aaa8:	20000e30 	.word	0x20000e30
 800aaac:	20000e38 	.word	0x20000e38
 800aab0:	20000e20 	.word	0x20000e20
 800aab4:	20000d1c 	.word	0x20000d1c
 800aab8:	20000d18 	.word	0x20000d18
 800aabc:	20000e2c 	.word	0x20000e2c
 800aac0:	20000e28 	.word	0x20000e28

0800aac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b087      	sub	sp, #28
 800aac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aaca:	4b27      	ldr	r3, [pc, #156]	@ (800ab68 <vTaskSwitchContext+0xa4>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aad2:	4b26      	ldr	r3, [pc, #152]	@ (800ab6c <vTaskSwitchContext+0xa8>)
 800aad4:	2201      	movs	r2, #1
 800aad6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aad8:	e040      	b.n	800ab5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800aada:	4b24      	ldr	r3, [pc, #144]	@ (800ab6c <vTaskSwitchContext+0xa8>)
 800aadc:	2200      	movs	r2, #0
 800aade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae0:	4b23      	ldr	r3, [pc, #140]	@ (800ab70 <vTaskSwitchContext+0xac>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	fab3 f383 	clz	r3, r3
 800aaec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aaee:	7afb      	ldrb	r3, [r7, #11]
 800aaf0:	f1c3 031f 	rsb	r3, r3, #31
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	491f      	ldr	r1, [pc, #124]	@ (800ab74 <vTaskSwitchContext+0xb0>)
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10b      	bne.n	800ab22 <vTaskSwitchContext+0x5e>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	607b      	str	r3, [r7, #4]
}
 800ab1c:	bf00      	nop
 800ab1e:	bf00      	nop
 800ab20:	e7fd      	b.n	800ab1e <vTaskSwitchContext+0x5a>
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4a11      	ldr	r2, [pc, #68]	@ (800ab74 <vTaskSwitchContext+0xb0>)
 800ab2e:	4413      	add	r3, r2
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	605a      	str	r2, [r3, #4]
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	3308      	adds	r3, #8
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d104      	bne.n	800ab52 <vTaskSwitchContext+0x8e>
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	605a      	str	r2, [r3, #4]
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	4a07      	ldr	r2, [pc, #28]	@ (800ab78 <vTaskSwitchContext+0xb4>)
 800ab5a:	6013      	str	r3, [r2, #0]
}
 800ab5c:	bf00      	nop
 800ab5e:	371c      	adds	r7, #28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	20000e40 	.word	0x20000e40
 800ab6c:	20000e2c 	.word	0x20000e2c
 800ab70:	20000e20 	.word	0x20000e20
 800ab74:	20000d1c 	.word	0x20000d1c
 800ab78:	20000d18 	.word	0x20000d18

0800ab7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab84:	f000 f852 	bl	800ac2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab88:	4b06      	ldr	r3, [pc, #24]	@ (800aba4 <prvIdleTask+0x28>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d9f9      	bls.n	800ab84 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab90:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <prvIdleTask+0x2c>)
 800ab92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aba0:	e7f0      	b.n	800ab84 <prvIdleTask+0x8>
 800aba2:	bf00      	nop
 800aba4:	20000d1c 	.word	0x20000d1c
 800aba8:	e000ed04 	.word	0xe000ed04

0800abac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abb2:	2300      	movs	r3, #0
 800abb4:	607b      	str	r3, [r7, #4]
 800abb6:	e00c      	b.n	800abd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	4613      	mov	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4a12      	ldr	r2, [pc, #72]	@ (800ac0c <prvInitialiseTaskLists+0x60>)
 800abc4:	4413      	add	r3, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff fb32 	bl	800a230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	3301      	adds	r3, #1
 800abd0:	607b      	str	r3, [r7, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b06      	cmp	r3, #6
 800abd6:	d9ef      	bls.n	800abb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abd8:	480d      	ldr	r0, [pc, #52]	@ (800ac10 <prvInitialiseTaskLists+0x64>)
 800abda:	f7ff fb29 	bl	800a230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abde:	480d      	ldr	r0, [pc, #52]	@ (800ac14 <prvInitialiseTaskLists+0x68>)
 800abe0:	f7ff fb26 	bl	800a230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abe4:	480c      	ldr	r0, [pc, #48]	@ (800ac18 <prvInitialiseTaskLists+0x6c>)
 800abe6:	f7ff fb23 	bl	800a230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abea:	480c      	ldr	r0, [pc, #48]	@ (800ac1c <prvInitialiseTaskLists+0x70>)
 800abec:	f7ff fb20 	bl	800a230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abf0:	480b      	ldr	r0, [pc, #44]	@ (800ac20 <prvInitialiseTaskLists+0x74>)
 800abf2:	f7ff fb1d 	bl	800a230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac24 <prvInitialiseTaskLists+0x78>)
 800abf8:	4a05      	ldr	r2, [pc, #20]	@ (800ac10 <prvInitialiseTaskLists+0x64>)
 800abfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800abfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ac28 <prvInitialiseTaskLists+0x7c>)
 800abfe:	4a05      	ldr	r2, [pc, #20]	@ (800ac14 <prvInitialiseTaskLists+0x68>)
 800ac00:	601a      	str	r2, [r3, #0]
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	20000d1c 	.word	0x20000d1c
 800ac10:	20000da8 	.word	0x20000da8
 800ac14:	20000dbc 	.word	0x20000dbc
 800ac18:	20000dd8 	.word	0x20000dd8
 800ac1c:	20000dec 	.word	0x20000dec
 800ac20:	20000e04 	.word	0x20000e04
 800ac24:	20000dd0 	.word	0x20000dd0
 800ac28:	20000dd4 	.word	0x20000dd4

0800ac2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac32:	e019      	b.n	800ac68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac34:	f000 fa30 	bl	800b098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac38:	4b10      	ldr	r3, [pc, #64]	@ (800ac7c <prvCheckTasksWaitingTermination+0x50>)
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3304      	adds	r3, #4
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7ff fb7d 	bl	800a344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac80 <prvCheckTasksWaitingTermination+0x54>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	4a0b      	ldr	r2, [pc, #44]	@ (800ac80 <prvCheckTasksWaitingTermination+0x54>)
 800ac52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac54:	4b0b      	ldr	r3, [pc, #44]	@ (800ac84 <prvCheckTasksWaitingTermination+0x58>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ac84 <prvCheckTasksWaitingTermination+0x58>)
 800ac5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac5e:	f000 fa4d 	bl	800b0fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f810 	bl	800ac88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac68:	4b06      	ldr	r3, [pc, #24]	@ (800ac84 <prvCheckTasksWaitingTermination+0x58>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1e1      	bne.n	800ac34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20000dec 	.word	0x20000dec
 800ac80:	20000e18 	.word	0x20000e18
 800ac84:	20000e00 	.word	0x20000e00

0800ac88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d108      	bne.n	800acac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fba8 	bl	800b3f4 <vPortFree>
				vPortFree( pxTCB );
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fba5 	bl	800b3f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acaa:	e019      	b.n	800ace0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d103      	bne.n	800acbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fb9c 	bl	800b3f4 <vPortFree>
	}
 800acbc:	e010      	b.n	800ace0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d00b      	beq.n	800ace0 <prvDeleteTCB+0x58>
	__asm volatile
 800acc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	60fb      	str	r3, [r7, #12]
}
 800acda:	bf00      	nop
 800acdc:	bf00      	nop
 800acde:	e7fd      	b.n	800acdc <prvDeleteTCB+0x54>
	}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acee:	4b0c      	ldr	r3, [pc, #48]	@ (800ad20 <prvResetNextTaskUnblockTime+0x38>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d104      	bne.n	800ad02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800acf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ad24 <prvResetNextTaskUnblockTime+0x3c>)
 800acfa:	f04f 32ff 	mov.w	r2, #4294967295
 800acfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad00:	e008      	b.n	800ad14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad02:	4b07      	ldr	r3, [pc, #28]	@ (800ad20 <prvResetNextTaskUnblockTime+0x38>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4a04      	ldr	r2, [pc, #16]	@ (800ad24 <prvResetNextTaskUnblockTime+0x3c>)
 800ad12:	6013      	str	r3, [r2, #0]
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	20000dd0 	.word	0x20000dd0
 800ad24:	20000e38 	.word	0x20000e38

0800ad28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad5c <xTaskGetSchedulerState+0x34>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d102      	bne.n	800ad3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad36:	2301      	movs	r3, #1
 800ad38:	607b      	str	r3, [r7, #4]
 800ad3a:	e008      	b.n	800ad4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad3c:	4b08      	ldr	r3, [pc, #32]	@ (800ad60 <xTaskGetSchedulerState+0x38>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d102      	bne.n	800ad4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad44:	2302      	movs	r3, #2
 800ad46:	607b      	str	r3, [r7, #4]
 800ad48:	e001      	b.n	800ad4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad4e:	687b      	ldr	r3, [r7, #4]
	}
 800ad50:	4618      	mov	r0, r3
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	20000e24 	.word	0x20000e24
 800ad60:	20000e40 	.word	0x20000e40

0800ad64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad6e:	4b29      	ldr	r3, [pc, #164]	@ (800ae14 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad74:	4b28      	ldr	r3, [pc, #160]	@ (800ae18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff fae2 	bl	800a344 <uxListRemove>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10b      	bne.n	800ad9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ad86:	4b24      	ldr	r3, [pc, #144]	@ (800ae18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad92:	43da      	mvns	r2, r3
 800ad94:	4b21      	ldr	r3, [pc, #132]	@ (800ae1c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4013      	ands	r3, r2
 800ad9a:	4a20      	ldr	r2, [pc, #128]	@ (800ae1c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada4:	d10a      	bne.n	800adbc <prvAddCurrentTaskToDelayedList+0x58>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d007      	beq.n	800adbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adac:	4b1a      	ldr	r3, [pc, #104]	@ (800ae18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	3304      	adds	r3, #4
 800adb2:	4619      	mov	r1, r3
 800adb4:	481a      	ldr	r0, [pc, #104]	@ (800ae20 <prvAddCurrentTaskToDelayedList+0xbc>)
 800adb6:	f7ff fa68 	bl	800a28a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800adba:	e026      	b.n	800ae0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4413      	add	r3, r2
 800adc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800adc4:	4b14      	ldr	r3, [pc, #80]	@ (800ae18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	429a      	cmp	r2, r3
 800add2:	d209      	bcs.n	800ade8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800add4:	4b13      	ldr	r3, [pc, #76]	@ (800ae24 <prvAddCurrentTaskToDelayedList+0xc0>)
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	4b0f      	ldr	r3, [pc, #60]	@ (800ae18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3304      	adds	r3, #4
 800adde:	4619      	mov	r1, r3
 800ade0:	4610      	mov	r0, r2
 800ade2:	f7ff fa76 	bl	800a2d2 <vListInsert>
}
 800ade6:	e010      	b.n	800ae0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ade8:	4b0f      	ldr	r3, [pc, #60]	@ (800ae28 <prvAddCurrentTaskToDelayedList+0xc4>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	4b0a      	ldr	r3, [pc, #40]	@ (800ae18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3304      	adds	r3, #4
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f7ff fa6c 	bl	800a2d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ae2c <prvAddCurrentTaskToDelayedList+0xc8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d202      	bcs.n	800ae0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ae04:	4a09      	ldr	r2, [pc, #36]	@ (800ae2c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	6013      	str	r3, [r2, #0]
}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20000e1c 	.word	0x20000e1c
 800ae18:	20000d18 	.word	0x20000d18
 800ae1c:	20000e20 	.word	0x20000e20
 800ae20:	20000e04 	.word	0x20000e04
 800ae24:	20000dd4 	.word	0x20000dd4
 800ae28:	20000dd0 	.word	0x20000dd0
 800ae2c:	20000e38 	.word	0x20000e38

0800ae30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	3b04      	subs	r3, #4
 800ae40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	f023 0201 	bic.w	r2, r3, #1
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	3b04      	subs	r3, #4
 800ae5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae60:	4a0c      	ldr	r2, [pc, #48]	@ (800ae94 <pxPortInitialiseStack+0x64>)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3b14      	subs	r3, #20
 800ae6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3b04      	subs	r3, #4
 800ae76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f06f 0202 	mvn.w	r2, #2
 800ae7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3b20      	subs	r3, #32
 800ae84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae86:	68fb      	ldr	r3, [r7, #12]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	0800ae99 	.word	0x0800ae99

0800ae98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aea2:	4b13      	ldr	r3, [pc, #76]	@ (800aef0 <prvTaskExitError+0x58>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeaa:	d00b      	beq.n	800aec4 <prvTaskExitError+0x2c>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	60fb      	str	r3, [r7, #12]
}
 800aebe:	bf00      	nop
 800aec0:	bf00      	nop
 800aec2:	e7fd      	b.n	800aec0 <prvTaskExitError+0x28>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	60bb      	str	r3, [r7, #8]
}
 800aed6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aed8:	bf00      	nop
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0fc      	beq.n	800aeda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aee0:	bf00      	nop
 800aee2:	bf00      	nop
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	2000000c 	.word	0x2000000c
	...

0800af00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af00:	4b07      	ldr	r3, [pc, #28]	@ (800af20 <pxCurrentTCBConst2>)
 800af02:	6819      	ldr	r1, [r3, #0]
 800af04:	6808      	ldr	r0, [r1, #0]
 800af06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0a:	f380 8809 	msr	PSP, r0
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f04f 0000 	mov.w	r0, #0
 800af16:	f380 8811 	msr	BASEPRI, r0
 800af1a:	4770      	bx	lr
 800af1c:	f3af 8000 	nop.w

0800af20 <pxCurrentTCBConst2>:
 800af20:	20000d18 	.word	0x20000d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop

0800af28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af28:	4808      	ldr	r0, [pc, #32]	@ (800af4c <prvPortStartFirstTask+0x24>)
 800af2a:	6800      	ldr	r0, [r0, #0]
 800af2c:	6800      	ldr	r0, [r0, #0]
 800af2e:	f380 8808 	msr	MSP, r0
 800af32:	f04f 0000 	mov.w	r0, #0
 800af36:	f380 8814 	msr	CONTROL, r0
 800af3a:	b662      	cpsie	i
 800af3c:	b661      	cpsie	f
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	df00      	svc	0
 800af48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af4a:	bf00      	nop
 800af4c:	e000ed08 	.word	0xe000ed08

0800af50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af56:	4b47      	ldr	r3, [pc, #284]	@ (800b074 <xPortStartScheduler+0x124>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a47      	ldr	r2, [pc, #284]	@ (800b078 <xPortStartScheduler+0x128>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d10b      	bne.n	800af78 <xPortStartScheduler+0x28>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	613b      	str	r3, [r7, #16]
}
 800af72:	bf00      	nop
 800af74:	bf00      	nop
 800af76:	e7fd      	b.n	800af74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af78:	4b3e      	ldr	r3, [pc, #248]	@ (800b074 <xPortStartScheduler+0x124>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a3f      	ldr	r2, [pc, #252]	@ (800b07c <xPortStartScheduler+0x12c>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d10b      	bne.n	800af9a <xPortStartScheduler+0x4a>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	60fb      	str	r3, [r7, #12]
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop
 800af98:	e7fd      	b.n	800af96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af9a:	4b39      	ldr	r3, [pc, #228]	@ (800b080 <xPortStartScheduler+0x130>)
 800af9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	22ff      	movs	r2, #255	@ 0xff
 800afaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afb4:	78fb      	ldrb	r3, [r7, #3]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	4b31      	ldr	r3, [pc, #196]	@ (800b084 <xPortStartScheduler+0x134>)
 800afc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afc2:	4b31      	ldr	r3, [pc, #196]	@ (800b088 <xPortStartScheduler+0x138>)
 800afc4:	2207      	movs	r2, #7
 800afc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afc8:	e009      	b.n	800afde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800afca:	4b2f      	ldr	r3, [pc, #188]	@ (800b088 <xPortStartScheduler+0x138>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3b01      	subs	r3, #1
 800afd0:	4a2d      	ldr	r2, [pc, #180]	@ (800b088 <xPortStartScheduler+0x138>)
 800afd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afd4:	78fb      	ldrb	r3, [r7, #3]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	005b      	lsls	r3, r3, #1
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afe6:	2b80      	cmp	r3, #128	@ 0x80
 800afe8:	d0ef      	beq.n	800afca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afea:	4b27      	ldr	r3, [pc, #156]	@ (800b088 <xPortStartScheduler+0x138>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f1c3 0307 	rsb	r3, r3, #7
 800aff2:	2b04      	cmp	r3, #4
 800aff4:	d00b      	beq.n	800b00e <xPortStartScheduler+0xbe>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	60bb      	str	r3, [r7, #8]
}
 800b008:	bf00      	nop
 800b00a:	bf00      	nop
 800b00c:	e7fd      	b.n	800b00a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b00e:	4b1e      	ldr	r3, [pc, #120]	@ (800b088 <xPortStartScheduler+0x138>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	4a1c      	ldr	r2, [pc, #112]	@ (800b088 <xPortStartScheduler+0x138>)
 800b016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b018:	4b1b      	ldr	r3, [pc, #108]	@ (800b088 <xPortStartScheduler+0x138>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b020:	4a19      	ldr	r2, [pc, #100]	@ (800b088 <xPortStartScheduler+0x138>)
 800b022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	b2da      	uxtb	r2, r3
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b02c:	4b17      	ldr	r3, [pc, #92]	@ (800b08c <xPortStartScheduler+0x13c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a16      	ldr	r2, [pc, #88]	@ (800b08c <xPortStartScheduler+0x13c>)
 800b032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b038:	4b14      	ldr	r3, [pc, #80]	@ (800b08c <xPortStartScheduler+0x13c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a13      	ldr	r2, [pc, #76]	@ (800b08c <xPortStartScheduler+0x13c>)
 800b03e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b044:	f000 f8da 	bl	800b1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b048:	4b11      	ldr	r3, [pc, #68]	@ (800b090 <xPortStartScheduler+0x140>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b04e:	f000 f8f9 	bl	800b244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b052:	4b10      	ldr	r3, [pc, #64]	@ (800b094 <xPortStartScheduler+0x144>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a0f      	ldr	r2, [pc, #60]	@ (800b094 <xPortStartScheduler+0x144>)
 800b058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b05c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b05e:	f7ff ff63 	bl	800af28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b062:	f7ff fd2f 	bl	800aac4 <vTaskSwitchContext>
	prvTaskExitError();
 800b066:	f7ff ff17 	bl	800ae98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	e000ed00 	.word	0xe000ed00
 800b078:	410fc271 	.word	0x410fc271
 800b07c:	410fc270 	.word	0x410fc270
 800b080:	e000e400 	.word	0xe000e400
 800b084:	20000e44 	.word	0x20000e44
 800b088:	20000e48 	.word	0x20000e48
 800b08c:	e000ed20 	.word	0xe000ed20
 800b090:	2000000c 	.word	0x2000000c
 800b094:	e000ef34 	.word	0xe000ef34

0800b098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	607b      	str	r3, [r7, #4]
}
 800b0b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0b2:	4b10      	ldr	r3, [pc, #64]	@ (800b0f4 <vPortEnterCritical+0x5c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	4a0e      	ldr	r2, [pc, #56]	@ (800b0f4 <vPortEnterCritical+0x5c>)
 800b0ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b0f4 <vPortEnterCritical+0x5c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d110      	bne.n	800b0e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f8 <vPortEnterCritical+0x60>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00b      	beq.n	800b0e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	603b      	str	r3, [r7, #0]
}
 800b0e0:	bf00      	nop
 800b0e2:	bf00      	nop
 800b0e4:	e7fd      	b.n	800b0e2 <vPortEnterCritical+0x4a>
	}
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	2000000c 	.word	0x2000000c
 800b0f8:	e000ed04 	.word	0xe000ed04

0800b0fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b102:	4b12      	ldr	r3, [pc, #72]	@ (800b14c <vPortExitCritical+0x50>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10b      	bne.n	800b122 <vPortExitCritical+0x26>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	607b      	str	r3, [r7, #4]
}
 800b11c:	bf00      	nop
 800b11e:	bf00      	nop
 800b120:	e7fd      	b.n	800b11e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b122:	4b0a      	ldr	r3, [pc, #40]	@ (800b14c <vPortExitCritical+0x50>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3b01      	subs	r3, #1
 800b128:	4a08      	ldr	r2, [pc, #32]	@ (800b14c <vPortExitCritical+0x50>)
 800b12a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b12c:	4b07      	ldr	r3, [pc, #28]	@ (800b14c <vPortExitCritical+0x50>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <vPortExitCritical+0x44>
 800b134:	2300      	movs	r3, #0
 800b136:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b13e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	2000000c 	.word	0x2000000c

0800b150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b150:	f3ef 8009 	mrs	r0, PSP
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	4b15      	ldr	r3, [pc, #84]	@ (800b1b0 <pxCurrentTCBConst>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	f01e 0f10 	tst.w	lr, #16
 800b160:	bf08      	it	eq
 800b162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16a:	6010      	str	r0, [r2, #0]
 800b16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b174:	f380 8811 	msr	BASEPRI, r0
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f7ff fca0 	bl	800aac4 <vTaskSwitchContext>
 800b184:	f04f 0000 	mov.w	r0, #0
 800b188:	f380 8811 	msr	BASEPRI, r0
 800b18c:	bc09      	pop	{r0, r3}
 800b18e:	6819      	ldr	r1, [r3, #0]
 800b190:	6808      	ldr	r0, [r1, #0]
 800b192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b196:	f01e 0f10 	tst.w	lr, #16
 800b19a:	bf08      	it	eq
 800b19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1a0:	f380 8809 	msr	PSP, r0
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	f3af 8000 	nop.w

0800b1b0 <pxCurrentTCBConst>:
 800b1b0:	20000d18 	.word	0x20000d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop

0800b1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	607b      	str	r3, [r7, #4]
}
 800b1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1d2:	f7ff fbbd 	bl	800a950 <xTaskIncrementTick>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d003      	beq.n	800b1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1dc:	4b06      	ldr	r3, [pc, #24]	@ (800b1f8 <xPortSysTickHandler+0x40>)
 800b1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	f383 8811 	msr	BASEPRI, r3
}
 800b1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	e000ed04 	.word	0xe000ed04

0800b1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b200:	4b0b      	ldr	r3, [pc, #44]	@ (800b230 <vPortSetupTimerInterrupt+0x34>)
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b206:	4b0b      	ldr	r3, [pc, #44]	@ (800b234 <vPortSetupTimerInterrupt+0x38>)
 800b208:	2200      	movs	r2, #0
 800b20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b20c:	4b0a      	ldr	r3, [pc, #40]	@ (800b238 <vPortSetupTimerInterrupt+0x3c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a0a      	ldr	r2, [pc, #40]	@ (800b23c <vPortSetupTimerInterrupt+0x40>)
 800b212:	fba2 2303 	umull	r2, r3, r2, r3
 800b216:	099b      	lsrs	r3, r3, #6
 800b218:	4a09      	ldr	r2, [pc, #36]	@ (800b240 <vPortSetupTimerInterrupt+0x44>)
 800b21a:	3b01      	subs	r3, #1
 800b21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b21e:	4b04      	ldr	r3, [pc, #16]	@ (800b230 <vPortSetupTimerInterrupt+0x34>)
 800b220:	2207      	movs	r2, #7
 800b222:	601a      	str	r2, [r3, #0]
}
 800b224:	bf00      	nop
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	e000e010 	.word	0xe000e010
 800b234:	e000e018 	.word	0xe000e018
 800b238:	20000000 	.word	0x20000000
 800b23c:	10624dd3 	.word	0x10624dd3
 800b240:	e000e014 	.word	0xe000e014

0800b244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b254 <vPortEnableVFP+0x10>
 800b248:	6801      	ldr	r1, [r0, #0]
 800b24a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b24e:	6001      	str	r1, [r0, #0]
 800b250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b252:	bf00      	nop
 800b254:	e000ed88 	.word	0xe000ed88

0800b258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08a      	sub	sp, #40	@ 0x28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b260:	2300      	movs	r3, #0
 800b262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b264:	f7ff fac8 	bl	800a7f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b268:	4b5c      	ldr	r3, [pc, #368]	@ (800b3dc <pvPortMalloc+0x184>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b270:	f000 f924 	bl	800b4bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b274:	4b5a      	ldr	r3, [pc, #360]	@ (800b3e0 <pvPortMalloc+0x188>)
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4013      	ands	r3, r2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f040 8095 	bne.w	800b3ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01e      	beq.n	800b2c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b288:	2208      	movs	r2, #8
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4413      	add	r3, r2
 800b28e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f003 0307 	and.w	r3, r3, #7
 800b296:	2b00      	cmp	r3, #0
 800b298:	d015      	beq.n	800b2c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f023 0307 	bic.w	r3, r3, #7
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00b      	beq.n	800b2c6 <pvPortMalloc+0x6e>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	617b      	str	r3, [r7, #20]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d06f      	beq.n	800b3ac <pvPortMalloc+0x154>
 800b2cc:	4b45      	ldr	r3, [pc, #276]	@ (800b3e4 <pvPortMalloc+0x18c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d86a      	bhi.n	800b3ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b2d6:	4b44      	ldr	r3, [pc, #272]	@ (800b3e8 <pvPortMalloc+0x190>)
 800b2d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2da:	4b43      	ldr	r3, [pc, #268]	@ (800b3e8 <pvPortMalloc+0x190>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2e0:	e004      	b.n	800b2ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d903      	bls.n	800b2fe <pvPortMalloc+0xa6>
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f1      	bne.n	800b2e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b2fe:	4b37      	ldr	r3, [pc, #220]	@ (800b3dc <pvPortMalloc+0x184>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b304:	429a      	cmp	r2, r3
 800b306:	d051      	beq.n	800b3ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2208      	movs	r2, #8
 800b30e:	4413      	add	r3, r2
 800b310:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	1ad2      	subs	r2, r2, r3
 800b322:	2308      	movs	r3, #8
 800b324:	005b      	lsls	r3, r3, #1
 800b326:	429a      	cmp	r2, r3
 800b328:	d920      	bls.n	800b36c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b32a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4413      	add	r3, r2
 800b330:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	f003 0307 	and.w	r3, r3, #7
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00b      	beq.n	800b354 <pvPortMalloc+0xfc>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	613b      	str	r3, [r7, #16]
}
 800b34e:	bf00      	nop
 800b350:	bf00      	nop
 800b352:	e7fd      	b.n	800b350 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	1ad2      	subs	r2, r2, r3
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b366:	69b8      	ldr	r0, [r7, #24]
 800b368:	f000 f90a 	bl	800b580 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b36c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3e4 <pvPortMalloc+0x18c>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	4a1b      	ldr	r2, [pc, #108]	@ (800b3e4 <pvPortMalloc+0x18c>)
 800b378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b37a:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e4 <pvPortMalloc+0x18c>)
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	4b1b      	ldr	r3, [pc, #108]	@ (800b3ec <pvPortMalloc+0x194>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d203      	bcs.n	800b38e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b386:	4b17      	ldr	r3, [pc, #92]	@ (800b3e4 <pvPortMalloc+0x18c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a18      	ldr	r2, [pc, #96]	@ (800b3ec <pvPortMalloc+0x194>)
 800b38c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	4b13      	ldr	r3, [pc, #76]	@ (800b3e0 <pvPortMalloc+0x188>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	431a      	orrs	r2, r3
 800b398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39e:	2200      	movs	r2, #0
 800b3a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3a2:	4b13      	ldr	r3, [pc, #76]	@ (800b3f0 <pvPortMalloc+0x198>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	4a11      	ldr	r2, [pc, #68]	@ (800b3f0 <pvPortMalloc+0x198>)
 800b3aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3ac:	f7ff fa32 	bl	800a814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	f003 0307 	and.w	r3, r3, #7
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <pvPortMalloc+0x17a>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	60fb      	str	r3, [r7, #12]
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	e7fd      	b.n	800b3ce <pvPortMalloc+0x176>
	return pvReturn;
 800b3d2:	69fb      	ldr	r3, [r7, #28]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3728      	adds	r7, #40	@ 0x28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20001a0c 	.word	0x20001a0c
 800b3e0:	20001a20 	.word	0x20001a20
 800b3e4:	20001a10 	.word	0x20001a10
 800b3e8:	20001a04 	.word	0x20001a04
 800b3ec:	20001a14 	.word	0x20001a14
 800b3f0:	20001a18 	.word	0x20001a18

0800b3f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d04f      	beq.n	800b4a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b406:	2308      	movs	r3, #8
 800b408:	425b      	negs	r3, r3
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	4413      	add	r3, r2
 800b40e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	4b25      	ldr	r3, [pc, #148]	@ (800b4b0 <vPortFree+0xbc>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4013      	ands	r3, r2
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d10b      	bne.n	800b43a <vPortFree+0x46>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	60fb      	str	r3, [r7, #12]
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	e7fd      	b.n	800b436 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <vPortFree+0x66>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	60bb      	str	r3, [r7, #8]
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	e7fd      	b.n	800b456 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	4b14      	ldr	r3, [pc, #80]	@ (800b4b0 <vPortFree+0xbc>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4013      	ands	r3, r2
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01e      	beq.n	800b4a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d11a      	bne.n	800b4a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	4b0e      	ldr	r3, [pc, #56]	@ (800b4b0 <vPortFree+0xbc>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	43db      	mvns	r3, r3
 800b47a:	401a      	ands	r2, r3
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b480:	f7ff f9ba 	bl	800a7f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b4 <vPortFree+0xc0>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4413      	add	r3, r2
 800b48e:	4a09      	ldr	r2, [pc, #36]	@ (800b4b4 <vPortFree+0xc0>)
 800b490:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b492:	6938      	ldr	r0, [r7, #16]
 800b494:	f000 f874 	bl	800b580 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b498:	4b07      	ldr	r3, [pc, #28]	@ (800b4b8 <vPortFree+0xc4>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	4a06      	ldr	r2, [pc, #24]	@ (800b4b8 <vPortFree+0xc4>)
 800b4a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b4a2:	f7ff f9b7 	bl	800a814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4a6:	bf00      	nop
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20001a20 	.word	0x20001a20
 800b4b4:	20001a10 	.word	0x20001a10
 800b4b8:	20001a1c 	.word	0x20001a1c

0800b4bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4c2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b4c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4c8:	4b27      	ldr	r3, [pc, #156]	@ (800b568 <prvHeapInit+0xac>)
 800b4ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00c      	beq.n	800b4f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f023 0307 	bic.w	r3, r3, #7
 800b4e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	4a1f      	ldr	r2, [pc, #124]	@ (800b568 <prvHeapInit+0xac>)
 800b4ec:	4413      	add	r3, r2
 800b4ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b56c <prvHeapInit+0xb0>)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b4fa:	4b1c      	ldr	r3, [pc, #112]	@ (800b56c <prvHeapInit+0xb0>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	4413      	add	r3, r2
 800b506:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b508:	2208      	movs	r2, #8
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	1a9b      	subs	r3, r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f023 0307 	bic.w	r3, r3, #7
 800b516:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4a15      	ldr	r2, [pc, #84]	@ (800b570 <prvHeapInit+0xb4>)
 800b51c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b51e:	4b14      	ldr	r3, [pc, #80]	@ (800b570 <prvHeapInit+0xb4>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2200      	movs	r2, #0
 800b524:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b526:	4b12      	ldr	r3, [pc, #72]	@ (800b570 <prvHeapInit+0xb4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2200      	movs	r2, #0
 800b52c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	1ad2      	subs	r2, r2, r3
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b53c:	4b0c      	ldr	r3, [pc, #48]	@ (800b570 <prvHeapInit+0xb4>)
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	4a0a      	ldr	r2, [pc, #40]	@ (800b574 <prvHeapInit+0xb8>)
 800b54a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	4a09      	ldr	r2, [pc, #36]	@ (800b578 <prvHeapInit+0xbc>)
 800b552:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b554:	4b09      	ldr	r3, [pc, #36]	@ (800b57c <prvHeapInit+0xc0>)
 800b556:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b55a:	601a      	str	r2, [r3, #0]
}
 800b55c:	bf00      	nop
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	20000e4c 	.word	0x20000e4c
 800b56c:	20001a04 	.word	0x20001a04
 800b570:	20001a0c 	.word	0x20001a0c
 800b574:	20001a14 	.word	0x20001a14
 800b578:	20001a10 	.word	0x20001a10
 800b57c:	20001a20 	.word	0x20001a20

0800b580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b588:	4b28      	ldr	r3, [pc, #160]	@ (800b62c <prvInsertBlockIntoFreeList+0xac>)
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	e002      	b.n	800b594 <prvInsertBlockIntoFreeList+0x14>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d8f7      	bhi.n	800b58e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d108      	bne.n	800b5c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	685a      	ldr	r2, [r3, #4]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	441a      	add	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	441a      	add	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d118      	bne.n	800b608 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4b15      	ldr	r3, [pc, #84]	@ (800b630 <prvInsertBlockIntoFreeList+0xb0>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d00d      	beq.n	800b5fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	441a      	add	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	e008      	b.n	800b610 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b630 <prvInsertBlockIntoFreeList+0xb0>)
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	601a      	str	r2, [r3, #0]
 800b606:	e003      	b.n	800b610 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	429a      	cmp	r2, r3
 800b616:	d002      	beq.n	800b61e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b61e:	bf00      	nop
 800b620:	3714      	adds	r7, #20
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	20001a04 	.word	0x20001a04
 800b630:	20001a0c 	.word	0x20001a0c

0800b634 <std>:
 800b634:	2300      	movs	r3, #0
 800b636:	b510      	push	{r4, lr}
 800b638:	4604      	mov	r4, r0
 800b63a:	e9c0 3300 	strd	r3, r3, [r0]
 800b63e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b642:	6083      	str	r3, [r0, #8]
 800b644:	8181      	strh	r1, [r0, #12]
 800b646:	6643      	str	r3, [r0, #100]	@ 0x64
 800b648:	81c2      	strh	r2, [r0, #14]
 800b64a:	6183      	str	r3, [r0, #24]
 800b64c:	4619      	mov	r1, r3
 800b64e:	2208      	movs	r2, #8
 800b650:	305c      	adds	r0, #92	@ 0x5c
 800b652:	f000 f9f9 	bl	800ba48 <memset>
 800b656:	4b0d      	ldr	r3, [pc, #52]	@ (800b68c <std+0x58>)
 800b658:	6263      	str	r3, [r4, #36]	@ 0x24
 800b65a:	4b0d      	ldr	r3, [pc, #52]	@ (800b690 <std+0x5c>)
 800b65c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b65e:	4b0d      	ldr	r3, [pc, #52]	@ (800b694 <std+0x60>)
 800b660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b662:	4b0d      	ldr	r3, [pc, #52]	@ (800b698 <std+0x64>)
 800b664:	6323      	str	r3, [r4, #48]	@ 0x30
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <std+0x68>)
 800b668:	6224      	str	r4, [r4, #32]
 800b66a:	429c      	cmp	r4, r3
 800b66c:	d006      	beq.n	800b67c <std+0x48>
 800b66e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b672:	4294      	cmp	r4, r2
 800b674:	d002      	beq.n	800b67c <std+0x48>
 800b676:	33d0      	adds	r3, #208	@ 0xd0
 800b678:	429c      	cmp	r4, r3
 800b67a:	d105      	bne.n	800b688 <std+0x54>
 800b67c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b684:	f000 ba58 	b.w	800bb38 <__retarget_lock_init_recursive>
 800b688:	bd10      	pop	{r4, pc}
 800b68a:	bf00      	nop
 800b68c:	0800b899 	.word	0x0800b899
 800b690:	0800b8bb 	.word	0x0800b8bb
 800b694:	0800b8f3 	.word	0x0800b8f3
 800b698:	0800b917 	.word	0x0800b917
 800b69c:	20001a24 	.word	0x20001a24

0800b6a0 <stdio_exit_handler>:
 800b6a0:	4a02      	ldr	r2, [pc, #8]	@ (800b6ac <stdio_exit_handler+0xc>)
 800b6a2:	4903      	ldr	r1, [pc, #12]	@ (800b6b0 <stdio_exit_handler+0x10>)
 800b6a4:	4803      	ldr	r0, [pc, #12]	@ (800b6b4 <stdio_exit_handler+0x14>)
 800b6a6:	f000 b869 	b.w	800b77c <_fwalk_sglue>
 800b6aa:	bf00      	nop
 800b6ac:	20000010 	.word	0x20000010
 800b6b0:	0800c3d9 	.word	0x0800c3d9
 800b6b4:	20000020 	.word	0x20000020

0800b6b8 <cleanup_stdio>:
 800b6b8:	6841      	ldr	r1, [r0, #4]
 800b6ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ec <cleanup_stdio+0x34>)
 800b6bc:	4299      	cmp	r1, r3
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	d001      	beq.n	800b6c8 <cleanup_stdio+0x10>
 800b6c4:	f000 fe88 	bl	800c3d8 <_fflush_r>
 800b6c8:	68a1      	ldr	r1, [r4, #8]
 800b6ca:	4b09      	ldr	r3, [pc, #36]	@ (800b6f0 <cleanup_stdio+0x38>)
 800b6cc:	4299      	cmp	r1, r3
 800b6ce:	d002      	beq.n	800b6d6 <cleanup_stdio+0x1e>
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 fe81 	bl	800c3d8 <_fflush_r>
 800b6d6:	68e1      	ldr	r1, [r4, #12]
 800b6d8:	4b06      	ldr	r3, [pc, #24]	@ (800b6f4 <cleanup_stdio+0x3c>)
 800b6da:	4299      	cmp	r1, r3
 800b6dc:	d004      	beq.n	800b6e8 <cleanup_stdio+0x30>
 800b6de:	4620      	mov	r0, r4
 800b6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e4:	f000 be78 	b.w	800c3d8 <_fflush_r>
 800b6e8:	bd10      	pop	{r4, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20001a24 	.word	0x20001a24
 800b6f0:	20001a8c 	.word	0x20001a8c
 800b6f4:	20001af4 	.word	0x20001af4

0800b6f8 <global_stdio_init.part.0>:
 800b6f8:	b510      	push	{r4, lr}
 800b6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b728 <global_stdio_init.part.0+0x30>)
 800b6fc:	4c0b      	ldr	r4, [pc, #44]	@ (800b72c <global_stdio_init.part.0+0x34>)
 800b6fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b730 <global_stdio_init.part.0+0x38>)
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	4620      	mov	r0, r4
 800b704:	2200      	movs	r2, #0
 800b706:	2104      	movs	r1, #4
 800b708:	f7ff ff94 	bl	800b634 <std>
 800b70c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b710:	2201      	movs	r2, #1
 800b712:	2109      	movs	r1, #9
 800b714:	f7ff ff8e 	bl	800b634 <std>
 800b718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b71c:	2202      	movs	r2, #2
 800b71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b722:	2112      	movs	r1, #18
 800b724:	f7ff bf86 	b.w	800b634 <std>
 800b728:	20001b5c 	.word	0x20001b5c
 800b72c:	20001a24 	.word	0x20001a24
 800b730:	0800b6a1 	.word	0x0800b6a1

0800b734 <__sfp_lock_acquire>:
 800b734:	4801      	ldr	r0, [pc, #4]	@ (800b73c <__sfp_lock_acquire+0x8>)
 800b736:	f000 ba00 	b.w	800bb3a <__retarget_lock_acquire_recursive>
 800b73a:	bf00      	nop
 800b73c:	20001b65 	.word	0x20001b65

0800b740 <__sfp_lock_release>:
 800b740:	4801      	ldr	r0, [pc, #4]	@ (800b748 <__sfp_lock_release+0x8>)
 800b742:	f000 b9fb 	b.w	800bb3c <__retarget_lock_release_recursive>
 800b746:	bf00      	nop
 800b748:	20001b65 	.word	0x20001b65

0800b74c <__sinit>:
 800b74c:	b510      	push	{r4, lr}
 800b74e:	4604      	mov	r4, r0
 800b750:	f7ff fff0 	bl	800b734 <__sfp_lock_acquire>
 800b754:	6a23      	ldr	r3, [r4, #32]
 800b756:	b11b      	cbz	r3, 800b760 <__sinit+0x14>
 800b758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b75c:	f7ff bff0 	b.w	800b740 <__sfp_lock_release>
 800b760:	4b04      	ldr	r3, [pc, #16]	@ (800b774 <__sinit+0x28>)
 800b762:	6223      	str	r3, [r4, #32]
 800b764:	4b04      	ldr	r3, [pc, #16]	@ (800b778 <__sinit+0x2c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1f5      	bne.n	800b758 <__sinit+0xc>
 800b76c:	f7ff ffc4 	bl	800b6f8 <global_stdio_init.part.0>
 800b770:	e7f2      	b.n	800b758 <__sinit+0xc>
 800b772:	bf00      	nop
 800b774:	0800b6b9 	.word	0x0800b6b9
 800b778:	20001b5c 	.word	0x20001b5c

0800b77c <_fwalk_sglue>:
 800b77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b780:	4607      	mov	r7, r0
 800b782:	4688      	mov	r8, r1
 800b784:	4614      	mov	r4, r2
 800b786:	2600      	movs	r6, #0
 800b788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b78c:	f1b9 0901 	subs.w	r9, r9, #1
 800b790:	d505      	bpl.n	800b79e <_fwalk_sglue+0x22>
 800b792:	6824      	ldr	r4, [r4, #0]
 800b794:	2c00      	cmp	r4, #0
 800b796:	d1f7      	bne.n	800b788 <_fwalk_sglue+0xc>
 800b798:	4630      	mov	r0, r6
 800b79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b79e:	89ab      	ldrh	r3, [r5, #12]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d907      	bls.n	800b7b4 <_fwalk_sglue+0x38>
 800b7a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	d003      	beq.n	800b7b4 <_fwalk_sglue+0x38>
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	47c0      	blx	r8
 800b7b2:	4306      	orrs	r6, r0
 800b7b4:	3568      	adds	r5, #104	@ 0x68
 800b7b6:	e7e9      	b.n	800b78c <_fwalk_sglue+0x10>

0800b7b8 <iprintf>:
 800b7b8:	b40f      	push	{r0, r1, r2, r3}
 800b7ba:	b507      	push	{r0, r1, r2, lr}
 800b7bc:	4906      	ldr	r1, [pc, #24]	@ (800b7d8 <iprintf+0x20>)
 800b7be:	ab04      	add	r3, sp, #16
 800b7c0:	6808      	ldr	r0, [r1, #0]
 800b7c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c6:	6881      	ldr	r1, [r0, #8]
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	f000 fadb 	bl	800bd84 <_vfiprintf_r>
 800b7ce:	b003      	add	sp, #12
 800b7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7d4:	b004      	add	sp, #16
 800b7d6:	4770      	bx	lr
 800b7d8:	2000001c 	.word	0x2000001c

0800b7dc <_puts_r>:
 800b7dc:	6a03      	ldr	r3, [r0, #32]
 800b7de:	b570      	push	{r4, r5, r6, lr}
 800b7e0:	6884      	ldr	r4, [r0, #8]
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	460e      	mov	r6, r1
 800b7e6:	b90b      	cbnz	r3, 800b7ec <_puts_r+0x10>
 800b7e8:	f7ff ffb0 	bl	800b74c <__sinit>
 800b7ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7ee:	07db      	lsls	r3, r3, #31
 800b7f0:	d405      	bmi.n	800b7fe <_puts_r+0x22>
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	0598      	lsls	r0, r3, #22
 800b7f6:	d402      	bmi.n	800b7fe <_puts_r+0x22>
 800b7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7fa:	f000 f99e 	bl	800bb3a <__retarget_lock_acquire_recursive>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	0719      	lsls	r1, r3, #28
 800b802:	d502      	bpl.n	800b80a <_puts_r+0x2e>
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d135      	bne.n	800b876 <_puts_r+0x9a>
 800b80a:	4621      	mov	r1, r4
 800b80c:	4628      	mov	r0, r5
 800b80e:	f000 f8c5 	bl	800b99c <__swsetup_r>
 800b812:	b380      	cbz	r0, 800b876 <_puts_r+0x9a>
 800b814:	f04f 35ff 	mov.w	r5, #4294967295
 800b818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b81a:	07da      	lsls	r2, r3, #31
 800b81c:	d405      	bmi.n	800b82a <_puts_r+0x4e>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	059b      	lsls	r3, r3, #22
 800b822:	d402      	bmi.n	800b82a <_puts_r+0x4e>
 800b824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b826:	f000 f989 	bl	800bb3c <__retarget_lock_release_recursive>
 800b82a:	4628      	mov	r0, r5
 800b82c:	bd70      	pop	{r4, r5, r6, pc}
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da04      	bge.n	800b83c <_puts_r+0x60>
 800b832:	69a2      	ldr	r2, [r4, #24]
 800b834:	429a      	cmp	r2, r3
 800b836:	dc17      	bgt.n	800b868 <_puts_r+0x8c>
 800b838:	290a      	cmp	r1, #10
 800b83a:	d015      	beq.n	800b868 <_puts_r+0x8c>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	1c5a      	adds	r2, r3, #1
 800b840:	6022      	str	r2, [r4, #0]
 800b842:	7019      	strb	r1, [r3, #0]
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b84a:	3b01      	subs	r3, #1
 800b84c:	60a3      	str	r3, [r4, #8]
 800b84e:	2900      	cmp	r1, #0
 800b850:	d1ed      	bne.n	800b82e <_puts_r+0x52>
 800b852:	2b00      	cmp	r3, #0
 800b854:	da11      	bge.n	800b87a <_puts_r+0x9e>
 800b856:	4622      	mov	r2, r4
 800b858:	210a      	movs	r1, #10
 800b85a:	4628      	mov	r0, r5
 800b85c:	f000 f85f 	bl	800b91e <__swbuf_r>
 800b860:	3001      	adds	r0, #1
 800b862:	d0d7      	beq.n	800b814 <_puts_r+0x38>
 800b864:	250a      	movs	r5, #10
 800b866:	e7d7      	b.n	800b818 <_puts_r+0x3c>
 800b868:	4622      	mov	r2, r4
 800b86a:	4628      	mov	r0, r5
 800b86c:	f000 f857 	bl	800b91e <__swbuf_r>
 800b870:	3001      	adds	r0, #1
 800b872:	d1e7      	bne.n	800b844 <_puts_r+0x68>
 800b874:	e7ce      	b.n	800b814 <_puts_r+0x38>
 800b876:	3e01      	subs	r6, #1
 800b878:	e7e4      	b.n	800b844 <_puts_r+0x68>
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	1c5a      	adds	r2, r3, #1
 800b87e:	6022      	str	r2, [r4, #0]
 800b880:	220a      	movs	r2, #10
 800b882:	701a      	strb	r2, [r3, #0]
 800b884:	e7ee      	b.n	800b864 <_puts_r+0x88>
	...

0800b888 <puts>:
 800b888:	4b02      	ldr	r3, [pc, #8]	@ (800b894 <puts+0xc>)
 800b88a:	4601      	mov	r1, r0
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	f7ff bfa5 	b.w	800b7dc <_puts_r>
 800b892:	bf00      	nop
 800b894:	2000001c 	.word	0x2000001c

0800b898 <__sread>:
 800b898:	b510      	push	{r4, lr}
 800b89a:	460c      	mov	r4, r1
 800b89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a0:	f000 f8fc 	bl	800ba9c <_read_r>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	bfab      	itete	ge
 800b8a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b8aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b8ac:	181b      	addge	r3, r3, r0
 800b8ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b8b2:	bfac      	ite	ge
 800b8b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b8b6:	81a3      	strhlt	r3, [r4, #12]
 800b8b8:	bd10      	pop	{r4, pc}

0800b8ba <__swrite>:
 800b8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8be:	461f      	mov	r7, r3
 800b8c0:	898b      	ldrh	r3, [r1, #12]
 800b8c2:	05db      	lsls	r3, r3, #23
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	4616      	mov	r6, r2
 800b8ca:	d505      	bpl.n	800b8d8 <__swrite+0x1e>
 800b8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f000 f8d0 	bl	800ba78 <_lseek_r>
 800b8d8:	89a3      	ldrh	r3, [r4, #12]
 800b8da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8e2:	81a3      	strh	r3, [r4, #12]
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	463b      	mov	r3, r7
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ee:	f000 b8e7 	b.w	800bac0 <_write_r>

0800b8f2 <__sseek>:
 800b8f2:	b510      	push	{r4, lr}
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fa:	f000 f8bd 	bl	800ba78 <_lseek_r>
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	bf15      	itete	ne
 800b904:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b906:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b90a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b90e:	81a3      	strheq	r3, [r4, #12]
 800b910:	bf18      	it	ne
 800b912:	81a3      	strhne	r3, [r4, #12]
 800b914:	bd10      	pop	{r4, pc}

0800b916 <__sclose>:
 800b916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b91a:	f000 b89d 	b.w	800ba58 <_close_r>

0800b91e <__swbuf_r>:
 800b91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b920:	460e      	mov	r6, r1
 800b922:	4614      	mov	r4, r2
 800b924:	4605      	mov	r5, r0
 800b926:	b118      	cbz	r0, 800b930 <__swbuf_r+0x12>
 800b928:	6a03      	ldr	r3, [r0, #32]
 800b92a:	b90b      	cbnz	r3, 800b930 <__swbuf_r+0x12>
 800b92c:	f7ff ff0e 	bl	800b74c <__sinit>
 800b930:	69a3      	ldr	r3, [r4, #24]
 800b932:	60a3      	str	r3, [r4, #8]
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	071a      	lsls	r2, r3, #28
 800b938:	d501      	bpl.n	800b93e <__swbuf_r+0x20>
 800b93a:	6923      	ldr	r3, [r4, #16]
 800b93c:	b943      	cbnz	r3, 800b950 <__swbuf_r+0x32>
 800b93e:	4621      	mov	r1, r4
 800b940:	4628      	mov	r0, r5
 800b942:	f000 f82b 	bl	800b99c <__swsetup_r>
 800b946:	b118      	cbz	r0, 800b950 <__swbuf_r+0x32>
 800b948:	f04f 37ff 	mov.w	r7, #4294967295
 800b94c:	4638      	mov	r0, r7
 800b94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b950:	6823      	ldr	r3, [r4, #0]
 800b952:	6922      	ldr	r2, [r4, #16]
 800b954:	1a98      	subs	r0, r3, r2
 800b956:	6963      	ldr	r3, [r4, #20]
 800b958:	b2f6      	uxtb	r6, r6
 800b95a:	4283      	cmp	r3, r0
 800b95c:	4637      	mov	r7, r6
 800b95e:	dc05      	bgt.n	800b96c <__swbuf_r+0x4e>
 800b960:	4621      	mov	r1, r4
 800b962:	4628      	mov	r0, r5
 800b964:	f000 fd38 	bl	800c3d8 <_fflush_r>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d1ed      	bne.n	800b948 <__swbuf_r+0x2a>
 800b96c:	68a3      	ldr	r3, [r4, #8]
 800b96e:	3b01      	subs	r3, #1
 800b970:	60a3      	str	r3, [r4, #8]
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	6022      	str	r2, [r4, #0]
 800b978:	701e      	strb	r6, [r3, #0]
 800b97a:	6962      	ldr	r2, [r4, #20]
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	429a      	cmp	r2, r3
 800b980:	d004      	beq.n	800b98c <__swbuf_r+0x6e>
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	07db      	lsls	r3, r3, #31
 800b986:	d5e1      	bpl.n	800b94c <__swbuf_r+0x2e>
 800b988:	2e0a      	cmp	r6, #10
 800b98a:	d1df      	bne.n	800b94c <__swbuf_r+0x2e>
 800b98c:	4621      	mov	r1, r4
 800b98e:	4628      	mov	r0, r5
 800b990:	f000 fd22 	bl	800c3d8 <_fflush_r>
 800b994:	2800      	cmp	r0, #0
 800b996:	d0d9      	beq.n	800b94c <__swbuf_r+0x2e>
 800b998:	e7d6      	b.n	800b948 <__swbuf_r+0x2a>
	...

0800b99c <__swsetup_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4b29      	ldr	r3, [pc, #164]	@ (800ba44 <__swsetup_r+0xa8>)
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	b118      	cbz	r0, 800b9b0 <__swsetup_r+0x14>
 800b9a8:	6a03      	ldr	r3, [r0, #32]
 800b9aa:	b90b      	cbnz	r3, 800b9b0 <__swsetup_r+0x14>
 800b9ac:	f7ff fece 	bl	800b74c <__sinit>
 800b9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b4:	0719      	lsls	r1, r3, #28
 800b9b6:	d422      	bmi.n	800b9fe <__swsetup_r+0x62>
 800b9b8:	06da      	lsls	r2, r3, #27
 800b9ba:	d407      	bmi.n	800b9cc <__swsetup_r+0x30>
 800b9bc:	2209      	movs	r2, #9
 800b9be:	602a      	str	r2, [r5, #0]
 800b9c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ca:	e033      	b.n	800ba34 <__swsetup_r+0x98>
 800b9cc:	0758      	lsls	r0, r3, #29
 800b9ce:	d512      	bpl.n	800b9f6 <__swsetup_r+0x5a>
 800b9d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9d2:	b141      	cbz	r1, 800b9e6 <__swsetup_r+0x4a>
 800b9d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9d8:	4299      	cmp	r1, r3
 800b9da:	d002      	beq.n	800b9e2 <__swsetup_r+0x46>
 800b9dc:	4628      	mov	r0, r5
 800b9de:	f000 f8af 	bl	800bb40 <_free_r>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	6063      	str	r3, [r4, #4]
 800b9f2:	6923      	ldr	r3, [r4, #16]
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	f043 0308 	orr.w	r3, r3, #8
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	6923      	ldr	r3, [r4, #16]
 800ba00:	b94b      	cbnz	r3, 800ba16 <__swsetup_r+0x7a>
 800ba02:	89a3      	ldrh	r3, [r4, #12]
 800ba04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba0c:	d003      	beq.n	800ba16 <__swsetup_r+0x7a>
 800ba0e:	4621      	mov	r1, r4
 800ba10:	4628      	mov	r0, r5
 800ba12:	f000 fd2f 	bl	800c474 <__smakebuf_r>
 800ba16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba1a:	f013 0201 	ands.w	r2, r3, #1
 800ba1e:	d00a      	beq.n	800ba36 <__swsetup_r+0x9a>
 800ba20:	2200      	movs	r2, #0
 800ba22:	60a2      	str	r2, [r4, #8]
 800ba24:	6962      	ldr	r2, [r4, #20]
 800ba26:	4252      	negs	r2, r2
 800ba28:	61a2      	str	r2, [r4, #24]
 800ba2a:	6922      	ldr	r2, [r4, #16]
 800ba2c:	b942      	cbnz	r2, 800ba40 <__swsetup_r+0xa4>
 800ba2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba32:	d1c5      	bne.n	800b9c0 <__swsetup_r+0x24>
 800ba34:	bd38      	pop	{r3, r4, r5, pc}
 800ba36:	0799      	lsls	r1, r3, #30
 800ba38:	bf58      	it	pl
 800ba3a:	6962      	ldrpl	r2, [r4, #20]
 800ba3c:	60a2      	str	r2, [r4, #8]
 800ba3e:	e7f4      	b.n	800ba2a <__swsetup_r+0x8e>
 800ba40:	2000      	movs	r0, #0
 800ba42:	e7f7      	b.n	800ba34 <__swsetup_r+0x98>
 800ba44:	2000001c 	.word	0x2000001c

0800ba48 <memset>:
 800ba48:	4402      	add	r2, r0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d100      	bne.n	800ba52 <memset+0xa>
 800ba50:	4770      	bx	lr
 800ba52:	f803 1b01 	strb.w	r1, [r3], #1
 800ba56:	e7f9      	b.n	800ba4c <memset+0x4>

0800ba58 <_close_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d06      	ldr	r5, [pc, #24]	@ (800ba74 <_close_r+0x1c>)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	602b      	str	r3, [r5, #0]
 800ba64:	f7f5 fef1 	bl	800184a <_close>
 800ba68:	1c43      	adds	r3, r0, #1
 800ba6a:	d102      	bne.n	800ba72 <_close_r+0x1a>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	b103      	cbz	r3, 800ba72 <_close_r+0x1a>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	20001b60 	.word	0x20001b60

0800ba78 <_lseek_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d07      	ldr	r5, [pc, #28]	@ (800ba98 <_lseek_r+0x20>)
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	4608      	mov	r0, r1
 800ba80:	4611      	mov	r1, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	602a      	str	r2, [r5, #0]
 800ba86:	461a      	mov	r2, r3
 800ba88:	f7f5 ff06 	bl	8001898 <_lseek>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_lseek_r+0x1e>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_lseek_r+0x1e>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	20001b60 	.word	0x20001b60

0800ba9c <_read_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d07      	ldr	r5, [pc, #28]	@ (800babc <_read_r+0x20>)
 800baa0:	4604      	mov	r4, r0
 800baa2:	4608      	mov	r0, r1
 800baa4:	4611      	mov	r1, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7f5 fe94 	bl	80017d8 <_read>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_read_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_read_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20001b60 	.word	0x20001b60

0800bac0 <_write_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d07      	ldr	r5, [pc, #28]	@ (800bae0 <_write_r+0x20>)
 800bac4:	4604      	mov	r4, r0
 800bac6:	4608      	mov	r0, r1
 800bac8:	4611      	mov	r1, r2
 800baca:	2200      	movs	r2, #0
 800bacc:	602a      	str	r2, [r5, #0]
 800bace:	461a      	mov	r2, r3
 800bad0:	f7f5 fe9f 	bl	8001812 <_write>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_write_r+0x1e>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_write_r+0x1e>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	20001b60 	.word	0x20001b60

0800bae4 <__errno>:
 800bae4:	4b01      	ldr	r3, [pc, #4]	@ (800baec <__errno+0x8>)
 800bae6:	6818      	ldr	r0, [r3, #0]
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	2000001c 	.word	0x2000001c

0800baf0 <__libc_init_array>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	4d0d      	ldr	r5, [pc, #52]	@ (800bb28 <__libc_init_array+0x38>)
 800baf4:	4c0d      	ldr	r4, [pc, #52]	@ (800bb2c <__libc_init_array+0x3c>)
 800baf6:	1b64      	subs	r4, r4, r5
 800baf8:	10a4      	asrs	r4, r4, #2
 800bafa:	2600      	movs	r6, #0
 800bafc:	42a6      	cmp	r6, r4
 800bafe:	d109      	bne.n	800bb14 <__libc_init_array+0x24>
 800bb00:	4d0b      	ldr	r5, [pc, #44]	@ (800bb30 <__libc_init_array+0x40>)
 800bb02:	4c0c      	ldr	r4, [pc, #48]	@ (800bb34 <__libc_init_array+0x44>)
 800bb04:	f000 fd24 	bl	800c550 <_init>
 800bb08:	1b64      	subs	r4, r4, r5
 800bb0a:	10a4      	asrs	r4, r4, #2
 800bb0c:	2600      	movs	r6, #0
 800bb0e:	42a6      	cmp	r6, r4
 800bb10:	d105      	bne.n	800bb1e <__libc_init_array+0x2e>
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb18:	4798      	blx	r3
 800bb1a:	3601      	adds	r6, #1
 800bb1c:	e7ee      	b.n	800bafc <__libc_init_array+0xc>
 800bb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb22:	4798      	blx	r3
 800bb24:	3601      	adds	r6, #1
 800bb26:	e7f2      	b.n	800bb0e <__libc_init_array+0x1e>
 800bb28:	0800cba4 	.word	0x0800cba4
 800bb2c:	0800cba4 	.word	0x0800cba4
 800bb30:	0800cba4 	.word	0x0800cba4
 800bb34:	0800cba8 	.word	0x0800cba8

0800bb38 <__retarget_lock_init_recursive>:
 800bb38:	4770      	bx	lr

0800bb3a <__retarget_lock_acquire_recursive>:
 800bb3a:	4770      	bx	lr

0800bb3c <__retarget_lock_release_recursive>:
 800bb3c:	4770      	bx	lr
	...

0800bb40 <_free_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4605      	mov	r5, r0
 800bb44:	2900      	cmp	r1, #0
 800bb46:	d041      	beq.n	800bbcc <_free_r+0x8c>
 800bb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb4c:	1f0c      	subs	r4, r1, #4
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bfb8      	it	lt
 800bb52:	18e4      	addlt	r4, r4, r3
 800bb54:	f000 f8e0 	bl	800bd18 <__malloc_lock>
 800bb58:	4a1d      	ldr	r2, [pc, #116]	@ (800bbd0 <_free_r+0x90>)
 800bb5a:	6813      	ldr	r3, [r2, #0]
 800bb5c:	b933      	cbnz	r3, 800bb6c <_free_r+0x2c>
 800bb5e:	6063      	str	r3, [r4, #4]
 800bb60:	6014      	str	r4, [r2, #0]
 800bb62:	4628      	mov	r0, r5
 800bb64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb68:	f000 b8dc 	b.w	800bd24 <__malloc_unlock>
 800bb6c:	42a3      	cmp	r3, r4
 800bb6e:	d908      	bls.n	800bb82 <_free_r+0x42>
 800bb70:	6820      	ldr	r0, [r4, #0]
 800bb72:	1821      	adds	r1, r4, r0
 800bb74:	428b      	cmp	r3, r1
 800bb76:	bf01      	itttt	eq
 800bb78:	6819      	ldreq	r1, [r3, #0]
 800bb7a:	685b      	ldreq	r3, [r3, #4]
 800bb7c:	1809      	addeq	r1, r1, r0
 800bb7e:	6021      	streq	r1, [r4, #0]
 800bb80:	e7ed      	b.n	800bb5e <_free_r+0x1e>
 800bb82:	461a      	mov	r2, r3
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	b10b      	cbz	r3, 800bb8c <_free_r+0x4c>
 800bb88:	42a3      	cmp	r3, r4
 800bb8a:	d9fa      	bls.n	800bb82 <_free_r+0x42>
 800bb8c:	6811      	ldr	r1, [r2, #0]
 800bb8e:	1850      	adds	r0, r2, r1
 800bb90:	42a0      	cmp	r0, r4
 800bb92:	d10b      	bne.n	800bbac <_free_r+0x6c>
 800bb94:	6820      	ldr	r0, [r4, #0]
 800bb96:	4401      	add	r1, r0
 800bb98:	1850      	adds	r0, r2, r1
 800bb9a:	4283      	cmp	r3, r0
 800bb9c:	6011      	str	r1, [r2, #0]
 800bb9e:	d1e0      	bne.n	800bb62 <_free_r+0x22>
 800bba0:	6818      	ldr	r0, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	6053      	str	r3, [r2, #4]
 800bba6:	4408      	add	r0, r1
 800bba8:	6010      	str	r0, [r2, #0]
 800bbaa:	e7da      	b.n	800bb62 <_free_r+0x22>
 800bbac:	d902      	bls.n	800bbb4 <_free_r+0x74>
 800bbae:	230c      	movs	r3, #12
 800bbb0:	602b      	str	r3, [r5, #0]
 800bbb2:	e7d6      	b.n	800bb62 <_free_r+0x22>
 800bbb4:	6820      	ldr	r0, [r4, #0]
 800bbb6:	1821      	adds	r1, r4, r0
 800bbb8:	428b      	cmp	r3, r1
 800bbba:	bf04      	itt	eq
 800bbbc:	6819      	ldreq	r1, [r3, #0]
 800bbbe:	685b      	ldreq	r3, [r3, #4]
 800bbc0:	6063      	str	r3, [r4, #4]
 800bbc2:	bf04      	itt	eq
 800bbc4:	1809      	addeq	r1, r1, r0
 800bbc6:	6021      	streq	r1, [r4, #0]
 800bbc8:	6054      	str	r4, [r2, #4]
 800bbca:	e7ca      	b.n	800bb62 <_free_r+0x22>
 800bbcc:	bd38      	pop	{r3, r4, r5, pc}
 800bbce:	bf00      	nop
 800bbd0:	20001b6c 	.word	0x20001b6c

0800bbd4 <sbrk_aligned>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	4e0f      	ldr	r6, [pc, #60]	@ (800bc14 <sbrk_aligned+0x40>)
 800bbd8:	460c      	mov	r4, r1
 800bbda:	6831      	ldr	r1, [r6, #0]
 800bbdc:	4605      	mov	r5, r0
 800bbde:	b911      	cbnz	r1, 800bbe6 <sbrk_aligned+0x12>
 800bbe0:	f000 fca6 	bl	800c530 <_sbrk_r>
 800bbe4:	6030      	str	r0, [r6, #0]
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f000 fca1 	bl	800c530 <_sbrk_r>
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	d103      	bne.n	800bbfa <sbrk_aligned+0x26>
 800bbf2:	f04f 34ff 	mov.w	r4, #4294967295
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	bd70      	pop	{r4, r5, r6, pc}
 800bbfa:	1cc4      	adds	r4, r0, #3
 800bbfc:	f024 0403 	bic.w	r4, r4, #3
 800bc00:	42a0      	cmp	r0, r4
 800bc02:	d0f8      	beq.n	800bbf6 <sbrk_aligned+0x22>
 800bc04:	1a21      	subs	r1, r4, r0
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 fc92 	bl	800c530 <_sbrk_r>
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d1f2      	bne.n	800bbf6 <sbrk_aligned+0x22>
 800bc10:	e7ef      	b.n	800bbf2 <sbrk_aligned+0x1e>
 800bc12:	bf00      	nop
 800bc14:	20001b68 	.word	0x20001b68

0800bc18 <_malloc_r>:
 800bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	1ccd      	adds	r5, r1, #3
 800bc1e:	f025 0503 	bic.w	r5, r5, #3
 800bc22:	3508      	adds	r5, #8
 800bc24:	2d0c      	cmp	r5, #12
 800bc26:	bf38      	it	cc
 800bc28:	250c      	movcc	r5, #12
 800bc2a:	2d00      	cmp	r5, #0
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	db01      	blt.n	800bc34 <_malloc_r+0x1c>
 800bc30:	42a9      	cmp	r1, r5
 800bc32:	d904      	bls.n	800bc3e <_malloc_r+0x26>
 800bc34:	230c      	movs	r3, #12
 800bc36:	6033      	str	r3, [r6, #0]
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd14 <_malloc_r+0xfc>
 800bc42:	f000 f869 	bl	800bd18 <__malloc_lock>
 800bc46:	f8d8 3000 	ldr.w	r3, [r8]
 800bc4a:	461c      	mov	r4, r3
 800bc4c:	bb44      	cbnz	r4, 800bca0 <_malloc_r+0x88>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4630      	mov	r0, r6
 800bc52:	f7ff ffbf 	bl	800bbd4 <sbrk_aligned>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	4604      	mov	r4, r0
 800bc5a:	d158      	bne.n	800bd0e <_malloc_r+0xf6>
 800bc5c:	f8d8 4000 	ldr.w	r4, [r8]
 800bc60:	4627      	mov	r7, r4
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	d143      	bne.n	800bcee <_malloc_r+0xd6>
 800bc66:	2c00      	cmp	r4, #0
 800bc68:	d04b      	beq.n	800bd02 <_malloc_r+0xea>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	4639      	mov	r1, r7
 800bc6e:	4630      	mov	r0, r6
 800bc70:	eb04 0903 	add.w	r9, r4, r3
 800bc74:	f000 fc5c 	bl	800c530 <_sbrk_r>
 800bc78:	4581      	cmp	r9, r0
 800bc7a:	d142      	bne.n	800bd02 <_malloc_r+0xea>
 800bc7c:	6821      	ldr	r1, [r4, #0]
 800bc7e:	1a6d      	subs	r5, r5, r1
 800bc80:	4629      	mov	r1, r5
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7ff ffa6 	bl	800bbd4 <sbrk_aligned>
 800bc88:	3001      	adds	r0, #1
 800bc8a:	d03a      	beq.n	800bd02 <_malloc_r+0xea>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	442b      	add	r3, r5
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	f8d8 3000 	ldr.w	r3, [r8]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	bb62      	cbnz	r2, 800bcf4 <_malloc_r+0xdc>
 800bc9a:	f8c8 7000 	str.w	r7, [r8]
 800bc9e:	e00f      	b.n	800bcc0 <_malloc_r+0xa8>
 800bca0:	6822      	ldr	r2, [r4, #0]
 800bca2:	1b52      	subs	r2, r2, r5
 800bca4:	d420      	bmi.n	800bce8 <_malloc_r+0xd0>
 800bca6:	2a0b      	cmp	r2, #11
 800bca8:	d917      	bls.n	800bcda <_malloc_r+0xc2>
 800bcaa:	1961      	adds	r1, r4, r5
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	6025      	str	r5, [r4, #0]
 800bcb0:	bf18      	it	ne
 800bcb2:	6059      	strne	r1, [r3, #4]
 800bcb4:	6863      	ldr	r3, [r4, #4]
 800bcb6:	bf08      	it	eq
 800bcb8:	f8c8 1000 	streq.w	r1, [r8]
 800bcbc:	5162      	str	r2, [r4, r5]
 800bcbe:	604b      	str	r3, [r1, #4]
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f000 f82f 	bl	800bd24 <__malloc_unlock>
 800bcc6:	f104 000b 	add.w	r0, r4, #11
 800bcca:	1d23      	adds	r3, r4, #4
 800bccc:	f020 0007 	bic.w	r0, r0, #7
 800bcd0:	1ac2      	subs	r2, r0, r3
 800bcd2:	bf1c      	itt	ne
 800bcd4:	1a1b      	subne	r3, r3, r0
 800bcd6:	50a3      	strne	r3, [r4, r2]
 800bcd8:	e7af      	b.n	800bc3a <_malloc_r+0x22>
 800bcda:	6862      	ldr	r2, [r4, #4]
 800bcdc:	42a3      	cmp	r3, r4
 800bcde:	bf0c      	ite	eq
 800bce0:	f8c8 2000 	streq.w	r2, [r8]
 800bce4:	605a      	strne	r2, [r3, #4]
 800bce6:	e7eb      	b.n	800bcc0 <_malloc_r+0xa8>
 800bce8:	4623      	mov	r3, r4
 800bcea:	6864      	ldr	r4, [r4, #4]
 800bcec:	e7ae      	b.n	800bc4c <_malloc_r+0x34>
 800bcee:	463c      	mov	r4, r7
 800bcf0:	687f      	ldr	r7, [r7, #4]
 800bcf2:	e7b6      	b.n	800bc62 <_malloc_r+0x4a>
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	d1fb      	bne.n	800bcf4 <_malloc_r+0xdc>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6053      	str	r3, [r2, #4]
 800bd00:	e7de      	b.n	800bcc0 <_malloc_r+0xa8>
 800bd02:	230c      	movs	r3, #12
 800bd04:	6033      	str	r3, [r6, #0]
 800bd06:	4630      	mov	r0, r6
 800bd08:	f000 f80c 	bl	800bd24 <__malloc_unlock>
 800bd0c:	e794      	b.n	800bc38 <_malloc_r+0x20>
 800bd0e:	6005      	str	r5, [r0, #0]
 800bd10:	e7d6      	b.n	800bcc0 <_malloc_r+0xa8>
 800bd12:	bf00      	nop
 800bd14:	20001b6c 	.word	0x20001b6c

0800bd18 <__malloc_lock>:
 800bd18:	4801      	ldr	r0, [pc, #4]	@ (800bd20 <__malloc_lock+0x8>)
 800bd1a:	f7ff bf0e 	b.w	800bb3a <__retarget_lock_acquire_recursive>
 800bd1e:	bf00      	nop
 800bd20:	20001b64 	.word	0x20001b64

0800bd24 <__malloc_unlock>:
 800bd24:	4801      	ldr	r0, [pc, #4]	@ (800bd2c <__malloc_unlock+0x8>)
 800bd26:	f7ff bf09 	b.w	800bb3c <__retarget_lock_release_recursive>
 800bd2a:	bf00      	nop
 800bd2c:	20001b64 	.word	0x20001b64

0800bd30 <__sfputc_r>:
 800bd30:	6893      	ldr	r3, [r2, #8]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	b410      	push	{r4}
 800bd38:	6093      	str	r3, [r2, #8]
 800bd3a:	da08      	bge.n	800bd4e <__sfputc_r+0x1e>
 800bd3c:	6994      	ldr	r4, [r2, #24]
 800bd3e:	42a3      	cmp	r3, r4
 800bd40:	db01      	blt.n	800bd46 <__sfputc_r+0x16>
 800bd42:	290a      	cmp	r1, #10
 800bd44:	d103      	bne.n	800bd4e <__sfputc_r+0x1e>
 800bd46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd4a:	f7ff bde8 	b.w	800b91e <__swbuf_r>
 800bd4e:	6813      	ldr	r3, [r2, #0]
 800bd50:	1c58      	adds	r0, r3, #1
 800bd52:	6010      	str	r0, [r2, #0]
 800bd54:	7019      	strb	r1, [r3, #0]
 800bd56:	4608      	mov	r0, r1
 800bd58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <__sfputs_r>:
 800bd5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd60:	4606      	mov	r6, r0
 800bd62:	460f      	mov	r7, r1
 800bd64:	4614      	mov	r4, r2
 800bd66:	18d5      	adds	r5, r2, r3
 800bd68:	42ac      	cmp	r4, r5
 800bd6a:	d101      	bne.n	800bd70 <__sfputs_r+0x12>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e007      	b.n	800bd80 <__sfputs_r+0x22>
 800bd70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd74:	463a      	mov	r2, r7
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7ff ffda 	bl	800bd30 <__sfputc_r>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d1f3      	bne.n	800bd68 <__sfputs_r+0xa>
 800bd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd84 <_vfiprintf_r>:
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	460d      	mov	r5, r1
 800bd8a:	b09d      	sub	sp, #116	@ 0x74
 800bd8c:	4614      	mov	r4, r2
 800bd8e:	4698      	mov	r8, r3
 800bd90:	4606      	mov	r6, r0
 800bd92:	b118      	cbz	r0, 800bd9c <_vfiprintf_r+0x18>
 800bd94:	6a03      	ldr	r3, [r0, #32]
 800bd96:	b90b      	cbnz	r3, 800bd9c <_vfiprintf_r+0x18>
 800bd98:	f7ff fcd8 	bl	800b74c <__sinit>
 800bd9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd9e:	07d9      	lsls	r1, r3, #31
 800bda0:	d405      	bmi.n	800bdae <_vfiprintf_r+0x2a>
 800bda2:	89ab      	ldrh	r3, [r5, #12]
 800bda4:	059a      	lsls	r2, r3, #22
 800bda6:	d402      	bmi.n	800bdae <_vfiprintf_r+0x2a>
 800bda8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdaa:	f7ff fec6 	bl	800bb3a <__retarget_lock_acquire_recursive>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	071b      	lsls	r3, r3, #28
 800bdb2:	d501      	bpl.n	800bdb8 <_vfiprintf_r+0x34>
 800bdb4:	692b      	ldr	r3, [r5, #16]
 800bdb6:	b99b      	cbnz	r3, 800bde0 <_vfiprintf_r+0x5c>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7ff fdee 	bl	800b99c <__swsetup_r>
 800bdc0:	b170      	cbz	r0, 800bde0 <_vfiprintf_r+0x5c>
 800bdc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdc4:	07dc      	lsls	r4, r3, #31
 800bdc6:	d504      	bpl.n	800bdd2 <_vfiprintf_r+0x4e>
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	b01d      	add	sp, #116	@ 0x74
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd2:	89ab      	ldrh	r3, [r5, #12]
 800bdd4:	0598      	lsls	r0, r3, #22
 800bdd6:	d4f7      	bmi.n	800bdc8 <_vfiprintf_r+0x44>
 800bdd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdda:	f7ff feaf 	bl	800bb3c <__retarget_lock_release_recursive>
 800bdde:	e7f3      	b.n	800bdc8 <_vfiprintf_r+0x44>
 800bde0:	2300      	movs	r3, #0
 800bde2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bde4:	2320      	movs	r3, #32
 800bde6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdea:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdee:	2330      	movs	r3, #48	@ 0x30
 800bdf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bfa0 <_vfiprintf_r+0x21c>
 800bdf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdf8:	f04f 0901 	mov.w	r9, #1
 800bdfc:	4623      	mov	r3, r4
 800bdfe:	469a      	mov	sl, r3
 800be00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be04:	b10a      	cbz	r2, 800be0a <_vfiprintf_r+0x86>
 800be06:	2a25      	cmp	r2, #37	@ 0x25
 800be08:	d1f9      	bne.n	800bdfe <_vfiprintf_r+0x7a>
 800be0a:	ebba 0b04 	subs.w	fp, sl, r4
 800be0e:	d00b      	beq.n	800be28 <_vfiprintf_r+0xa4>
 800be10:	465b      	mov	r3, fp
 800be12:	4622      	mov	r2, r4
 800be14:	4629      	mov	r1, r5
 800be16:	4630      	mov	r0, r6
 800be18:	f7ff ffa1 	bl	800bd5e <__sfputs_r>
 800be1c:	3001      	adds	r0, #1
 800be1e:	f000 80a7 	beq.w	800bf70 <_vfiprintf_r+0x1ec>
 800be22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be24:	445a      	add	r2, fp
 800be26:	9209      	str	r2, [sp, #36]	@ 0x24
 800be28:	f89a 3000 	ldrb.w	r3, [sl]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 809f 	beq.w	800bf70 <_vfiprintf_r+0x1ec>
 800be32:	2300      	movs	r3, #0
 800be34:	f04f 32ff 	mov.w	r2, #4294967295
 800be38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be3c:	f10a 0a01 	add.w	sl, sl, #1
 800be40:	9304      	str	r3, [sp, #16]
 800be42:	9307      	str	r3, [sp, #28]
 800be44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be48:	931a      	str	r3, [sp, #104]	@ 0x68
 800be4a:	4654      	mov	r4, sl
 800be4c:	2205      	movs	r2, #5
 800be4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be52:	4853      	ldr	r0, [pc, #332]	@ (800bfa0 <_vfiprintf_r+0x21c>)
 800be54:	f7f4 f9bc 	bl	80001d0 <memchr>
 800be58:	9a04      	ldr	r2, [sp, #16]
 800be5a:	b9d8      	cbnz	r0, 800be94 <_vfiprintf_r+0x110>
 800be5c:	06d1      	lsls	r1, r2, #27
 800be5e:	bf44      	itt	mi
 800be60:	2320      	movmi	r3, #32
 800be62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be66:	0713      	lsls	r3, r2, #28
 800be68:	bf44      	itt	mi
 800be6a:	232b      	movmi	r3, #43	@ 0x2b
 800be6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be70:	f89a 3000 	ldrb.w	r3, [sl]
 800be74:	2b2a      	cmp	r3, #42	@ 0x2a
 800be76:	d015      	beq.n	800bea4 <_vfiprintf_r+0x120>
 800be78:	9a07      	ldr	r2, [sp, #28]
 800be7a:	4654      	mov	r4, sl
 800be7c:	2000      	movs	r0, #0
 800be7e:	f04f 0c0a 	mov.w	ip, #10
 800be82:	4621      	mov	r1, r4
 800be84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be88:	3b30      	subs	r3, #48	@ 0x30
 800be8a:	2b09      	cmp	r3, #9
 800be8c:	d94b      	bls.n	800bf26 <_vfiprintf_r+0x1a2>
 800be8e:	b1b0      	cbz	r0, 800bebe <_vfiprintf_r+0x13a>
 800be90:	9207      	str	r2, [sp, #28]
 800be92:	e014      	b.n	800bebe <_vfiprintf_r+0x13a>
 800be94:	eba0 0308 	sub.w	r3, r0, r8
 800be98:	fa09 f303 	lsl.w	r3, r9, r3
 800be9c:	4313      	orrs	r3, r2
 800be9e:	9304      	str	r3, [sp, #16]
 800bea0:	46a2      	mov	sl, r4
 800bea2:	e7d2      	b.n	800be4a <_vfiprintf_r+0xc6>
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	1d19      	adds	r1, r3, #4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	9103      	str	r1, [sp, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	bfbb      	ittet	lt
 800beb0:	425b      	neglt	r3, r3
 800beb2:	f042 0202 	orrlt.w	r2, r2, #2
 800beb6:	9307      	strge	r3, [sp, #28]
 800beb8:	9307      	strlt	r3, [sp, #28]
 800beba:	bfb8      	it	lt
 800bebc:	9204      	strlt	r2, [sp, #16]
 800bebe:	7823      	ldrb	r3, [r4, #0]
 800bec0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bec2:	d10a      	bne.n	800beda <_vfiprintf_r+0x156>
 800bec4:	7863      	ldrb	r3, [r4, #1]
 800bec6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bec8:	d132      	bne.n	800bf30 <_vfiprintf_r+0x1ac>
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	1d1a      	adds	r2, r3, #4
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	9203      	str	r2, [sp, #12]
 800bed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bed6:	3402      	adds	r4, #2
 800bed8:	9305      	str	r3, [sp, #20]
 800beda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfb0 <_vfiprintf_r+0x22c>
 800bede:	7821      	ldrb	r1, [r4, #0]
 800bee0:	2203      	movs	r2, #3
 800bee2:	4650      	mov	r0, sl
 800bee4:	f7f4 f974 	bl	80001d0 <memchr>
 800bee8:	b138      	cbz	r0, 800befa <_vfiprintf_r+0x176>
 800beea:	9b04      	ldr	r3, [sp, #16]
 800beec:	eba0 000a 	sub.w	r0, r0, sl
 800bef0:	2240      	movs	r2, #64	@ 0x40
 800bef2:	4082      	lsls	r2, r0
 800bef4:	4313      	orrs	r3, r2
 800bef6:	3401      	adds	r4, #1
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800befe:	4829      	ldr	r0, [pc, #164]	@ (800bfa4 <_vfiprintf_r+0x220>)
 800bf00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf04:	2206      	movs	r2, #6
 800bf06:	f7f4 f963 	bl	80001d0 <memchr>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d03f      	beq.n	800bf8e <_vfiprintf_r+0x20a>
 800bf0e:	4b26      	ldr	r3, [pc, #152]	@ (800bfa8 <_vfiprintf_r+0x224>)
 800bf10:	bb1b      	cbnz	r3, 800bf5a <_vfiprintf_r+0x1d6>
 800bf12:	9b03      	ldr	r3, [sp, #12]
 800bf14:	3307      	adds	r3, #7
 800bf16:	f023 0307 	bic.w	r3, r3, #7
 800bf1a:	3308      	adds	r3, #8
 800bf1c:	9303      	str	r3, [sp, #12]
 800bf1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf20:	443b      	add	r3, r7
 800bf22:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf24:	e76a      	b.n	800bdfc <_vfiprintf_r+0x78>
 800bf26:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	e7a8      	b.n	800be82 <_vfiprintf_r+0xfe>
 800bf30:	2300      	movs	r3, #0
 800bf32:	3401      	adds	r4, #1
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	4619      	mov	r1, r3
 800bf38:	f04f 0c0a 	mov.w	ip, #10
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf42:	3a30      	subs	r2, #48	@ 0x30
 800bf44:	2a09      	cmp	r2, #9
 800bf46:	d903      	bls.n	800bf50 <_vfiprintf_r+0x1cc>
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0c6      	beq.n	800beda <_vfiprintf_r+0x156>
 800bf4c:	9105      	str	r1, [sp, #20]
 800bf4e:	e7c4      	b.n	800beda <_vfiprintf_r+0x156>
 800bf50:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf54:	4604      	mov	r4, r0
 800bf56:	2301      	movs	r3, #1
 800bf58:	e7f0      	b.n	800bf3c <_vfiprintf_r+0x1b8>
 800bf5a:	ab03      	add	r3, sp, #12
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	462a      	mov	r2, r5
 800bf60:	4b12      	ldr	r3, [pc, #72]	@ (800bfac <_vfiprintf_r+0x228>)
 800bf62:	a904      	add	r1, sp, #16
 800bf64:	4630      	mov	r0, r6
 800bf66:	f3af 8000 	nop.w
 800bf6a:	4607      	mov	r7, r0
 800bf6c:	1c78      	adds	r0, r7, #1
 800bf6e:	d1d6      	bne.n	800bf1e <_vfiprintf_r+0x19a>
 800bf70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf72:	07d9      	lsls	r1, r3, #31
 800bf74:	d405      	bmi.n	800bf82 <_vfiprintf_r+0x1fe>
 800bf76:	89ab      	ldrh	r3, [r5, #12]
 800bf78:	059a      	lsls	r2, r3, #22
 800bf7a:	d402      	bmi.n	800bf82 <_vfiprintf_r+0x1fe>
 800bf7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf7e:	f7ff fddd 	bl	800bb3c <__retarget_lock_release_recursive>
 800bf82:	89ab      	ldrh	r3, [r5, #12]
 800bf84:	065b      	lsls	r3, r3, #25
 800bf86:	f53f af1f 	bmi.w	800bdc8 <_vfiprintf_r+0x44>
 800bf8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf8c:	e71e      	b.n	800bdcc <_vfiprintf_r+0x48>
 800bf8e:	ab03      	add	r3, sp, #12
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	462a      	mov	r2, r5
 800bf94:	4b05      	ldr	r3, [pc, #20]	@ (800bfac <_vfiprintf_r+0x228>)
 800bf96:	a904      	add	r1, sp, #16
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f000 f879 	bl	800c090 <_printf_i>
 800bf9e:	e7e4      	b.n	800bf6a <_vfiprintf_r+0x1e6>
 800bfa0:	0800cb68 	.word	0x0800cb68
 800bfa4:	0800cb72 	.word	0x0800cb72
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	0800bd5f 	.word	0x0800bd5f
 800bfb0:	0800cb6e 	.word	0x0800cb6e

0800bfb4 <_printf_common>:
 800bfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb8:	4616      	mov	r6, r2
 800bfba:	4698      	mov	r8, r3
 800bfbc:	688a      	ldr	r2, [r1, #8]
 800bfbe:	690b      	ldr	r3, [r1, #16]
 800bfc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	bfb8      	it	lt
 800bfc8:	4613      	movlt	r3, r2
 800bfca:	6033      	str	r3, [r6, #0]
 800bfcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	b10a      	cbz	r2, 800bfda <_printf_common+0x26>
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	6033      	str	r3, [r6, #0]
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	0699      	lsls	r1, r3, #26
 800bfde:	bf42      	ittt	mi
 800bfe0:	6833      	ldrmi	r3, [r6, #0]
 800bfe2:	3302      	addmi	r3, #2
 800bfe4:	6033      	strmi	r3, [r6, #0]
 800bfe6:	6825      	ldr	r5, [r4, #0]
 800bfe8:	f015 0506 	ands.w	r5, r5, #6
 800bfec:	d106      	bne.n	800bffc <_printf_common+0x48>
 800bfee:	f104 0a19 	add.w	sl, r4, #25
 800bff2:	68e3      	ldr	r3, [r4, #12]
 800bff4:	6832      	ldr	r2, [r6, #0]
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	42ab      	cmp	r3, r5
 800bffa:	dc26      	bgt.n	800c04a <_printf_common+0x96>
 800bffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c000:	6822      	ldr	r2, [r4, #0]
 800c002:	3b00      	subs	r3, #0
 800c004:	bf18      	it	ne
 800c006:	2301      	movne	r3, #1
 800c008:	0692      	lsls	r2, r2, #26
 800c00a:	d42b      	bmi.n	800c064 <_printf_common+0xb0>
 800c00c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c010:	4641      	mov	r1, r8
 800c012:	4638      	mov	r0, r7
 800c014:	47c8      	blx	r9
 800c016:	3001      	adds	r0, #1
 800c018:	d01e      	beq.n	800c058 <_printf_common+0xa4>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	6922      	ldr	r2, [r4, #16]
 800c01e:	f003 0306 	and.w	r3, r3, #6
 800c022:	2b04      	cmp	r3, #4
 800c024:	bf02      	ittt	eq
 800c026:	68e5      	ldreq	r5, [r4, #12]
 800c028:	6833      	ldreq	r3, [r6, #0]
 800c02a:	1aed      	subeq	r5, r5, r3
 800c02c:	68a3      	ldr	r3, [r4, #8]
 800c02e:	bf0c      	ite	eq
 800c030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c034:	2500      	movne	r5, #0
 800c036:	4293      	cmp	r3, r2
 800c038:	bfc4      	itt	gt
 800c03a:	1a9b      	subgt	r3, r3, r2
 800c03c:	18ed      	addgt	r5, r5, r3
 800c03e:	2600      	movs	r6, #0
 800c040:	341a      	adds	r4, #26
 800c042:	42b5      	cmp	r5, r6
 800c044:	d11a      	bne.n	800c07c <_printf_common+0xc8>
 800c046:	2000      	movs	r0, #0
 800c048:	e008      	b.n	800c05c <_printf_common+0xa8>
 800c04a:	2301      	movs	r3, #1
 800c04c:	4652      	mov	r2, sl
 800c04e:	4641      	mov	r1, r8
 800c050:	4638      	mov	r0, r7
 800c052:	47c8      	blx	r9
 800c054:	3001      	adds	r0, #1
 800c056:	d103      	bne.n	800c060 <_printf_common+0xac>
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c060:	3501      	adds	r5, #1
 800c062:	e7c6      	b.n	800bff2 <_printf_common+0x3e>
 800c064:	18e1      	adds	r1, r4, r3
 800c066:	1c5a      	adds	r2, r3, #1
 800c068:	2030      	movs	r0, #48	@ 0x30
 800c06a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c06e:	4422      	add	r2, r4
 800c070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c078:	3302      	adds	r3, #2
 800c07a:	e7c7      	b.n	800c00c <_printf_common+0x58>
 800c07c:	2301      	movs	r3, #1
 800c07e:	4622      	mov	r2, r4
 800c080:	4641      	mov	r1, r8
 800c082:	4638      	mov	r0, r7
 800c084:	47c8      	blx	r9
 800c086:	3001      	adds	r0, #1
 800c088:	d0e6      	beq.n	800c058 <_printf_common+0xa4>
 800c08a:	3601      	adds	r6, #1
 800c08c:	e7d9      	b.n	800c042 <_printf_common+0x8e>
	...

0800c090 <_printf_i>:
 800c090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	7e0f      	ldrb	r7, [r1, #24]
 800c096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c098:	2f78      	cmp	r7, #120	@ 0x78
 800c09a:	4691      	mov	r9, r2
 800c09c:	4680      	mov	r8, r0
 800c09e:	460c      	mov	r4, r1
 800c0a0:	469a      	mov	sl, r3
 800c0a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c0a6:	d807      	bhi.n	800c0b8 <_printf_i+0x28>
 800c0a8:	2f62      	cmp	r7, #98	@ 0x62
 800c0aa:	d80a      	bhi.n	800c0c2 <_printf_i+0x32>
 800c0ac:	2f00      	cmp	r7, #0
 800c0ae:	f000 80d2 	beq.w	800c256 <_printf_i+0x1c6>
 800c0b2:	2f58      	cmp	r7, #88	@ 0x58
 800c0b4:	f000 80b9 	beq.w	800c22a <_printf_i+0x19a>
 800c0b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0c0:	e03a      	b.n	800c138 <_printf_i+0xa8>
 800c0c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0c6:	2b15      	cmp	r3, #21
 800c0c8:	d8f6      	bhi.n	800c0b8 <_printf_i+0x28>
 800c0ca:	a101      	add	r1, pc, #4	@ (adr r1, 800c0d0 <_printf_i+0x40>)
 800c0cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0d0:	0800c129 	.word	0x0800c129
 800c0d4:	0800c13d 	.word	0x0800c13d
 800c0d8:	0800c0b9 	.word	0x0800c0b9
 800c0dc:	0800c0b9 	.word	0x0800c0b9
 800c0e0:	0800c0b9 	.word	0x0800c0b9
 800c0e4:	0800c0b9 	.word	0x0800c0b9
 800c0e8:	0800c13d 	.word	0x0800c13d
 800c0ec:	0800c0b9 	.word	0x0800c0b9
 800c0f0:	0800c0b9 	.word	0x0800c0b9
 800c0f4:	0800c0b9 	.word	0x0800c0b9
 800c0f8:	0800c0b9 	.word	0x0800c0b9
 800c0fc:	0800c23d 	.word	0x0800c23d
 800c100:	0800c167 	.word	0x0800c167
 800c104:	0800c1f7 	.word	0x0800c1f7
 800c108:	0800c0b9 	.word	0x0800c0b9
 800c10c:	0800c0b9 	.word	0x0800c0b9
 800c110:	0800c25f 	.word	0x0800c25f
 800c114:	0800c0b9 	.word	0x0800c0b9
 800c118:	0800c167 	.word	0x0800c167
 800c11c:	0800c0b9 	.word	0x0800c0b9
 800c120:	0800c0b9 	.word	0x0800c0b9
 800c124:	0800c1ff 	.word	0x0800c1ff
 800c128:	6833      	ldr	r3, [r6, #0]
 800c12a:	1d1a      	adds	r2, r3, #4
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6032      	str	r2, [r6, #0]
 800c130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c138:	2301      	movs	r3, #1
 800c13a:	e09d      	b.n	800c278 <_printf_i+0x1e8>
 800c13c:	6833      	ldr	r3, [r6, #0]
 800c13e:	6820      	ldr	r0, [r4, #0]
 800c140:	1d19      	adds	r1, r3, #4
 800c142:	6031      	str	r1, [r6, #0]
 800c144:	0606      	lsls	r6, r0, #24
 800c146:	d501      	bpl.n	800c14c <_printf_i+0xbc>
 800c148:	681d      	ldr	r5, [r3, #0]
 800c14a:	e003      	b.n	800c154 <_printf_i+0xc4>
 800c14c:	0645      	lsls	r5, r0, #25
 800c14e:	d5fb      	bpl.n	800c148 <_printf_i+0xb8>
 800c150:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c154:	2d00      	cmp	r5, #0
 800c156:	da03      	bge.n	800c160 <_printf_i+0xd0>
 800c158:	232d      	movs	r3, #45	@ 0x2d
 800c15a:	426d      	negs	r5, r5
 800c15c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c160:	4859      	ldr	r0, [pc, #356]	@ (800c2c8 <_printf_i+0x238>)
 800c162:	230a      	movs	r3, #10
 800c164:	e011      	b.n	800c18a <_printf_i+0xfa>
 800c166:	6821      	ldr	r1, [r4, #0]
 800c168:	6833      	ldr	r3, [r6, #0]
 800c16a:	0608      	lsls	r0, r1, #24
 800c16c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c170:	d402      	bmi.n	800c178 <_printf_i+0xe8>
 800c172:	0649      	lsls	r1, r1, #25
 800c174:	bf48      	it	mi
 800c176:	b2ad      	uxthmi	r5, r5
 800c178:	2f6f      	cmp	r7, #111	@ 0x6f
 800c17a:	4853      	ldr	r0, [pc, #332]	@ (800c2c8 <_printf_i+0x238>)
 800c17c:	6033      	str	r3, [r6, #0]
 800c17e:	bf14      	ite	ne
 800c180:	230a      	movne	r3, #10
 800c182:	2308      	moveq	r3, #8
 800c184:	2100      	movs	r1, #0
 800c186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c18a:	6866      	ldr	r6, [r4, #4]
 800c18c:	60a6      	str	r6, [r4, #8]
 800c18e:	2e00      	cmp	r6, #0
 800c190:	bfa2      	ittt	ge
 800c192:	6821      	ldrge	r1, [r4, #0]
 800c194:	f021 0104 	bicge.w	r1, r1, #4
 800c198:	6021      	strge	r1, [r4, #0]
 800c19a:	b90d      	cbnz	r5, 800c1a0 <_printf_i+0x110>
 800c19c:	2e00      	cmp	r6, #0
 800c19e:	d04b      	beq.n	800c238 <_printf_i+0x1a8>
 800c1a0:	4616      	mov	r6, r2
 800c1a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1a6:	fb03 5711 	mls	r7, r3, r1, r5
 800c1aa:	5dc7      	ldrb	r7, [r0, r7]
 800c1ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1b0:	462f      	mov	r7, r5
 800c1b2:	42bb      	cmp	r3, r7
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	d9f4      	bls.n	800c1a2 <_printf_i+0x112>
 800c1b8:	2b08      	cmp	r3, #8
 800c1ba:	d10b      	bne.n	800c1d4 <_printf_i+0x144>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	07df      	lsls	r7, r3, #31
 800c1c0:	d508      	bpl.n	800c1d4 <_printf_i+0x144>
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	6861      	ldr	r1, [r4, #4]
 800c1c6:	4299      	cmp	r1, r3
 800c1c8:	bfde      	ittt	le
 800c1ca:	2330      	movle	r3, #48	@ 0x30
 800c1cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1d4:	1b92      	subs	r2, r2, r6
 800c1d6:	6122      	str	r2, [r4, #16]
 800c1d8:	f8cd a000 	str.w	sl, [sp]
 800c1dc:	464b      	mov	r3, r9
 800c1de:	aa03      	add	r2, sp, #12
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	f7ff fee6 	bl	800bfb4 <_printf_common>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d14a      	bne.n	800c282 <_printf_i+0x1f2>
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f0:	b004      	add	sp, #16
 800c1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	f043 0320 	orr.w	r3, r3, #32
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	4833      	ldr	r0, [pc, #204]	@ (800c2cc <_printf_i+0x23c>)
 800c200:	2778      	movs	r7, #120	@ 0x78
 800c202:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	6831      	ldr	r1, [r6, #0]
 800c20a:	061f      	lsls	r7, r3, #24
 800c20c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c210:	d402      	bmi.n	800c218 <_printf_i+0x188>
 800c212:	065f      	lsls	r7, r3, #25
 800c214:	bf48      	it	mi
 800c216:	b2ad      	uxthmi	r5, r5
 800c218:	6031      	str	r1, [r6, #0]
 800c21a:	07d9      	lsls	r1, r3, #31
 800c21c:	bf44      	itt	mi
 800c21e:	f043 0320 	orrmi.w	r3, r3, #32
 800c222:	6023      	strmi	r3, [r4, #0]
 800c224:	b11d      	cbz	r5, 800c22e <_printf_i+0x19e>
 800c226:	2310      	movs	r3, #16
 800c228:	e7ac      	b.n	800c184 <_printf_i+0xf4>
 800c22a:	4827      	ldr	r0, [pc, #156]	@ (800c2c8 <_printf_i+0x238>)
 800c22c:	e7e9      	b.n	800c202 <_printf_i+0x172>
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	f023 0320 	bic.w	r3, r3, #32
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	e7f6      	b.n	800c226 <_printf_i+0x196>
 800c238:	4616      	mov	r6, r2
 800c23a:	e7bd      	b.n	800c1b8 <_printf_i+0x128>
 800c23c:	6833      	ldr	r3, [r6, #0]
 800c23e:	6825      	ldr	r5, [r4, #0]
 800c240:	6961      	ldr	r1, [r4, #20]
 800c242:	1d18      	adds	r0, r3, #4
 800c244:	6030      	str	r0, [r6, #0]
 800c246:	062e      	lsls	r6, r5, #24
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	d501      	bpl.n	800c250 <_printf_i+0x1c0>
 800c24c:	6019      	str	r1, [r3, #0]
 800c24e:	e002      	b.n	800c256 <_printf_i+0x1c6>
 800c250:	0668      	lsls	r0, r5, #25
 800c252:	d5fb      	bpl.n	800c24c <_printf_i+0x1bc>
 800c254:	8019      	strh	r1, [r3, #0]
 800c256:	2300      	movs	r3, #0
 800c258:	6123      	str	r3, [r4, #16]
 800c25a:	4616      	mov	r6, r2
 800c25c:	e7bc      	b.n	800c1d8 <_printf_i+0x148>
 800c25e:	6833      	ldr	r3, [r6, #0]
 800c260:	1d1a      	adds	r2, r3, #4
 800c262:	6032      	str	r2, [r6, #0]
 800c264:	681e      	ldr	r6, [r3, #0]
 800c266:	6862      	ldr	r2, [r4, #4]
 800c268:	2100      	movs	r1, #0
 800c26a:	4630      	mov	r0, r6
 800c26c:	f7f3 ffb0 	bl	80001d0 <memchr>
 800c270:	b108      	cbz	r0, 800c276 <_printf_i+0x1e6>
 800c272:	1b80      	subs	r0, r0, r6
 800c274:	6060      	str	r0, [r4, #4]
 800c276:	6863      	ldr	r3, [r4, #4]
 800c278:	6123      	str	r3, [r4, #16]
 800c27a:	2300      	movs	r3, #0
 800c27c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c280:	e7aa      	b.n	800c1d8 <_printf_i+0x148>
 800c282:	6923      	ldr	r3, [r4, #16]
 800c284:	4632      	mov	r2, r6
 800c286:	4649      	mov	r1, r9
 800c288:	4640      	mov	r0, r8
 800c28a:	47d0      	blx	sl
 800c28c:	3001      	adds	r0, #1
 800c28e:	d0ad      	beq.n	800c1ec <_printf_i+0x15c>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	079b      	lsls	r3, r3, #30
 800c294:	d413      	bmi.n	800c2be <_printf_i+0x22e>
 800c296:	68e0      	ldr	r0, [r4, #12]
 800c298:	9b03      	ldr	r3, [sp, #12]
 800c29a:	4298      	cmp	r0, r3
 800c29c:	bfb8      	it	lt
 800c29e:	4618      	movlt	r0, r3
 800c2a0:	e7a6      	b.n	800c1f0 <_printf_i+0x160>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	4632      	mov	r2, r6
 800c2a6:	4649      	mov	r1, r9
 800c2a8:	4640      	mov	r0, r8
 800c2aa:	47d0      	blx	sl
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d09d      	beq.n	800c1ec <_printf_i+0x15c>
 800c2b0:	3501      	adds	r5, #1
 800c2b2:	68e3      	ldr	r3, [r4, #12]
 800c2b4:	9903      	ldr	r1, [sp, #12]
 800c2b6:	1a5b      	subs	r3, r3, r1
 800c2b8:	42ab      	cmp	r3, r5
 800c2ba:	dcf2      	bgt.n	800c2a2 <_printf_i+0x212>
 800c2bc:	e7eb      	b.n	800c296 <_printf_i+0x206>
 800c2be:	2500      	movs	r5, #0
 800c2c0:	f104 0619 	add.w	r6, r4, #25
 800c2c4:	e7f5      	b.n	800c2b2 <_printf_i+0x222>
 800c2c6:	bf00      	nop
 800c2c8:	0800cb79 	.word	0x0800cb79
 800c2cc:	0800cb8a 	.word	0x0800cb8a

0800c2d0 <__sflush_r>:
 800c2d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d8:	0716      	lsls	r6, r2, #28
 800c2da:	4605      	mov	r5, r0
 800c2dc:	460c      	mov	r4, r1
 800c2de:	d454      	bmi.n	800c38a <__sflush_r+0xba>
 800c2e0:	684b      	ldr	r3, [r1, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dc02      	bgt.n	800c2ec <__sflush_r+0x1c>
 800c2e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dd48      	ble.n	800c37e <__sflush_r+0xae>
 800c2ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2ee:	2e00      	cmp	r6, #0
 800c2f0:	d045      	beq.n	800c37e <__sflush_r+0xae>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c2f8:	682f      	ldr	r7, [r5, #0]
 800c2fa:	6a21      	ldr	r1, [r4, #32]
 800c2fc:	602b      	str	r3, [r5, #0]
 800c2fe:	d030      	beq.n	800c362 <__sflush_r+0x92>
 800c300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	0759      	lsls	r1, r3, #29
 800c306:	d505      	bpl.n	800c314 <__sflush_r+0x44>
 800c308:	6863      	ldr	r3, [r4, #4]
 800c30a:	1ad2      	subs	r2, r2, r3
 800c30c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c30e:	b10b      	cbz	r3, 800c314 <__sflush_r+0x44>
 800c310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c312:	1ad2      	subs	r2, r2, r3
 800c314:	2300      	movs	r3, #0
 800c316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c318:	6a21      	ldr	r1, [r4, #32]
 800c31a:	4628      	mov	r0, r5
 800c31c:	47b0      	blx	r6
 800c31e:	1c43      	adds	r3, r0, #1
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	d106      	bne.n	800c332 <__sflush_r+0x62>
 800c324:	6829      	ldr	r1, [r5, #0]
 800c326:	291d      	cmp	r1, #29
 800c328:	d82b      	bhi.n	800c382 <__sflush_r+0xb2>
 800c32a:	4a2a      	ldr	r2, [pc, #168]	@ (800c3d4 <__sflush_r+0x104>)
 800c32c:	410a      	asrs	r2, r1
 800c32e:	07d6      	lsls	r6, r2, #31
 800c330:	d427      	bmi.n	800c382 <__sflush_r+0xb2>
 800c332:	2200      	movs	r2, #0
 800c334:	6062      	str	r2, [r4, #4]
 800c336:	04d9      	lsls	r1, r3, #19
 800c338:	6922      	ldr	r2, [r4, #16]
 800c33a:	6022      	str	r2, [r4, #0]
 800c33c:	d504      	bpl.n	800c348 <__sflush_r+0x78>
 800c33e:	1c42      	adds	r2, r0, #1
 800c340:	d101      	bne.n	800c346 <__sflush_r+0x76>
 800c342:	682b      	ldr	r3, [r5, #0]
 800c344:	b903      	cbnz	r3, 800c348 <__sflush_r+0x78>
 800c346:	6560      	str	r0, [r4, #84]	@ 0x54
 800c348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c34a:	602f      	str	r7, [r5, #0]
 800c34c:	b1b9      	cbz	r1, 800c37e <__sflush_r+0xae>
 800c34e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c352:	4299      	cmp	r1, r3
 800c354:	d002      	beq.n	800c35c <__sflush_r+0x8c>
 800c356:	4628      	mov	r0, r5
 800c358:	f7ff fbf2 	bl	800bb40 <_free_r>
 800c35c:	2300      	movs	r3, #0
 800c35e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c360:	e00d      	b.n	800c37e <__sflush_r+0xae>
 800c362:	2301      	movs	r3, #1
 800c364:	4628      	mov	r0, r5
 800c366:	47b0      	blx	r6
 800c368:	4602      	mov	r2, r0
 800c36a:	1c50      	adds	r0, r2, #1
 800c36c:	d1c9      	bne.n	800c302 <__sflush_r+0x32>
 800c36e:	682b      	ldr	r3, [r5, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0c6      	beq.n	800c302 <__sflush_r+0x32>
 800c374:	2b1d      	cmp	r3, #29
 800c376:	d001      	beq.n	800c37c <__sflush_r+0xac>
 800c378:	2b16      	cmp	r3, #22
 800c37a:	d11e      	bne.n	800c3ba <__sflush_r+0xea>
 800c37c:	602f      	str	r7, [r5, #0]
 800c37e:	2000      	movs	r0, #0
 800c380:	e022      	b.n	800c3c8 <__sflush_r+0xf8>
 800c382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c386:	b21b      	sxth	r3, r3
 800c388:	e01b      	b.n	800c3c2 <__sflush_r+0xf2>
 800c38a:	690f      	ldr	r7, [r1, #16]
 800c38c:	2f00      	cmp	r7, #0
 800c38e:	d0f6      	beq.n	800c37e <__sflush_r+0xae>
 800c390:	0793      	lsls	r3, r2, #30
 800c392:	680e      	ldr	r6, [r1, #0]
 800c394:	bf08      	it	eq
 800c396:	694b      	ldreq	r3, [r1, #20]
 800c398:	600f      	str	r7, [r1, #0]
 800c39a:	bf18      	it	ne
 800c39c:	2300      	movne	r3, #0
 800c39e:	eba6 0807 	sub.w	r8, r6, r7
 800c3a2:	608b      	str	r3, [r1, #8]
 800c3a4:	f1b8 0f00 	cmp.w	r8, #0
 800c3a8:	dde9      	ble.n	800c37e <__sflush_r+0xae>
 800c3aa:	6a21      	ldr	r1, [r4, #32]
 800c3ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3ae:	4643      	mov	r3, r8
 800c3b0:	463a      	mov	r2, r7
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	47b0      	blx	r6
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	dc08      	bgt.n	800c3cc <__sflush_r+0xfc>
 800c3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3c2:	81a3      	strh	r3, [r4, #12]
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3cc:	4407      	add	r7, r0
 800c3ce:	eba8 0800 	sub.w	r8, r8, r0
 800c3d2:	e7e7      	b.n	800c3a4 <__sflush_r+0xd4>
 800c3d4:	dfbffffe 	.word	0xdfbffffe

0800c3d8 <_fflush_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	690b      	ldr	r3, [r1, #16]
 800c3dc:	4605      	mov	r5, r0
 800c3de:	460c      	mov	r4, r1
 800c3e0:	b913      	cbnz	r3, 800c3e8 <_fflush_r+0x10>
 800c3e2:	2500      	movs	r5, #0
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	b118      	cbz	r0, 800c3f2 <_fflush_r+0x1a>
 800c3ea:	6a03      	ldr	r3, [r0, #32]
 800c3ec:	b90b      	cbnz	r3, 800c3f2 <_fflush_r+0x1a>
 800c3ee:	f7ff f9ad 	bl	800b74c <__sinit>
 800c3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d0f3      	beq.n	800c3e2 <_fflush_r+0xa>
 800c3fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c3fc:	07d0      	lsls	r0, r2, #31
 800c3fe:	d404      	bmi.n	800c40a <_fflush_r+0x32>
 800c400:	0599      	lsls	r1, r3, #22
 800c402:	d402      	bmi.n	800c40a <_fflush_r+0x32>
 800c404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c406:	f7ff fb98 	bl	800bb3a <__retarget_lock_acquire_recursive>
 800c40a:	4628      	mov	r0, r5
 800c40c:	4621      	mov	r1, r4
 800c40e:	f7ff ff5f 	bl	800c2d0 <__sflush_r>
 800c412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c414:	07da      	lsls	r2, r3, #31
 800c416:	4605      	mov	r5, r0
 800c418:	d4e4      	bmi.n	800c3e4 <_fflush_r+0xc>
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	059b      	lsls	r3, r3, #22
 800c41e:	d4e1      	bmi.n	800c3e4 <_fflush_r+0xc>
 800c420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c422:	f7ff fb8b 	bl	800bb3c <__retarget_lock_release_recursive>
 800c426:	e7dd      	b.n	800c3e4 <_fflush_r+0xc>

0800c428 <__swhatbuf_r>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	460c      	mov	r4, r1
 800c42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c430:	2900      	cmp	r1, #0
 800c432:	b096      	sub	sp, #88	@ 0x58
 800c434:	4615      	mov	r5, r2
 800c436:	461e      	mov	r6, r3
 800c438:	da0d      	bge.n	800c456 <__swhatbuf_r+0x2e>
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c440:	f04f 0100 	mov.w	r1, #0
 800c444:	bf14      	ite	ne
 800c446:	2340      	movne	r3, #64	@ 0x40
 800c448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c44c:	2000      	movs	r0, #0
 800c44e:	6031      	str	r1, [r6, #0]
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	b016      	add	sp, #88	@ 0x58
 800c454:	bd70      	pop	{r4, r5, r6, pc}
 800c456:	466a      	mov	r2, sp
 800c458:	f000 f848 	bl	800c4ec <_fstat_r>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	dbec      	blt.n	800c43a <__swhatbuf_r+0x12>
 800c460:	9901      	ldr	r1, [sp, #4]
 800c462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c46a:	4259      	negs	r1, r3
 800c46c:	4159      	adcs	r1, r3
 800c46e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c472:	e7eb      	b.n	800c44c <__swhatbuf_r+0x24>

0800c474 <__smakebuf_r>:
 800c474:	898b      	ldrh	r3, [r1, #12]
 800c476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c478:	079d      	lsls	r5, r3, #30
 800c47a:	4606      	mov	r6, r0
 800c47c:	460c      	mov	r4, r1
 800c47e:	d507      	bpl.n	800c490 <__smakebuf_r+0x1c>
 800c480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	6123      	str	r3, [r4, #16]
 800c488:	2301      	movs	r3, #1
 800c48a:	6163      	str	r3, [r4, #20]
 800c48c:	b003      	add	sp, #12
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c490:	ab01      	add	r3, sp, #4
 800c492:	466a      	mov	r2, sp
 800c494:	f7ff ffc8 	bl	800c428 <__swhatbuf_r>
 800c498:	9f00      	ldr	r7, [sp, #0]
 800c49a:	4605      	mov	r5, r0
 800c49c:	4639      	mov	r1, r7
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f7ff fbba 	bl	800bc18 <_malloc_r>
 800c4a4:	b948      	cbnz	r0, 800c4ba <__smakebuf_r+0x46>
 800c4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4aa:	059a      	lsls	r2, r3, #22
 800c4ac:	d4ee      	bmi.n	800c48c <__smakebuf_r+0x18>
 800c4ae:	f023 0303 	bic.w	r3, r3, #3
 800c4b2:	f043 0302 	orr.w	r3, r3, #2
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	e7e2      	b.n	800c480 <__smakebuf_r+0xc>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	6020      	str	r0, [r4, #0]
 800c4be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4c2:	81a3      	strh	r3, [r4, #12]
 800c4c4:	9b01      	ldr	r3, [sp, #4]
 800c4c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4ca:	b15b      	cbz	r3, 800c4e4 <__smakebuf_r+0x70>
 800c4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f000 f81d 	bl	800c510 <_isatty_r>
 800c4d6:	b128      	cbz	r0, 800c4e4 <__smakebuf_r+0x70>
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	f023 0303 	bic.w	r3, r3, #3
 800c4de:	f043 0301 	orr.w	r3, r3, #1
 800c4e2:	81a3      	strh	r3, [r4, #12]
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	431d      	orrs	r5, r3
 800c4e8:	81a5      	strh	r5, [r4, #12]
 800c4ea:	e7cf      	b.n	800c48c <__smakebuf_r+0x18>

0800c4ec <_fstat_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4d07      	ldr	r5, [pc, #28]	@ (800c50c <_fstat_r+0x20>)
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	4608      	mov	r0, r1
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	602b      	str	r3, [r5, #0]
 800c4fa:	f7f5 f9b2 	bl	8001862 <_fstat>
 800c4fe:	1c43      	adds	r3, r0, #1
 800c500:	d102      	bne.n	800c508 <_fstat_r+0x1c>
 800c502:	682b      	ldr	r3, [r5, #0]
 800c504:	b103      	cbz	r3, 800c508 <_fstat_r+0x1c>
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	bd38      	pop	{r3, r4, r5, pc}
 800c50a:	bf00      	nop
 800c50c:	20001b60 	.word	0x20001b60

0800c510 <_isatty_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	@ (800c52c <_isatty_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f5 f9b1 	bl	8001882 <_isatty>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_isatty_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_isatty_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	20001b60 	.word	0x20001b60

0800c530 <_sbrk_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d06      	ldr	r5, [pc, #24]	@ (800c54c <_sbrk_r+0x1c>)
 800c534:	2300      	movs	r3, #0
 800c536:	4604      	mov	r4, r0
 800c538:	4608      	mov	r0, r1
 800c53a:	602b      	str	r3, [r5, #0]
 800c53c:	f7f5 f9ba 	bl	80018b4 <_sbrk>
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d102      	bne.n	800c54a <_sbrk_r+0x1a>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	b103      	cbz	r3, 800c54a <_sbrk_r+0x1a>
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	20001b60 	.word	0x20001b60

0800c550 <_init>:
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	bf00      	nop
 800c554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c556:	bc08      	pop	{r3}
 800c558:	469e      	mov	lr, r3
 800c55a:	4770      	bx	lr

0800c55c <_fini>:
 800c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55e:	bf00      	nop
 800c560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c562:	bc08      	pop	{r3}
 800c564:	469e      	mov	lr, r3
 800c566:	4770      	bx	lr
