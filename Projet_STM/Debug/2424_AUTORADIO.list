
2424_AUTORADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009428  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080095b8  080095b8  0000a5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa8  08009aa8  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa8  08009aa8  0000aaa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab0  08009ab0  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab0  08009ab0  0000aab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ab4  08009ab4  0000aab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009ab8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  2000006c  08009b24  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000141c  08009b24  0000b41c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab87  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000424d  00000000  00000000  00025c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00029e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001198  00000000  00000000  0002b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006653  00000000  00000000  0002c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1f7  00000000  00000000  00032d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9f57  00000000  00000000  00050f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ae81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  0014aec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0015133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095a0 	.word	0x080095a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080095a0 	.word	0x080095a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 f95d 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 f976 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 f955 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 f96e 	bl	800187a <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	200000e0 	.word	0x200000e0

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f006 fde5 	bl	80071cc <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	080095c4 	.word	0x080095c4
 8000614:	20000088 	.word	0x20000088

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f006 fe1f 	bl	8007264 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <MX_GPIO_Init+0xec>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xec>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <MX_GPIO_Init+0xec>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2121      	movs	r1, #33	@ 0x21
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 fc93 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_GPIO_Init+0xf0>)
 80006b0:	f001 fc8e 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_GPIO_Init+0xf4>)
 80006cc:	f001 fad6 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80006d0:	2321      	movs	r3, #33	@ 0x21
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f001 fac7 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xf0>)
 8000706:	f001 fab9 	bl	8001c7c <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800

08000720 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f001 fc50 	bl	8002000 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fa84 	bl	8000c72 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f002 facb 	bl	8002d08 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fa7b 	bl	8000c72 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f002 fb0d 	bl	8002d9e <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fa72 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200002e0 	.word	0x200002e0
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	@ 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f008 f969 	bl	8008a98 <memset>
  if(i2cHandle->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <HAL_I2C_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 f98f 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f000 fa43 	bl	8000c72 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0xb8>)
 800082c:	f001 fa26 	bl	8001c7c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083a:	6593      	str	r3, [r2, #88]	@ 0x58
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	@ 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005800 	.word	0x40005800
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2201      	movs	r2, #1
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <__io_putchar+0x20>)
 800086e:	f005 fbc2 	bl	8005ff6 <HAL_UART_Transmit>
	return ch;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000538 	.word	0x20000538

08000880 <I2C_Scan>:

void I2C_Scan(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	printf("Scanning I2C bus\r\n");
 8000886:	4811      	ldr	r0, [pc, #68]	@ (80008cc <I2C_Scan+0x4c>)
 8000888:	f008 f826 	bl	80088d8 <puts>
	for (uint16_t addr = 0; addr < 128; addr++) {
 800088c:	2300      	movs	r3, #0
 800088e:	80fb      	strh	r3, [r7, #6]
 8000890:	e011      	b.n	80008b6 <I2C_Scan+0x36>
		if (HAL_I2C_IsDeviceReady(&hi2c2, addr , 2, HAL_MAX_DELAY) == HAL_OK) {
 8000892:	88f9      	ldrh	r1, [r7, #6]
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	2202      	movs	r2, #2
 800089a:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <I2C_Scan+0x50>)
 800089c:	f001 fe7a 	bl	8002594 <HAL_I2C_IsDeviceReady>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d104      	bne.n	80008b0 <I2C_Scan+0x30>
			printf("Périphérique trouvé à l'adresse 0x%02X\r\n", addr);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	480a      	ldr	r0, [pc, #40]	@ (80008d4 <I2C_Scan+0x54>)
 80008ac:	f007 ffac 	bl	8008808 <iprintf>
	for (uint16_t addr = 0; addr < 128; addr++) {
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	3301      	adds	r3, #1
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008ba:	d9ea      	bls.n	8000892 <I2C_Scan+0x12>
		}
	}
	printf("Scan terminé.\r\n");
 80008bc:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <I2C_Scan+0x58>)
 80008be:	f008 f80b 	bl	80088d8 <puts>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	080095e0 	.word	0x080095e0
 80008d0:	200002e0 	.word	0x200002e0
 80008d4:	080095f4 	.word	0x080095f4
 80008d8:	08009624 	.word	0x08009624

080008dc <Read_CHIP_ID_Debug>:

void Read_CHIP_ID_Debug(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af04      	add	r7, sp, #16
    uint8_t chip_id[2] = {0};
 80008e2:	2300      	movs	r3, #0
 80008e4:	80bb      	strh	r3, [r7, #4]

    printf("Lecture du registre CHIP_ID \r\n");
 80008e6:	4819      	ldr	r0, [pc, #100]	@ (800094c <Read_CHIP_ID_Debug+0x70>)
 80008e8:	f007 fff6 	bl	80088d8 <puts>

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, CHIP_ID_REG, I2C_MEMADD_SIZE_16BIT, chip_id, 2, HAL_MAX_DELAY);
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2302      	movs	r3, #2
 80008fc:	2200      	movs	r2, #0
 80008fe:	2114      	movs	r1, #20
 8000900:	4813      	ldr	r0, [pc, #76]	@ (8000950 <Read_CHIP_ID_Debug+0x74>)
 8000902:	f001 fd2d 	bl	8002360 <HAL_I2C_Mem_Read>
 8000906:	4603      	mov	r3, r0
 8000908:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10d      	bne.n	800092c <Read_CHIP_ID_Debug+0x50>
        // Appliquer le décalage de 8 bits pour le MSB
        uint16_t chip_id_val = (chip_id[0] << 8) | chip_id[1];
 8000910:	793b      	ldrb	r3, [r7, #4]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b21a      	sxth	r2, r3
 8000916:	797b      	ldrb	r3, [r7, #5]
 8000918:	b21b      	sxth	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b21b      	sxth	r3, r3
 800091e:	80fb      	strh	r3, [r7, #6]
        printf("CHIP_ID lu avec succès : 0x%04X\r\n", chip_id_val);
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <Read_CHIP_ID_Debug+0x78>)
 8000926:	f007 ff6f 	bl	8008808 <iprintf>
    } else {
        printf("Erreur : Impossible de lire le CHIP_ID\r\n");
        uint32_t i2c_error = HAL_I2C_GetError(&hi2c2);
        printf("Erreur I2C\r\n", i2c_error);
    }
}
 800092a:	e00a      	b.n	8000942 <Read_CHIP_ID_Debug+0x66>
        printf("Erreur : Impossible de lire le CHIP_ID\r\n");
 800092c:	480a      	ldr	r0, [pc, #40]	@ (8000958 <Read_CHIP_ID_Debug+0x7c>)
 800092e:	f007 ffd3 	bl	80088d8 <puts>
        uint32_t i2c_error = HAL_I2C_GetError(&hi2c2);
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <Read_CHIP_ID_Debug+0x74>)
 8000934:	f001 ff1a 	bl	800276c <HAL_I2C_GetError>
 8000938:	60b8      	str	r0, [r7, #8]
        printf("Erreur I2C\r\n", i2c_error);
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	4807      	ldr	r0, [pc, #28]	@ (800095c <Read_CHIP_ID_Debug+0x80>)
 800093e:	f007 ff63 	bl	8008808 <iprintf>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	08009634 	.word	0x08009634
 8000950:	200002e0 	.word	0x200002e0
 8000954:	08009654 	.word	0x08009654
 8000958:	08009678 	.word	0x08009678
 800095c:	080096a0 	.word	0x080096a0

08000960 <Read_Write_Test_Register>:
void Read_Write_Test_Register(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af04      	add	r7, sp, #16
    uint8_t read_data[2] = {0};
 8000966:	2300      	movs	r3, #0
 8000968:	813b      	strh	r3, [r7, #8]
    uint16_t test_value = 0xABCD; // Exemple de valeur à écrire
 800096a:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 800096e:	81fb      	strh	r3, [r7, #14]
    uint8_t test_data[2] = { (test_value >> 8) & 0xFF, test_value & 0xFF };
 8000970:	89fb      	ldrh	r3, [r7, #14]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b29b      	uxth	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	713b      	strb	r3, [r7, #4]
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	717b      	strb	r3, [r7, #5]

    printf("Lecture du registre avant écriture\r\n");
 8000980:	4833      	ldr	r0, [pc, #204]	@ (8000a50 <Read_Write_Test_Register+0xf0>)
 8000982:	f007 ffa9 	bl	80088d8 <puts>
    if (HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, read_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2302      	movs	r3, #2
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2302      	movs	r3, #2
 8000998:	2230      	movs	r2, #48	@ 0x30
 800099a:	2114      	movs	r1, #20
 800099c:	482d      	ldr	r0, [pc, #180]	@ (8000a54 <Read_Write_Test_Register+0xf4>)
 800099e:	f001 fcdf 	bl	8002360 <HAL_I2C_Mem_Read>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10a      	bne.n	80009be <Read_Write_Test_Register+0x5e>
        uint16_t value = (read_data[0]) | read_data[1];
 80009a8:	7a3a      	ldrb	r2, [r7, #8]
 80009aa:	7a7b      	ldrb	r3, [r7, #9]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	81bb      	strh	r3, [r7, #12]
        printf("Valeur lue avant écriture : 0x%04X\r\n", value);
 80009b2:	89bb      	ldrh	r3, [r7, #12]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4828      	ldr	r0, [pc, #160]	@ (8000a58 <Read_Write_Test_Register+0xf8>)
 80009b8:	f007 ff26 	bl	8008808 <iprintf>
 80009bc:	e002      	b.n	80009c4 <Read_Write_Test_Register+0x64>
    } else {
        printf("Erreur lors de la lecture du registre avant écriture\r\n");
 80009be:	4827      	ldr	r0, [pc, #156]	@ (8000a5c <Read_Write_Test_Register+0xfc>)
 80009c0:	f007 ff8a 	bl	80088d8 <puts>
    }

    printf("Écriture dans le registre\r\n");
 80009c4:	4826      	ldr	r0, [pc, #152]	@ (8000a60 <Read_Write_Test_Register+0x100>)
 80009c6:	f007 ff87 	bl	80088d8 <puts>
    if (HAL_I2C_Mem_Write(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, test_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2302      	movs	r3, #2
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2302      	movs	r3, #2
 80009da:	2230      	movs	r2, #48	@ 0x30
 80009dc:	2114      	movs	r1, #20
 80009de:	481d      	ldr	r0, [pc, #116]	@ (8000a54 <Read_Write_Test_Register+0xf4>)
 80009e0:	f001 fbaa 	bl	8002138 <HAL_I2C_Mem_Write>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <Read_Write_Test_Register+0x96>
        printf("Valeur écrite avec succès : 0x%04X\r\n", test_value);
 80009ea:	89fb      	ldrh	r3, [r7, #14]
 80009ec:	4619      	mov	r1, r3
 80009ee:	481d      	ldr	r0, [pc, #116]	@ (8000a64 <Read_Write_Test_Register+0x104>)
 80009f0:	f007 ff0a 	bl	8008808 <iprintf>
 80009f4:	e002      	b.n	80009fc <Read_Write_Test_Register+0x9c>
    } else {
        printf("Erreur lors de l'écriture dans le registre\r\n");
 80009f6:	481c      	ldr	r0, [pc, #112]	@ (8000a68 <Read_Write_Test_Register+0x108>)
 80009f8:	f007 ff6e 	bl	80088d8 <puts>
    }

    printf("Lecture du registre après écriture\r\n");
 80009fc:	481b      	ldr	r0, [pc, #108]	@ (8000a6c <Read_Write_Test_Register+0x10c>)
 80009fe:	f007 ff6b 	bl	80088d8 <puts>
    if (HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, read_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	2302      	movs	r3, #2
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2302      	movs	r3, #2
 8000a14:	2230      	movs	r2, #48	@ 0x30
 8000a16:	2114      	movs	r1, #20
 8000a18:	480e      	ldr	r0, [pc, #56]	@ (8000a54 <Read_Write_Test_Register+0xf4>)
 8000a1a:	f001 fca1 	bl	8002360 <HAL_I2C_Mem_Read>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10d      	bne.n	8000a40 <Read_Write_Test_Register+0xe0>
        uint16_t value = (read_data[0] << 8) | read_data[1];
 8000a24:	7a3b      	ldrb	r3, [r7, #8]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	7a7b      	ldrb	r3, [r7, #9]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	817b      	strh	r3, [r7, #10]
        printf("Valeur lue après écriture : 0x%04X\r\n", value);
 8000a34:	897b      	ldrh	r3, [r7, #10]
 8000a36:	4619      	mov	r1, r3
 8000a38:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <Read_Write_Test_Register+0x110>)
 8000a3a:	f007 fee5 	bl	8008808 <iprintf>
    } else {
        printf("Erreur lors de la lecture du registre après écriture\r\n");
    }
}
 8000a3e:	e002      	b.n	8000a46 <Read_Write_Test_Register+0xe6>
        printf("Erreur lors de la lecture du registre après écriture\r\n");
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <Read_Write_Test_Register+0x114>)
 8000a42:	f007 ff49 	bl	80088d8 <puts>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	080096b0 	.word	0x080096b0
 8000a54:	200002e0 	.word	0x200002e0
 8000a58:	080096d8 	.word	0x080096d8
 8000a5c:	08009700 	.word	0x08009700
 8000a60:	08009738 	.word	0x08009738
 8000a64:	08009754 	.word	0x08009754
 8000a68:	0800977c 	.word	0x0800977c
 8000a6c:	080097ac 	.word	0x080097ac
 8000a70:	080097d4 	.word	0x080097d4
 8000a74:	080097fc 	.word	0x080097fc

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fd8a 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f87c 	bl	8000b7c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a84:	f000 f8cb 	bl	8000c1e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a88:	f7ff fdce 	bl	8000628 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a8c:	f7ff fd68 	bl	8000560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a90:	f000 fcc2 	bl	8001418 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000a94:	f000 fadc 	bl	8001050 <MX_SPI3_Init>
  MX_I2C2_Init();
 8000a98:	f7ff fe42 	bl	8000720 <MX_I2C2_Init>
  MX_SAI2_Init();
 8000a9c:	f000 f8f0 	bl	8000c80 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 8000aa0:	4b30      	ldr	r3, [pc, #192]	@ (8000b64 <main+0xec>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b64 <main+0xec>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000aae:	601a      	str	r2, [r3, #0]
  printf("Demarrage du systeme...\r\n");
 8000ab0:	482d      	ldr	r0, [pc, #180]	@ (8000b68 <main+0xf0>)
 8000ab2:	f007 ff11 	bl	80088d8 <puts>
  I2C_Scan();
 8000ab6:	f7ff fee3 	bl	8000880 <I2C_Scan>
  	Read_CHIP_ID_Debug();
 8000aba:	f7ff ff0f 	bl	80008dc <Read_CHIP_ID_Debug>
  	Read_Write_Test_Register();
 8000abe:	f7ff ff4f 	bl	8000960 <Read_Write_Test_Register>
  		printf("Début des tests des registres SGTL5000\r\n");
 8000ac2:	482a      	ldr	r0, [pc, #168]	@ (8000b6c <main+0xf4>)
 8000ac4:	f007 ff08 	bl	80088d8 <puts>

  		    // Tester chaque registre
  		    Test_Register(&hi2c2, CHIP_ANA_POWER, 0x6AFF);
 8000ac8:	f646 22ff 	movw	r2, #27391	@ 0x6aff
 8000acc:	2130      	movs	r1, #48	@ 0x30
 8000ace:	4828      	ldr	r0, [pc, #160]	@ (8000b70 <main+0xf8>)
 8000ad0:	f000 fa68 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_LINREG_CTRL, 0x006C);
 8000ad4:	226c      	movs	r2, #108	@ 0x6c
 8000ad6:	2126      	movs	r1, #38	@ 0x26
 8000ad8:	4825      	ldr	r0, [pc, #148]	@ (8000b70 <main+0xf8>)
 8000ada:	f000 fa63 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_REF_CTRL, 0x004E);
 8000ade:	224e      	movs	r2, #78	@ 0x4e
 8000ae0:	2128      	movs	r1, #40	@ 0x28
 8000ae2:	4823      	ldr	r0, [pc, #140]	@ (8000b70 <main+0xf8>)
 8000ae4:	f000 fa5e 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_LINE_OUT_CTRL, 0x0322);
 8000ae8:	f240 3222 	movw	r2, #802	@ 0x322
 8000aec:	212c      	movs	r1, #44	@ 0x2c
 8000aee:	4820      	ldr	r0, [pc, #128]	@ (8000b70 <main+0xf8>)
 8000af0:	f000 fa58 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_SHORT_CTRL, 0x1106);
 8000af4:	f241 1206 	movw	r2, #4358	@ 0x1106
 8000af8:	213c      	movs	r1, #60	@ 0x3c
 8000afa:	481d      	ldr	r0, [pc, #116]	@ (8000b70 <main+0xf8>)
 8000afc:	f000 fa52 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_ANA_CTRL, 0x0133);
 8000b00:	f240 1233 	movw	r2, #307	@ 0x133
 8000b04:	2124      	movs	r1, #36	@ 0x24
 8000b06:	481a      	ldr	r0, [pc, #104]	@ (8000b70 <main+0xf8>)
 8000b08:	f000 fa4c 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_DIG_POWER, 0x0073);
 8000b0c:	2273      	movs	r2, #115	@ 0x73
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4817      	ldr	r0, [pc, #92]	@ (8000b70 <main+0xf8>)
 8000b12:	f000 fa47 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_LINE_OUT_VOL, 0x0505);
 8000b16:	f240 5205 	movw	r2, #1285	@ 0x505
 8000b1a:	212e      	movs	r1, #46	@ 0x2e
 8000b1c:	4814      	ldr	r0, [pc, #80]	@ (8000b70 <main+0xf8>)
 8000b1e:	f000 fa41 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_CLK_CTRL, 0x0002);
 8000b22:	2202      	movs	r2, #2
 8000b24:	2104      	movs	r1, #4
 8000b26:	4812      	ldr	r0, [pc, #72]	@ (8000b70 <main+0xf8>)
 8000b28:	f000 fa3c 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_I2S_CTRL, 0x0001);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2106      	movs	r1, #6
 8000b30:	480f      	ldr	r0, [pc, #60]	@ (8000b70 <main+0xf8>)
 8000b32:	f000 fa37 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_ADCDAC_CTRL, 0x000C);
 8000b36:	220c      	movs	r2, #12
 8000b38:	210e      	movs	r1, #14
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <main+0xf8>)
 8000b3c:	f000 fa32 	bl	8000fa4 <Test_Register>
  		    Test_Register(&hi2c2, CHIP_DAC_VOL, 0x3C3C);
 8000b40:	f643 423c 	movw	r2, #15420	@ 0x3c3c
 8000b44:	2110      	movs	r1, #16
 8000b46:	480a      	ldr	r0, [pc, #40]	@ (8000b70 <main+0xf8>)
 8000b48:	f000 fa2c 	bl	8000fa4 <Test_Register>

  		    printf("Tests terminés.\r\n");
 8000b4c:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <main+0xfc>)
 8000b4e:	f007 fec3 	bl	80088d8 <puts>
  		    printf("Démarrage du système...\r\n");
 8000b52:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <main+0x100>)
 8000b54:	f007 fec0 	bl	80088d8 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b58:	f7ff fd42 	bl	80005e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b5c:	f006 fb2f 	bl	80071be <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <main+0xe8>
 8000b64:	20000334 	.word	0x20000334
 8000b68:	08009834 	.word	0x08009834
 8000b6c:	08009850 	.word	0x08009850
 8000b70:	200002e0 	.word	0x200002e0
 8000b74:	0800987c 	.word	0x0800987c
 8000b78:	08009890 	.word	0x08009890

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b096      	sub	sp, #88	@ 0x58
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2244      	movs	r2, #68	@ 0x44
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f007 ff84 	bl	8008a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	463b      	mov	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ba2:	f002 f957 	bl	8002e54 <HAL_PWREx_ControlVoltageScaling>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bac:	f000 f861 	bl	8000c72 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bca:	230a      	movs	r3, #10
 8000bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 f98e 	bl	8002f00 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bea:	f000 f842 	bl	8000c72 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	2104      	movs	r1, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fd56 	bl	80036b8 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c12:	f000 f82e 	bl	8000c72 <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3758      	adds	r7, #88	@ 0x58
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b0a2      	sub	sp, #136	@ 0x88
 8000c22:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2288      	movs	r2, #136	@ 0x88
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f007 ff34 	bl	8008a98 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000c30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c34:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000c42:	230d      	movs	r3, #13
 8000c44:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000c46:	2311      	movs	r3, #17
 8000c48:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000c52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c56:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 ff50 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000c66:	f000 f804 	bl	8000c72 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3788      	adds	r7, #136	@ 0x88
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c76:	b672      	cpsid	i
}
 8000c78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c7a:	bf00      	nop
 8000c7c:	e7fd      	b.n	8000c7a <Error_Handler+0x8>
	...

08000c80 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000c86:	4a2b      	ldr	r2, [pc, #172]	@ (8000d34 <MX_SAI2_Init+0xb4>)
 8000c88:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c90:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000caa:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000cae:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000cc8:	2302      	movs	r3, #2
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4818      	ldr	r0, [pc, #96]	@ (8000d30 <MX_SAI2_Init+0xb0>)
 8000cd0:	f004 fa30 	bl	8005134 <HAL_SAI_InitProtocol>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000cda:	f7ff ffca 	bl	8000c72 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000ce0:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <MX_SAI2_Init+0xbc>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d14:	2302      	movs	r3, #2
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <MX_SAI2_Init+0xb8>)
 8000d1c:	f004 fa0a 	bl	8005134 <HAL_SAI_InitProtocol>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000d26:	f7ff ffa4 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000334 	.word	0x20000334
 8000d34:	40015804 	.word	0x40015804
 8000d38:	200003b8 	.word	0x200003b8
 8000d3c:	40015824 	.word	0x40015824

08000d40 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a64      	ldr	r2, [pc, #400]	@ (8000ee0 <HAL_SAI_MspInit+0x1a0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d15e      	bne.n	8000e10 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000d52:	4b64      	ldr	r3, [pc, #400]	@ (8000ee4 <HAL_SAI_MspInit+0x1a4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d113      	bne.n	8000d82 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000d5a:	4b63      	ldr	r3, [pc, #396]	@ (8000ee8 <HAL_SAI_MspInit+0x1a8>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5e:	4a62      	ldr	r2, [pc, #392]	@ (8000ee8 <HAL_SAI_MspInit+0x1a8>)
 8000d60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d66:	4b60      	ldr	r3, [pc, #384]	@ (8000ee8 <HAL_SAI_MspInit+0x1a8>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	204b      	movs	r0, #75	@ 0x4b
 8000d78:	f000 fd63 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d7c:	204b      	movs	r0, #75	@ 0x4b
 8000d7e:	f000 fd7c 	bl	800187a <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000d82:	4b58      	ldr	r3, [pc, #352]	@ (8000ee4 <HAL_SAI_MspInit+0x1a4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a56      	ldr	r2, [pc, #344]	@ (8000ee4 <HAL_SAI_MspInit+0x1a4>)
 8000d8a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d8c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d9e:	230d      	movs	r3, #13
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4850      	ldr	r0, [pc, #320]	@ (8000eec <HAL_SAI_MspInit+0x1ac>)
 8000daa:	f000 ff67 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000dae:	4b50      	ldr	r3, [pc, #320]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000db0:	4a50      	ldr	r2, [pc, #320]	@ (8000ef4 <HAL_SAI_MspInit+0x1b4>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000db4:	4b4e      	ldr	r3, [pc, #312]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dba:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000dbc:	2210      	movs	r2, #16
 8000dbe:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dcc:	4b48      	ldr	r3, [pc, #288]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dd4:	4b46      	ldr	r3, [pc, #280]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dda:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000ddc:	4b44      	ldr	r3, [pc, #272]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000dde:	2220      	movs	r2, #32
 8000de0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000de2:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000de8:	4841      	ldr	r0, [pc, #260]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000dea:	f000 fd61 	bl	80018b0 <HAL_DMA_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000df4:	f7ff ff3d 	bl	8000c72 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000dfc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dfe:	4a3c      	ldr	r2, [pc, #240]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a3a      	ldr	r2, [pc, #232]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000e08:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e0a:	4a39      	ldr	r2, [pc, #228]	@ (8000ef0 <HAL_SAI_MspInit+0x1b0>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a38      	ldr	r2, [pc, #224]	@ (8000ef8 <HAL_SAI_MspInit+0x1b8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d15e      	bne.n	8000ed8 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000e1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <HAL_SAI_MspInit+0x1a4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d113      	bne.n	8000e4a <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e22:	4b31      	ldr	r3, [pc, #196]	@ (8000ee8 <HAL_SAI_MspInit+0x1a8>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	4a30      	ldr	r2, [pc, #192]	@ (8000ee8 <HAL_SAI_MspInit+0x1a8>)
 8000e28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee8 <HAL_SAI_MspInit+0x1a8>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	204b      	movs	r0, #75	@ 0x4b
 8000e40:	f000 fcff 	bl	8001842 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e44:	204b      	movs	r0, #75	@ 0x4b
 8000e46:	f000 fd18 	bl	800187a <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <HAL_SAI_MspInit+0x1a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a24      	ldr	r2, [pc, #144]	@ (8000ee4 <HAL_SAI_MspInit+0x1a4>)
 8000e52:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e66:	230d      	movs	r3, #13
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4822      	ldr	r0, [pc, #136]	@ (8000efc <HAL_SAI_MspInit+0x1bc>)
 8000e72:	f000 ff03 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000e78:	4a22      	ldr	r2, [pc, #136]	@ (8000f04 <HAL_SAI_MspInit+0x1c4>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e9a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ea2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000eb0:	4813      	ldr	r0, [pc, #76]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000eb2:	f000 fcfd 	bl	80018b0 <HAL_DMA_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000ebc:	f7ff fed9 	bl	8000c72 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000ec4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f00 <HAL_SAI_MspInit+0x1c0>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	@ 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40015804 	.word	0x40015804
 8000ee4:	200004cc 	.word	0x200004cc
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	2000043c 	.word	0x2000043c
 8000ef4:	4002006c 	.word	0x4002006c
 8000ef8:	40015824 	.word	0x40015824
 8000efc:	48000800 	.word	0x48000800
 8000f00:	20000484 	.word	0x20000484
 8000f04:	40020080 	.word	0x40020080

08000f08 <SGTL5000_WriteRegister>:

#include "sgtl5000.h"
#include <stdio.h>

// Fonction pour écrire dans un registre
HAL_StatusTypeDef SGTL5000_WriteRegister(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t value) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af04      	add	r7, sp, #16
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	803b      	strh	r3, [r7, #0]
    uint8_t data[2] = {
 8000f18:	883b      	ldrh	r3, [r7, #0]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	733b      	strb	r3, [r7, #12]
 8000f22:	883b      	ldrh	r3, [r7, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	737b      	strb	r3, [r7, #13]
        (value >> 8) & 0xFF, // MSB de la valeur
        value & 0xFF         // LSB de la valeur
    };

    // Utilisation de HAL_I2C_Mem_Write
    return HAL_I2C_Mem_Write(hi2c, SGTL5000_I2C_ADDR, reg, I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY);
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	2302      	movs	r3, #2
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	2114      	movs	r1, #20
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f001 f8fa 	bl	8002138 <HAL_I2C_Mem_Write>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <SGTL5000_ReadRegister>:

// Fonction pour lire un registre
HAL_StatusTypeDef SGTL5000_ReadRegister(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t *value) {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b08a      	sub	sp, #40	@ 0x28
 8000f52:	af04      	add	r7, sp, #16
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	460b      	mov	r3, r1
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	817b      	strh	r3, [r7, #10]
    uint8_t data[2] = { 0 };
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	82bb      	strh	r3, [r7, #20]

    // Utilisation de HAL_I2C_Mem_Read
    if (HAL_I2C_Mem_Read(hi2c, SGTL5000_I2C_ADDR, reg, I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000f60:	897a      	ldrh	r2, [r7, #10]
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2302      	movs	r3, #2
 8000f74:	2114      	movs	r1, #20
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f001 f9f2 	bl	8002360 <HAL_I2C_Mem_Read>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SGTL5000_ReadRegister+0x38>
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00a      	b.n	8000f9c <SGTL5000_ReadRegister+0x4e>
    }

    // Combiner les octets pour former une valeur 16 bits
    *value = (data[0] << 8) | data[1];
 8000f86:	7d3b      	ldrb	r3, [r7, #20]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7d7b      	ldrb	r3, [r7, #21]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Test_Register>:

    return status;
}

// Fonction de test d'un registre
void Test_Register(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t write_value) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	803b      	strh	r3, [r7, #0]
    uint16_t read_value = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	81fb      	strh	r3, [r7, #14]

    // Écriture dans le registre
    if (SGTL5000_WriteRegister(hi2c, reg, write_value) == HAL_OK) {
 8000fb8:	883a      	ldrh	r2, [r7, #0]
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa2 	bl	8000f08 <SGTL5000_WriteRegister>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d110      	bne.n	8000fec <Test_Register+0x48>
        printf("Écriture réussie dans le registre 0x%04X avec la valeur 0x%04X\r\n", reg, write_value);
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	883a      	ldrh	r2, [r7, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4819      	ldr	r0, [pc, #100]	@ (8001038 <Test_Register+0x94>)
 8000fd2:	f007 fc19 	bl	8008808 <iprintf>
        printf("Erreur lors de l'écriture dans le registre 0x%04X\r\n", reg);
        return;
    }

    // Lecture du registre
    if (SGTL5000_ReadRegister(hi2c, reg, &read_value) == HAL_OK) {
 8000fd6:	f107 020e 	add.w	r2, r7, #14
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffb5 	bl	8000f4e <SGTL5000_ReadRegister>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d11e      	bne.n	8001028 <Test_Register+0x84>
 8000fea:	e005      	b.n	8000ff8 <Test_Register+0x54>
        printf("Erreur lors de l'écriture dans le registre 0x%04X\r\n", reg);
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4812      	ldr	r0, [pc, #72]	@ (800103c <Test_Register+0x98>)
 8000ff2:	f007 fc09 	bl	8008808 <iprintf>
 8000ff6:	e01c      	b.n	8001032 <Test_Register+0x8e>
        printf("Lecture réussie du registre 0x%04X. Valeur lue : 0x%04X\r\n", reg, read_value);
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	89fa      	ldrh	r2, [r7, #14]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4810      	ldr	r0, [pc, #64]	@ (8001040 <Test_Register+0x9c>)
 8001000:	f007 fc02 	bl	8008808 <iprintf>

        // Vérification
        if (read_value == write_value) {
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	883a      	ldrh	r2, [r7, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d105      	bne.n	8001018 <Test_Register+0x74>
            printf("Test réussi pour le registre 0x%04X. La valeur correspond.\r\n", reg);
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <Test_Register+0xa0>)
 8001012:	f007 fbf9 	bl	8008808 <iprintf>
 8001016:	e00c      	b.n	8001032 <Test_Register+0x8e>
        } else {
            printf("Erreur : La valeur lue 0x%04X ne correspond pas à la valeur écrite 0x%04X.\r\n", read_value, write_value);
 8001018:	89fb      	ldrh	r3, [r7, #14]
 800101a:	4619      	mov	r1, r3
 800101c:	883b      	ldrh	r3, [r7, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <Test_Register+0xa4>)
 8001022:	f007 fbf1 	bl	8008808 <iprintf>
 8001026:	e004      	b.n	8001032 <Test_Register+0x8e>
        }
    } else {
        printf("Erreur lors de la lecture du registre 0x%04X\r\n", reg);
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	4619      	mov	r1, r3
 800102c:	4807      	ldr	r0, [pc, #28]	@ (800104c <Test_Register+0xa8>)
 800102e:	f007 fbeb 	bl	8008808 <iprintf>
    }
}
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	080098ac 	.word	0x080098ac
 800103c:	080098f0 	.word	0x080098f0
 8001040:	08009928 	.word	0x08009928
 8001044:	08009964 	.word	0x08009964
 8001048:	080099a4 	.word	0x080099a4
 800104c:	080099f4 	.word	0x080099f4

08001050 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001056:	4a1c      	ldr	r2, [pc, #112]	@ (80010c8 <MX_SPI3_Init+0x78>)
 8001058:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800105c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001060:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800106a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800106e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800107e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001082:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001086:	2210      	movs	r2, #16
 8001088:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800109e:	2207      	movs	r2, #7
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_SPI3_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_SPI3_Init+0x74>)
 80010aa:	2208      	movs	r2, #8
 80010ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_SPI3_Init+0x74>)
 80010b0:	f004 fd9d 	bl	8005bee <HAL_SPI_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010ba:	f7ff fdda 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200004d0 	.word	0x200004d0
 80010c8:	40003c00 	.word	0x40003c00

080010cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a29      	ldr	r2, [pc, #164]	@ (8001190 <HAL_SPI_MspInit+0xc4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d14c      	bne.n	8001188 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010ee:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	4a28      	ldr	r2, [pc, #160]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 80010f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	4a22      	ldr	r2, [pc, #136]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	4a1c      	ldr	r2, [pc, #112]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <HAL_SPI_MspInit+0xc8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001136:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001148:	2306      	movs	r3, #6
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4811      	ldr	r0, [pc, #68]	@ (8001198 <HAL_SPI_MspInit+0xcc>)
 8001154:	f000 fd92 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001158:	2320      	movs	r3, #32
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001168:	2306      	movs	r3, #6
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	480a      	ldr	r0, [pc, #40]	@ (800119c <HAL_SPI_MspInit+0xd0>)
 8001174:	f000 fd82 	bl	8001c7c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2105      	movs	r1, #5
 800117c:	2033      	movs	r0, #51	@ 0x33
 800117e:	f000 fb60 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001182:	2033      	movs	r0, #51	@ 0x33
 8001184:	f000 fb79 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	@ 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40003c00 	.word	0x40003c00
 8001194:	40021000 	.word	0x40021000
 8001198:	48000800 	.word	0x48000800
 800119c:	48000400 	.word	0x48000400

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_MspInit+0x4c>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011aa:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <HAL_MspInit+0x4c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_MspInit+0x4c>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <HAL_MspInit+0x4c>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <HAL_MspInit+0x4c>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_MspInit+0x4c>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	210f      	movs	r1, #15
 80011da:	f06f 0001 	mvn.w	r0, #1
 80011de:	f000 fb30 	bl	8001842 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <NMI_Handler+0x4>

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <UsageFault_Handler+0x4>

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122a:	f000 fa0f 	bl	800164c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800122e:	f006 fda9 	bl	8007d84 <xTaskGetSchedulerState>
 8001232:	4603      	mov	r3, r0
 8001234:	2b01      	cmp	r3, #1
 8001236:	d001      	beq.n	800123c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001238:	f006 ffe6 	bl	8008208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <DMA1_Channel6_IRQHandler+0x10>)
 8001246:	f000 fc6a 	bl	8001b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000043c 	.word	0x2000043c

08001254 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <DMA1_Channel7_IRQHandler+0x10>)
 800125a:	f000 fc60 	bl	8001b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000484 	.word	0x20000484

08001268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <USART2_IRQHandler+0x10>)
 800126e:	f004 ff4b 	bl	8006108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000538 	.word	0x20000538

0800127c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <SPI3_IRQHandler+0x10>)
 8001282:	f004 fd57 	bl	8005d34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200004d0 	.word	0x200004d0

08001290 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <SAI2_IRQHandler+0x14>)
 8001296:	f004 f957 	bl	8005548 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800129a:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <SAI2_IRQHandler+0x18>)
 800129c:	f004 f954 	bl	8005548 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000334 	.word	0x20000334
 80012a8:	200003b8 	.word	0x200003b8

080012ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e00a      	b.n	80012d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012be:	f3af 8000 	nop.w
 80012c2:	4601      	mov	r1, r0
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	60ba      	str	r2, [r7, #8]
 80012ca:	b2ca      	uxtb	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbf0      	blt.n	80012be <_read+0x12>
  }

  return len;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e009      	b.n	800130c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	60ba      	str	r2, [r7, #8]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff faab 	bl	800085c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbf1      	blt.n	80012f8 <_write+0x12>
  }
  return len;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_close>:

int _close(int file)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001346:	605a      	str	r2, [r3, #4]
  return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_isatty>:

int _isatty(int file)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001390:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <_sbrk+0x5c>)
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <_sbrk+0x60>)
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <_sbrk+0x64>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <_sbrk+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d207      	bcs.n	80013c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b8:	f007 fbbc 	bl	8008b34 <__errno>
 80013bc:	4603      	mov	r3, r0
 80013be:	220c      	movs	r2, #12
 80013c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	e009      	b.n	80013dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <_sbrk+0x64>)
 80013d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20018000 	.word	0x20018000
 80013e8:	00000400 	.word	0x00000400
 80013ec:	20000534 	.word	0x20000534
 80013f0:	20001420 	.word	0x20001420

080013f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 800141e:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <MX_USART2_UART_Init+0x5c>)
 8001420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001422:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_USART2_UART_Init+0x58>)
 800145c:	f004 fd7d 	bl	8005f5a <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001466:	f7ff fc04 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000538 	.word	0x20000538
 8001474:	40004400 	.word	0x40004400

08001478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0ac      	sub	sp, #176	@ 0xb0
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2288      	movs	r2, #136	@ 0x88
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f007 fafd 	bl	8008a98 <memset>
  if(uartHandle->Instance==USART2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a25      	ldr	r2, [pc, #148]	@ (8001538 <HAL_UART_MspInit+0xc0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d143      	bne.n	8001530 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fb23 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c0:	f7ff fbd7 	bl	8000c72 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <HAL_UART_MspInit+0xc4>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	4a1c      	ldr	r2, [pc, #112]	@ (800153c <HAL_UART_MspInit+0xc4>)
 80014ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <HAL_UART_MspInit+0xc4>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_UART_MspInit+0xc4>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e0:	4a16      	ldr	r2, [pc, #88]	@ (800153c <HAL_UART_MspInit+0xc4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <HAL_UART_MspInit+0xc4>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 80014f4:	230c      	movs	r3, #12
 80014f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150c:	2307      	movs	r3, #7
 800150e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f000 fbae 	bl	8001c7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2105      	movs	r1, #5
 8001524:	2026      	movs	r0, #38	@ 0x26
 8001526:	f000 f98c 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800152a:	2026      	movs	r0, #38	@ 0x26
 800152c:	f000 f9a5 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001530:	bf00      	nop
 8001532:	37b0      	adds	r7, #176	@ 0xb0
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40004400 	.word	0x40004400
 800153c:	40021000 	.word	0x40021000

08001540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001578 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001544:	f7ff ff56 	bl	80013f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001548:	480c      	ldr	r0, [pc, #48]	@ (800157c <LoopForever+0x6>)
  ldr r1, =_edata
 800154a:	490d      	ldr	r1, [pc, #52]	@ (8001580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <LoopForever+0xe>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001560:	4c0a      	ldr	r4, [pc, #40]	@ (800158c <LoopForever+0x16>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156e:	f007 fae7 	bl	8008b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001572:	f7ff fa81 	bl	8000a78 <main>

08001576 <LoopForever>:

LoopForever:
    b LoopForever
 8001576:	e7fe      	b.n	8001576 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001578:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001584:	08009ab8 	.word	0x08009ab8
  ldr r2, =_sbss
 8001588:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800158c:	2000141c 	.word	0x2000141c

08001590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_2_IRQHandler>
	...

08001594 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <HAL_Init+0x3c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <HAL_Init+0x3c>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015aa:	2003      	movs	r0, #3
 80015ac:	f000 f93e 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b0:	200f      	movs	r0, #15
 80015b2:	f000 f80f 	bl	80015d4 <HAL_InitTick>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	e001      	b.n	80015c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015c2:	f7ff fded 	bl	80011a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <HAL_InitTick+0x6c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <HAL_InitTick+0x70>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <HAL_InitTick+0x6c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f949 	bl	8001896 <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10f      	bne.n	800162a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d809      	bhi.n	8001624 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f913 	bl	8001842 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800161c:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <HAL_InitTick+0x74>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e007      	b.n	8001634 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e004      	b.n	8001634 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e001      	b.n	8001634 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	200005c0 	.word	0x200005c0

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200005c0 	.word	0x200005c0

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	@ (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	@ (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	@ (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	@ 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	@ 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e098      	b.n	80019f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a00 <HAL_DMA_Init+0x150>)
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d80f      	bhi.n	80018ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a04 <HAL_DMA_Init+0x154>)
 80018d6:	4413      	add	r3, r2
 80018d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001a08 <HAL_DMA_Init+0x158>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	009a      	lsls	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a48      	ldr	r2, [pc, #288]	@ (8001a0c <HAL_DMA_Init+0x15c>)
 80018ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ec:	e00e      	b.n	800190c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <HAL_DMA_Init+0x160>)
 80018f6:	4413      	add	r3, r2
 80018f8:	4a43      	ldr	r2, [pc, #268]	@ (8001a08 <HAL_DMA_Init+0x158>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	009a      	lsls	r2, r3, #2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a42      	ldr	r2, [pc, #264]	@ (8001a14 <HAL_DMA_Init+0x164>)
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001926:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001966:	d039      	beq.n	80019dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <HAL_DMA_Init+0x15c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d11a      	bne.n	80019a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001972:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <HAL_DMA_Init+0x168>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f003 031c 	and.w	r3, r3, #28
 800197e:	210f      	movs	r1, #15
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	4924      	ldr	r1, [pc, #144]	@ (8001a18 <HAL_DMA_Init+0x168>)
 8001988:	4013      	ands	r3, r2
 800198a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <HAL_DMA_Init+0x168>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	f003 031c 	and.w	r3, r3, #28
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	491d      	ldr	r1, [pc, #116]	@ (8001a18 <HAL_DMA_Init+0x168>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
 80019a6:	e019      	b.n	80019dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019a8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <HAL_DMA_Init+0x16c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	f003 031c 	and.w	r3, r3, #28
 80019b4:	210f      	movs	r1, #15
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4917      	ldr	r1, [pc, #92]	@ (8001a1c <HAL_DMA_Init+0x16c>)
 80019be:	4013      	ands	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019c2:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <HAL_DMA_Init+0x16c>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f003 031c 	and.w	r3, r3, #28
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	4911      	ldr	r1, [pc, #68]	@ (8001a1c <HAL_DMA_Init+0x16c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40020407 	.word	0x40020407
 8001a04:	bffdfff8 	.word	0xbffdfff8
 8001a08:	cccccccd 	.word	0xcccccccd
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	bffdfbf8 	.word	0xbffdfbf8
 8001a14:	40020400 	.word	0x40020400
 8001a18:	400200a8 	.word	0x400200a8
 8001a1c:	400204a8 	.word	0x400204a8

08001a20 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d008      	beq.n	8001a4a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e022      	b.n	8001a90 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 020e 	bic.w	r2, r2, #14
 8001a58:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	f003 021c 	and.w	r2, r3, #28
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d005      	beq.n	8001ac0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	e029      	b.n	8001b14 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 020e 	bic.w	r2, r2, #14
 8001ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae4:	f003 021c 	and.w	r2, r3, #28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
    }
  }
  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f003 031c 	and.w	r3, r3, #28
 8001b3e:	2204      	movs	r2, #4
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d026      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x7a>
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d021      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0204 	bic.w	r2, r2, #4
 8001b70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f003 021c 	and.w	r2, r3, #28
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	2104      	movs	r1, #4
 8001b80:	fa01 f202 	lsl.w	r2, r1, r2
 8001b84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d071      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b96:	e06c      	b.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	f003 031c 	and.w	r3, r3, #28
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02e      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xec>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d029      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020a 	bic.w	r2, r2, #10
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be0:	f003 021c 	and.w	r2, r3, #28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2102      	movs	r1, #2
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d038      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c08:	e033      	b.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	f003 031c 	and.w	r3, r3, #28
 8001c12:	2208      	movs	r2, #8
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02a      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d025      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 020e 	bic.w	r2, r2, #14
 8001c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3c:	f003 021c 	and.w	r2, r3, #28
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
}
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	e17f      	b.n	8001f8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8171 	beq.w	8001f86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d005      	beq.n	8001cbc <HAL_GPIO_Init+0x40>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d130      	bne.n	8001d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 0201 	and.w	r2, r3, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d118      	bne.n	8001d5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f003 0201 	and.w	r2, r3, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d017      	beq.n	8001d98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d123      	bne.n	8001dec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	6939      	ldr	r1, [r7, #16]
 8001de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80ac 	beq.w	8001f86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fac <HAL_GPIO_Init+0x330>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e32:	4a5e      	ldr	r2, [pc, #376]	@ (8001fac <HAL_GPIO_Init+0x330>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fac <HAL_GPIO_Init+0x330>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e46:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb0 <HAL_GPIO_Init+0x334>)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e70:	d025      	beq.n	8001ebe <HAL_GPIO_Init+0x242>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb4 <HAL_GPIO_Init+0x338>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <HAL_GPIO_Init+0x23e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb8 <HAL_GPIO_Init+0x33c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x23a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4d      	ldr	r2, [pc, #308]	@ (8001fbc <HAL_GPIO_Init+0x340>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x236>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc0 <HAL_GPIO_Init+0x344>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x232>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4b      	ldr	r2, [pc, #300]	@ (8001fc4 <HAL_GPIO_Init+0x348>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x22e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fc8 <HAL_GPIO_Init+0x34c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x22a>
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	e00c      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	e00a      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e008      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e004      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	f002 0203 	and.w	r2, r2, #3
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	4093      	lsls	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ed0:	4937      	ldr	r1, [pc, #220]	@ (8001fb0 <HAL_GPIO_Init+0x334>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ede:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f02:	4a32      	ldr	r2, [pc, #200]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f08:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f2c:	4a27      	ldr	r2, [pc, #156]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f56:	4a1d      	ldr	r2, [pc, #116]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f80:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f ae78 	bne.w	8001c8c <HAL_GPIO_Init+0x10>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	48000400 	.word	0x48000400
 8001fb8:	48000800 	.word	0x48000800
 8001fbc:	48000c00 	.word	0x48000c00
 8001fc0:	48001000 	.word	0x48001000
 8001fc4:	48001400 	.word	0x48001400
 8001fc8:	48001800 	.word	0x48001800
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e08d      	b.n	800212e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fbba 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	@ 0x24
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002050:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002060:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e006      	b.n	8002088 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002086:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d108      	bne.n	80020a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	e007      	b.n	80020b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69d9      	ldr	r1, [r3, #28]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	f040 80f9 	bne.w	8002352 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_I2C_Mem_Write+0x34>
 8002166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002172:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0ed      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_I2C_Mem_Write+0x4e>
 8002182:	2302      	movs	r3, #2
 8002184:	e0e6      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800218e:	f7ff fa71 	bl	8001674 <HAL_GetTick>
 8002192:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2319      	movs	r3, #25
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fbbb 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d1      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2221      	movs	r2, #33	@ 0x21
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d8:	88f8      	ldrh	r0, [r7, #6]
 80021da:	893a      	ldrh	r2, [r7, #8]
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 facb 	bl	8002784 <I2C_RequestMemoryWrite>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0a9      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2bff      	cmp	r3, #255	@ 0xff
 8002208:	d90e      	bls.n	8002228 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	22ff      	movs	r2, #255	@ 0xff
 800220e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	b2da      	uxtb	r2, r3
 8002216:	8979      	ldrh	r1, [r7, #10]
 8002218:	2300      	movs	r3, #0
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fd3f 	bl	8002ca4 <I2C_TransferConfig>
 8002226:	e00f      	b.n	8002248 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002236:	b2da      	uxtb	r2, r3
 8002238:	8979      	ldrh	r1, [r7, #10]
 800223a:	2300      	movs	r3, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fd2e 	bl	8002ca4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fbbe 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e07b      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d034      	beq.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	d130      	bne.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fb37 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e04d      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2bff      	cmp	r3, #255	@ 0xff
 80022c0:	d90e      	bls.n	80022e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	22ff      	movs	r2, #255	@ 0xff
 80022c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	2300      	movs	r3, #0
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fce3 	bl	8002ca4 <I2C_TransferConfig>
 80022de:	e00f      	b.n	8002300 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	8979      	ldrh	r1, [r7, #10]
 80022f2:	2300      	movs	r3, #0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fcd2 	bl	8002ca4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d19e      	bne.n	8002248 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fba4 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e01a      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2220      	movs	r2, #32
 8002324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HAL_I2C_Mem_Write+0x224>)
 8002332:	400b      	ands	r3, r1
 8002334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
  }
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	fe00e800 	.word	0xfe00e800

08002360 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	817b      	strh	r3, [r7, #10]
 8002372:	460b      	mov	r3, r1
 8002374:	813b      	strh	r3, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	f040 80fd 	bne.w	8002582 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_I2C_Mem_Read+0x34>
 800238e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800239a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0f1      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Mem_Read+0x4e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e0ea      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b6:	f7ff f95d 	bl	8001674 <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 faa7 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d5      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2222      	movs	r2, #34	@ 0x22
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002400:	88f8      	ldrh	r0, [r7, #6]
 8002402:	893a      	ldrh	r2, [r7, #8]
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4603      	mov	r3, r0
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fa0b 	bl	800282c <I2C_RequestMemoryRead>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0ad      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	2bff      	cmp	r3, #255	@ 0xff
 8002430:	d90e      	bls.n	8002450 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	b2da      	uxtb	r2, r3
 800243e:	8979      	ldrh	r1, [r7, #10]
 8002440:	4b52      	ldr	r3, [pc, #328]	@ (800258c <HAL_I2C_Mem_Read+0x22c>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fc2b 	bl	8002ca4 <I2C_TransferConfig>
 800244e:	e00f      	b.n	8002470 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	b2da      	uxtb	r2, r3
 8002460:	8979      	ldrh	r1, [r7, #10]
 8002462:	4b4a      	ldr	r3, [pc, #296]	@ (800258c <HAL_I2C_Mem_Read+0x22c>)
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fc1a 	bl	8002ca4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	2104      	movs	r1, #4
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fa4e 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07c      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d034      	beq.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d130      	bne.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	@ 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fa1f 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e04d      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2bff      	cmp	r3, #255	@ 0xff
 80024f0:	d90e      	bls.n	8002510 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fbcb 	bl	8002ca4 <I2C_TransferConfig>
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fbba 	bl	8002ca4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d19a      	bne.n	8002470 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa8c 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01a      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_I2C_Mem_Read+0x230>)
 8002562:	400b      	ands	r3, r1
 8002564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	80002400 	.word	0x80002400
 8002590:	fe00e800 	.word	0xfe00e800

08002594 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	@ 0x28
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	f040 80d6 	bne.w	8002762 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0cc      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_I2C_IsDeviceReady+0x44>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e0c5      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x1d0>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2224      	movs	r2, #36	@ 0x24
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_I2C_IsDeviceReady+0x72>
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002600:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002604:	e006      	b.n	8002614 <HAL_I2C_IsDeviceReady+0x80>
 8002606:	897b      	ldrh	r3, [r7, #10]
 8002608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002610:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800261a:	f7ff f82b 	bl	8001674 <HAL_GetTick>
 800261e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	bf0c      	ite	eq
 800262e:	2301      	moveq	r3, #1
 8002630:	2300      	movne	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b10      	cmp	r3, #16
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800264c:	e034      	b.n	80026b8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d01a      	beq.n	800268c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7ff f80d 	bl	8001674 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <HAL_I2C_IsDeviceReady+0xd8>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e06b      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b20      	cmp	r3, #32
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026b8:	7ffb      	ldrb	r3, [r7, #31]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <HAL_I2C_IsDeviceReady+0x130>
 80026be:	7fbb      	ldrb	r3, [r7, #30]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0c4      	beq.n	800264e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d01a      	beq.n	8002708 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	2120      	movs	r1, #32
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f91d 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e03b      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2220      	movs	r2, #32
 80026f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e02d      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	2120      	movs	r1, #32
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f902 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e020      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2210      	movs	r2, #16
 8002728:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2220      	movs	r2, #32
 8002730:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3301      	adds	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	f63f af56 	bhi.w	80025ee <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	4608      	mov	r0, r1
 800278e:	4611      	mov	r1, r2
 8002790:	461a      	mov	r2, r3
 8002792:	4603      	mov	r3, r0
 8002794:	817b      	strh	r3, [r7, #10]
 8002796:	460b      	mov	r3, r1
 8002798:	813b      	strh	r3, [r7, #8]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	8979      	ldrh	r1, [r7, #10]
 80027a4:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <I2C_RequestMemoryWrite+0xa4>)
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fa79 	bl	8002ca4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	69b9      	ldr	r1, [r7, #24]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f909 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e02c      	b.n	8002820 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027cc:	893b      	ldrh	r3, [r7, #8]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80027d6:	e015      	b.n	8002804 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027d8:	893b      	ldrh	r3, [r7, #8]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	69b9      	ldr	r1, [r7, #24]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8ef 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e012      	b.n	8002820 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027fa:	893b      	ldrh	r3, [r7, #8]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2200      	movs	r2, #0
 800280c:	2180      	movs	r1, #128	@ 0x80
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f884 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	80002000 	.word	0x80002000

0800282c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	4608      	mov	r0, r1
 8002836:	4611      	mov	r1, r2
 8002838:	461a      	mov	r2, r3
 800283a:	4603      	mov	r3, r0
 800283c:	817b      	strh	r3, [r7, #10]
 800283e:	460b      	mov	r3, r1
 8002840:	813b      	strh	r3, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	8979      	ldrh	r1, [r7, #10]
 800284c:	4b20      	ldr	r3, [pc, #128]	@ (80028d0 <I2C_RequestMemoryRead+0xa4>)
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2300      	movs	r3, #0
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fa26 	bl	8002ca4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f8b6 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e02c      	b.n	80028c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002872:	893b      	ldrh	r3, [r7, #8]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	629a      	str	r2, [r3, #40]	@ 0x28
 800287c:	e015      	b.n	80028aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800287e:	893b      	ldrh	r3, [r7, #8]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	b29b      	uxth	r3, r3
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	69b9      	ldr	r1, [r7, #24]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f89c 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e012      	b.n	80028c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028a0:	893b      	ldrh	r3, [r7, #8]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2140      	movs	r1, #64	@ 0x40
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f831 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	80002000 	.word	0x80002000

080028d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d103      	bne.n	80028f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d007      	beq.n	8002910 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	619a      	str	r2, [r3, #24]
  }
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292c:	e03b      	b.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	6839      	ldr	r1, [r7, #0]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8d6 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d02d      	beq.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7fe fe93 	bl	8001674 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnFlagUntilTimeout+0x44>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d122      	bne.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	429a      	cmp	r2, r3
 800297c:	d113      	bne.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4013      	ands	r3, r2
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d0b4      	beq.n	800292e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029da:	e033      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f87f 	bl	8002ae4 <I2C_IsErrorOccurred>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e031      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d025      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7fe fe3c 	bl	8001674 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11a      	bne.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d013      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d1c4      	bne.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a68:	e02f      	b.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f838 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7fe fdf9 	bl	8001674 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d013      	beq.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e007      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d1c8      	bne.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	@ 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d068      	beq.n	8002be2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2210      	movs	r2, #16
 8002b16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b18:	e049      	b.n	8002bae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d045      	beq.n	8002bae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7fe fda7 	bl	8001674 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_IsErrorOccurred+0x54>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d13a      	bne.n	8002bae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b5a:	d121      	bne.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b62:	d01d      	beq.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d01a      	beq.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b7a:	f7fe fd7b 	bl	8001674 <HAL_GetTick>
 8002b7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b80:	e00e      	b.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b82:	f7fe fd77 	bl	8001674 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b19      	cmp	r3, #25
 8002b8e:	d907      	bls.n	8002ba0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f043 0320 	orr.w	r3, r3, #32
 8002b96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002b9e:	e006      	b.n	8002bae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d1e9      	bne.n	8002b82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d003      	beq.n	8002bc4 <I2C_IsErrorOccurred+0xe0>
 8002bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0aa      	beq.n	8002b1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01c      	beq.n	8002c92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff fe3b 	bl	80028d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <I2C_IsErrorOccurred+0x1bc>)
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002c92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3728      	adds	r7, #40	@ 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	fe00e800 	.word	0xfe00e800

08002ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cbc:	7a7b      	ldrb	r3, [r7, #9]
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	0d5b      	lsrs	r3, r3, #21
 8002cde:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ce2:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <I2C_TransferConfig+0x60>)
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	ea02 0103 	and.w	r1, r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	03ff63ff 	.word	0x03ff63ff

08002d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d138      	bne.n	8002d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e032      	b.n	8002d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	@ 0x24
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d139      	bne.n	8002e28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e033      	b.n	8002e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2224      	movs	r2, #36	@ 0x24
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002df0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e3c:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40007000 	.word	0x40007000

08002e54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e62:	d130      	bne.n	8002ec6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e64:	4b23      	ldr	r3, [pc, #140]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e70:	d038      	beq.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e72:	4b20      	ldr	r3, [pc, #128]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2232      	movs	r2, #50	@ 0x32
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0c9b      	lsrs	r3, r3, #18
 8002e94:	3301      	adds	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e98:	e002      	b.n	8002ea0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea0:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eac:	d102      	bne.n	8002eb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f2      	bne.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec0:	d110      	bne.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e00f      	b.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed2:	d007      	beq.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ed4:	4b07      	ldr	r3, [pc, #28]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002edc:	4a05      	ldr	r2, [pc, #20]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ee2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	431bde83 	.word	0x431bde83

08002f00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e3ca      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f12:	4b97      	ldr	r3, [pc, #604]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f1c:	4b94      	ldr	r3, [pc, #592]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80e4 	beq.w	80030fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <HAL_RCC_OscConfig+0x4a>
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	f040 808b 	bne.w	8003058 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 8087 	bne.w	8003058 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f4a:	4b89      	ldr	r3, [pc, #548]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x62>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e3a2      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1a      	ldr	r2, [r3, #32]
 8002f66:	4b82      	ldr	r3, [pc, #520]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_RCC_OscConfig+0x7c>
 8002f72:	4b7f      	ldr	r3, [pc, #508]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f7a:	e005      	b.n	8002f88 <HAL_RCC_OscConfig+0x88>
 8002f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d223      	bcs.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fd55 	bl	8003a40 <RCC_SetFlashLatencyFromMSIRange>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e383      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa0:	4b73      	ldr	r3, [pc, #460]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a72      	ldr	r2, [pc, #456]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	f043 0308 	orr.w	r3, r3, #8
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b70      	ldr	r3, [pc, #448]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	496d      	ldr	r1, [pc, #436]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	4968      	ldr	r1, [pc, #416]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
 8002fd2:	e025      	b.n	8003020 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd4:	4b66      	ldr	r3, [pc, #408]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a65      	ldr	r2, [pc, #404]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fda:	f043 0308 	orr.w	r3, r3, #8
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b63      	ldr	r3, [pc, #396]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4960      	ldr	r1, [pc, #384]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	495b      	ldr	r1, [pc, #364]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fd15 	bl	8003a40 <RCC_SetFlashLatencyFromMSIRange>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e343      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003020:	f000 fc4a 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b52      	ldr	r3, [pc, #328]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	4950      	ldr	r1, [pc, #320]	@ (8003174 <HAL_RCC_OscConfig+0x274>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	4a4e      	ldr	r2, [pc, #312]	@ (8003178 <HAL_RCC_OscConfig+0x278>)
 800303e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003040:	4b4e      	ldr	r3, [pc, #312]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fac5 	bl	80015d4 <HAL_InitTick>
 800304a:	4603      	mov	r3, r0
 800304c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d052      	beq.n	80030fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	e327      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d032      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003060:	4b43      	ldr	r3, [pc, #268]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a42      	ldr	r2, [pc, #264]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800306c:	f7fe fb02 	bl	8001674 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003074:	f7fe fafe 	bl	8001674 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e310      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003086:	4b3a      	ldr	r3, [pc, #232]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003092:	4b37      	ldr	r3, [pc, #220]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a36      	ldr	r2, [pc, #216]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b34      	ldr	r3, [pc, #208]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4931      	ldr	r1, [pc, #196]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	492c      	ldr	r1, [pc, #176]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
 80030c4:	e01a      	b.n	80030fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a29      	ldr	r2, [pc, #164]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d2:	f7fe facf 	bl	8001674 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030da:	f7fe facb 	bl	8001674 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e2dd      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ec:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCC_OscConfig+0x1da>
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d074      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b08      	cmp	r3, #8
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x21a>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b0c      	cmp	r3, #12
 8003112:	d10e      	bne.n	8003132 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d10b      	bne.n	8003132 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d064      	beq.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d160      	bne.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e2ba      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x24a>
 800313c:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e026      	b.n	8003198 <HAL_RCC_OscConfig+0x298>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003152:	d115      	bne.n	8003180 <HAL_RCC_OscConfig+0x280>
 8003154:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 800315a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a02      	ldr	r2, [pc, #8]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e014      	b.n	8003198 <HAL_RCC_OscConfig+0x298>
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	08009a2c 	.word	0x08009a2c
 8003178:	20000000 	.word	0x20000000
 800317c:	20000004 	.word	0x20000004
 8003180:	4ba0      	ldr	r3, [pc, #640]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a9f      	ldr	r2, [pc, #636]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b9d      	ldr	r3, [pc, #628]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a9c      	ldr	r2, [pc, #624]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fa68 	bl	8001674 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe fa64 	bl	8001674 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	@ 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e276      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ba:	4b92      	ldr	r3, [pc, #584]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x2a8>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe fa54 	bl	8001674 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe fa50 	bl	8001674 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e262      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e2:	4b88      	ldr	r3, [pc, #544]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2d0>
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d060      	beq.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d005      	beq.n	8003210 <HAL_RCC_OscConfig+0x310>
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d119      	bne.n	800323e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d116      	bne.n	800323e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003210:	4b7c      	ldr	r3, [pc, #496]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_OscConfig+0x328>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e23f      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003228:	4b76      	ldr	r3, [pc, #472]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	4973      	ldr	r1, [pc, #460]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800323c:	e040      	b.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d023      	beq.n	800328e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003246:	4b6f      	ldr	r3, [pc, #444]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6e      	ldr	r2, [pc, #440]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fe fa0f 	bl	8001674 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325a:	f7fe fa0b 	bl	8001674 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e21d      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326c:	4b65      	ldr	r3, [pc, #404]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b62      	ldr	r3, [pc, #392]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	495f      	ldr	r1, [pc, #380]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
 800328c:	e018      	b.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b5d      	ldr	r3, [pc, #372]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5c      	ldr	r2, [pc, #368]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe f9eb 	bl	8001674 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a2:	f7fe f9e7 	bl	8001674 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1f9      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b4:	4b53      	ldr	r3, [pc, #332]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d03c      	beq.n	8003346 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01c      	beq.n	800330e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032da:	4a4a      	ldr	r2, [pc, #296]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe f9c6 	bl	8001674 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fe f9c2 	bl	8001674 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1d4      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032fe:	4b41      	ldr	r3, [pc, #260]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ef      	beq.n	80032ec <HAL_RCC_OscConfig+0x3ec>
 800330c:	e01b      	b.n	8003346 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330e:	4b3d      	ldr	r3, [pc, #244]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003314:	4a3b      	ldr	r2, [pc, #236]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331e:	f7fe f9a9 	bl	8001674 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003326:	f7fe f9a5 	bl	8001674 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1b7      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003338:	4b32      	ldr	r3, [pc, #200]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1ef      	bne.n	8003326 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80a6 	beq.w	80034a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003354:	2300      	movs	r3, #0
 8003356:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003358:	4b2a      	ldr	r3, [pc, #168]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003364:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003368:	4a26      	ldr	r2, [pc, #152]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 800336a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003370:	4b24      	ldr	r3, [pc, #144]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337c:	2301      	movs	r3, #1
 800337e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003380:	4b21      	ldr	r3, [pc, #132]	@ (8003408 <HAL_RCC_OscConfig+0x508>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d118      	bne.n	80033be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800338c:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <HAL_RCC_OscConfig+0x508>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1d      	ldr	r2, [pc, #116]	@ (8003408 <HAL_RCC_OscConfig+0x508>)
 8003392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003396:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003398:	f7fe f96c 	bl	8001674 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fe f968 	bl	8001674 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e17a      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b2:	4b15      	ldr	r3, [pc, #84]	@ (8003408 <HAL_RCC_OscConfig+0x508>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d108      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4d8>
 80033c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033d6:	e029      	b.n	800342c <HAL_RCC_OscConfig+0x52c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d115      	bne.n	800340c <HAL_RCC_OscConfig+0x50c>
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	4a07      	ldr	r2, [pc, #28]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033f0:	4b04      	ldr	r3, [pc, #16]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	4a03      	ldr	r2, [pc, #12]	@ (8003404 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003400:	e014      	b.n	800342c <HAL_RCC_OscConfig+0x52c>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	4b9c      	ldr	r3, [pc, #624]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003412:	4a9b      	ldr	r2, [pc, #620]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800341c:	4b98      	ldr	r3, [pc, #608]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	4a97      	ldr	r2, [pc, #604]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003424:	f023 0304 	bic.w	r3, r3, #4
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d016      	beq.n	8003462 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe f91e 	bl	8001674 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fe f91a 	bl	8001674 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e12a      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003452:	4b8b      	ldr	r3, [pc, #556]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ed      	beq.n	800343c <HAL_RCC_OscConfig+0x53c>
 8003460:	e015      	b.n	800348e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fe f907 	bl	8001674 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe f903 	bl	8001674 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e113      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003480:	4b7f      	ldr	r3, [pc, #508]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ed      	bne.n	800346a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348e:	7ffb      	ldrb	r3, [r7, #31]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003494:	4b7a      	ldr	r3, [pc, #488]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	4a79      	ldr	r2, [pc, #484]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 800349a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800349e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80fe 	beq.w	80036a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	f040 80d0 	bne.w	8003654 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034b4:	4b72      	ldr	r3, [pc, #456]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0203 	and.w	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d130      	bne.n	800352a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	3b01      	subs	r3, #1
 80034d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d127      	bne.n	800352a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d11f      	bne.n	800352a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034f4:	2a07      	cmp	r2, #7
 80034f6:	bf14      	ite	ne
 80034f8:	2201      	movne	r2, #1
 80034fa:	2200      	moveq	r2, #0
 80034fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fe:	4293      	cmp	r3, r2
 8003500:	d113      	bne.n	800352a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	3b01      	subs	r3, #1
 8003510:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d109      	bne.n	800352a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d06e      	beq.n	8003608 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d069      	beq.n	8003604 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003530:	4b53      	ldr	r3, [pc, #332]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800353c:	4b50      	ldr	r3, [pc, #320]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0ad      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800354c:	4b4c      	ldr	r3, [pc, #304]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a4b      	ldr	r2, [pc, #300]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003552:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003556:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003558:	f7fe f88c 	bl	8001674 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe f888 	bl	8001674 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e09a      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003572:	4b43      	ldr	r3, [pc, #268]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357e:	4b40      	ldr	r3, [pc, #256]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	4b40      	ldr	r3, [pc, #256]	@ (8003684 <HAL_RCC_OscConfig+0x784>)
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800358e:	3a01      	subs	r2, #1
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003598:	0212      	lsls	r2, r2, #8
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035a0:	0852      	lsrs	r2, r2, #1
 80035a2:	3a01      	subs	r2, #1
 80035a4:	0552      	lsls	r2, r2, #21
 80035a6:	4311      	orrs	r1, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035ac:	0852      	lsrs	r2, r2, #1
 80035ae:	3a01      	subs	r2, #1
 80035b0:	0652      	lsls	r2, r2, #25
 80035b2:	4311      	orrs	r1, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035b8:	0912      	lsrs	r2, r2, #4
 80035ba:	0452      	lsls	r2, r2, #17
 80035bc:	430a      	orrs	r2, r1
 80035be:	4930      	ldr	r1, [pc, #192]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 80035ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035dc:	f7fe f84a 	bl	8001674 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe f846 	bl	8001674 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e058      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f6:	4b22      	ldr	r3, [pc, #136]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003602:	e050      	b.n	80036a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e04f      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003608:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d148      	bne.n	80036a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003614:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003620:	4b17      	ldr	r3, [pc, #92]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a16      	ldr	r2, [pc, #88]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800362a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800362c:	f7fe f822 	bl	8001674 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe f81e 	bl	8001674 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e030      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	4b0e      	ldr	r3, [pc, #56]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x734>
 8003652:	e028      	b.n	80036a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d023      	beq.n	80036a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365a:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a08      	ldr	r2, [pc, #32]	@ (8003680 <HAL_RCC_OscConfig+0x780>)
 8003660:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fe f805 	bl	8001674 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366c:	e00c      	b.n	8003688 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe f801 	bl	8001674 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d905      	bls.n	8003688 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e013      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
 8003680:	40021000 	.word	0x40021000
 8003684:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_RCC_OscConfig+0x7b0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ec      	bne.n	800366e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003694:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <HAL_RCC_OscConfig+0x7b0>)
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	4905      	ldr	r1, [pc, #20]	@ (80036b0 <HAL_RCC_OscConfig+0x7b0>)
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <HAL_RCC_OscConfig+0x7b4>)
 800369c:	4013      	ands	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
 80036a0:	e001      	b.n	80036a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	feeefffc 	.word	0xfeeefffc

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0e7      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b75      	ldr	r3, [pc, #468]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d910      	bls.n	80036fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b72      	ldr	r3, [pc, #456]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 0207 	bic.w	r2, r3, #7
 80036e2:	4970      	ldr	r1, [pc, #448]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b6e      	ldr	r3, [pc, #440]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0cf      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d010      	beq.n	800372a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	4b66      	ldr	r3, [pc, #408]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003714:	429a      	cmp	r2, r3
 8003716:	d908      	bls.n	800372a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b63      	ldr	r3, [pc, #396]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4960      	ldr	r1, [pc, #384]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d04c      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	4b5a      	ldr	r3, [pc, #360]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d121      	bne.n	800378e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0a6      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003756:	4b54      	ldr	r3, [pc, #336]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e09a      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800376e:	4b4e      	ldr	r3, [pc, #312]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e08e      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377e:	4b4a      	ldr	r3, [pc, #296]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e086      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4943      	ldr	r1, [pc, #268]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a0:	f7fd ff68 	bl	8001674 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fd ff64 	bl	8001674 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e06e      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b3a      	ldr	r3, [pc, #232]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d010      	beq.n	80037fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d208      	bcs.n	80037fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b2e      	ldr	r3, [pc, #184]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	492b      	ldr	r1, [pc, #172]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037fe:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d210      	bcs.n	800382e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380c:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 0207 	bic.w	r2, r3, #7
 8003814:	4923      	ldr	r1, [pc, #140]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381c:	4b21      	ldr	r3, [pc, #132]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d001      	beq.n	800382e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e036      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383a:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4918      	ldr	r1, [pc, #96]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d009      	beq.n	800386c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003858:	4b13      	ldr	r3, [pc, #76]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4910      	ldr	r1, [pc, #64]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800386c:	f000 f824 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	490b      	ldr	r1, [pc, #44]	@ (80038ac <HAL_RCC_ClockConfig+0x1f4>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
 8003888:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 800388a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1fc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fe9f 	bl	80015d4 <HAL_InitTick>
 8003896:	4603      	mov	r3, r0
 8003898:	72fb      	strb	r3, [r7, #11]

  return status;
 800389a:	7afb      	ldrb	r3, [r7, #11]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40022000 	.word	0x40022000
 80038a8:	40021000 	.word	0x40021000
 80038ac:	08009a2c 	.word	0x08009a2c
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c6:	4b3e      	ldr	r3, [pc, #248]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d0:	4b3b      	ldr	r3, [pc, #236]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x34>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d121      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d11e      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038ec:	4b34      	ldr	r3, [pc, #208]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038f8:	4b31      	ldr	r3, [pc, #196]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e005      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003908:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003914:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b04      	cmp	r3, #4
 800392e:	d102      	bne.n	8003936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003930:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e004      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d101      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800393c:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x114>)
 800393e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d134      	bne.n	80039b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003946:	4b1e      	ldr	r3, [pc, #120]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d003      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0xa6>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d003      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0xac>
 800395c:	e005      	b.n	800396a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003960:	617b      	str	r3, [r7, #20]
      break;
 8003962:	e005      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003966:	617b      	str	r3, [r7, #20]
      break;
 8003968:	e002      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	617b      	str	r3, [r7, #20]
      break;
 800396e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003970:	4b13      	ldr	r3, [pc, #76]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	3301      	adds	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	fb03 f202 	mul.w	r2, r3, r2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003996:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	0e5b      	lsrs	r3, r3, #25
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	3301      	adds	r3, #1
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039b0:	69bb      	ldr	r3, [r7, #24]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	@ 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08009a44 	.word	0x08009a44
 80039c8:	00f42400 	.word	0x00f42400
 80039cc:	007a1200 	.word	0x007a1200

080039d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b03      	ldr	r3, [pc, #12]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000000 	.word	0x20000000

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039ec:	f7ff fff0 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4904      	ldr	r1, [pc, #16]	@ (8003a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	08009a3c 	.word	0x08009a3c

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a18:	f7ff ffda 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0adb      	lsrs	r3, r3, #11
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4904      	ldr	r1, [pc, #16]	@ (8003a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08009a3c 	.word	0x08009a3c

08003a40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a58:	f7ff f9ee 	bl	8002e38 <HAL_PWREx_GetVoltageRange>
 8003a5c:	6178      	str	r0, [r7, #20]
 8003a5e:	e014      	b.n	8003a8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	4b25      	ldr	r3, [pc, #148]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	4a24      	ldr	r2, [pc, #144]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6c:	4b22      	ldr	r3, [pc, #136]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a78:	f7ff f9de 	bl	8002e38 <HAL_PWREx_GetVoltageRange>
 8003a7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a90:	d10b      	bne.n	8003aaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b80      	cmp	r3, #128	@ 0x80
 8003a96:	d919      	bls.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a9c:	d902      	bls.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e013      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e010      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b80      	cmp	r3, #128	@ 0x80
 8003aae:	d902      	bls.n	8003ab6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e00a      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b80      	cmp	r3, #128	@ 0x80
 8003aba:	d102      	bne.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003abc:	2302      	movs	r3, #2
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e004      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b70      	cmp	r3, #112	@ 0x70
 8003ac6:	d101      	bne.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac8:	2301      	movs	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	4909      	ldr	r1, [pc, #36]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003adc:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40022000 	.word	0x40022000

08003b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d041      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b24:	d02a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b2a:	d824      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b30:	d008      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b36:	d81e      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b40:	d010      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b42:	e018      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b44:	4b86      	ldr	r3, [pc, #536]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a85      	ldr	r2, [pc, #532]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b50:	e015      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3304      	adds	r3, #4
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 f829 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b62:	e00c      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3320      	adds	r3, #32
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f914 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b74:	e003      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	74fb      	strb	r3, [r7, #19]
      break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b84:	4b76      	ldr	r3, [pc, #472]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b92:	4973      	ldr	r1, [pc, #460]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d041      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bb4:	d02a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bba:	d824      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bc6:	d81e      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bd2:	e018      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bd4:	4b62      	ldr	r3, [pc, #392]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a61      	ldr	r2, [pc, #388]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bde:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003be0:	e015      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 ffe1 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bf2:	e00c      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3320      	adds	r3, #32
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 f8cc 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c04:	e003      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	74fb      	strb	r3, [r7, #19]
      break;
 8003c0a:	e000      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c14:	4b52      	ldr	r3, [pc, #328]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c22:	494f      	ldr	r1, [pc, #316]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c2a:	e001      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80a0 	beq.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c42:	4b47      	ldr	r3, [pc, #284]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c52:	2300      	movs	r3, #0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c58:	4b41      	ldr	r3, [pc, #260]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5c:	4a40      	ldr	r2, [pc, #256]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c64:	4b3e      	ldr	r3, [pc, #248]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c70:	2301      	movs	r3, #1
 8003c72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c74:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a3a      	ldr	r2, [pc, #232]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c80:	f7fd fcf8 	bl	8001674 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c86:	e009      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fd fcf4 	bl	8001674 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d902      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	74fb      	strb	r3, [r7, #19]
        break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c9c:	4b31      	ldr	r3, [pc, #196]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ef      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d15c      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cae:	4b2c      	ldr	r3, [pc, #176]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01f      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d019      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ccc:	4b24      	ldr	r3, [pc, #144]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd8:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf8:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fcb3 	bl	8001674 <HAL_GetTick>
 8003d0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d10:	e00b      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fd fcaf 	bl	8001674 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d902      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	74fb      	strb	r3, [r7, #19]
            break;
 8003d28:	e006      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ec      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d4e:	4904      	ldr	r1, [pc, #16]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d56:	e009      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	74bb      	strb	r3, [r7, #18]
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6c:	7c7b      	ldrb	r3, [r7, #17]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d72:	4b9e      	ldr	r3, [pc, #632]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d76:	4a9d      	ldr	r2, [pc, #628]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8a:	4b98      	ldr	r3, [pc, #608]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f023 0203 	bic.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	4994      	ldr	r1, [pc, #592]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dac:	4b8f      	ldr	r3, [pc, #572]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f023 020c 	bic.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	498c      	ldr	r1, [pc, #560]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dce:	4b87      	ldr	r3, [pc, #540]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	4983      	ldr	r1, [pc, #524]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	497b      	ldr	r1, [pc, #492]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e12:	4b76      	ldr	r3, [pc, #472]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e20:	4972      	ldr	r1, [pc, #456]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e34:	4b6d      	ldr	r3, [pc, #436]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	496a      	ldr	r1, [pc, #424]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e56:	4b65      	ldr	r3, [pc, #404]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	4961      	ldr	r1, [pc, #388]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e78:	4b5c      	ldr	r3, [pc, #368]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e86:	4959      	ldr	r1, [pc, #356]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e9a:	4b54      	ldr	r3, [pc, #336]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea8:	4950      	ldr	r1, [pc, #320]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eca:	4948      	ldr	r1, [pc, #288]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ede:	4b43      	ldr	r3, [pc, #268]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eec:	493f      	ldr	r1, [pc, #252]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d028      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f00:	4b3a      	ldr	r3, [pc, #232]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f0e:	4937      	ldr	r1, [pc, #220]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f20:	4b32      	ldr	r3, [pc, #200]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a31      	ldr	r2, [pc, #196]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f2a:	60d3      	str	r3, [r2, #12]
 8003f2c:	e011      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fe36 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f4e:	7cfb      	ldrb	r3, [r7, #19]
 8003f50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d028      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f5e:	4b23      	ldr	r3, [pc, #140]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6c:	491f      	ldr	r1, [pc, #124]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f7c:	d106      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4a1a      	ldr	r2, [pc, #104]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f88:	60d3      	str	r3, [r2, #12]
 8003f8a:	e011      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fe07 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02b      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fca:	4908      	ldr	r1, [pc, #32]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fda:	d109      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fdc:	4b03      	ldr	r3, [pc, #12]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a02      	ldr	r2, [pc, #8]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe6:	60d3      	str	r3, [r2, #12]
 8003fe8:	e014      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2101      	movs	r1, #1
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fdd5 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02f      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004020:	4b2b      	ldr	r3, [pc, #172]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800402e:	4928      	ldr	r1, [pc, #160]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800403e:	d10d      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	2102      	movs	r1, #2
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fdb2 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d014      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004056:	7cfb      	ldrb	r3, [r7, #19]
 8004058:	74bb      	strb	r3, [r7, #18]
 800405a:	e011      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004064:	d10c      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3320      	adds	r3, #32
 800406a:	2102      	movs	r1, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fe93 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800408c:	4b10      	ldr	r3, [pc, #64]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004092:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800409a:	490d      	ldr	r1, [pc, #52]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ae:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040be:	4904      	ldr	r1, [pc, #16]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040e6:	d13e      	bne.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80040e8:	4bb2      	ldr	r3, [pc, #712]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040fa:	d028      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004102:	f200 8542 	bhi.w	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800410c:	d005      	beq.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004114:	d00e      	beq.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004116:	f000 bd38 	b.w	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800411a:	4ba6      	ldr	r3, [pc, #664]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b02      	cmp	r3, #2
 8004126:	f040 8532 	bne.w	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800412a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412e:	61fb      	str	r3, [r7, #28]
      break;
 8004130:	f000 bd2d 	b.w	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004134:	4b9f      	ldr	r3, [pc, #636]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	f040 8527 	bne.w	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004144:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004148:	61fb      	str	r3, [r7, #28]
      break;
 800414a:	f000 bd22 	b.w	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800414e:	4b99      	ldr	r3, [pc, #612]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800415a:	f040 851c 	bne.w	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800415e:	4b96      	ldr	r3, [pc, #600]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004160:	61fb      	str	r3, [r7, #28]
      break;
 8004162:	f000 bd18 	b.w	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004166:	4b93      	ldr	r3, [pc, #588]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d036      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d840      	bhi.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d003      	beq.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d020      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004188:	e039      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800418a:	4b8a      	ldr	r3, [pc, #552]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d116      	bne.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004196:	4b87      	ldr	r3, [pc, #540]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80041a2:	4b84      	ldr	r3, [pc, #528]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	e005      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80041ae:	4b81      	ldr	r3, [pc, #516]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	4a80      	ldr	r2, [pc, #512]	@ (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80041bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80041c2:	e01f      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
      break;
 80041c8:	e01c      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041ca:	4b7a      	ldr	r3, [pc, #488]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d6:	d102      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80041d8:	4b79      	ldr	r3, [pc, #484]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80041da:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80041dc:	e012      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
      break;
 80041e2:	e00f      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041e4:	4b73      	ldr	r3, [pc, #460]	@ (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041f0:	d102      	bne.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80041f2:	4b74      	ldr	r3, [pc, #464]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80041f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80041f6:	e005      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
      break;
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
      break;
 8004202:	bf00      	nop
    }

    switch(PeriphClk)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800420a:	f000 80dd 	beq.w	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004214:	f200 84c1 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800421e:	f000 80d3 	beq.w	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004228:	f200 84b7 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004232:	f000 835f 	beq.w	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423c:	f200 84ad 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004246:	f000 847e 	beq.w	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004250:	f200 84a3 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800425a:	f000 82cd 	beq.w	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004264:	f200 8499 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800426e:	f000 80ab 	beq.w	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004278:	f200 848f 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004282:	f000 8090 	beq.w	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428c:	f200 8485 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004296:	d07f      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800429e:	f200 847c 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a8:	f000 8403 	beq.w	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b2:	f200 8472 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042bc:	f000 83af 	beq.w	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c6:	f200 8468 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d0:	f000 8379 	beq.w	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042da:	f200 845e 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b80      	cmp	r3, #128	@ 0x80
 80042e2:	f000 8344 	beq.w	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b80      	cmp	r3, #128	@ 0x80
 80042ea:	f200 8456 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d84b      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 844f 	beq.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3b01      	subs	r3, #1
 8004300:	2b1f      	cmp	r3, #31
 8004302:	f200 844a 	bhi.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004306:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	080044f5 	.word	0x080044f5
 8004310:	08004563 	.word	0x08004563
 8004314:	08004b9b 	.word	0x08004b9b
 8004318:	080045f7 	.word	0x080045f7
 800431c:	08004b9b 	.word	0x08004b9b
 8004320:	08004b9b 	.word	0x08004b9b
 8004324:	08004b9b 	.word	0x08004b9b
 8004328:	0800467d 	.word	0x0800467d
 800432c:	08004b9b 	.word	0x08004b9b
 8004330:	08004b9b 	.word	0x08004b9b
 8004334:	08004b9b 	.word	0x08004b9b
 8004338:	08004b9b 	.word	0x08004b9b
 800433c:	08004b9b 	.word	0x08004b9b
 8004340:	08004b9b 	.word	0x08004b9b
 8004344:	08004b9b 	.word	0x08004b9b
 8004348:	080046f5 	.word	0x080046f5
 800434c:	08004b9b 	.word	0x08004b9b
 8004350:	08004b9b 	.word	0x08004b9b
 8004354:	08004b9b 	.word	0x08004b9b
 8004358:	08004b9b 	.word	0x08004b9b
 800435c:	08004b9b 	.word	0x08004b9b
 8004360:	08004b9b 	.word	0x08004b9b
 8004364:	08004b9b 	.word	0x08004b9b
 8004368:	08004b9b 	.word	0x08004b9b
 800436c:	08004b9b 	.word	0x08004b9b
 8004370:	08004b9b 	.word	0x08004b9b
 8004374:	08004b9b 	.word	0x08004b9b
 8004378:	08004b9b 	.word	0x08004b9b
 800437c:	08004b9b 	.word	0x08004b9b
 8004380:	08004b9b 	.word	0x08004b9b
 8004384:	08004b9b 	.word	0x08004b9b
 8004388:	08004777 	.word	0x08004777
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	f000 82c1 	beq.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004394:	f000 bc01 	b.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004398:	69b9      	ldr	r1, [r7, #24]
 800439a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800439e:	f000 fdd9 	bl	8004f54 <RCCEx_GetSAIxPeriphCLKFreq>
 80043a2:	61f8      	str	r0, [r7, #28]
      break;
 80043a4:	e3fa      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80043ac:	f000 fdd2 	bl	8004f54 <RCCEx_GetSAIxPeriphCLKFreq>
 80043b0:	61f8      	str	r0, [r7, #28]
      break;
 80043b2:	e3f3      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80043b4:	40021000 	.word	0x40021000
 80043b8:	0003d090 	.word	0x0003d090
 80043bc:	08009a44 	.word	0x08009a44
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80043c8:	4ba9      	ldr	r3, [pc, #676]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80043da:	d00c      	beq.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80043e2:	d87f      	bhi.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043ea:	d04e      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043f2:	d01d      	beq.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80043f4:	e076      	b.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80043f6:	4b9e      	ldr	r3, [pc, #632]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d172      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004402:	4b9b      	ldr	r3, [pc, #620]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800440e:	4b98      	ldr	r3, [pc, #608]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	e005      	b.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800441a:	4b95      	ldr	r3, [pc, #596]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800441c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	4a93      	ldr	r2, [pc, #588]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442c:	61fb      	str	r3, [r7, #28]
          break;
 800442e:	e05b      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004430:	4b8f      	ldr	r3, [pc, #572]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004438:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800443c:	d156      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800443e:	4b8c      	ldr	r3, [pc, #560]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800444a:	d14f      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800444c:	4b88      	ldr	r3, [pc, #544]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004456:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	fb03 f202 	mul.w	r2, r3, r2
 8004460:	4b83      	ldr	r3, [pc, #524]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	3301      	adds	r3, #1
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004472:	4b7f      	ldr	r3, [pc, #508]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	0d5b      	lsrs	r3, r3, #21
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	3301      	adds	r3, #1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	61fb      	str	r3, [r7, #28]
          break;
 8004488:	e030      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800448a:	4b79      	ldr	r3, [pc, #484]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004496:	d12b      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004498:	4b75      	ldr	r3, [pc, #468]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044a4:	d124      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80044a6:	4b72      	ldr	r3, [pc, #456]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	fb03 f202 	mul.w	r2, r3, r2
 80044ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	3301      	adds	r3, #1
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80044cc:	4b68      	ldr	r3, [pc, #416]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	0d5b      	lsrs	r3, r3, #21
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	3301      	adds	r3, #1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	61fb      	str	r3, [r7, #28]
          break;
 80044e2:	e005      	b.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80044e4:	bf00      	nop
 80044e6:	e359      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044e8:	bf00      	nop
 80044ea:	e357      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044ec:	bf00      	nop
 80044ee:	e355      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044f0:	bf00      	nop
        break;
 80044f2:	e353      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80044f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d827      	bhi.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004506:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	0800451d 	.word	0x0800451d
 8004510:	08004525 	.word	0x08004525
 8004514:	0800452d 	.word	0x0800452d
 8004518:	08004541 	.word	0x08004541
          frequency = HAL_RCC_GetPCLK2Freq();
 800451c:	f7ff fa7a 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8004520:	61f8      	str	r0, [r7, #28]
          break;
 8004522:	e01d      	b.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004524:	f7ff f9c8 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8004528:	61f8      	str	r0, [r7, #28]
          break;
 800452a:	e019      	b.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800452c:	4b50      	ldr	r3, [pc, #320]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004538:	d10f      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800453a:	4b4f      	ldr	r3, [pc, #316]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800453c:	61fb      	str	r3, [r7, #28]
          break;
 800453e:	e00c      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004540:	4b4b      	ldr	r3, [pc, #300]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d107      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004552:	61fb      	str	r3, [r7, #28]
          break;
 8004554:	e003      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004556:	bf00      	nop
 8004558:	e320      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800455a:	bf00      	nop
 800455c:	e31e      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800455e:	bf00      	nop
        break;
 8004560:	e31c      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004562:	4b43      	ldr	r3, [pc, #268]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	f003 030c 	and.w	r3, r3, #12
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d83a      	bhi.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004574:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045eb 	.word	0x080045eb
 8004584:	080045eb 	.word	0x080045eb
 8004588:	080045eb 	.word	0x080045eb
 800458c:	080045b9 	.word	0x080045b9
 8004590:	080045eb 	.word	0x080045eb
 8004594:	080045eb 	.word	0x080045eb
 8004598:	080045eb 	.word	0x080045eb
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045eb 	.word	0x080045eb
 80045a4:	080045eb 	.word	0x080045eb
 80045a8:	080045eb 	.word	0x080045eb
 80045ac:	080045d5 	.word	0x080045d5
          frequency = HAL_RCC_GetPCLK1Freq();
 80045b0:	f7ff fa1a 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80045b4:	61f8      	str	r0, [r7, #28]
          break;
 80045b6:	e01d      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80045b8:	f7ff f97e 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 80045bc:	61f8      	str	r0, [r7, #28]
          break;
 80045be:	e019      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045cc:	d10f      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80045ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80045d0:	61fb      	str	r3, [r7, #28]
          break;
 80045d2:	e00c      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045d4:	4b26      	ldr	r3, [pc, #152]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d107      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80045e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e6:	61fb      	str	r3, [r7, #28]
          break;
 80045e8:	e003      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80045ea:	bf00      	nop
 80045ec:	e2d6      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045ee:	bf00      	nop
 80045f0:	e2d4      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045f2:	bf00      	nop
        break;
 80045f4:	e2d2      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80045f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b30      	cmp	r3, #48	@ 0x30
 8004606:	d021      	beq.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b30      	cmp	r3, #48	@ 0x30
 800460c:	d829      	bhi.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b20      	cmp	r3, #32
 8004612:	d011      	beq.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b20      	cmp	r3, #32
 8004618:	d823      	bhi.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b10      	cmp	r3, #16
 8004624:	d004      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004626:	e01c      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004628:	f7ff f9de 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 800462c:	61f8      	str	r0, [r7, #28]
          break;
 800462e:	e01d      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004630:	f7ff f942 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8004634:	61f8      	str	r0, [r7, #28]
          break;
 8004636:	e019      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004638:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004644:	d10f      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004646:	4b0c      	ldr	r3, [pc, #48]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004648:	61fb      	str	r3, [r7, #28]
          break;
 800464a:	e00c      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800464c:	4b08      	ldr	r3, [pc, #32]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d107      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800465a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465e:	61fb      	str	r3, [r7, #28]
          break;
 8004660:	e003      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004662:	bf00      	nop
 8004664:	e29a      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004666:	bf00      	nop
 8004668:	e298      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800466a:	bf00      	nop
        break;
 800466c:	e296      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	08009a44 	.word	0x08009a44
 8004678:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800467c:	4b9b      	ldr	r3, [pc, #620]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2bc0      	cmp	r3, #192	@ 0xc0
 800468c:	d021      	beq.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2bc0      	cmp	r3, #192	@ 0xc0
 8004692:	d829      	bhi.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d011      	beq.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b80      	cmp	r3, #128	@ 0x80
 800469e:	d823      	bhi.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b40      	cmp	r3, #64	@ 0x40
 80046aa:	d004      	beq.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80046ac:	e01c      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046ae:	f7ff f99b 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80046b2:	61f8      	str	r0, [r7, #28]
          break;
 80046b4:	e01d      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80046b6:	f7ff f8ff 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 80046ba:	61f8      	str	r0, [r7, #28]
          break;
 80046bc:	e019      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046be:	4b8b      	ldr	r3, [pc, #556]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ca:	d10f      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80046cc:	4b88      	ldr	r3, [pc, #544]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80046ce:	61fb      	str	r3, [r7, #28]
          break;
 80046d0:	e00c      	b.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046d2:	4b86      	ldr	r3, [pc, #536]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d107      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80046e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e4:	61fb      	str	r3, [r7, #28]
          break;
 80046e6:	e003      	b.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80046e8:	bf00      	nop
 80046ea:	e257      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046ec:	bf00      	nop
 80046ee:	e255      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046f0:	bf00      	nop
        break;
 80046f2:	e253      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80046f4:	4b7d      	ldr	r3, [pc, #500]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004706:	d025      	beq.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470e:	d82c      	bhi.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004716:	d013      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471e:	d824      	bhi.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472c:	d004      	beq.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800472e:	e01c      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004730:	f7ff f95a 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004734:	61f8      	str	r0, [r7, #28]
          break;
 8004736:	e01d      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004738:	f7ff f8be 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 800473c:	61f8      	str	r0, [r7, #28]
          break;
 800473e:	e019      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004740:	4b6a      	ldr	r3, [pc, #424]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474c:	d10f      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800474e:	4b68      	ldr	r3, [pc, #416]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004750:	61fb      	str	r3, [r7, #28]
          break;
 8004752:	e00c      	b.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004754:	4b65      	ldr	r3, [pc, #404]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b02      	cmp	r3, #2
 8004760:	d107      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004766:	61fb      	str	r3, [r7, #28]
          break;
 8004768:	e003      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800476a:	bf00      	nop
 800476c:	e216      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800476e:	bf00      	nop
 8004770:	e214      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004772:	bf00      	nop
        break;
 8004774:	e212      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004776:	4b5d      	ldr	r3, [pc, #372]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004788:	d025      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004790:	d82c      	bhi.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004798:	d013      	beq.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a0:	d824      	bhi.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ae:	d004      	beq.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80047b0:	e01c      	b.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047b2:	f7ff f919 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80047b6:	61f8      	str	r0, [r7, #28]
          break;
 80047b8:	e01d      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80047ba:	f7ff f87d 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 80047be:	61f8      	str	r0, [r7, #28]
          break;
 80047c0:	e019      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047c2:	4b4a      	ldr	r3, [pc, #296]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ce:	d10f      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80047d0:	4b47      	ldr	r3, [pc, #284]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80047d2:	61fb      	str	r3, [r7, #28]
          break;
 80047d4:	e00c      	b.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047d6:	4b45      	ldr	r3, [pc, #276]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d107      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80047e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047e8:	61fb      	str	r3, [r7, #28]
          break;
 80047ea:	e003      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80047ec:	bf00      	nop
 80047ee:	e1d5      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047f0:	bf00      	nop
 80047f2:	e1d3      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047f4:	bf00      	nop
        break;
 80047f6:	e1d1      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80047f8:	4b3c      	ldr	r3, [pc, #240]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800480a:	d00c      	beq.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004812:	d864      	bhi.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800481a:	d008      	beq.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004822:	d030      	beq.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004824:	e05b      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004826:	f7ff f847 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 800482a:	61f8      	str	r0, [r7, #28]
          break;
 800482c:	e05c      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800482e:	4b2f      	ldr	r3, [pc, #188]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483a:	d152      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800483c:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d04c      	beq.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004848:	4b28      	ldr	r3, [pc, #160]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	0a1b      	lsrs	r3, r3, #8
 800484e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004852:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	fb03 f202 	mul.w	r2, r3, r2
 800485c:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	3301      	adds	r3, #1
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800486e:	4b1f      	ldr	r3, [pc, #124]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	0e5b      	lsrs	r3, r3, #25
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	3301      	adds	r3, #1
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	61fb      	str	r3, [r7, #28]
          break;
 8004884:	e02d      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004886:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800488e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004892:	d128      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004894:	4b15      	ldr	r3, [pc, #84]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d022      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80048a0:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048aa:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	fb03 f202 	mul.w	r2, r3, r2
 80048b4:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	3301      	adds	r3, #1
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80048c6:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	0e5b      	lsrs	r3, r3, #25
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	3301      	adds	r3, #1
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	61fb      	str	r3, [r7, #28]
          break;
 80048dc:	e003      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80048de:	bf00      	nop
 80048e0:	e15c      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048e2:	bf00      	nop
 80048e4:	e15a      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048e6:	bf00      	nop
        break;
 80048e8:	e158      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000
 80048f0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80048f4:	4b9d      	ldr	r3, [pc, #628]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048fe:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004906:	f7ff f885 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 800490a:	61f8      	str	r0, [r7, #28]
        break;
 800490c:	e146      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800490e:	f7fe ffd3 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8004912:	61f8      	str	r0, [r7, #28]
        break;
 8004914:	e142      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004916:	4b95      	ldr	r3, [pc, #596]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004928:	d013      	beq.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004930:	d819      	bhi.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493e:	d004      	beq.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004940:	e011      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004942:	f7ff f851 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004946:	61f8      	str	r0, [r7, #28]
          break;
 8004948:	e010      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800494a:	f7fe ffb5 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 800494e:	61f8      	str	r0, [r7, #28]
          break;
 8004950:	e00c      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004952:	4b86      	ldr	r3, [pc, #536]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495e:	d104      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004960:	4b83      	ldr	r3, [pc, #524]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004962:	61fb      	str	r3, [r7, #28]
          break;
 8004964:	e001      	b.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004966:	bf00      	nop
 8004968:	e118      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800496a:	bf00      	nop
        break;
 800496c:	e116      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800496e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004974:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004980:	d013      	beq.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004988:	d819      	bhi.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004996:	d004      	beq.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004998:	e011      	b.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800499a:	f7ff f825 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 800499e:	61f8      	str	r0, [r7, #28]
          break;
 80049a0:	e010      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80049a2:	f7fe ff89 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 80049a6:	61f8      	str	r0, [r7, #28]
          break;
 80049a8:	e00c      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049aa:	4b70      	ldr	r3, [pc, #448]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b6:	d104      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80049b8:	4b6d      	ldr	r3, [pc, #436]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80049ba:	61fb      	str	r3, [r7, #28]
          break;
 80049bc:	e001      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80049be:	bf00      	nop
 80049c0:	e0ec      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049c2:	bf00      	nop
        break;
 80049c4:	e0ea      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80049c6:	4b69      	ldr	r3, [pc, #420]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049d8:	d013      	beq.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049e0:	d819      	bhi.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ee:	d004      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80049f0:	e011      	b.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049f2:	f7fe fff9 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80049f6:	61f8      	str	r0, [r7, #28]
          break;
 80049f8:	e010      	b.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80049fa:	f7fe ff5d 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 80049fe:	61f8      	str	r0, [r7, #28]
          break;
 8004a00:	e00c      	b.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a02:	4b5a      	ldr	r3, [pc, #360]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0e:	d104      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004a10:	4b57      	ldr	r3, [pc, #348]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004a12:	61fb      	str	r3, [r7, #28]
          break;
 8004a14:	e001      	b.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004a16:	bf00      	nop
 8004a18:	e0c0      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a1a:	bf00      	nop
        break;
 8004a1c:	e0be      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004a1e:	4b53      	ldr	r3, [pc, #332]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a24:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a30:	d02c      	beq.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a38:	d833      	bhi.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a40:	d01a      	beq.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a48:	d82b      	bhi.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a56:	d004      	beq.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004a58:	e023      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a5a:	f7fe ffc5 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004a5e:	61f8      	str	r0, [r7, #28]
          break;
 8004a60:	e026      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004a62:	4b42      	ldr	r3, [pc, #264]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d11a      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004a70:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a74:	61fb      	str	r3, [r7, #28]
          break;
 8004a76:	e016      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a78:	4b3c      	ldr	r3, [pc, #240]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a84:	d111      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004a86:	4b3a      	ldr	r3, [pc, #232]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004a88:	61fb      	str	r3, [r7, #28]
          break;
 8004a8a:	e00e      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a8c:	4b37      	ldr	r3, [pc, #220]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d109      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9e:	61fb      	str	r3, [r7, #28]
          break;
 8004aa0:	e005      	b.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004aa2:	bf00      	nop
 8004aa4:	e07a      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aa6:	bf00      	nop
 8004aa8:	e078      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aaa:	bf00      	nop
 8004aac:	e076      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aae:	bf00      	nop
        break;
 8004ab0:	e074      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ac4:	d02c      	beq.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004acc:	d833      	bhi.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ad4:	d01a      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004adc:	d82b      	bhi.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aea:	d004      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004aec:	e023      	b.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004aee:	f7fe ff7b 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004af2:	61f8      	str	r0, [r7, #28]
          break;
 8004af4:	e026      	b.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004af6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d11a      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004b04:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b08:	61fb      	str	r3, [r7, #28]
          break;
 8004b0a:	e016      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b0c:	4b17      	ldr	r3, [pc, #92]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b18:	d111      	bne.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004b1a:	4b15      	ldr	r3, [pc, #84]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004b1c:	61fb      	str	r3, [r7, #28]
          break;
 8004b1e:	e00e      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b20:	4b12      	ldr	r3, [pc, #72]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d109      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b32:	61fb      	str	r3, [r7, #28]
          break;
 8004b34:	e005      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004b36:	bf00      	nop
 8004b38:	e030      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b3a:	bf00      	nop
 8004b3c:	e02e      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b3e:	bf00      	nop
 8004b40:	e02c      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b42:	bf00      	nop
        break;
 8004b44:	e02a      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004b46:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d004      	beq.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5e:	d009      	beq.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004b60:	e012      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b62:	f7fe ff41 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004b66:	61f8      	str	r0, [r7, #28]
          break;
 8004b68:	e00e      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b80:	d101      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004b82:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004b84:	61fb      	str	r3, [r7, #28]
          break;
 8004b86:	bf00      	nop
        break;
 8004b88:	e008      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e006      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e004      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b9a:	bf00      	nop
    }
  }

  return(frequency);
 8004b9c:	69fb      	ldr	r3, [r7, #28]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	00f42400 	.word	0x00f42400

08004bb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bbe:	4b75      	ldr	r3, [pc, #468]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d018      	beq.n	8004bfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bca:	4b72      	ldr	r3, [pc, #456]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0203 	and.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d10d      	bne.n	8004bf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004be2:	4b6c      	ldr	r3, [pc, #432]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d047      	beq.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	e044      	b.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d018      	beq.n	8004c36 <RCCEx_PLLSAI1_Config+0x86>
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d825      	bhi.n	8004c54 <RCCEx_PLLSAI1_Config+0xa4>
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d002      	beq.n	8004c12 <RCCEx_PLLSAI1_Config+0x62>
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d009      	beq.n	8004c24 <RCCEx_PLLSAI1_Config+0x74>
 8004c10:	e020      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c12:	4b60      	ldr	r3, [pc, #384]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11d      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c22:	e01a      	b.n	8004c5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c24:	4b5b      	ldr	r3, [pc, #364]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e013      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c36:	4b57      	ldr	r3, [pc, #348]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10f      	bne.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c42:	4b54      	ldr	r3, [pc, #336]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c52:	e006      	b.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e004      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10d      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	4944      	ldr	r1, [pc, #272]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d17d      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c8c:	4b41      	ldr	r3, [pc, #260]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a40      	ldr	r2, [pc, #256]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fc fcec 	bl	8001674 <HAL_GetTick>
 8004c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c9e:	e009      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca0:	f7fc fce8 	bl	8001674 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d902      	bls.n	8004cb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cb2:	e005      	b.n	8004cc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cb4:	4b37      	ldr	r3, [pc, #220]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ef      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d160      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d111      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ccc:	4b31      	ldr	r3, [pc, #196]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	0211      	lsls	r1, r2, #8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68d2      	ldr	r2, [r2, #12]
 8004ce2:	0912      	lsrs	r2, r2, #4
 8004ce4:	0452      	lsls	r2, r2, #17
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	492a      	ldr	r1, [pc, #168]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	610b      	str	r3, [r1, #16]
 8004cee:	e027      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d112      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf6:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004cfe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6892      	ldr	r2, [r2, #8]
 8004d06:	0211      	lsls	r1, r2, #8
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6912      	ldr	r2, [r2, #16]
 8004d0c:	0852      	lsrs	r2, r2, #1
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0552      	lsls	r2, r2, #21
 8004d12:	430a      	orrs	r2, r1
 8004d14:	491f      	ldr	r1, [pc, #124]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	610b      	str	r3, [r1, #16]
 8004d1a:	e011      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	0211      	lsls	r1, r2, #8
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6952      	ldr	r2, [r2, #20]
 8004d32:	0852      	lsrs	r2, r2, #1
 8004d34:	3a01      	subs	r2, #1
 8004d36:	0652      	lsls	r2, r2, #25
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	4916      	ldr	r1, [pc, #88]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d40:	4b14      	ldr	r3, [pc, #80]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a13      	ldr	r2, [pc, #76]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fc fc92 	bl	8001674 <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d52:	e009      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d54:	f7fc fc8e 	bl	8001674 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d902      	bls.n	8004d68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	73fb      	strb	r3, [r7, #15]
          break;
 8004d66:	e005      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d68:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ef      	beq.n	8004d54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d7a:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	4904      	ldr	r1, [pc, #16]	@ (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000

08004d98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004da6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d018      	beq.n	8004de4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004db2:	4b67      	ldr	r3, [pc, #412]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0203 	and.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d10d      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dca:	4b61      	ldr	r3, [pc, #388]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d047      	beq.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
 8004de2:	e044      	b.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d018      	beq.n	8004e1e <RCCEx_PLLSAI2_Config+0x86>
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d825      	bhi.n	8004e3c <RCCEx_PLLSAI2_Config+0xa4>
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d002      	beq.n	8004dfa <RCCEx_PLLSAI2_Config+0x62>
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d009      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x74>
 8004df8:	e020      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dfa:	4b55      	ldr	r3, [pc, #340]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11d      	bne.n	8004e42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0a:	e01a      	b.n	8004e42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e0c:	4b50      	ldr	r3, [pc, #320]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d116      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1c:	e013      	b.n	8004e46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e2a:	4b49      	ldr	r3, [pc, #292]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e3a:	e006      	b.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e004      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10d      	bne.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e52:	4b3f      	ldr	r3, [pc, #252]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	430b      	orrs	r3, r1
 8004e68:	4939      	ldr	r1, [pc, #228]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d167      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e74:	4b36      	ldr	r3, [pc, #216]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a35      	ldr	r2, [pc, #212]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fc fbf8 	bl	8001674 <HAL_GetTick>
 8004e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e86:	e009      	b.n	8004e9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e88:	f7fc fbf4 	bl	8001674 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d902      	bls.n	8004e9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	73fb      	strb	r3, [r7, #15]
        break;
 8004e9a:	e005      	b.n	8004ea8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ef      	bne.n	8004e88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d14a      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d111      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eb4:	4b26      	ldr	r3, [pc, #152]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6892      	ldr	r2, [r2, #8]
 8004ec4:	0211      	lsls	r1, r2, #8
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68d2      	ldr	r2, [r2, #12]
 8004eca:	0912      	lsrs	r2, r2, #4
 8004ecc:	0452      	lsls	r2, r2, #17
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	491f      	ldr	r1, [pc, #124]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	614b      	str	r3, [r1, #20]
 8004ed6:	e011      	b.n	8004efc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ee0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6892      	ldr	r2, [r2, #8]
 8004ee8:	0211      	lsls	r1, r2, #8
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6912      	ldr	r2, [r2, #16]
 8004eee:	0852      	lsrs	r2, r2, #1
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	0652      	lsls	r2, r2, #25
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	4916      	ldr	r1, [pc, #88]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004efc:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a13      	ldr	r2, [pc, #76]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fc fbb4 	bl	8001674 <HAL_GetTick>
 8004f0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f0e:	e009      	b.n	8004f24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f10:	f7fc fbb0 	bl	8001674 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d902      	bls.n	8004f24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	73fb      	strb	r3, [r7, #15]
          break;
 8004f22:	e005      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f24:	4b0a      	ldr	r3, [pc, #40]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0ef      	beq.n	8004f10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f36:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	4904      	ldr	r1, [pc, #16]	@ (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000

08004f54 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b089      	sub	sp, #36	@ 0x24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f70:	d10c      	bne.n	8004f8c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004f72:	4b6e      	ldr	r3, [pc, #440]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f78:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004f7c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f84:	d112      	bne.n	8004fac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004f86:	4b6a      	ldr	r3, [pc, #424]	@ (8005130 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e00f      	b.n	8004fac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f92:	d10b      	bne.n	8004fac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004f94:	4b65      	ldr	r3, [pc, #404]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004f9e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fa6:	d101      	bne.n	8004fac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004fa8:	4b61      	ldr	r3, [pc, #388]	@ (8005130 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004faa:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 80b4 	bne.w	800511c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fbe:	d003      	beq.n	8004fc8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fc6:	d135      	bne.n	8005034 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004fc8:	4b58      	ldr	r3, [pc, #352]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fd4:	f040 80a1 	bne.w	800511a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004fd8:	4b54      	ldr	r3, [pc, #336]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 809a 	beq.w	800511a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fe6:	4b51      	ldr	r3, [pc, #324]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005004:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800500c:	4b47      	ldr	r3, [pc, #284]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005018:	2311      	movs	r3, #17
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e001      	b.n	8005022 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800501e:	2307      	movs	r3, #7
 8005020:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	fb03 f202 	mul.w	r2, r3, r2
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005032:	e072      	b.n	800511a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d133      	bne.n	80050a2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800503a:	4b3c      	ldr	r3, [pc, #240]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005042:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005046:	d169      	bne.n	800511c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005048:	4b38      	ldr	r3, [pc, #224]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d063      	beq.n	800511c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005054:	4b35      	ldr	r3, [pc, #212]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	3301      	adds	r3, #1
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005068:	4b30      	ldr	r3, [pc, #192]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	0a1b      	lsrs	r3, r3, #8
 800506e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005072:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800507a:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005086:	2311      	movs	r3, #17
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e001      	b.n	8005090 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800508c:	2307      	movs	r3, #7
 800508e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	fb03 f202 	mul.w	r2, r3, r2
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	fbb2 f3f3 	udiv	r3, r2, r3
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	e03c      	b.n	800511c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050a8:	d003      	beq.n	80050b2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050b0:	d134      	bne.n	800511c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80050b2:	4b1e      	ldr	r3, [pc, #120]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050be:	d12d      	bne.n	800511c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80050c0:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d027      	beq.n	800511c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050cc:	4b17      	ldr	r3, [pc, #92]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	3301      	adds	r3, #1
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80050e0:	4b12      	ldr	r3, [pc, #72]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	0a1b      	lsrs	r3, r3, #8
 80050e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ea:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80050f2:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80050fe:	2311      	movs	r3, #17
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e001      	b.n	8005108 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005104:	2307      	movs	r3, #7
 8005106:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	fb03 f202 	mul.w	r2, r3, r2
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	e000      	b.n	800511c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800511a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800511c:	69fb      	ldr	r3, [r7, #28]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3724      	adds	r7, #36	@ 0x24
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	001fff68 	.word	0x001fff68

08005134 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d904      	bls.n	8005152 <HAL_SAI_InitProtocol+0x1e>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	3b03      	subs	r3, #3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d812      	bhi.n	8005176 <HAL_SAI_InitProtocol+0x42>
 8005150:	e008      	b.n	8005164 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fba3 	bl	80058a4 <SAI_InitI2S>
 800515e:	4603      	mov	r3, r0
 8005160:	75fb      	strb	r3, [r7, #23]
      break;
 8005162:	e00b      	b.n	800517c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fc4c 	bl	8005a08 <SAI_InitPCM>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]
      break;
 8005174:	e002      	b.n	800517c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	75fb      	strb	r3, [r7, #23]
      break;
 800517a:	bf00      	nop
  }

  if (status == HAL_OK)
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f808 	bl	8005198 <HAL_SAI_Init>
 8005188:	4603      	mov	r3, r0
 800518a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e155      	b.n	8005456 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fb fdbe 	bl	8000d40 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fca1 	bl	8005b0c <SAI_Disable>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e140      	b.n	8005456 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d00c      	beq.n	80051fe <HAL_SAI_Init+0x66>
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d80d      	bhi.n	8005204 <HAL_SAI_Init+0x6c>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_SAI_Init+0x5a>
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d003      	beq.n	80051f8 <HAL_SAI_Init+0x60>
 80051f0:	e008      	b.n	8005204 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
      break;
 80051f6:	e008      	b.n	800520a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80051f8:	2310      	movs	r3, #16
 80051fa:	61fb      	str	r3, [r7, #28]
      break;
 80051fc:	e005      	b.n	800520a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80051fe:	2320      	movs	r3, #32
 8005200:	61fb      	str	r3, [r7, #28]
      break;
 8005202:	e002      	b.n	800520a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
      break;
 8005208:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b03      	cmp	r3, #3
 8005210:	d81d      	bhi.n	800524e <HAL_SAI_Init+0xb6>
 8005212:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <HAL_SAI_Init+0x80>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	08005229 	.word	0x08005229
 800521c:	0800522f 	.word	0x0800522f
 8005220:	08005237 	.word	0x08005237
 8005224:	0800523f 	.word	0x0800523f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
      break;
 800522c:	e012      	b.n	8005254 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800522e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005232:	617b      	str	r3, [r7, #20]
      break;
 8005234:	e00e      	b.n	8005254 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800523a:	617b      	str	r3, [r7, #20]
      break;
 800523c:	e00a      	b.n	8005254 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800523e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005242:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
      break;
 800524c:	e002      	b.n	8005254 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
      break;
 8005252:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a81      	ldr	r2, [pc, #516]	@ (8005460 <HAL_SAI_Init+0x2c8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_SAI_Init+0xd0>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a80      	ldr	r2, [pc, #512]	@ (8005464 <HAL_SAI_Init+0x2cc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d103      	bne.n	8005270 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005268:	4a7f      	ldr	r2, [pc, #508]	@ (8005468 <HAL_SAI_Init+0x2d0>)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e002      	b.n	8005276 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005270:	4a7e      	ldr	r2, [pc, #504]	@ (800546c <HAL_SAI_Init+0x2d4>)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d041      	beq.n	8005302 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a77      	ldr	r2, [pc, #476]	@ (8005460 <HAL_SAI_Init+0x2c8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_SAI_Init+0xfa>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a75      	ldr	r2, [pc, #468]	@ (8005464 <HAL_SAI_Init+0x2cc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d105      	bne.n	800529e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005292:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005296:	f7fe ff1d 	bl	80040d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800529a:	6138      	str	r0, [r7, #16]
 800529c:	e004      	b.n	80052a8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800529e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80052a2:	f7fe ff17 	bl	80040d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80052a6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	025b      	lsls	r3, r3, #9
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a6b      	ldr	r2, [pc, #428]	@ (8005470 <HAL_SAI_Init+0x2d8>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	08da      	lsrs	r2, r3, #3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	4b67      	ldr	r3, [pc, #412]	@ (8005470 <HAL_SAI_Init+0x2d8>)
 80052d2:	fba3 2301 	umull	r2, r3, r3, r1
 80052d6:	08da      	lsrs	r2, r3, #3
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	1aca      	subs	r2, r1, r3
 80052e2:	2a08      	cmp	r2, #8
 80052e4:	d904      	bls.n	80052f0 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d104      	bne.n	8005302 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	085a      	lsrs	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_SAI_Init+0x17a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d109      	bne.n	8005326 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_SAI_Init+0x186>
 800531a:	2300      	movs	r3, #0
 800531c:	e001      	b.n	8005322 <HAL_SAI_Init+0x18a>
 800531e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	e008      	b.n	8005338 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d102      	bne.n	8005334 <HAL_SAI_Init+0x19c>
 800532e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005332:	e000      	b.n	8005336 <HAL_SAI_Init+0x19e>
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6819      	ldr	r1, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b4c      	ldr	r3, [pc, #304]	@ (8005474 <HAL_SAI_Init+0x2dc>)
 8005344:	400b      	ands	r3, r1
 8005346:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6819      	ldr	r1, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800535c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005362:	431a      	orrs	r2, r3
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005370:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800537c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	051b      	lsls	r3, r3, #20
 8005384:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800539c:	f023 030f 	bic.w	r3, r3, #15
 80053a0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6859      	ldr	r1, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <HAL_SAI_Init+0x2e0>)
 80053cc:	400b      	ands	r3, r1
 80053ce:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6899      	ldr	r1, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053e0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80053e6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80053ec:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	3b01      	subs	r3, #1
 80053f4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80053f6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68d9      	ldr	r1, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800540e:	400b      	ands	r3, r1
 8005410:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68d9      	ldr	r1, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005420:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005426:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005428:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542e:	3b01      	subs	r3, #1
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40015404 	.word	0x40015404
 8005464:	40015424 	.word	0x40015424
 8005468:	40015400 	.word	0x40015400
 800546c:	40015800 	.word	0x40015800
 8005470:	cccccccd 	.word	0xcccccccd
 8005474:	ff05c010 	.word	0xff05c010
 8005478:	fff88000 	.word	0xfff88000

0800547c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_SAI_Abort+0x1a>
 8005492:	2302      	movs	r3, #2
 8005494:	e053      	b.n	800553e <HAL_SAI_Abort+0xc2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fb34 	bl	8005b0c <SAI_Disable>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054bc:	d125      	bne.n	800550a <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80054cc:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b12      	cmp	r3, #18
 80054d8:	d108      	bne.n	80054ec <HAL_SAI_Abort+0x70>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fc fa9a 	bl	8001a20 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b22      	cmp	r3, #34	@ 0x22
 80054f6:	d108      	bne.n	800550a <HAL_SAI_Abort+0x8e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005504:	4618      	mov	r0, r3
 8005506:	f7fc fa8b 	bl	8001a20 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f04f 32ff 	mov.w	r2, #4294967295
 800551a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0208 	orr.w	r2, r2, #8
 800552a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8192 	beq.w	8005882 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <HAL_SAI_IRQHandler+0x4c>
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
 8005592:	e176      	b.n	8005882 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01e      	beq.n	80055dc <HAL_SAI_IRQHandler+0x94>
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d019      	beq.n	80055dc <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2201      	movs	r2, #1
 80055ae:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b22      	cmp	r3, #34	@ 0x22
 80055ba:	d101      	bne.n	80055c0 <HAL_SAI_IRQHandler+0x78>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_SAI_IRQHandler+0x7a>
 80055c0:	2302      	movs	r3, #2
 80055c2:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f95b 	bl	8005890 <HAL_SAI_ErrorCallback>
 80055da:	e152      	b.n	8005882 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d011      	beq.n	800560a <HAL_SAI_IRQHandler+0xc2>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8140 	beq.w	8005882 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005606:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005608:	e13b      	b.n	8005882 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d055      	beq.n	80056c0 <HAL_SAI_IRQHandler+0x178>
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d050      	beq.n	80056c0 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2220      	movs	r2, #32
 8005624:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562c:	f043 0204 	orr.w	r2, r3, #4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d038      	beq.n	80056b2 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d016      	beq.n	8005676 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800564c:	4a8f      	ldr	r2, [pc, #572]	@ (800588c <HAL_SAI_IRQHandler+0x344>)
 800564e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005654:	4618      	mov	r0, r3
 8005656:	f7fc fa21 	bl	8001a9c <HAL_DMA_Abort_IT>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005666:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f90d 	bl	8005890 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80fc 	beq.w	8005878 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005684:	4a81      	ldr	r2, [pc, #516]	@ (800588c <HAL_SAI_IRQHandler+0x344>)
 8005686:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	4618      	mov	r0, r3
 800568e:	f7fc fa05 	bl	8001a9c <HAL_DMA_Abort_IT>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80ef 	beq.w	8005878 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f8f0 	bl	8005890 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80056b0:	e0e2      	b.n	8005878 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fee2 	bl	800547c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f8e9 	bl	8005890 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80056be:	e0db      	b.n	8005878 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d055      	beq.n	8005776 <HAL_SAI_IRQHandler+0x22e>
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d050      	beq.n	8005776 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2240      	movs	r2, #64	@ 0x40
 80056da:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056e2:	f043 0208 	orr.w	r2, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d038      	beq.n	8005768 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005702:	4a62      	ldr	r2, [pc, #392]	@ (800588c <HAL_SAI_IRQHandler+0x344>)
 8005704:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800570a:	4618      	mov	r0, r3
 800570c:	f7fc f9c6 	bl	8001a9c <HAL_DMA_Abort_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800571c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f8b2 	bl	8005890 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a3 	beq.w	800587c <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573a:	4a54      	ldr	r2, [pc, #336]	@ (800588c <HAL_SAI_IRQHandler+0x344>)
 800573c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005742:	4618      	mov	r0, r3
 8005744:	f7fc f9aa 	bl	8001a9c <HAL_DMA_Abort_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8096 	beq.w	800587c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005756:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f895 	bl	8005890 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005766:	e089      	b.n	800587c <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff fe87 	bl	800547c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f88e 	bl	8005890 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005774:	e082      	b.n	800587c <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d061      	beq.n	8005844 <HAL_SAI_IRQHandler+0x2fc>
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d05c      	beq.n	8005844 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2204      	movs	r2, #4
 8005790:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005798:	f043 0220 	orr.w	r2, r3, #32
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d036      	beq.n	800581a <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d016      	beq.n	80057e2 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b8:	4a34      	ldr	r2, [pc, #208]	@ (800588c <HAL_SAI_IRQHandler+0x344>)
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fc f96b 	bl	8001a9c <HAL_DMA_Abort_IT>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f857 	bl	8005890 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d04a      	beq.n	8005880 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ee:	4a27      	ldr	r2, [pc, #156]	@ (800588c <HAL_SAI_IRQHandler+0x344>)
 80057f0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fc f950 	bl	8001a9c <HAL_DMA_Abort_IT>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d03e      	beq.n	8005880 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005808:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f83c 	bl	8005890 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005818:	e032      	b.n	8005880 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f04f 32ff 	mov.w	r2, #4294967295
 800582a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f827 	bl	8005890 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005842:	e01d      	b.n	8005880 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	d019      	beq.n	8005882 <HAL_SAI_IRQHandler+0x33a>
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d014      	beq.n	8005882 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2210      	movs	r2, #16
 800585e:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005866:	f043 0210 	orr.w	r2, r3, #16
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f80d 	bl	8005890 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005876:	e004      	b.n	8005882 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005878:	bf00      	nop
 800587a:	e002      	b.n	8005882 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800587c:	bf00      	nop
 800587e:	e000      	b.n	8005882 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005880:	bf00      	nop
}
 8005882:	bf00      	nop
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	08005b81 	.word	0x08005b81

08005890 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <SAI_InitI2S+0x2e>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d103      	bne.n	80058da <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80058d8:	e002      	b.n	80058e0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80058e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e077      	b.n	80059fa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d107      	bne.n	8005920 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800591c:	651a      	str	r2, [r3, #80]	@ 0x50
 800591e:	e006      	b.n	800592e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005926:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d84f      	bhi.n	80059d4 <SAI_InitI2S+0x130>
 8005934:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <SAI_InitI2S+0x98>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	0800594d 	.word	0x0800594d
 8005940:	0800596f 	.word	0x0800596f
 8005944:	08005991 	.word	0x08005991
 8005948:	080059b3 	.word	0x080059b3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2280      	movs	r2, #128	@ 0x80
 8005950:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	011a      	lsls	r2, r3, #4
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2240      	movs	r2, #64	@ 0x40
 800596a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800596c:	e035      	b.n	80059da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2280      	movs	r2, #128	@ 0x80
 8005972:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	019a      	lsls	r2, r3, #6
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2280      	movs	r2, #128	@ 0x80
 800598c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800598e:	e024      	b.n	80059da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	22c0      	movs	r2, #192	@ 0xc0
 8005994:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	019a      	lsls	r2, r3, #6
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2280      	movs	r2, #128	@ 0x80
 80059ae:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80059b0:	e013      	b.n	80059da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	22e0      	movs	r2, #224	@ 0xe0
 80059b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	085b      	lsrs	r3, r3, #1
 80059bc:	019a      	lsls	r2, r3, #6
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2280      	movs	r2, #128	@ 0x80
 80059d0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80059d2:	e002      	b.n	80059da <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	75fb      	strb	r3, [r7, #23]
      break;
 80059d8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d10b      	bne.n	80059f8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d102      	bne.n	80059ec <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2210      	movs	r2, #16
 80059ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d102      	bne.n	80059f8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2208      	movs	r2, #8
 80059f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop

08005a08 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <SAI_InitPCM+0x2e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d103      	bne.n	8005a3e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a3c:	e002      	b.n	8005a44 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005a50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005a58:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a6c:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d103      	bne.n	8005a7c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a7a:	e002      	b.n	8005a82 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	220d      	movs	r2, #13
 8005a80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d837      	bhi.n	8005af8 <SAI_InitPCM+0xf0>
 8005a88:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <SAI_InitPCM+0x88>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005ab7 	.word	0x08005ab7
 8005a98:	08005acd 	.word	0x08005acd
 8005a9c:	08005ae3 	.word	0x08005ae3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2280      	movs	r2, #128	@ 0x80
 8005aa4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	011a      	lsls	r2, r3, #4
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2240      	movs	r2, #64	@ 0x40
 8005ab2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005ab4:	e023      	b.n	8005afe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2280      	movs	r2, #128	@ 0x80
 8005aba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2280      	movs	r2, #128	@ 0x80
 8005ac8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005aca:	e018      	b.n	8005afe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	22c0      	movs	r2, #192	@ 0xc0
 8005ad0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2280      	movs	r2, #128	@ 0x80
 8005ade:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005ae0:	e00d      	b.n	8005afe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	22e0      	movs	r2, #224	@ 0xe0
 8005ae6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2280      	movs	r2, #128	@ 0x80
 8005af4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005af6:	e002      	b.n	8005afe <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	75fb      	strb	r3, [r7, #23]
      break;
 8005afc:	bf00      	nop
  }

  return status;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005b14:	4b18      	ldr	r3, [pc, #96]	@ (8005b78 <SAI_Disable+0x6c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a18      	ldr	r2, [pc, #96]	@ (8005b7c <SAI_Disable+0x70>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	0b1b      	lsrs	r3, r3, #12
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b36:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	72fb      	strb	r3, [r7, #11]
      break;
 8005b52:	e009      	b.n	8005b68 <SAI_Disable+0x5c>
    }
    count--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e7      	bne.n	8005b38 <SAI_Disable+0x2c>

  return status;
 8005b68:	7afb      	ldrb	r3, [r7, #11]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000000 	.word	0x20000000
 8005b7c:	95cbec1b 	.word	0x95cbec1b

08005b80 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bae:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d00a      	beq.n	8005bd0 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff ffa6 	bl	8005b0c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0208 	orr.w	r2, r2, #8
 8005bce:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff fe55 	bl	8005890 <HAL_SAI_ErrorCallback>
#endif
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e095      	b.n	8005d2c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d108      	bne.n	8005c1a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c10:	d009      	beq.n	8005c26 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	61da      	str	r2, [r3, #28]
 8005c18:	e005      	b.n	8005c26 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fb fa43 	bl	80010cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c66:	d902      	bls.n	8005c6e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	e002      	b.n	8005c74 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c7c:	d007      	beq.n	8005c8e <HAL_SPI_Init+0xa0>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c86:	d002      	beq.n	8005c8e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd0:	ea42 0103 	orr.w	r1, r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	f003 0204 	and.w	r2, r3, #4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d0a:	ea42 0103 	orr.w	r1, r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10e      	bne.n	8005d74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
    return;
 8005d72:	e0ce      	b.n	8005f12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_SPI_IRQHandler+0x5e>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
    return;
 8005d90:	e0bf      	b.n	8005f12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <HAL_SPI_IRQHandler+0x7e>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d105      	bne.n	8005db2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80b0 	beq.w	8005f12 <HAL_SPI_IRQHandler+0x1de>
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80aa 	beq.w	8005f12 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d023      	beq.n	8005e10 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d011      	beq.n	8005df8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd8:	f043 0204 	orr.w	r2, r3, #4
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	e00b      	b.n	8005e10 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	693b      	ldr	r3, [r7, #16]
        return;
 8005e0e:	e080      	b.n	8005f12 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d014      	beq.n	8005e44 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1e:	f043 0201 	orr.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e52:	f043 0208 	orr.w	r2, r3, #8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60bb      	str	r3, [r7, #8]
 8005e66:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d04f      	beq.n	8005f10 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e7e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <HAL_SPI_IRQHandler+0x168>
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d034      	beq.n	8005f06 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0203 	bic.w	r2, r2, #3
 8005eaa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d011      	beq.n	8005ed8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb8:	4a17      	ldr	r2, [pc, #92]	@ (8005f18 <HAL_SPI_IRQHandler+0x1e4>)
 8005eba:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fb fdeb 	bl	8001a9c <HAL_DMA_Abort_IT>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ed0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d016      	beq.n	8005f0e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8005f18 <HAL_SPI_IRQHandler+0x1e4>)
 8005ee6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fb fdd5 	bl	8001a9c <HAL_DMA_Abort_IT>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005f04:	e003      	b.n	8005f0e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f808 	bl	8005f1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f0c:	e000      	b.n	8005f10 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005f0e:	bf00      	nop
    return;
 8005f10:	bf00      	nop
  }
}
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	08005f31 	.word	0x08005f31

08005f1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7ff ffe5 	bl	8005f1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e040      	b.n	8005fee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fb fa7b 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2224      	movs	r2, #36	@ 0x24
 8005f86:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fe8f 	bl	8006cc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fbd4 	bl	8006754 <UART_SetConfig>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e01b      	b.n	8005fee <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0201 	orr.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 ff0e 	bl	8006e08 <UART_CheckIdleState>
 8005fec:	4603      	mov	r3, r0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b08a      	sub	sp, #40	@ 0x28
 8005ffa:	af02      	add	r7, sp, #8
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800600a:	2b20      	cmp	r3, #32
 800600c:	d177      	bne.n	80060fe <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_UART_Transmit+0x24>
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e070      	b.n	8006100 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2221      	movs	r2, #33	@ 0x21
 800602a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800602c:	f7fb fb22 	bl	8001674 <HAL_GetTick>
 8006030:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	88fa      	ldrh	r2, [r7, #6]
 8006036:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	88fa      	ldrh	r2, [r7, #6]
 800603e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604a:	d108      	bne.n	800605e <HAL_UART_Transmit+0x68>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006054:	2300      	movs	r3, #0
 8006056:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e003      	b.n	8006066 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006066:	e02f      	b.n	80060c8 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	2180      	movs	r1, #128	@ 0x80
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 ff70 	bl	8006f58 <UART_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e03b      	b.n	8006100 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	881a      	ldrh	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800609a:	b292      	uxth	r2, r2
 800609c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	3302      	adds	r3, #2
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	e007      	b.n	80060b6 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	781a      	ldrb	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1c9      	bne.n	8006068 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2200      	movs	r2, #0
 80060dc:	2140      	movs	r1, #64	@ 0x40
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 ff3a 	bl	8006f58 <UART_WaitOnFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d004      	beq.n	80060f4 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e005      	b.n	8006100 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e000      	b.n	8006100 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
  }
}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b0ba      	sub	sp, #232	@ 0xe8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800612e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006132:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006136:	4013      	ands	r3, r2
 8006138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800613c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d115      	bne.n	8006170 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00f      	beq.n	8006170 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	d009      	beq.n	8006170 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 82ca 	beq.w	80066fa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
      }
      return;
 800616e:	e2c4      	b.n	80066fa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8117 	beq.w	80063a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800617a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006186:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800618a:	4b85      	ldr	r3, [pc, #532]	@ (80063a0 <HAL_UART_IRQHandler+0x298>)
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 810a 	beq.w	80063a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d011      	beq.n	80061c4 <HAL_UART_IRQHandler+0xbc>
 80061a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2201      	movs	r2, #1
 80061b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ba:	f043 0201 	orr.w	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d011      	beq.n	80061f4 <HAL_UART_IRQHandler+0xec>
 80061d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2202      	movs	r2, #2
 80061e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ea:	f043 0204 	orr.w	r2, r3, #4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d011      	beq.n	8006224 <HAL_UART_IRQHandler+0x11c>
 8006200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2204      	movs	r2, #4
 8006212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800621a:	f043 0202 	orr.w	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d017      	beq.n	8006260 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d105      	bne.n	8006248 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800623c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006240:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2208      	movs	r2, #8
 800624e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006268:	2b00      	cmp	r3, #0
 800626a:	d012      	beq.n	8006292 <HAL_UART_IRQHandler+0x18a>
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006270:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00c      	beq.n	8006292 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8230 	beq.w	80066fe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062da:	2b40      	cmp	r3, #64	@ 0x40
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d04f      	beq.n	800638a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fea1 	bl	8007032 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062fa:	2b40      	cmp	r3, #64	@ 0x40
 80062fc:	d141      	bne.n	8006382 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800631c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3308      	adds	r3, #8
 8006326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800632a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800632e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1d9      	bne.n	80062fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800634e:	2b00      	cmp	r3, #0
 8006350:	d013      	beq.n	800637a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006356:	4a13      	ldr	r2, [pc, #76]	@ (80063a4 <HAL_UART_IRQHandler+0x29c>)
 8006358:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635e:	4618      	mov	r0, r3
 8006360:	f7fb fb9c 	bl	8001a9c <HAL_DMA_Abort_IT>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d017      	beq.n	800639a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800636e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	e00f      	b.n	800639a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f9d4 	bl	8006728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e00b      	b.n	800639a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f9d0 	bl	8006728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	e007      	b.n	800639a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f9cc 	bl	8006728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006398:	e1b1      	b.n	80066fe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639a:	bf00      	nop
    return;
 800639c:	e1af      	b.n	80066fe <HAL_UART_IRQHandler+0x5f6>
 800639e:	bf00      	nop
 80063a0:	04000120 	.word	0x04000120
 80063a4:	080070fb 	.word	0x080070fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	f040 816a 	bne.w	8006686 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 8163 	beq.w	8006686 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 815c 	beq.w	8006686 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2210      	movs	r2, #16
 80063d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e0:	2b40      	cmp	r3, #64	@ 0x40
 80063e2:	f040 80d4 	bne.w	800658e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80ad 	beq.w	8006556 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006406:	429a      	cmp	r2, r3
 8006408:	f080 80a5 	bcs.w	8006556 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006412:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	f040 8086 	bne.w	8006534 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800643c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006452:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006456:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800645e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800646a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1da      	bne.n	8006428 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006496:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800649a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800649e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e1      	bne.n	8006472 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e3      	bne.n	80064ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006504:	f023 0310 	bic.w	r3, r3, #16
 8006508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006516:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006518:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800651c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e4      	bne.n	80064f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800652e:	4618      	mov	r0, r3
 8006530:	f7fb fa76 	bl	8001a20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006546:	b29b      	uxth	r3, r3
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	b29b      	uxth	r3, r3
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8f4 	bl	800673c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006554:	e0d5      	b.n	8006702 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800655c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006560:	429a      	cmp	r2, r3
 8006562:	f040 80ce 	bne.w	8006702 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b20      	cmp	r3, #32
 8006574:	f040 80c5 	bne.w	8006702 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f8d8 	bl	800673c <HAL_UARTEx_RxEventCallback>
      return;
 800658c:	e0b9      	b.n	8006702 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800659a:	b29b      	uxth	r3, r3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80ab 	beq.w	8006706 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80065b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80a6 	beq.w	8006706 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e4      	bne.n	80065ba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006614:	633a      	str	r2, [r7, #48]	@ 0x30
 8006616:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800661a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e3      	bne.n	80065f0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	60fb      	str	r3, [r7, #12]
   return(result);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f023 0310 	bic.w	r3, r3, #16
 8006650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	69b9      	ldr	r1, [r7, #24]
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	617b      	str	r3, [r7, #20]
   return(result);
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e4      	bne.n	800663c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2202      	movs	r2, #2
 8006676:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f85c 	bl	800673c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006684:	e03f      	b.n	8006706 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800668a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00e      	beq.n	80066b0 <HAL_UART_IRQHandler+0x5a8>
 8006692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80066a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fd66 	bl	800717a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066ae:	e02d      	b.n	800670c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00e      	beq.n	80066da <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01c      	beq.n	800670a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
    }
    return;
 80066d8:	e017      	b.n	800670a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d012      	beq.n	800670c <HAL_UART_IRQHandler+0x604>
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00c      	beq.n	800670c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fd17 	bl	8007126 <UART_EndTransmit_IT>
    return;
 80066f8:	e008      	b.n	800670c <HAL_UART_IRQHandler+0x604>
      return;
 80066fa:	bf00      	nop
 80066fc:	e006      	b.n	800670c <HAL_UART_IRQHandler+0x604>
    return;
 80066fe:	bf00      	nop
 8006700:	e004      	b.n	800670c <HAL_UART_IRQHandler+0x604>
      return;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <HAL_UART_IRQHandler+0x604>
      return;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_UART_IRQHandler+0x604>
    return;
 800670a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800670c:	37e8      	adds	r7, #232	@ 0xe8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop

08006714 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006758:	b08a      	sub	sp, #40	@ 0x28
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	431a      	orrs	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	431a      	orrs	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	4313      	orrs	r3, r2
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4ba4      	ldr	r3, [pc, #656]	@ (8006a14 <UART_SetConfig+0x2c0>)
 8006784:	4013      	ands	r3, r2
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800678c:	430b      	orrs	r3, r1
 800678e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a99      	ldr	r2, [pc, #612]	@ (8006a18 <UART_SetConfig+0x2c4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067bc:	4313      	orrs	r3, r2
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d0:	430a      	orrs	r2, r1
 80067d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a90      	ldr	r2, [pc, #576]	@ (8006a1c <UART_SetConfig+0x2c8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d126      	bne.n	800682c <UART_SetConfig+0xd8>
 80067de:	4b90      	ldr	r3, [pc, #576]	@ (8006a20 <UART_SetConfig+0x2cc>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d81b      	bhi.n	8006824 <UART_SetConfig+0xd0>
 80067ec:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <UART_SetConfig+0xa0>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006805 	.word	0x08006805
 80067f8:	08006815 	.word	0x08006815
 80067fc:	0800680d 	.word	0x0800680d
 8006800:	0800681d 	.word	0x0800681d
 8006804:	2301      	movs	r3, #1
 8006806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800680a:	e116      	b.n	8006a3a <UART_SetConfig+0x2e6>
 800680c:	2302      	movs	r3, #2
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006812:	e112      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006814:	2304      	movs	r3, #4
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800681a:	e10e      	b.n	8006a3a <UART_SetConfig+0x2e6>
 800681c:	2308      	movs	r3, #8
 800681e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006822:	e10a      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006824:	2310      	movs	r3, #16
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682a:	e106      	b.n	8006a3a <UART_SetConfig+0x2e6>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a7c      	ldr	r2, [pc, #496]	@ (8006a24 <UART_SetConfig+0x2d0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d138      	bne.n	80068a8 <UART_SetConfig+0x154>
 8006836:	4b7a      	ldr	r3, [pc, #488]	@ (8006a20 <UART_SetConfig+0x2cc>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683c:	f003 030c 	and.w	r3, r3, #12
 8006840:	2b0c      	cmp	r3, #12
 8006842:	d82d      	bhi.n	80068a0 <UART_SetConfig+0x14c>
 8006844:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <UART_SetConfig+0xf8>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006881 	.word	0x08006881
 8006850:	080068a1 	.word	0x080068a1
 8006854:	080068a1 	.word	0x080068a1
 8006858:	080068a1 	.word	0x080068a1
 800685c:	08006891 	.word	0x08006891
 8006860:	080068a1 	.word	0x080068a1
 8006864:	080068a1 	.word	0x080068a1
 8006868:	080068a1 	.word	0x080068a1
 800686c:	08006889 	.word	0x08006889
 8006870:	080068a1 	.word	0x080068a1
 8006874:	080068a1 	.word	0x080068a1
 8006878:	080068a1 	.word	0x080068a1
 800687c:	08006899 	.word	0x08006899
 8006880:	2300      	movs	r3, #0
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006886:	e0d8      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006888:	2302      	movs	r3, #2
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688e:	e0d4      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006890:	2304      	movs	r3, #4
 8006892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006896:	e0d0      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006898:	2308      	movs	r3, #8
 800689a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800689e:	e0cc      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80068a0:	2310      	movs	r3, #16
 80068a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a6:	e0c8      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5e      	ldr	r2, [pc, #376]	@ (8006a28 <UART_SetConfig+0x2d4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d125      	bne.n	80068fe <UART_SetConfig+0x1aa>
 80068b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a20 <UART_SetConfig+0x2cc>)
 80068b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068bc:	2b30      	cmp	r3, #48	@ 0x30
 80068be:	d016      	beq.n	80068ee <UART_SetConfig+0x19a>
 80068c0:	2b30      	cmp	r3, #48	@ 0x30
 80068c2:	d818      	bhi.n	80068f6 <UART_SetConfig+0x1a2>
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d00a      	beq.n	80068de <UART_SetConfig+0x18a>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d814      	bhi.n	80068f6 <UART_SetConfig+0x1a2>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <UART_SetConfig+0x182>
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d008      	beq.n	80068e6 <UART_SetConfig+0x192>
 80068d4:	e00f      	b.n	80068f6 <UART_SetConfig+0x1a2>
 80068d6:	2300      	movs	r3, #0
 80068d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068dc:	e0ad      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80068de:	2302      	movs	r3, #2
 80068e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e4:	e0a9      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80068e6:	2304      	movs	r3, #4
 80068e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ec:	e0a5      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80068ee:	2308      	movs	r3, #8
 80068f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068f4:	e0a1      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80068f6:	2310      	movs	r3, #16
 80068f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068fc:	e09d      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a4a      	ldr	r2, [pc, #296]	@ (8006a2c <UART_SetConfig+0x2d8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d125      	bne.n	8006954 <UART_SetConfig+0x200>
 8006908:	4b45      	ldr	r3, [pc, #276]	@ (8006a20 <UART_SetConfig+0x2cc>)
 800690a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006912:	2bc0      	cmp	r3, #192	@ 0xc0
 8006914:	d016      	beq.n	8006944 <UART_SetConfig+0x1f0>
 8006916:	2bc0      	cmp	r3, #192	@ 0xc0
 8006918:	d818      	bhi.n	800694c <UART_SetConfig+0x1f8>
 800691a:	2b80      	cmp	r3, #128	@ 0x80
 800691c:	d00a      	beq.n	8006934 <UART_SetConfig+0x1e0>
 800691e:	2b80      	cmp	r3, #128	@ 0x80
 8006920:	d814      	bhi.n	800694c <UART_SetConfig+0x1f8>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <UART_SetConfig+0x1d8>
 8006926:	2b40      	cmp	r3, #64	@ 0x40
 8006928:	d008      	beq.n	800693c <UART_SetConfig+0x1e8>
 800692a:	e00f      	b.n	800694c <UART_SetConfig+0x1f8>
 800692c:	2300      	movs	r3, #0
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006932:	e082      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006934:	2302      	movs	r3, #2
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800693a:	e07e      	b.n	8006a3a <UART_SetConfig+0x2e6>
 800693c:	2304      	movs	r3, #4
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006942:	e07a      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006944:	2308      	movs	r3, #8
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800694a:	e076      	b.n	8006a3a <UART_SetConfig+0x2e6>
 800694c:	2310      	movs	r3, #16
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006952:	e072      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a35      	ldr	r2, [pc, #212]	@ (8006a30 <UART_SetConfig+0x2dc>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d12a      	bne.n	80069b4 <UART_SetConfig+0x260>
 800695e:	4b30      	ldr	r3, [pc, #192]	@ (8006a20 <UART_SetConfig+0x2cc>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800696c:	d01a      	beq.n	80069a4 <UART_SetConfig+0x250>
 800696e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006972:	d81b      	bhi.n	80069ac <UART_SetConfig+0x258>
 8006974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006978:	d00c      	beq.n	8006994 <UART_SetConfig+0x240>
 800697a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800697e:	d815      	bhi.n	80069ac <UART_SetConfig+0x258>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <UART_SetConfig+0x238>
 8006984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006988:	d008      	beq.n	800699c <UART_SetConfig+0x248>
 800698a:	e00f      	b.n	80069ac <UART_SetConfig+0x258>
 800698c:	2300      	movs	r3, #0
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006992:	e052      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006994:	2302      	movs	r3, #2
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800699a:	e04e      	b.n	8006a3a <UART_SetConfig+0x2e6>
 800699c:	2304      	movs	r3, #4
 800699e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069a2:	e04a      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80069a4:	2308      	movs	r3, #8
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069aa:	e046      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80069ac:	2310      	movs	r3, #16
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069b2:	e042      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a17      	ldr	r2, [pc, #92]	@ (8006a18 <UART_SetConfig+0x2c4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d13a      	bne.n	8006a34 <UART_SetConfig+0x2e0>
 80069be:	4b18      	ldr	r3, [pc, #96]	@ (8006a20 <UART_SetConfig+0x2cc>)
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069cc:	d01a      	beq.n	8006a04 <UART_SetConfig+0x2b0>
 80069ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069d2:	d81b      	bhi.n	8006a0c <UART_SetConfig+0x2b8>
 80069d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d8:	d00c      	beq.n	80069f4 <UART_SetConfig+0x2a0>
 80069da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069de:	d815      	bhi.n	8006a0c <UART_SetConfig+0x2b8>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <UART_SetConfig+0x298>
 80069e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e8:	d008      	beq.n	80069fc <UART_SetConfig+0x2a8>
 80069ea:	e00f      	b.n	8006a0c <UART_SetConfig+0x2b8>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069f2:	e022      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069fa:	e01e      	b.n	8006a3a <UART_SetConfig+0x2e6>
 80069fc:	2304      	movs	r3, #4
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a02:	e01a      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006a04:	2308      	movs	r3, #8
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a0a:	e016      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006a0c:	2310      	movs	r3, #16
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a12:	e012      	b.n	8006a3a <UART_SetConfig+0x2e6>
 8006a14:	efff69f3 	.word	0xefff69f3
 8006a18:	40008000 	.word	0x40008000
 8006a1c:	40013800 	.word	0x40013800
 8006a20:	40021000 	.word	0x40021000
 8006a24:	40004400 	.word	0x40004400
 8006a28:	40004800 	.word	0x40004800
 8006a2c:	40004c00 	.word	0x40004c00
 8006a30:	40005000 	.word	0x40005000
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a9f      	ldr	r2, [pc, #636]	@ (8006cbc <UART_SetConfig+0x568>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d17a      	bne.n	8006b3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d824      	bhi.n	8006a96 <UART_SetConfig+0x342>
 8006a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <UART_SetConfig+0x300>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a97 	.word	0x08006a97
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006a87 	.word	0x08006a87
 8006a68:	08006a97 	.word	0x08006a97
 8006a6c:	08006a97 	.word	0x08006a97
 8006a70:	08006a97 	.word	0x08006a97
 8006a74:	08006a8f 	.word	0x08006a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a78:	f7fc ffb6 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8006a7c:	61f8      	str	r0, [r7, #28]
        break;
 8006a7e:	e010      	b.n	8006aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a80:	4b8f      	ldr	r3, [pc, #572]	@ (8006cc0 <UART_SetConfig+0x56c>)
 8006a82:	61fb      	str	r3, [r7, #28]
        break;
 8006a84:	e00d      	b.n	8006aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a86:	f7fc ff17 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8006a8a:	61f8      	str	r0, [r7, #28]
        break;
 8006a8c:	e009      	b.n	8006aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a92:	61fb      	str	r3, [r7, #28]
        break;
 8006a94:	e005      	b.n	8006aa2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80fb 	beq.w	8006ca0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4413      	add	r3, r2
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d305      	bcc.n	8006ac6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d903      	bls.n	8006ace <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006acc:	e0e8      	b.n	8006ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	461c      	mov	r4, r3
 8006ad4:	4615      	mov	r5, r2
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	022b      	lsls	r3, r5, #8
 8006ae0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ae4:	0222      	lsls	r2, r4, #8
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	6849      	ldr	r1, [r1, #4]
 8006aea:	0849      	lsrs	r1, r1, #1
 8006aec:	2000      	movs	r0, #0
 8006aee:	4688      	mov	r8, r1
 8006af0:	4681      	mov	r9, r0
 8006af2:	eb12 0a08 	adds.w	sl, r2, r8
 8006af6:	eb43 0b09 	adc.w	fp, r3, r9
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b08:	4650      	mov	r0, sl
 8006b0a:	4659      	mov	r1, fp
 8006b0c:	f7f9 fbb0 	bl	8000270 <__aeabi_uldivmod>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4613      	mov	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b1e:	d308      	bcc.n	8006b32 <UART_SetConfig+0x3de>
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b26:	d204      	bcs.n	8006b32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	60da      	str	r2, [r3, #12]
 8006b30:	e0b6      	b.n	8006ca0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b38:	e0b2      	b.n	8006ca0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b42:	d15e      	bne.n	8006c02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d828      	bhi.n	8006b9e <UART_SetConfig+0x44a>
 8006b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <UART_SetConfig+0x400>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	08006b9f 	.word	0x08006b9f
 8006b64:	08006b8f 	.word	0x08006b8f
 8006b68:	08006b9f 	.word	0x08006b9f
 8006b6c:	08006b9f 	.word	0x08006b9f
 8006b70:	08006b9f 	.word	0x08006b9f
 8006b74:	08006b97 	.word	0x08006b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7fc ff36 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8006b7c:	61f8      	str	r0, [r7, #28]
        break;
 8006b7e:	e014      	b.n	8006baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b80:	f7fc ff48 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8006b84:	61f8      	str	r0, [r7, #28]
        break;
 8006b86:	e010      	b.n	8006baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b88:	4b4d      	ldr	r3, [pc, #308]	@ (8006cc0 <UART_SetConfig+0x56c>)
 8006b8a:	61fb      	str	r3, [r7, #28]
        break;
 8006b8c:	e00d      	b.n	8006baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8e:	f7fc fe93 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8006b92:	61f8      	str	r0, [r7, #28]
        break;
 8006b94:	e009      	b.n	8006baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b9a:	61fb      	str	r3, [r7, #28]
        break;
 8006b9c:	e005      	b.n	8006baa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d077      	beq.n	8006ca0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	005a      	lsls	r2, r3, #1
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	085b      	lsrs	r3, r3, #1
 8006bba:	441a      	add	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b0f      	cmp	r3, #15
 8006bca:	d916      	bls.n	8006bfa <UART_SetConfig+0x4a6>
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bd2:	d212      	bcs.n	8006bfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f023 030f 	bic.w	r3, r3, #15
 8006bdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	8afb      	ldrh	r3, [r7, #22]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	8afa      	ldrh	r2, [r7, #22]
 8006bf6:	60da      	str	r2, [r3, #12]
 8006bf8:	e052      	b.n	8006ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c00:	e04e      	b.n	8006ca0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d827      	bhi.n	8006c5a <UART_SetConfig+0x506>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <UART_SetConfig+0x4bc>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	08006c5b 	.word	0x08006c5b
 8006c20:	08006c4b 	.word	0x08006c4b
 8006c24:	08006c5b 	.word	0x08006c5b
 8006c28:	08006c5b 	.word	0x08006c5b
 8006c2c:	08006c5b 	.word	0x08006c5b
 8006c30:	08006c53 	.word	0x08006c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7fc fed8 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8006c38:	61f8      	str	r0, [r7, #28]
        break;
 8006c3a:	e014      	b.n	8006c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fc feea 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8006c40:	61f8      	str	r0, [r7, #28]
        break;
 8006c42:	e010      	b.n	8006c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c44:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc0 <UART_SetConfig+0x56c>)
 8006c46:	61fb      	str	r3, [r7, #28]
        break;
 8006c48:	e00d      	b.n	8006c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4a:	f7fc fe35 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8006c4e:	61f8      	str	r0, [r7, #28]
        break;
 8006c50:	e009      	b.n	8006c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c56:	61fb      	str	r3, [r7, #28]
        break;
 8006c58:	e005      	b.n	8006c66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c64:	bf00      	nop
    }

    if (pclk != 0U)
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d019      	beq.n	8006ca0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	085a      	lsrs	r2, r3, #1
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	441a      	add	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d909      	bls.n	8006c9a <UART_SetConfig+0x546>
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c8c:	d205      	bcs.n	8006c9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e002      	b.n	8006ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006cac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3728      	adds	r7, #40	@ 0x28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cba:	bf00      	nop
 8006cbc:	40008000 	.word	0x40008000
 8006cc0:	00f42400 	.word	0x00f42400

08006cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01a      	beq.n	8006dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc2:	d10a      	bne.n	8006dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b098      	sub	sp, #96	@ 0x60
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e18:	f7fa fc2c 	bl	8001674 <HAL_GetTick>
 8006e1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d12e      	bne.n	8006e8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e34:	2200      	movs	r2, #0
 8006e36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f88c 	bl	8006f58 <UART_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d021      	beq.n	8006e8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e6      	bne.n	8006e46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e062      	b.n	8006f50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d149      	bne.n	8006f2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f856 	bl	8006f58 <UART_WaitOnFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d03c      	beq.n	8006f2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f04:	61fa      	str	r2, [r7, #28]
 8006f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	69b9      	ldr	r1, [r7, #24]
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	617b      	str	r3, [r7, #20]
   return(result);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e5      	bne.n	8006ee4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e011      	b.n	8006f50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3758      	adds	r7, #88	@ 0x58
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	4613      	mov	r3, r2
 8006f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f68:	e04f      	b.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d04b      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f72:	f7fa fb7f 	bl	8001674 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d302      	bcc.n	8006f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e04e      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d037      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b80      	cmp	r3, #128	@ 0x80
 8006f9e:	d034      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b40      	cmp	r3, #64	@ 0x40
 8006fa4:	d031      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d110      	bne.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f838 	bl	8007032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e029      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fe4:	d111      	bne.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f81e 	bl	8007032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e00f      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	4013      	ands	r3, r2
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	429a      	cmp	r2, r3
 8007018:	bf0c      	ite	eq
 800701a:	2301      	moveq	r3, #1
 800701c:	2300      	movne	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	429a      	cmp	r2, r3
 8007026:	d0a0      	beq.n	8006f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007032:	b480      	push	{r7}
 8007034:	b095      	sub	sp, #84	@ 0x54
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800704e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007058:	643b      	str	r3, [r7, #64]	@ 0x40
 800705a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800705e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e6      	bne.n	800703a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	61fb      	str	r3, [r7, #28]
   return(result);
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f023 0301 	bic.w	r3, r3, #1
 8007082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800708c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e5      	bne.n	800706c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d118      	bne.n	80070da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f023 0310 	bic.w	r3, r3, #16
 80070bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6979      	ldr	r1, [r7, #20]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	613b      	str	r3, [r7, #16]
   return(result);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e6      	bne.n	80070a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070ee:	bf00      	nop
 80070f0:	3754      	adds	r7, #84	@ 0x54
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff fb05 	bl	8006728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b088      	sub	sp, #32
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	60bb      	str	r3, [r7, #8]
   return(result);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6979      	ldr	r1, [r7, #20]
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	613b      	str	r3, [r7, #16]
   return(result);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e6      	bne.n	800712e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff fad1 	bl	8006714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007172:	bf00      	nop
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	4603      	mov	r3, r0
 8007196:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800719c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071a0:	2b84      	cmp	r3, #132	@ 0x84
 80071a2:	d005      	beq.n	80071b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80071a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	3303      	adds	r3, #3
 80071ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80071b0:	68fb      	ldr	r3, [r7, #12]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80071c2:	f000 fae5 	bl	8007790 <vTaskStartScheduler>
  
  return osOK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}

080071cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80071cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ce:	b089      	sub	sp, #36	@ 0x24
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d020      	beq.n	8007220 <osThreadCreate+0x54>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d01c      	beq.n	8007220 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685c      	ldr	r4, [r3, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691e      	ldr	r6, [r3, #16]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff ffc8 	bl	800718e <makeFreeRtosPriority>
 80071fe:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007208:	9202      	str	r2, [sp, #8]
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	9100      	str	r1, [sp, #0]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	4632      	mov	r2, r6
 8007212:	4629      	mov	r1, r5
 8007214:	4620      	mov	r0, r4
 8007216:	f000 f8ed 	bl	80073f4 <xTaskCreateStatic>
 800721a:	4603      	mov	r3, r0
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	e01c      	b.n	800725a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685c      	ldr	r4, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800722c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff ffaa 	bl	800718e <makeFreeRtosPriority>
 800723a:	4602      	mov	r2, r0
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	9200      	str	r2, [sp, #0]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	4632      	mov	r2, r6
 8007248:	4629      	mov	r1, r5
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f932 	bl	80074b4 <xTaskCreate>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d001      	beq.n	800725a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	e000      	b.n	800725c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800725a:	68fb      	ldr	r3, [r7, #12]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007264 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <osDelay+0x16>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	e000      	b.n	800727c <osDelay+0x18>
 800727a:	2301      	movs	r3, #1
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fa51 	bl	8007724 <vTaskDelay>
  
  return osOK;
 8007282:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f103 0208 	add.w	r2, r3, #8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f04f 32ff 	mov.w	r2, #4294967295
 80072a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f103 0208 	add.w	r2, r3, #8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f103 0208 	add.w	r2, r3, #8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
}
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d103      	bne.n	800734e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e00c      	b.n	8007368 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3308      	adds	r3, #8
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e002      	b.n	800735c <vListInsert+0x2e>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	429a      	cmp	r2, r3
 8007366:	d2f6      	bcs.n	8007356 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6892      	ldr	r2, [r2, #8]
 80073b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6852      	ldr	r2, [r2, #4]
 80073c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d103      	bne.n	80073d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	1e5a      	subs	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08e      	sub	sp, #56	@ 0x38
 80073f8:	af04      	add	r7, sp, #16
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10b      	bne.n	8007420 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	e7fd      	b.n	800741c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10b      	bne.n	800743e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	61fb      	str	r3, [r7, #28]
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800743e:	2354      	movs	r3, #84	@ 0x54
 8007440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b54      	cmp	r3, #84	@ 0x54
 8007446:	d00b      	beq.n	8007460 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	61bb      	str	r3, [r7, #24]
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	e7fd      	b.n	800745c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007460:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01e      	beq.n	80074a6 <xTaskCreateStatic+0xb2>
 8007468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01b      	beq.n	80074a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800746e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007476:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007480:	2300      	movs	r3, #0
 8007482:	9303      	str	r3, [sp, #12]
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	9302      	str	r3, [sp, #8]
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f850 	bl	800753e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800749e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074a0:	f000 f8d6 	bl	8007650 <prvAddNewTaskToReadyList>
 80074a4:	e001      	b.n	80074aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074aa:	697b      	ldr	r3, [r7, #20]
	}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3728      	adds	r7, #40	@ 0x28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08c      	sub	sp, #48	@ 0x30
 80074b8:	af04      	add	r7, sp, #16
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074c4:	88fb      	ldrh	r3, [r7, #6]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 feed 	bl	80082a8 <pvPortMalloc>
 80074ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00e      	beq.n	80074f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074d6:	2054      	movs	r0, #84	@ 0x54
 80074d8:	f000 fee6 	bl	80082a8 <pvPortMalloc>
 80074dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80074ea:	e005      	b.n	80074f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074ec:	6978      	ldr	r0, [r7, #20]
 80074ee:	f000 ffa9 	bl	8008444 <vPortFree>
 80074f2:	e001      	b.n	80074f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d017      	beq.n	800752e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	2300      	movs	r3, #0
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f80e 	bl	800753e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007522:	69f8      	ldr	r0, [r7, #28]
 8007524:	f000 f894 	bl	8007650 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007528:	2301      	movs	r3, #1
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	e002      	b.n	8007534 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800752e:	f04f 33ff 	mov.w	r3, #4294967295
 8007532:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007534:	69bb      	ldr	r3, [r7, #24]
	}
 8007536:	4618      	mov	r0, r3
 8007538:	3720      	adds	r7, #32
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b088      	sub	sp, #32
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800754c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007556:	3b01      	subs	r3, #1
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f023 0307 	bic.w	r3, r3, #7
 8007564:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	617b      	str	r3, [r7, #20]
}
 8007582:	bf00      	nop
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01f      	beq.n	80075ce <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	e012      	b.n	80075ba <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	4413      	add	r3, r2
 800759a:	7819      	ldrb	r1, [r3, #0]
 800759c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	3334      	adds	r3, #52	@ 0x34
 80075a4:	460a      	mov	r2, r1
 80075a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d006      	beq.n	80075c2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3301      	adds	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2b0f      	cmp	r3, #15
 80075be:	d9e9      	bls.n	8007594 <prvInitialiseNewTask+0x56>
 80075c0:	e000      	b.n	80075c4 <prvInitialiseNewTask+0x86>
			{
				break;
 80075c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075cc:	e003      	b.n	80075d6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	2b06      	cmp	r3, #6
 80075da:	d901      	bls.n	80075e0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075dc:	2306      	movs	r3, #6
 80075de:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075ea:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	2200      	movs	r2, #0
 80075f0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	3304      	adds	r3, #4
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff fe68 	bl	80072cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	3318      	adds	r3, #24
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fe63 	bl	80072cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800760a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	f1c3 0207 	rsb	r2, r3, #7
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800761a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	2200      	movs	r2, #0
 8007620:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	68f9      	ldr	r1, [r7, #12]
 800762e:	69b8      	ldr	r0, [r7, #24]
 8007630:	f000 fc2c 	bl	8007e8c <pxPortInitialiseStack>
 8007634:	4602      	mov	r2, r0
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007646:	bf00      	nop
 8007648:	3720      	adds	r7, #32
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007658:	f000 fd46 	bl	80080e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800765c:	4b2a      	ldr	r3, [pc, #168]	@ (8007708 <prvAddNewTaskToReadyList+0xb8>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3301      	adds	r3, #1
 8007662:	4a29      	ldr	r2, [pc, #164]	@ (8007708 <prvAddNewTaskToReadyList+0xb8>)
 8007664:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007666:	4b29      	ldr	r3, [pc, #164]	@ (800770c <prvAddNewTaskToReadyList+0xbc>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800766e:	4a27      	ldr	r2, [pc, #156]	@ (800770c <prvAddNewTaskToReadyList+0xbc>)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007674:	4b24      	ldr	r3, [pc, #144]	@ (8007708 <prvAddNewTaskToReadyList+0xb8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d110      	bne.n	800769e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800767c:	f000 fac4 	bl	8007c08 <prvInitialiseTaskLists>
 8007680:	e00d      	b.n	800769e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007682:	4b23      	ldr	r3, [pc, #140]	@ (8007710 <prvAddNewTaskToReadyList+0xc0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800768a:	4b20      	ldr	r3, [pc, #128]	@ (800770c <prvAddNewTaskToReadyList+0xbc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	429a      	cmp	r2, r3
 8007696:	d802      	bhi.n	800769e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007698:	4a1c      	ldr	r2, [pc, #112]	@ (800770c <prvAddNewTaskToReadyList+0xbc>)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800769e:	4b1d      	ldr	r3, [pc, #116]	@ (8007714 <prvAddNewTaskToReadyList+0xc4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <prvAddNewTaskToReadyList+0xc4>)
 80076a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	2201      	movs	r2, #1
 80076ae:	409a      	lsls	r2, r3
 80076b0:	4b19      	ldr	r3, [pc, #100]	@ (8007718 <prvAddNewTaskToReadyList+0xc8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	4a18      	ldr	r2, [pc, #96]	@ (8007718 <prvAddNewTaskToReadyList+0xc8>)
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4a15      	ldr	r2, [pc, #84]	@ (800771c <prvAddNewTaskToReadyList+0xcc>)
 80076c8:	441a      	add	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3304      	adds	r3, #4
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f7ff fe08 	bl	80072e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076d6:	f000 fd39 	bl	800814c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <prvAddNewTaskToReadyList+0xc0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00e      	beq.n	8007700 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076e2:	4b0a      	ldr	r3, [pc, #40]	@ (800770c <prvAddNewTaskToReadyList+0xbc>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d207      	bcs.n	8007700 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007720 <prvAddNewTaskToReadyList+0xd0>)
 80076f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	200006c4 	.word	0x200006c4
 800770c:	200005c4 	.word	0x200005c4
 8007710:	200006d0 	.word	0x200006d0
 8007714:	200006e0 	.word	0x200006e0
 8007718:	200006cc 	.word	0x200006cc
 800771c:	200005c8 	.word	0x200005c8
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d018      	beq.n	8007768 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007736:	4b14      	ldr	r3, [pc, #80]	@ (8007788 <vTaskDelay+0x64>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00b      	beq.n	8007756 <vTaskDelay+0x32>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	60bb      	str	r3, [r7, #8]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007756:	f000 f87d 	bl	8007854 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800775a:	2100      	movs	r1, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb2f 	bl	8007dc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007762:	f000 f885 	bl	8007870 <xTaskResumeAll>
 8007766:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d107      	bne.n	800777e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800776e:	4b07      	ldr	r3, [pc, #28]	@ (800778c <vTaskDelay+0x68>)
 8007770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200006ec 	.word	0x200006ec
 800778c:	e000ed04 	.word	0xe000ed04

08007790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	@ 0x28
 8007794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800779e:	463a      	mov	r2, r7
 80077a0:	1d39      	adds	r1, r7, #4
 80077a2:	f107 0308 	add.w	r3, r7, #8
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7f8 ff00 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	9202      	str	r2, [sp, #8]
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	2300      	movs	r3, #0
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	2300      	movs	r3, #0
 80077bc:	460a      	mov	r2, r1
 80077be:	491f      	ldr	r1, [pc, #124]	@ (800783c <vTaskStartScheduler+0xac>)
 80077c0:	481f      	ldr	r0, [pc, #124]	@ (8007840 <vTaskStartScheduler+0xb0>)
 80077c2:	f7ff fe17 	bl	80073f4 <xTaskCreateStatic>
 80077c6:	4603      	mov	r3, r0
 80077c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007844 <vTaskStartScheduler+0xb4>)
 80077ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007844 <vTaskStartScheduler+0xb4>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e001      	b.n	80077de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d116      	bne.n	8007812 <vTaskStartScheduler+0x82>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	613b      	str	r3, [r7, #16]
}
 80077f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077f8:	4b13      	ldr	r3, [pc, #76]	@ (8007848 <vTaskStartScheduler+0xb8>)
 80077fa:	f04f 32ff 	mov.w	r2, #4294967295
 80077fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007800:	4b12      	ldr	r3, [pc, #72]	@ (800784c <vTaskStartScheduler+0xbc>)
 8007802:	2201      	movs	r2, #1
 8007804:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007806:	4b12      	ldr	r3, [pc, #72]	@ (8007850 <vTaskStartScheduler+0xc0>)
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800780c:	f000 fbc8 	bl	8007fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007810:	e00f      	b.n	8007832 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d10b      	bne.n	8007832 <vTaskStartScheduler+0xa2>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	60fb      	str	r3, [r7, #12]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <vTaskStartScheduler+0x9e>
}
 8007832:	bf00      	nop
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	08009a24 	.word	0x08009a24
 8007840:	08007bd9 	.word	0x08007bd9
 8007844:	200006e8 	.word	0x200006e8
 8007848:	200006e4 	.word	0x200006e4
 800784c:	200006d0 	.word	0x200006d0
 8007850:	200006c8 	.word	0x200006c8

08007854 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007858:	4b04      	ldr	r3, [pc, #16]	@ (800786c <vTaskSuspendAll+0x18>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3301      	adds	r3, #1
 800785e:	4a03      	ldr	r2, [pc, #12]	@ (800786c <vTaskSuspendAll+0x18>)
 8007860:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007862:	bf00      	nop
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	200006ec 	.word	0x200006ec

08007870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800787a:	2300      	movs	r3, #0
 800787c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800787e:	4b42      	ldr	r3, [pc, #264]	@ (8007988 <xTaskResumeAll+0x118>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <xTaskResumeAll+0x2e>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	603b      	str	r3, [r7, #0]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800789e:	f000 fc23 	bl	80080e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078a2:	4b39      	ldr	r3, [pc, #228]	@ (8007988 <xTaskResumeAll+0x118>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	4a37      	ldr	r2, [pc, #220]	@ (8007988 <xTaskResumeAll+0x118>)
 80078aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ac:	4b36      	ldr	r3, [pc, #216]	@ (8007988 <xTaskResumeAll+0x118>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d161      	bne.n	8007978 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078b4:	4b35      	ldr	r3, [pc, #212]	@ (800798c <xTaskResumeAll+0x11c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d05d      	beq.n	8007978 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078bc:	e02e      	b.n	800791c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078be:	4b34      	ldr	r3, [pc, #208]	@ (8007990 <xTaskResumeAll+0x120>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3318      	adds	r3, #24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fd68 	bl	80073a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff fd63 	bl	80073a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078de:	2201      	movs	r2, #1
 80078e0:	409a      	lsls	r2, r3
 80078e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007994 <xTaskResumeAll+0x124>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007994 <xTaskResumeAll+0x124>)
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4a27      	ldr	r2, [pc, #156]	@ (8007998 <xTaskResumeAll+0x128>)
 80078fa:	441a      	add	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3304      	adds	r3, #4
 8007900:	4619      	mov	r1, r3
 8007902:	4610      	mov	r0, r2
 8007904:	f7ff fcef 	bl	80072e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790c:	4b23      	ldr	r3, [pc, #140]	@ (800799c <xTaskResumeAll+0x12c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007912:	429a      	cmp	r2, r3
 8007914:	d302      	bcc.n	800791c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007916:	4b22      	ldr	r3, [pc, #136]	@ (80079a0 <xTaskResumeAll+0x130>)
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800791c:	4b1c      	ldr	r3, [pc, #112]	@ (8007990 <xTaskResumeAll+0x120>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1cc      	bne.n	80078be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800792a:	f000 fa0b 	bl	8007d44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800792e:	4b1d      	ldr	r3, [pc, #116]	@ (80079a4 <xTaskResumeAll+0x134>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d010      	beq.n	800795c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800793a:	f000 f837 	bl	80079ac <xTaskIncrementTick>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007944:	4b16      	ldr	r3, [pc, #88]	@ (80079a0 <xTaskResumeAll+0x130>)
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3b01      	subs	r3, #1
 800794e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1f1      	bne.n	800793a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007956:	4b13      	ldr	r3, [pc, #76]	@ (80079a4 <xTaskResumeAll+0x134>)
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800795c:	4b10      	ldr	r3, [pc, #64]	@ (80079a0 <xTaskResumeAll+0x130>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007968:	4b0f      	ldr	r3, [pc, #60]	@ (80079a8 <xTaskResumeAll+0x138>)
 800796a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007978:	f000 fbe8 	bl	800814c <vPortExitCritical>

	return xAlreadyYielded;
 800797c:	68bb      	ldr	r3, [r7, #8]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200006ec 	.word	0x200006ec
 800798c:	200006c4 	.word	0x200006c4
 8007990:	20000684 	.word	0x20000684
 8007994:	200006cc 	.word	0x200006cc
 8007998:	200005c8 	.word	0x200005c8
 800799c:	200005c4 	.word	0x200005c4
 80079a0:	200006d8 	.word	0x200006d8
 80079a4:	200006d4 	.word	0x200006d4
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079b6:	4b4f      	ldr	r3, [pc, #316]	@ (8007af4 <xTaskIncrementTick+0x148>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 808f 	bne.w	8007ade <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079c0:	4b4d      	ldr	r3, [pc, #308]	@ (8007af8 <xTaskIncrementTick+0x14c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079c8:	4a4b      	ldr	r2, [pc, #300]	@ (8007af8 <xTaskIncrementTick+0x14c>)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d121      	bne.n	8007a18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079d4:	4b49      	ldr	r3, [pc, #292]	@ (8007afc <xTaskIncrementTick+0x150>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	603b      	str	r3, [r7, #0]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <xTaskIncrementTick+0x46>
 80079f6:	4b41      	ldr	r3, [pc, #260]	@ (8007afc <xTaskIncrementTick+0x150>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	4b40      	ldr	r3, [pc, #256]	@ (8007b00 <xTaskIncrementTick+0x154>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a3e      	ldr	r2, [pc, #248]	@ (8007afc <xTaskIncrementTick+0x150>)
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	4a3e      	ldr	r2, [pc, #248]	@ (8007b00 <xTaskIncrementTick+0x154>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b04 <xTaskIncrementTick+0x158>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	4a3c      	ldr	r2, [pc, #240]	@ (8007b04 <xTaskIncrementTick+0x158>)
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	f000 f996 	bl	8007d44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a18:	4b3b      	ldr	r3, [pc, #236]	@ (8007b08 <xTaskIncrementTick+0x15c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d348      	bcc.n	8007ab4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a22:	4b36      	ldr	r3, [pc, #216]	@ (8007afc <xTaskIncrementTick+0x150>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a2c:	4b36      	ldr	r3, [pc, #216]	@ (8007b08 <xTaskIncrementTick+0x15c>)
 8007a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a32:	601a      	str	r2, [r3, #0]
					break;
 8007a34:	e03e      	b.n	8007ab4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a36:	4b31      	ldr	r3, [pc, #196]	@ (8007afc <xTaskIncrementTick+0x150>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d203      	bcs.n	8007a56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007b08 <xTaskIncrementTick+0x15c>)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a54:	e02e      	b.n	8007ab4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff fca0 	bl	80073a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	3318      	adds	r3, #24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff fc97 	bl	80073a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a76:	2201      	movs	r2, #1
 8007a78:	409a      	lsls	r2, r3
 8007a7a:	4b24      	ldr	r3, [pc, #144]	@ (8007b0c <xTaskIncrementTick+0x160>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	4a22      	ldr	r2, [pc, #136]	@ (8007b0c <xTaskIncrementTick+0x160>)
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4a1f      	ldr	r2, [pc, #124]	@ (8007b10 <xTaskIncrementTick+0x164>)
 8007a92:	441a      	add	r2, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	3304      	adds	r3, #4
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	f7ff fc23 	bl	80072e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b14 <xTaskIncrementTick+0x168>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d3b9      	bcc.n	8007a22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab2:	e7b6      	b.n	8007a22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ab4:	4b17      	ldr	r3, [pc, #92]	@ (8007b14 <xTaskIncrementTick+0x168>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aba:	4915      	ldr	r1, [pc, #84]	@ (8007b10 <xTaskIncrementTick+0x164>)
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d901      	bls.n	8007ad0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ad0:	4b11      	ldr	r3, [pc, #68]	@ (8007b18 <xTaskIncrementTick+0x16c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	e004      	b.n	8007ae8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ade:	4b0f      	ldr	r3, [pc, #60]	@ (8007b1c <xTaskIncrementTick+0x170>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8007b1c <xTaskIncrementTick+0x170>)
 8007ae6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ae8:	697b      	ldr	r3, [r7, #20]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	200006ec 	.word	0x200006ec
 8007af8:	200006c8 	.word	0x200006c8
 8007afc:	2000067c 	.word	0x2000067c
 8007b00:	20000680 	.word	0x20000680
 8007b04:	200006dc 	.word	0x200006dc
 8007b08:	200006e4 	.word	0x200006e4
 8007b0c:	200006cc 	.word	0x200006cc
 8007b10:	200005c8 	.word	0x200005c8
 8007b14:	200005c4 	.word	0x200005c4
 8007b18:	200006d8 	.word	0x200006d8
 8007b1c:	200006d4 	.word	0x200006d4

08007b20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b26:	4b27      	ldr	r3, [pc, #156]	@ (8007bc4 <vTaskSwitchContext+0xa4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b2e:	4b26      	ldr	r3, [pc, #152]	@ (8007bc8 <vTaskSwitchContext+0xa8>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b34:	e040      	b.n	8007bb8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b36:	4b24      	ldr	r3, [pc, #144]	@ (8007bc8 <vTaskSwitchContext+0xa8>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b3c:	4b23      	ldr	r3, [pc, #140]	@ (8007bcc <vTaskSwitchContext+0xac>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	fab3 f383 	clz	r3, r3
 8007b48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	f1c3 031f 	rsb	r3, r3, #31
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	491f      	ldr	r1, [pc, #124]	@ (8007bd0 <vTaskSwitchContext+0xb0>)
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10b      	bne.n	8007b7e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	607b      	str	r3, [r7, #4]
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	e7fd      	b.n	8007b7a <vTaskSwitchContext+0x5a>
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4a11      	ldr	r2, [pc, #68]	@ (8007bd0 <vTaskSwitchContext+0xb0>)
 8007b8a:	4413      	add	r3, r2
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	605a      	str	r2, [r3, #4]
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d104      	bne.n	8007bae <vTaskSwitchContext+0x8e>
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	605a      	str	r2, [r3, #4]
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	4a07      	ldr	r2, [pc, #28]	@ (8007bd4 <vTaskSwitchContext+0xb4>)
 8007bb6:	6013      	str	r3, [r2, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	200006ec 	.word	0x200006ec
 8007bc8:	200006d8 	.word	0x200006d8
 8007bcc:	200006cc 	.word	0x200006cc
 8007bd0:	200005c8 	.word	0x200005c8
 8007bd4:	200005c4 	.word	0x200005c4

08007bd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007be0:	f000 f852 	bl	8007c88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007be4:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <prvIdleTask+0x28>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d9f9      	bls.n	8007be0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bec:	4b05      	ldr	r3, [pc, #20]	@ (8007c04 <prvIdleTask+0x2c>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bfc:	e7f0      	b.n	8007be0 <prvIdleTask+0x8>
 8007bfe:	bf00      	nop
 8007c00:	200005c8 	.word	0x200005c8
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c0e:	2300      	movs	r3, #0
 8007c10:	607b      	str	r3, [r7, #4]
 8007c12:	e00c      	b.n	8007c2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4a12      	ldr	r2, [pc, #72]	@ (8007c68 <prvInitialiseTaskLists+0x60>)
 8007c20:	4413      	add	r3, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fb32 	bl	800728c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b06      	cmp	r3, #6
 8007c32:	d9ef      	bls.n	8007c14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c34:	480d      	ldr	r0, [pc, #52]	@ (8007c6c <prvInitialiseTaskLists+0x64>)
 8007c36:	f7ff fb29 	bl	800728c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c3a:	480d      	ldr	r0, [pc, #52]	@ (8007c70 <prvInitialiseTaskLists+0x68>)
 8007c3c:	f7ff fb26 	bl	800728c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c40:	480c      	ldr	r0, [pc, #48]	@ (8007c74 <prvInitialiseTaskLists+0x6c>)
 8007c42:	f7ff fb23 	bl	800728c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c46:	480c      	ldr	r0, [pc, #48]	@ (8007c78 <prvInitialiseTaskLists+0x70>)
 8007c48:	f7ff fb20 	bl	800728c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c4c:	480b      	ldr	r0, [pc, #44]	@ (8007c7c <prvInitialiseTaskLists+0x74>)
 8007c4e:	f7ff fb1d 	bl	800728c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c52:	4b0b      	ldr	r3, [pc, #44]	@ (8007c80 <prvInitialiseTaskLists+0x78>)
 8007c54:	4a05      	ldr	r2, [pc, #20]	@ (8007c6c <prvInitialiseTaskLists+0x64>)
 8007c56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c58:	4b0a      	ldr	r3, [pc, #40]	@ (8007c84 <prvInitialiseTaskLists+0x7c>)
 8007c5a:	4a05      	ldr	r2, [pc, #20]	@ (8007c70 <prvInitialiseTaskLists+0x68>)
 8007c5c:	601a      	str	r2, [r3, #0]
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200005c8 	.word	0x200005c8
 8007c6c:	20000654 	.word	0x20000654
 8007c70:	20000668 	.word	0x20000668
 8007c74:	20000684 	.word	0x20000684
 8007c78:	20000698 	.word	0x20000698
 8007c7c:	200006b0 	.word	0x200006b0
 8007c80:	2000067c 	.word	0x2000067c
 8007c84:	20000680 	.word	0x20000680

08007c88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c8e:	e019      	b.n	8007cc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c90:	f000 fa2a 	bl	80080e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c94:	4b10      	ldr	r3, [pc, #64]	@ (8007cd8 <prvCheckTasksWaitingTermination+0x50>)
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fb7d 	bl	80073a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cdc <prvCheckTasksWaitingTermination+0x54>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	4a0b      	ldr	r2, [pc, #44]	@ (8007cdc <prvCheckTasksWaitingTermination+0x54>)
 8007cae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce0 <prvCheckTasksWaitingTermination+0x58>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ce0 <prvCheckTasksWaitingTermination+0x58>)
 8007cb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cba:	f000 fa47 	bl	800814c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f810 	bl	8007ce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cc4:	4b06      	ldr	r3, [pc, #24]	@ (8007ce0 <prvCheckTasksWaitingTermination+0x58>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e1      	bne.n	8007c90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000698 	.word	0x20000698
 8007cdc:	200006c4 	.word	0x200006c4
 8007ce0:	200006ac 	.word	0x200006ac

08007ce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d108      	bne.n	8007d08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fba2 	bl	8008444 <vPortFree>
				vPortFree( pxTCB );
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fb9f 	bl	8008444 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d06:	e019      	b.n	8007d3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d103      	bne.n	8007d1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fb96 	bl	8008444 <vPortFree>
	}
 8007d18:	e010      	b.n	8007d3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d00b      	beq.n	8007d3c <prvDeleteTCB+0x58>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	60fb      	str	r3, [r7, #12]
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	e7fd      	b.n	8007d38 <prvDeleteTCB+0x54>
	}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d7c <prvResetNextTaskUnblockTime+0x38>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d54:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <prvResetNextTaskUnblockTime+0x3c>)
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d5c:	e008      	b.n	8007d70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5e:	4b07      	ldr	r3, [pc, #28]	@ (8007d7c <prvResetNextTaskUnblockTime+0x38>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	4a04      	ldr	r2, [pc, #16]	@ (8007d80 <prvResetNextTaskUnblockTime+0x3c>)
 8007d6e:	6013      	str	r3, [r2, #0]
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	2000067c 	.word	0x2000067c
 8007d80:	200006e4 	.word	0x200006e4

08007d84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <xTaskGetSchedulerState+0x34>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d92:	2301      	movs	r3, #1
 8007d94:	607b      	str	r3, [r7, #4]
 8007d96:	e008      	b.n	8007daa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d98:	4b08      	ldr	r3, [pc, #32]	@ (8007dbc <xTaskGetSchedulerState+0x38>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007da0:	2302      	movs	r3, #2
 8007da2:	607b      	str	r3, [r7, #4]
 8007da4:	e001      	b.n	8007daa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007da6:	2300      	movs	r3, #0
 8007da8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007daa:	687b      	ldr	r3, [r7, #4]
	}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	200006d0 	.word	0x200006d0
 8007dbc:	200006ec 	.word	0x200006ec

08007dc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dca:	4b29      	ldr	r3, [pc, #164]	@ (8007e70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd0:	4b28      	ldr	r3, [pc, #160]	@ (8007e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fae2 	bl	80073a0 <uxListRemove>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10b      	bne.n	8007dfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007de2:	4b24      	ldr	r3, [pc, #144]	@ (8007e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de8:	2201      	movs	r2, #1
 8007dea:	fa02 f303 	lsl.w	r3, r2, r3
 8007dee:	43da      	mvns	r2, r3
 8007df0:	4b21      	ldr	r3, [pc, #132]	@ (8007e78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4013      	ands	r3, r2
 8007df6:	4a20      	ldr	r2, [pc, #128]	@ (8007e78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007df8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e00:	d10a      	bne.n	8007e18 <prvAddCurrentTaskToDelayedList+0x58>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e08:	4b1a      	ldr	r3, [pc, #104]	@ (8007e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4619      	mov	r1, r3
 8007e10:	481a      	ldr	r0, [pc, #104]	@ (8007e7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e12:	f7ff fa68 	bl	80072e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e16:	e026      	b.n	8007e66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e20:	4b14      	ldr	r3, [pc, #80]	@ (8007e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d209      	bcs.n	8007e44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e30:	4b13      	ldr	r3, [pc, #76]	@ (8007e80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4b0f      	ldr	r3, [pc, #60]	@ (8007e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	f7ff fa76 	bl	800732e <vListInsert>
}
 8007e42:	e010      	b.n	8007e66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e44:	4b0f      	ldr	r3, [pc, #60]	@ (8007e84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	4b0a      	ldr	r3, [pc, #40]	@ (8007e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4610      	mov	r0, r2
 8007e52:	f7ff fa6c 	bl	800732e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e56:	4b0c      	ldr	r3, [pc, #48]	@ (8007e88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d202      	bcs.n	8007e66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e60:	4a09      	ldr	r2, [pc, #36]	@ (8007e88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6013      	str	r3, [r2, #0]
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	200006c8 	.word	0x200006c8
 8007e74:	200005c4 	.word	0x200005c4
 8007e78:	200006cc 	.word	0x200006cc
 8007e7c:	200006b0 	.word	0x200006b0
 8007e80:	20000680 	.word	0x20000680
 8007e84:	2000067c 	.word	0x2000067c
 8007e88:	200006e4 	.word	0x200006e4

08007e8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3b04      	subs	r3, #4
 8007e9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3b04      	subs	r3, #4
 8007eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f023 0201 	bic.w	r2, r3, #1
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3b04      	subs	r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef0 <pxPortInitialiseStack+0x64>)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3b14      	subs	r3, #20
 8007ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f06f 0202 	mvn.w	r2, #2
 8007eda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3b20      	subs	r3, #32
 8007ee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	08007ef5 	.word	0x08007ef5

08007ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007efe:	4b13      	ldr	r3, [pc, #76]	@ (8007f4c <prvTaskExitError+0x58>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d00b      	beq.n	8007f20 <prvTaskExitError+0x2c>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	60fb      	str	r3, [r7, #12]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <prvTaskExitError+0x28>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60bb      	str	r3, [r7, #8]
}
 8007f32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f34:	bf00      	nop
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0fc      	beq.n	8007f36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	2000000c 	.word	0x2000000c

08007f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f50:	4b07      	ldr	r3, [pc, #28]	@ (8007f70 <pxCurrentTCBConst2>)
 8007f52:	6819      	ldr	r1, [r3, #0]
 8007f54:	6808      	ldr	r0, [r1, #0]
 8007f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5a:	f380 8809 	msr	PSP, r0
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8811 	msr	BASEPRI, r0
 8007f6a:	4770      	bx	lr
 8007f6c:	f3af 8000 	nop.w

08007f70 <pxCurrentTCBConst2>:
 8007f70:	200005c4 	.word	0x200005c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop

08007f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f78:	4808      	ldr	r0, [pc, #32]	@ (8007f9c <prvPortStartFirstTask+0x24>)
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f380 8808 	msr	MSP, r0
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8814 	msr	CONTROL, r0
 8007f8a:	b662      	cpsie	i
 8007f8c:	b661      	cpsie	f
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	df00      	svc	0
 8007f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f9a:	bf00      	nop
 8007f9c:	e000ed08 	.word	0xe000ed08

08007fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fa6:	4b47      	ldr	r3, [pc, #284]	@ (80080c4 <xPortStartScheduler+0x124>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a47      	ldr	r2, [pc, #284]	@ (80080c8 <xPortStartScheduler+0x128>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10b      	bne.n	8007fc8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	613b      	str	r3, [r7, #16]
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80080c4 <xPortStartScheduler+0x124>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80080cc <xPortStartScheduler+0x12c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d10b      	bne.n	8007fea <xPortStartScheduler+0x4a>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60fb      	str	r3, [r7, #12]
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fea:	4b39      	ldr	r3, [pc, #228]	@ (80080d0 <xPortStartScheduler+0x130>)
 8007fec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	22ff      	movs	r2, #255	@ 0xff
 8007ffa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800800c:	b2da      	uxtb	r2, r3
 800800e:	4b31      	ldr	r3, [pc, #196]	@ (80080d4 <xPortStartScheduler+0x134>)
 8008010:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008012:	4b31      	ldr	r3, [pc, #196]	@ (80080d8 <xPortStartScheduler+0x138>)
 8008014:	2207      	movs	r2, #7
 8008016:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008018:	e009      	b.n	800802e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800801a:	4b2f      	ldr	r3, [pc, #188]	@ (80080d8 <xPortStartScheduler+0x138>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3b01      	subs	r3, #1
 8008020:	4a2d      	ldr	r2, [pc, #180]	@ (80080d8 <xPortStartScheduler+0x138>)
 8008022:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	b2db      	uxtb	r3, r3
 800802c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800802e:	78fb      	ldrb	r3, [r7, #3]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008036:	2b80      	cmp	r3, #128	@ 0x80
 8008038:	d0ef      	beq.n	800801a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800803a:	4b27      	ldr	r3, [pc, #156]	@ (80080d8 <xPortStartScheduler+0x138>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f1c3 0307 	rsb	r3, r3, #7
 8008042:	2b04      	cmp	r3, #4
 8008044:	d00b      	beq.n	800805e <xPortStartScheduler+0xbe>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60bb      	str	r3, [r7, #8]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800805e:	4b1e      	ldr	r3, [pc, #120]	@ (80080d8 <xPortStartScheduler+0x138>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	4a1c      	ldr	r2, [pc, #112]	@ (80080d8 <xPortStartScheduler+0x138>)
 8008066:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008068:	4b1b      	ldr	r3, [pc, #108]	@ (80080d8 <xPortStartScheduler+0x138>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008070:	4a19      	ldr	r2, [pc, #100]	@ (80080d8 <xPortStartScheduler+0x138>)
 8008072:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	b2da      	uxtb	r2, r3
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800807c:	4b17      	ldr	r3, [pc, #92]	@ (80080dc <xPortStartScheduler+0x13c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a16      	ldr	r2, [pc, #88]	@ (80080dc <xPortStartScheduler+0x13c>)
 8008082:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008086:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008088:	4b14      	ldr	r3, [pc, #80]	@ (80080dc <xPortStartScheduler+0x13c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a13      	ldr	r2, [pc, #76]	@ (80080dc <xPortStartScheduler+0x13c>)
 800808e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008092:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008094:	f000 f8da 	bl	800824c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008098:	4b11      	ldr	r3, [pc, #68]	@ (80080e0 <xPortStartScheduler+0x140>)
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800809e:	f000 f8f9 	bl	8008294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080a2:	4b10      	ldr	r3, [pc, #64]	@ (80080e4 <xPortStartScheduler+0x144>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a0f      	ldr	r2, [pc, #60]	@ (80080e4 <xPortStartScheduler+0x144>)
 80080a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80080ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080ae:	f7ff ff63 	bl	8007f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080b2:	f7ff fd35 	bl	8007b20 <vTaskSwitchContext>
	prvTaskExitError();
 80080b6:	f7ff ff1d 	bl	8007ef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	e000ed00 	.word	0xe000ed00
 80080c8:	410fc271 	.word	0x410fc271
 80080cc:	410fc270 	.word	0x410fc270
 80080d0:	e000e400 	.word	0xe000e400
 80080d4:	200006f0 	.word	0x200006f0
 80080d8:	200006f4 	.word	0x200006f4
 80080dc:	e000ed20 	.word	0xe000ed20
 80080e0:	2000000c 	.word	0x2000000c
 80080e4:	e000ef34 	.word	0xe000ef34

080080e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	607b      	str	r3, [r7, #4]
}
 8008100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008102:	4b10      	ldr	r3, [pc, #64]	@ (8008144 <vPortEnterCritical+0x5c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3301      	adds	r3, #1
 8008108:	4a0e      	ldr	r2, [pc, #56]	@ (8008144 <vPortEnterCritical+0x5c>)
 800810a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800810c:	4b0d      	ldr	r3, [pc, #52]	@ (8008144 <vPortEnterCritical+0x5c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d110      	bne.n	8008136 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008114:	4b0c      	ldr	r3, [pc, #48]	@ (8008148 <vPortEnterCritical+0x60>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00b      	beq.n	8008136 <vPortEnterCritical+0x4e>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	603b      	str	r3, [r7, #0]
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	e7fd      	b.n	8008132 <vPortEnterCritical+0x4a>
	}
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	2000000c 	.word	0x2000000c
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008152:	4b12      	ldr	r3, [pc, #72]	@ (800819c <vPortExitCritical+0x50>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10b      	bne.n	8008172 <vPortExitCritical+0x26>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	607b      	str	r3, [r7, #4]
}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	e7fd      	b.n	800816e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008172:	4b0a      	ldr	r3, [pc, #40]	@ (800819c <vPortExitCritical+0x50>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3b01      	subs	r3, #1
 8008178:	4a08      	ldr	r2, [pc, #32]	@ (800819c <vPortExitCritical+0x50>)
 800817a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800817c:	4b07      	ldr	r3, [pc, #28]	@ (800819c <vPortExitCritical+0x50>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <vPortExitCritical+0x44>
 8008184:	2300      	movs	r3, #0
 8008186:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800818e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	2000000c 	.word	0x2000000c

080081a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081a0:	f3ef 8009 	mrs	r0, PSP
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4b15      	ldr	r3, [pc, #84]	@ (8008200 <pxCurrentTCBConst>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	f01e 0f10 	tst.w	lr, #16
 80081b0:	bf08      	it	eq
 80081b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	6010      	str	r0, [r2, #0]
 80081bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081c4:	f380 8811 	msr	BASEPRI, r0
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f7ff fca6 	bl	8007b20 <vTaskSwitchContext>
 80081d4:	f04f 0000 	mov.w	r0, #0
 80081d8:	f380 8811 	msr	BASEPRI, r0
 80081dc:	bc09      	pop	{r0, r3}
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	6808      	ldr	r0, [r1, #0]
 80081e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e6:	f01e 0f10 	tst.w	lr, #16
 80081ea:	bf08      	it	eq
 80081ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081f0:	f380 8809 	msr	PSP, r0
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	f3af 8000 	nop.w

08008200 <pxCurrentTCBConst>:
 8008200:	200005c4 	.word	0x200005c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop

08008208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	607b      	str	r3, [r7, #4]
}
 8008220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008222:	f7ff fbc3 	bl	80079ac <xTaskIncrementTick>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800822c:	4b06      	ldr	r3, [pc, #24]	@ (8008248 <xPortSysTickHandler+0x40>)
 800822e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f383 8811 	msr	BASEPRI, r3
}
 800823e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	e000ed04 	.word	0xe000ed04

0800824c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008250:	4b0b      	ldr	r3, [pc, #44]	@ (8008280 <vPortSetupTimerInterrupt+0x34>)
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008256:	4b0b      	ldr	r3, [pc, #44]	@ (8008284 <vPortSetupTimerInterrupt+0x38>)
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800825c:	4b0a      	ldr	r3, [pc, #40]	@ (8008288 <vPortSetupTimerInterrupt+0x3c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a0a      	ldr	r2, [pc, #40]	@ (800828c <vPortSetupTimerInterrupt+0x40>)
 8008262:	fba2 2303 	umull	r2, r3, r2, r3
 8008266:	099b      	lsrs	r3, r3, #6
 8008268:	4a09      	ldr	r2, [pc, #36]	@ (8008290 <vPortSetupTimerInterrupt+0x44>)
 800826a:	3b01      	subs	r3, #1
 800826c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800826e:	4b04      	ldr	r3, [pc, #16]	@ (8008280 <vPortSetupTimerInterrupt+0x34>)
 8008270:	2207      	movs	r2, #7
 8008272:	601a      	str	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	e000e010 	.word	0xe000e010
 8008284:	e000e018 	.word	0xe000e018
 8008288:	20000000 	.word	0x20000000
 800828c:	10624dd3 	.word	0x10624dd3
 8008290:	e000e014 	.word	0xe000e014

08008294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80082a4 <vPortEnableVFP+0x10>
 8008298:	6801      	ldr	r1, [r0, #0]
 800829a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800829e:	6001      	str	r1, [r0, #0]
 80082a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082a2:	bf00      	nop
 80082a4:	e000ed88 	.word	0xe000ed88

080082a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	@ 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082b4:	f7ff face 	bl	8007854 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082b8:	4b5c      	ldr	r3, [pc, #368]	@ (800842c <pvPortMalloc+0x184>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082c0:	f000 f924 	bl	800850c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082c4:	4b5a      	ldr	r3, [pc, #360]	@ (8008430 <pvPortMalloc+0x188>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8095 	bne.w	80083fc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01e      	beq.n	8008316 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80082d8:	2208      	movs	r2, #8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d015      	beq.n	8008316 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f023 0307 	bic.w	r3, r3, #7
 80082f0:	3308      	adds	r3, #8
 80082f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <pvPortMalloc+0x6e>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	617b      	str	r3, [r7, #20]
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	e7fd      	b.n	8008312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d06f      	beq.n	80083fc <pvPortMalloc+0x154>
 800831c:	4b45      	ldr	r3, [pc, #276]	@ (8008434 <pvPortMalloc+0x18c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	429a      	cmp	r2, r3
 8008324:	d86a      	bhi.n	80083fc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008326:	4b44      	ldr	r3, [pc, #272]	@ (8008438 <pvPortMalloc+0x190>)
 8008328:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800832a:	4b43      	ldr	r3, [pc, #268]	@ (8008438 <pvPortMalloc+0x190>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008330:	e004      	b.n	800833c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800833c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d903      	bls.n	800834e <pvPortMalloc+0xa6>
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1f1      	bne.n	8008332 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800834e:	4b37      	ldr	r3, [pc, #220]	@ (800842c <pvPortMalloc+0x184>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008354:	429a      	cmp	r2, r3
 8008356:	d051      	beq.n	80083fc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2208      	movs	r2, #8
 800835e:	4413      	add	r3, r2
 8008360:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800836a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	1ad2      	subs	r2, r2, r3
 8008372:	2308      	movs	r3, #8
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	429a      	cmp	r2, r3
 8008378:	d920      	bls.n	80083bc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800837a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4413      	add	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <pvPortMalloc+0xfc>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	613b      	str	r3, [r7, #16]
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	e7fd      	b.n	80083a0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083b6:	69b8      	ldr	r0, [r7, #24]
 80083b8:	f000 f90a 	bl	80085d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008434 <pvPortMalloc+0x18c>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008434 <pvPortMalloc+0x18c>)
 80083c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008434 <pvPortMalloc+0x18c>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b1b      	ldr	r3, [pc, #108]	@ (800843c <pvPortMalloc+0x194>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d203      	bcs.n	80083de <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083d6:	4b17      	ldr	r3, [pc, #92]	@ (8008434 <pvPortMalloc+0x18c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a18      	ldr	r2, [pc, #96]	@ (800843c <pvPortMalloc+0x194>)
 80083dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	4b13      	ldr	r3, [pc, #76]	@ (8008430 <pvPortMalloc+0x188>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083f2:	4b13      	ldr	r3, [pc, #76]	@ (8008440 <pvPortMalloc+0x198>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3301      	adds	r3, #1
 80083f8:	4a11      	ldr	r2, [pc, #68]	@ (8008440 <pvPortMalloc+0x198>)
 80083fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083fc:	f7ff fa38 	bl	8007870 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <pvPortMalloc+0x17a>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	60fb      	str	r3, [r7, #12]
}
 800841c:	bf00      	nop
 800841e:	bf00      	nop
 8008420:	e7fd      	b.n	800841e <pvPortMalloc+0x176>
	return pvReturn;
 8008422:	69fb      	ldr	r3, [r7, #28]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3728      	adds	r7, #40	@ 0x28
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	200012b8 	.word	0x200012b8
 8008430:	200012cc 	.word	0x200012cc
 8008434:	200012bc 	.word	0x200012bc
 8008438:	200012b0 	.word	0x200012b0
 800843c:	200012c0 	.word	0x200012c0
 8008440:	200012c4 	.word	0x200012c4

08008444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d04f      	beq.n	80084f6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008456:	2308      	movs	r3, #8
 8008458:	425b      	negs	r3, r3
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	4413      	add	r3, r2
 800845e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	4b25      	ldr	r3, [pc, #148]	@ (8008500 <vPortFree+0xbc>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4013      	ands	r3, r2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <vPortFree+0x46>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	60fb      	str	r3, [r7, #12]
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	e7fd      	b.n	8008486 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00b      	beq.n	80084aa <vPortFree+0x66>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	60bb      	str	r3, [r7, #8]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	4b14      	ldr	r3, [pc, #80]	@ (8008500 <vPortFree+0xbc>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4013      	ands	r3, r2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01e      	beq.n	80084f6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d11a      	bne.n	80084f6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008500 <vPortFree+0xbc>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	43db      	mvns	r3, r3
 80084ca:	401a      	ands	r2, r3
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084d0:	f7ff f9c0 	bl	8007854 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <vPortFree+0xc0>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4413      	add	r3, r2
 80084de:	4a09      	ldr	r2, [pc, #36]	@ (8008504 <vPortFree+0xc0>)
 80084e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084e2:	6938      	ldr	r0, [r7, #16]
 80084e4:	f000 f874 	bl	80085d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084e8:	4b07      	ldr	r3, [pc, #28]	@ (8008508 <vPortFree+0xc4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	4a06      	ldr	r2, [pc, #24]	@ (8008508 <vPortFree+0xc4>)
 80084f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084f2:	f7ff f9bd 	bl	8007870 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084f6:	bf00      	nop
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	200012cc 	.word	0x200012cc
 8008504:	200012bc 	.word	0x200012bc
 8008508:	200012c8 	.word	0x200012c8

0800850c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008512:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008516:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008518:	4b27      	ldr	r3, [pc, #156]	@ (80085b8 <prvHeapInit+0xac>)
 800851a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00c      	beq.n	8008540 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3307      	adds	r3, #7
 800852a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0307 	bic.w	r3, r3, #7
 8008532:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	4a1f      	ldr	r2, [pc, #124]	@ (80085b8 <prvHeapInit+0xac>)
 800853c:	4413      	add	r3, r2
 800853e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008544:	4a1d      	ldr	r2, [pc, #116]	@ (80085bc <prvHeapInit+0xb0>)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800854a:	4b1c      	ldr	r3, [pc, #112]	@ (80085bc <prvHeapInit+0xb0>)
 800854c:	2200      	movs	r2, #0
 800854e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	4413      	add	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008558:	2208      	movs	r2, #8
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1a9b      	subs	r3, r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4a15      	ldr	r2, [pc, #84]	@ (80085c0 <prvHeapInit+0xb4>)
 800856c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800856e:	4b14      	ldr	r3, [pc, #80]	@ (80085c0 <prvHeapInit+0xb4>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008576:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <prvHeapInit+0xb4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2200      	movs	r2, #0
 800857c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	1ad2      	subs	r2, r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800858c:	4b0c      	ldr	r3, [pc, #48]	@ (80085c0 <prvHeapInit+0xb4>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4a0a      	ldr	r2, [pc, #40]	@ (80085c4 <prvHeapInit+0xb8>)
 800859a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	4a09      	ldr	r2, [pc, #36]	@ (80085c8 <prvHeapInit+0xbc>)
 80085a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085a4:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <prvHeapInit+0xc0>)
 80085a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80085aa:	601a      	str	r2, [r3, #0]
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	200006f8 	.word	0x200006f8
 80085bc:	200012b0 	.word	0x200012b0
 80085c0:	200012b8 	.word	0x200012b8
 80085c4:	200012c0 	.word	0x200012c0
 80085c8:	200012bc 	.word	0x200012bc
 80085cc:	200012cc 	.word	0x200012cc

080085d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085d8:	4b28      	ldr	r3, [pc, #160]	@ (800867c <prvInsertBlockIntoFreeList+0xac>)
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e002      	b.n	80085e4 <prvInsertBlockIntoFreeList+0x14>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d8f7      	bhi.n	80085de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	4413      	add	r3, r2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d108      	bne.n	8008612 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	441a      	add	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	441a      	add	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	429a      	cmp	r2, r3
 8008624:	d118      	bne.n	8008658 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4b15      	ldr	r3, [pc, #84]	@ (8008680 <prvInsertBlockIntoFreeList+0xb0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d00d      	beq.n	800864e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	441a      	add	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	e008      	b.n	8008660 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800864e:	4b0c      	ldr	r3, [pc, #48]	@ (8008680 <prvInsertBlockIntoFreeList+0xb0>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e003      	b.n	8008660 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d002      	beq.n	800866e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	200012b0 	.word	0x200012b0
 8008680:	200012b8 	.word	0x200012b8

08008684 <std>:
 8008684:	2300      	movs	r3, #0
 8008686:	b510      	push	{r4, lr}
 8008688:	4604      	mov	r4, r0
 800868a:	e9c0 3300 	strd	r3, r3, [r0]
 800868e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008692:	6083      	str	r3, [r0, #8]
 8008694:	8181      	strh	r1, [r0, #12]
 8008696:	6643      	str	r3, [r0, #100]	@ 0x64
 8008698:	81c2      	strh	r2, [r0, #14]
 800869a:	6183      	str	r3, [r0, #24]
 800869c:	4619      	mov	r1, r3
 800869e:	2208      	movs	r2, #8
 80086a0:	305c      	adds	r0, #92	@ 0x5c
 80086a2:	f000 f9f9 	bl	8008a98 <memset>
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <std+0x58>)
 80086a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80086aa:	4b0d      	ldr	r3, [pc, #52]	@ (80086e0 <std+0x5c>)
 80086ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086ae:	4b0d      	ldr	r3, [pc, #52]	@ (80086e4 <std+0x60>)
 80086b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086b2:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <std+0x64>)
 80086b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80086b6:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <std+0x68>)
 80086b8:	6224      	str	r4, [r4, #32]
 80086ba:	429c      	cmp	r4, r3
 80086bc:	d006      	beq.n	80086cc <std+0x48>
 80086be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086c2:	4294      	cmp	r4, r2
 80086c4:	d002      	beq.n	80086cc <std+0x48>
 80086c6:	33d0      	adds	r3, #208	@ 0xd0
 80086c8:	429c      	cmp	r4, r3
 80086ca:	d105      	bne.n	80086d8 <std+0x54>
 80086cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d4:	f000 ba58 	b.w	8008b88 <__retarget_lock_init_recursive>
 80086d8:	bd10      	pop	{r4, pc}
 80086da:	bf00      	nop
 80086dc:	080088e9 	.word	0x080088e9
 80086e0:	0800890b 	.word	0x0800890b
 80086e4:	08008943 	.word	0x08008943
 80086e8:	08008967 	.word	0x08008967
 80086ec:	200012d0 	.word	0x200012d0

080086f0 <stdio_exit_handler>:
 80086f0:	4a02      	ldr	r2, [pc, #8]	@ (80086fc <stdio_exit_handler+0xc>)
 80086f2:	4903      	ldr	r1, [pc, #12]	@ (8008700 <stdio_exit_handler+0x10>)
 80086f4:	4803      	ldr	r0, [pc, #12]	@ (8008704 <stdio_exit_handler+0x14>)
 80086f6:	f000 b869 	b.w	80087cc <_fwalk_sglue>
 80086fa:	bf00      	nop
 80086fc:	20000010 	.word	0x20000010
 8008700:	08009429 	.word	0x08009429
 8008704:	20000020 	.word	0x20000020

08008708 <cleanup_stdio>:
 8008708:	6841      	ldr	r1, [r0, #4]
 800870a:	4b0c      	ldr	r3, [pc, #48]	@ (800873c <cleanup_stdio+0x34>)
 800870c:	4299      	cmp	r1, r3
 800870e:	b510      	push	{r4, lr}
 8008710:	4604      	mov	r4, r0
 8008712:	d001      	beq.n	8008718 <cleanup_stdio+0x10>
 8008714:	f000 fe88 	bl	8009428 <_fflush_r>
 8008718:	68a1      	ldr	r1, [r4, #8]
 800871a:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <cleanup_stdio+0x38>)
 800871c:	4299      	cmp	r1, r3
 800871e:	d002      	beq.n	8008726 <cleanup_stdio+0x1e>
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fe81 	bl	8009428 <_fflush_r>
 8008726:	68e1      	ldr	r1, [r4, #12]
 8008728:	4b06      	ldr	r3, [pc, #24]	@ (8008744 <cleanup_stdio+0x3c>)
 800872a:	4299      	cmp	r1, r3
 800872c:	d004      	beq.n	8008738 <cleanup_stdio+0x30>
 800872e:	4620      	mov	r0, r4
 8008730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008734:	f000 be78 	b.w	8009428 <_fflush_r>
 8008738:	bd10      	pop	{r4, pc}
 800873a:	bf00      	nop
 800873c:	200012d0 	.word	0x200012d0
 8008740:	20001338 	.word	0x20001338
 8008744:	200013a0 	.word	0x200013a0

08008748 <global_stdio_init.part.0>:
 8008748:	b510      	push	{r4, lr}
 800874a:	4b0b      	ldr	r3, [pc, #44]	@ (8008778 <global_stdio_init.part.0+0x30>)
 800874c:	4c0b      	ldr	r4, [pc, #44]	@ (800877c <global_stdio_init.part.0+0x34>)
 800874e:	4a0c      	ldr	r2, [pc, #48]	@ (8008780 <global_stdio_init.part.0+0x38>)
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	4620      	mov	r0, r4
 8008754:	2200      	movs	r2, #0
 8008756:	2104      	movs	r1, #4
 8008758:	f7ff ff94 	bl	8008684 <std>
 800875c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008760:	2201      	movs	r2, #1
 8008762:	2109      	movs	r1, #9
 8008764:	f7ff ff8e 	bl	8008684 <std>
 8008768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800876c:	2202      	movs	r2, #2
 800876e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008772:	2112      	movs	r1, #18
 8008774:	f7ff bf86 	b.w	8008684 <std>
 8008778:	20001408 	.word	0x20001408
 800877c:	200012d0 	.word	0x200012d0
 8008780:	080086f1 	.word	0x080086f1

08008784 <__sfp_lock_acquire>:
 8008784:	4801      	ldr	r0, [pc, #4]	@ (800878c <__sfp_lock_acquire+0x8>)
 8008786:	f000 ba00 	b.w	8008b8a <__retarget_lock_acquire_recursive>
 800878a:	bf00      	nop
 800878c:	20001411 	.word	0x20001411

08008790 <__sfp_lock_release>:
 8008790:	4801      	ldr	r0, [pc, #4]	@ (8008798 <__sfp_lock_release+0x8>)
 8008792:	f000 b9fb 	b.w	8008b8c <__retarget_lock_release_recursive>
 8008796:	bf00      	nop
 8008798:	20001411 	.word	0x20001411

0800879c <__sinit>:
 800879c:	b510      	push	{r4, lr}
 800879e:	4604      	mov	r4, r0
 80087a0:	f7ff fff0 	bl	8008784 <__sfp_lock_acquire>
 80087a4:	6a23      	ldr	r3, [r4, #32]
 80087a6:	b11b      	cbz	r3, 80087b0 <__sinit+0x14>
 80087a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ac:	f7ff bff0 	b.w	8008790 <__sfp_lock_release>
 80087b0:	4b04      	ldr	r3, [pc, #16]	@ (80087c4 <__sinit+0x28>)
 80087b2:	6223      	str	r3, [r4, #32]
 80087b4:	4b04      	ldr	r3, [pc, #16]	@ (80087c8 <__sinit+0x2c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f5      	bne.n	80087a8 <__sinit+0xc>
 80087bc:	f7ff ffc4 	bl	8008748 <global_stdio_init.part.0>
 80087c0:	e7f2      	b.n	80087a8 <__sinit+0xc>
 80087c2:	bf00      	nop
 80087c4:	08008709 	.word	0x08008709
 80087c8:	20001408 	.word	0x20001408

080087cc <_fwalk_sglue>:
 80087cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d0:	4607      	mov	r7, r0
 80087d2:	4688      	mov	r8, r1
 80087d4:	4614      	mov	r4, r2
 80087d6:	2600      	movs	r6, #0
 80087d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087dc:	f1b9 0901 	subs.w	r9, r9, #1
 80087e0:	d505      	bpl.n	80087ee <_fwalk_sglue+0x22>
 80087e2:	6824      	ldr	r4, [r4, #0]
 80087e4:	2c00      	cmp	r4, #0
 80087e6:	d1f7      	bne.n	80087d8 <_fwalk_sglue+0xc>
 80087e8:	4630      	mov	r0, r6
 80087ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d907      	bls.n	8008804 <_fwalk_sglue+0x38>
 80087f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087f8:	3301      	adds	r3, #1
 80087fa:	d003      	beq.n	8008804 <_fwalk_sglue+0x38>
 80087fc:	4629      	mov	r1, r5
 80087fe:	4638      	mov	r0, r7
 8008800:	47c0      	blx	r8
 8008802:	4306      	orrs	r6, r0
 8008804:	3568      	adds	r5, #104	@ 0x68
 8008806:	e7e9      	b.n	80087dc <_fwalk_sglue+0x10>

08008808 <iprintf>:
 8008808:	b40f      	push	{r0, r1, r2, r3}
 800880a:	b507      	push	{r0, r1, r2, lr}
 800880c:	4906      	ldr	r1, [pc, #24]	@ (8008828 <iprintf+0x20>)
 800880e:	ab04      	add	r3, sp, #16
 8008810:	6808      	ldr	r0, [r1, #0]
 8008812:	f853 2b04 	ldr.w	r2, [r3], #4
 8008816:	6881      	ldr	r1, [r0, #8]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	f000 fadb 	bl	8008dd4 <_vfiprintf_r>
 800881e:	b003      	add	sp, #12
 8008820:	f85d eb04 	ldr.w	lr, [sp], #4
 8008824:	b004      	add	sp, #16
 8008826:	4770      	bx	lr
 8008828:	2000001c 	.word	0x2000001c

0800882c <_puts_r>:
 800882c:	6a03      	ldr	r3, [r0, #32]
 800882e:	b570      	push	{r4, r5, r6, lr}
 8008830:	6884      	ldr	r4, [r0, #8]
 8008832:	4605      	mov	r5, r0
 8008834:	460e      	mov	r6, r1
 8008836:	b90b      	cbnz	r3, 800883c <_puts_r+0x10>
 8008838:	f7ff ffb0 	bl	800879c <__sinit>
 800883c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800883e:	07db      	lsls	r3, r3, #31
 8008840:	d405      	bmi.n	800884e <_puts_r+0x22>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	0598      	lsls	r0, r3, #22
 8008846:	d402      	bmi.n	800884e <_puts_r+0x22>
 8008848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800884a:	f000 f99e 	bl	8008b8a <__retarget_lock_acquire_recursive>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	0719      	lsls	r1, r3, #28
 8008852:	d502      	bpl.n	800885a <_puts_r+0x2e>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d135      	bne.n	80088c6 <_puts_r+0x9a>
 800885a:	4621      	mov	r1, r4
 800885c:	4628      	mov	r0, r5
 800885e:	f000 f8c5 	bl	80089ec <__swsetup_r>
 8008862:	b380      	cbz	r0, 80088c6 <_puts_r+0x9a>
 8008864:	f04f 35ff 	mov.w	r5, #4294967295
 8008868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800886a:	07da      	lsls	r2, r3, #31
 800886c:	d405      	bmi.n	800887a <_puts_r+0x4e>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	059b      	lsls	r3, r3, #22
 8008872:	d402      	bmi.n	800887a <_puts_r+0x4e>
 8008874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008876:	f000 f989 	bl	8008b8c <__retarget_lock_release_recursive>
 800887a:	4628      	mov	r0, r5
 800887c:	bd70      	pop	{r4, r5, r6, pc}
 800887e:	2b00      	cmp	r3, #0
 8008880:	da04      	bge.n	800888c <_puts_r+0x60>
 8008882:	69a2      	ldr	r2, [r4, #24]
 8008884:	429a      	cmp	r2, r3
 8008886:	dc17      	bgt.n	80088b8 <_puts_r+0x8c>
 8008888:	290a      	cmp	r1, #10
 800888a:	d015      	beq.n	80088b8 <_puts_r+0x8c>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	6022      	str	r2, [r4, #0]
 8008892:	7019      	strb	r1, [r3, #0]
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800889a:	3b01      	subs	r3, #1
 800889c:	60a3      	str	r3, [r4, #8]
 800889e:	2900      	cmp	r1, #0
 80088a0:	d1ed      	bne.n	800887e <_puts_r+0x52>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	da11      	bge.n	80088ca <_puts_r+0x9e>
 80088a6:	4622      	mov	r2, r4
 80088a8:	210a      	movs	r1, #10
 80088aa:	4628      	mov	r0, r5
 80088ac:	f000 f85f 	bl	800896e <__swbuf_r>
 80088b0:	3001      	adds	r0, #1
 80088b2:	d0d7      	beq.n	8008864 <_puts_r+0x38>
 80088b4:	250a      	movs	r5, #10
 80088b6:	e7d7      	b.n	8008868 <_puts_r+0x3c>
 80088b8:	4622      	mov	r2, r4
 80088ba:	4628      	mov	r0, r5
 80088bc:	f000 f857 	bl	800896e <__swbuf_r>
 80088c0:	3001      	adds	r0, #1
 80088c2:	d1e7      	bne.n	8008894 <_puts_r+0x68>
 80088c4:	e7ce      	b.n	8008864 <_puts_r+0x38>
 80088c6:	3e01      	subs	r6, #1
 80088c8:	e7e4      	b.n	8008894 <_puts_r+0x68>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	220a      	movs	r2, #10
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	e7ee      	b.n	80088b4 <_puts_r+0x88>
	...

080088d8 <puts>:
 80088d8:	4b02      	ldr	r3, [pc, #8]	@ (80088e4 <puts+0xc>)
 80088da:	4601      	mov	r1, r0
 80088dc:	6818      	ldr	r0, [r3, #0]
 80088de:	f7ff bfa5 	b.w	800882c <_puts_r>
 80088e2:	bf00      	nop
 80088e4:	2000001c 	.word	0x2000001c

080088e8 <__sread>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	460c      	mov	r4, r1
 80088ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f0:	f000 f8fc 	bl	8008aec <_read_r>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	bfab      	itete	ge
 80088f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088fa:	89a3      	ldrhlt	r3, [r4, #12]
 80088fc:	181b      	addge	r3, r3, r0
 80088fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008902:	bfac      	ite	ge
 8008904:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008906:	81a3      	strhlt	r3, [r4, #12]
 8008908:	bd10      	pop	{r4, pc}

0800890a <__swrite>:
 800890a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890e:	461f      	mov	r7, r3
 8008910:	898b      	ldrh	r3, [r1, #12]
 8008912:	05db      	lsls	r3, r3, #23
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	4616      	mov	r6, r2
 800891a:	d505      	bpl.n	8008928 <__swrite+0x1e>
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	2302      	movs	r3, #2
 8008922:	2200      	movs	r2, #0
 8008924:	f000 f8d0 	bl	8008ac8 <_lseek_r>
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800892e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	4632      	mov	r2, r6
 8008936:	463b      	mov	r3, r7
 8008938:	4628      	mov	r0, r5
 800893a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893e:	f000 b8e7 	b.w	8008b10 <_write_r>

08008942 <__sseek>:
 8008942:	b510      	push	{r4, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894a:	f000 f8bd 	bl	8008ac8 <_lseek_r>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	bf15      	itete	ne
 8008954:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800895a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800895e:	81a3      	strheq	r3, [r4, #12]
 8008960:	bf18      	it	ne
 8008962:	81a3      	strhne	r3, [r4, #12]
 8008964:	bd10      	pop	{r4, pc}

08008966 <__sclose>:
 8008966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896a:	f000 b89d 	b.w	8008aa8 <_close_r>

0800896e <__swbuf_r>:
 800896e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008970:	460e      	mov	r6, r1
 8008972:	4614      	mov	r4, r2
 8008974:	4605      	mov	r5, r0
 8008976:	b118      	cbz	r0, 8008980 <__swbuf_r+0x12>
 8008978:	6a03      	ldr	r3, [r0, #32]
 800897a:	b90b      	cbnz	r3, 8008980 <__swbuf_r+0x12>
 800897c:	f7ff ff0e 	bl	800879c <__sinit>
 8008980:	69a3      	ldr	r3, [r4, #24]
 8008982:	60a3      	str	r3, [r4, #8]
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	071a      	lsls	r2, r3, #28
 8008988:	d501      	bpl.n	800898e <__swbuf_r+0x20>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	b943      	cbnz	r3, 80089a0 <__swbuf_r+0x32>
 800898e:	4621      	mov	r1, r4
 8008990:	4628      	mov	r0, r5
 8008992:	f000 f82b 	bl	80089ec <__swsetup_r>
 8008996:	b118      	cbz	r0, 80089a0 <__swbuf_r+0x32>
 8008998:	f04f 37ff 	mov.w	r7, #4294967295
 800899c:	4638      	mov	r0, r7
 800899e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	6922      	ldr	r2, [r4, #16]
 80089a4:	1a98      	subs	r0, r3, r2
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	b2f6      	uxtb	r6, r6
 80089aa:	4283      	cmp	r3, r0
 80089ac:	4637      	mov	r7, r6
 80089ae:	dc05      	bgt.n	80089bc <__swbuf_r+0x4e>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 fd38 	bl	8009428 <_fflush_r>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d1ed      	bne.n	8008998 <__swbuf_r+0x2a>
 80089bc:	68a3      	ldr	r3, [r4, #8]
 80089be:	3b01      	subs	r3, #1
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	701e      	strb	r6, [r3, #0]
 80089ca:	6962      	ldr	r2, [r4, #20]
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d004      	beq.n	80089dc <__swbuf_r+0x6e>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	07db      	lsls	r3, r3, #31
 80089d6:	d5e1      	bpl.n	800899c <__swbuf_r+0x2e>
 80089d8:	2e0a      	cmp	r6, #10
 80089da:	d1df      	bne.n	800899c <__swbuf_r+0x2e>
 80089dc:	4621      	mov	r1, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 fd22 	bl	8009428 <_fflush_r>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d0d9      	beq.n	800899c <__swbuf_r+0x2e>
 80089e8:	e7d6      	b.n	8008998 <__swbuf_r+0x2a>
	...

080089ec <__swsetup_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4b29      	ldr	r3, [pc, #164]	@ (8008a94 <__swsetup_r+0xa8>)
 80089f0:	4605      	mov	r5, r0
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	460c      	mov	r4, r1
 80089f6:	b118      	cbz	r0, 8008a00 <__swsetup_r+0x14>
 80089f8:	6a03      	ldr	r3, [r0, #32]
 80089fa:	b90b      	cbnz	r3, 8008a00 <__swsetup_r+0x14>
 80089fc:	f7ff fece 	bl	800879c <__sinit>
 8008a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a04:	0719      	lsls	r1, r3, #28
 8008a06:	d422      	bmi.n	8008a4e <__swsetup_r+0x62>
 8008a08:	06da      	lsls	r2, r3, #27
 8008a0a:	d407      	bmi.n	8008a1c <__swsetup_r+0x30>
 8008a0c:	2209      	movs	r2, #9
 8008a0e:	602a      	str	r2, [r5, #0]
 8008a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1a:	e033      	b.n	8008a84 <__swsetup_r+0x98>
 8008a1c:	0758      	lsls	r0, r3, #29
 8008a1e:	d512      	bpl.n	8008a46 <__swsetup_r+0x5a>
 8008a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a22:	b141      	cbz	r1, 8008a36 <__swsetup_r+0x4a>
 8008a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a28:	4299      	cmp	r1, r3
 8008a2a:	d002      	beq.n	8008a32 <__swsetup_r+0x46>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 f8af 	bl	8008b90 <_free_r>
 8008a32:	2300      	movs	r3, #0
 8008a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f043 0308 	orr.w	r3, r3, #8
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	b94b      	cbnz	r3, 8008a66 <__swsetup_r+0x7a>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a5c:	d003      	beq.n	8008a66 <__swsetup_r+0x7a>
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 fd2f 	bl	80094c4 <__smakebuf_r>
 8008a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6a:	f013 0201 	ands.w	r2, r3, #1
 8008a6e:	d00a      	beq.n	8008a86 <__swsetup_r+0x9a>
 8008a70:	2200      	movs	r2, #0
 8008a72:	60a2      	str	r2, [r4, #8]
 8008a74:	6962      	ldr	r2, [r4, #20]
 8008a76:	4252      	negs	r2, r2
 8008a78:	61a2      	str	r2, [r4, #24]
 8008a7a:	6922      	ldr	r2, [r4, #16]
 8008a7c:	b942      	cbnz	r2, 8008a90 <__swsetup_r+0xa4>
 8008a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a82:	d1c5      	bne.n	8008a10 <__swsetup_r+0x24>
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
 8008a86:	0799      	lsls	r1, r3, #30
 8008a88:	bf58      	it	pl
 8008a8a:	6962      	ldrpl	r2, [r4, #20]
 8008a8c:	60a2      	str	r2, [r4, #8]
 8008a8e:	e7f4      	b.n	8008a7a <__swsetup_r+0x8e>
 8008a90:	2000      	movs	r0, #0
 8008a92:	e7f7      	b.n	8008a84 <__swsetup_r+0x98>
 8008a94:	2000001c 	.word	0x2000001c

08008a98 <memset>:
 8008a98:	4402      	add	r2, r0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d100      	bne.n	8008aa2 <memset+0xa>
 8008aa0:	4770      	bx	lr
 8008aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa6:	e7f9      	b.n	8008a9c <memset+0x4>

08008aa8 <_close_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d06      	ldr	r5, [pc, #24]	@ (8008ac4 <_close_r+0x1c>)
 8008aac:	2300      	movs	r3, #0
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f7f8 fc33 	bl	800131e <_close>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_close_r+0x1a>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_close_r+0x1a>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	2000140c 	.word	0x2000140c

08008ac8 <_lseek_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d07      	ldr	r5, [pc, #28]	@ (8008ae8 <_lseek_r+0x20>)
 8008acc:	4604      	mov	r4, r0
 8008ace:	4608      	mov	r0, r1
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	602a      	str	r2, [r5, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f7f8 fc48 	bl	800136c <_lseek>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_lseek_r+0x1e>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_lseek_r+0x1e>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	2000140c 	.word	0x2000140c

08008aec <_read_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4d07      	ldr	r5, [pc, #28]	@ (8008b0c <_read_r+0x20>)
 8008af0:	4604      	mov	r4, r0
 8008af2:	4608      	mov	r0, r1
 8008af4:	4611      	mov	r1, r2
 8008af6:	2200      	movs	r2, #0
 8008af8:	602a      	str	r2, [r5, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	f7f8 fbd6 	bl	80012ac <_read>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_read_r+0x1e>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_read_r+0x1e>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	2000140c 	.word	0x2000140c

08008b10 <_write_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d07      	ldr	r5, [pc, #28]	@ (8008b30 <_write_r+0x20>)
 8008b14:	4604      	mov	r4, r0
 8008b16:	4608      	mov	r0, r1
 8008b18:	4611      	mov	r1, r2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	602a      	str	r2, [r5, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f7f8 fbe1 	bl	80012e6 <_write>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_write_r+0x1e>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_write_r+0x1e>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	2000140c 	.word	0x2000140c

08008b34 <__errno>:
 8008b34:	4b01      	ldr	r3, [pc, #4]	@ (8008b3c <__errno+0x8>)
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	2000001c 	.word	0x2000001c

08008b40 <__libc_init_array>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	4d0d      	ldr	r5, [pc, #52]	@ (8008b78 <__libc_init_array+0x38>)
 8008b44:	4c0d      	ldr	r4, [pc, #52]	@ (8008b7c <__libc_init_array+0x3c>)
 8008b46:	1b64      	subs	r4, r4, r5
 8008b48:	10a4      	asrs	r4, r4, #2
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	42a6      	cmp	r6, r4
 8008b4e:	d109      	bne.n	8008b64 <__libc_init_array+0x24>
 8008b50:	4d0b      	ldr	r5, [pc, #44]	@ (8008b80 <__libc_init_array+0x40>)
 8008b52:	4c0c      	ldr	r4, [pc, #48]	@ (8008b84 <__libc_init_array+0x44>)
 8008b54:	f000 fd24 	bl	80095a0 <_init>
 8008b58:	1b64      	subs	r4, r4, r5
 8008b5a:	10a4      	asrs	r4, r4, #2
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	42a6      	cmp	r6, r4
 8008b60:	d105      	bne.n	8008b6e <__libc_init_array+0x2e>
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
 8008b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b68:	4798      	blx	r3
 8008b6a:	3601      	adds	r6, #1
 8008b6c:	e7ee      	b.n	8008b4c <__libc_init_array+0xc>
 8008b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b72:	4798      	blx	r3
 8008b74:	3601      	adds	r6, #1
 8008b76:	e7f2      	b.n	8008b5e <__libc_init_array+0x1e>
 8008b78:	08009ab0 	.word	0x08009ab0
 8008b7c:	08009ab0 	.word	0x08009ab0
 8008b80:	08009ab0 	.word	0x08009ab0
 8008b84:	08009ab4 	.word	0x08009ab4

08008b88 <__retarget_lock_init_recursive>:
 8008b88:	4770      	bx	lr

08008b8a <__retarget_lock_acquire_recursive>:
 8008b8a:	4770      	bx	lr

08008b8c <__retarget_lock_release_recursive>:
 8008b8c:	4770      	bx	lr
	...

08008b90 <_free_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4605      	mov	r5, r0
 8008b94:	2900      	cmp	r1, #0
 8008b96:	d041      	beq.n	8008c1c <_free_r+0x8c>
 8008b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9c:	1f0c      	subs	r4, r1, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bfb8      	it	lt
 8008ba2:	18e4      	addlt	r4, r4, r3
 8008ba4:	f000 f8e0 	bl	8008d68 <__malloc_lock>
 8008ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c20 <_free_r+0x90>)
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	b933      	cbnz	r3, 8008bbc <_free_r+0x2c>
 8008bae:	6063      	str	r3, [r4, #4]
 8008bb0:	6014      	str	r4, [r2, #0]
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb8:	f000 b8dc 	b.w	8008d74 <__malloc_unlock>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d908      	bls.n	8008bd2 <_free_r+0x42>
 8008bc0:	6820      	ldr	r0, [r4, #0]
 8008bc2:	1821      	adds	r1, r4, r0
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	bf01      	itttt	eq
 8008bc8:	6819      	ldreq	r1, [r3, #0]
 8008bca:	685b      	ldreq	r3, [r3, #4]
 8008bcc:	1809      	addeq	r1, r1, r0
 8008bce:	6021      	streq	r1, [r4, #0]
 8008bd0:	e7ed      	b.n	8008bae <_free_r+0x1e>
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	b10b      	cbz	r3, 8008bdc <_free_r+0x4c>
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	d9fa      	bls.n	8008bd2 <_free_r+0x42>
 8008bdc:	6811      	ldr	r1, [r2, #0]
 8008bde:	1850      	adds	r0, r2, r1
 8008be0:	42a0      	cmp	r0, r4
 8008be2:	d10b      	bne.n	8008bfc <_free_r+0x6c>
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	4401      	add	r1, r0
 8008be8:	1850      	adds	r0, r2, r1
 8008bea:	4283      	cmp	r3, r0
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	d1e0      	bne.n	8008bb2 <_free_r+0x22>
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	6053      	str	r3, [r2, #4]
 8008bf6:	4408      	add	r0, r1
 8008bf8:	6010      	str	r0, [r2, #0]
 8008bfa:	e7da      	b.n	8008bb2 <_free_r+0x22>
 8008bfc:	d902      	bls.n	8008c04 <_free_r+0x74>
 8008bfe:	230c      	movs	r3, #12
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	e7d6      	b.n	8008bb2 <_free_r+0x22>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	1821      	adds	r1, r4, r0
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf04      	itt	eq
 8008c0c:	6819      	ldreq	r1, [r3, #0]
 8008c0e:	685b      	ldreq	r3, [r3, #4]
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	bf04      	itt	eq
 8008c14:	1809      	addeq	r1, r1, r0
 8008c16:	6021      	streq	r1, [r4, #0]
 8008c18:	6054      	str	r4, [r2, #4]
 8008c1a:	e7ca      	b.n	8008bb2 <_free_r+0x22>
 8008c1c:	bd38      	pop	{r3, r4, r5, pc}
 8008c1e:	bf00      	nop
 8008c20:	20001418 	.word	0x20001418

08008c24 <sbrk_aligned>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4e0f      	ldr	r6, [pc, #60]	@ (8008c64 <sbrk_aligned+0x40>)
 8008c28:	460c      	mov	r4, r1
 8008c2a:	6831      	ldr	r1, [r6, #0]
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	b911      	cbnz	r1, 8008c36 <sbrk_aligned+0x12>
 8008c30:	f000 fca6 	bl	8009580 <_sbrk_r>
 8008c34:	6030      	str	r0, [r6, #0]
 8008c36:	4621      	mov	r1, r4
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f000 fca1 	bl	8009580 <_sbrk_r>
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	d103      	bne.n	8008c4a <sbrk_aligned+0x26>
 8008c42:	f04f 34ff 	mov.w	r4, #4294967295
 8008c46:	4620      	mov	r0, r4
 8008c48:	bd70      	pop	{r4, r5, r6, pc}
 8008c4a:	1cc4      	adds	r4, r0, #3
 8008c4c:	f024 0403 	bic.w	r4, r4, #3
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	d0f8      	beq.n	8008c46 <sbrk_aligned+0x22>
 8008c54:	1a21      	subs	r1, r4, r0
 8008c56:	4628      	mov	r0, r5
 8008c58:	f000 fc92 	bl	8009580 <_sbrk_r>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d1f2      	bne.n	8008c46 <sbrk_aligned+0x22>
 8008c60:	e7ef      	b.n	8008c42 <sbrk_aligned+0x1e>
 8008c62:	bf00      	nop
 8008c64:	20001414 	.word	0x20001414

08008c68 <_malloc_r>:
 8008c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c6c:	1ccd      	adds	r5, r1, #3
 8008c6e:	f025 0503 	bic.w	r5, r5, #3
 8008c72:	3508      	adds	r5, #8
 8008c74:	2d0c      	cmp	r5, #12
 8008c76:	bf38      	it	cc
 8008c78:	250c      	movcc	r5, #12
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	db01      	blt.n	8008c84 <_malloc_r+0x1c>
 8008c80:	42a9      	cmp	r1, r5
 8008c82:	d904      	bls.n	8008c8e <_malloc_r+0x26>
 8008c84:	230c      	movs	r3, #12
 8008c86:	6033      	str	r3, [r6, #0]
 8008c88:	2000      	movs	r0, #0
 8008c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d64 <_malloc_r+0xfc>
 8008c92:	f000 f869 	bl	8008d68 <__malloc_lock>
 8008c96:	f8d8 3000 	ldr.w	r3, [r8]
 8008c9a:	461c      	mov	r4, r3
 8008c9c:	bb44      	cbnz	r4, 8008cf0 <_malloc_r+0x88>
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7ff ffbf 	bl	8008c24 <sbrk_aligned>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	4604      	mov	r4, r0
 8008caa:	d158      	bne.n	8008d5e <_malloc_r+0xf6>
 8008cac:	f8d8 4000 	ldr.w	r4, [r8]
 8008cb0:	4627      	mov	r7, r4
 8008cb2:	2f00      	cmp	r7, #0
 8008cb4:	d143      	bne.n	8008d3e <_malloc_r+0xd6>
 8008cb6:	2c00      	cmp	r4, #0
 8008cb8:	d04b      	beq.n	8008d52 <_malloc_r+0xea>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	eb04 0903 	add.w	r9, r4, r3
 8008cc4:	f000 fc5c 	bl	8009580 <_sbrk_r>
 8008cc8:	4581      	cmp	r9, r0
 8008cca:	d142      	bne.n	8008d52 <_malloc_r+0xea>
 8008ccc:	6821      	ldr	r1, [r4, #0]
 8008cce:	1a6d      	subs	r5, r5, r1
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f7ff ffa6 	bl	8008c24 <sbrk_aligned>
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d03a      	beq.n	8008d52 <_malloc_r+0xea>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	442b      	add	r3, r5
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	bb62      	cbnz	r2, 8008d44 <_malloc_r+0xdc>
 8008cea:	f8c8 7000 	str.w	r7, [r8]
 8008cee:	e00f      	b.n	8008d10 <_malloc_r+0xa8>
 8008cf0:	6822      	ldr	r2, [r4, #0]
 8008cf2:	1b52      	subs	r2, r2, r5
 8008cf4:	d420      	bmi.n	8008d38 <_malloc_r+0xd0>
 8008cf6:	2a0b      	cmp	r2, #11
 8008cf8:	d917      	bls.n	8008d2a <_malloc_r+0xc2>
 8008cfa:	1961      	adds	r1, r4, r5
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	6025      	str	r5, [r4, #0]
 8008d00:	bf18      	it	ne
 8008d02:	6059      	strne	r1, [r3, #4]
 8008d04:	6863      	ldr	r3, [r4, #4]
 8008d06:	bf08      	it	eq
 8008d08:	f8c8 1000 	streq.w	r1, [r8]
 8008d0c:	5162      	str	r2, [r4, r5]
 8008d0e:	604b      	str	r3, [r1, #4]
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 f82f 	bl	8008d74 <__malloc_unlock>
 8008d16:	f104 000b 	add.w	r0, r4, #11
 8008d1a:	1d23      	adds	r3, r4, #4
 8008d1c:	f020 0007 	bic.w	r0, r0, #7
 8008d20:	1ac2      	subs	r2, r0, r3
 8008d22:	bf1c      	itt	ne
 8008d24:	1a1b      	subne	r3, r3, r0
 8008d26:	50a3      	strne	r3, [r4, r2]
 8008d28:	e7af      	b.n	8008c8a <_malloc_r+0x22>
 8008d2a:	6862      	ldr	r2, [r4, #4]
 8008d2c:	42a3      	cmp	r3, r4
 8008d2e:	bf0c      	ite	eq
 8008d30:	f8c8 2000 	streq.w	r2, [r8]
 8008d34:	605a      	strne	r2, [r3, #4]
 8008d36:	e7eb      	b.n	8008d10 <_malloc_r+0xa8>
 8008d38:	4623      	mov	r3, r4
 8008d3a:	6864      	ldr	r4, [r4, #4]
 8008d3c:	e7ae      	b.n	8008c9c <_malloc_r+0x34>
 8008d3e:	463c      	mov	r4, r7
 8008d40:	687f      	ldr	r7, [r7, #4]
 8008d42:	e7b6      	b.n	8008cb2 <_malloc_r+0x4a>
 8008d44:	461a      	mov	r2, r3
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	d1fb      	bne.n	8008d44 <_malloc_r+0xdc>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6053      	str	r3, [r2, #4]
 8008d50:	e7de      	b.n	8008d10 <_malloc_r+0xa8>
 8008d52:	230c      	movs	r3, #12
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	4630      	mov	r0, r6
 8008d58:	f000 f80c 	bl	8008d74 <__malloc_unlock>
 8008d5c:	e794      	b.n	8008c88 <_malloc_r+0x20>
 8008d5e:	6005      	str	r5, [r0, #0]
 8008d60:	e7d6      	b.n	8008d10 <_malloc_r+0xa8>
 8008d62:	bf00      	nop
 8008d64:	20001418 	.word	0x20001418

08008d68 <__malloc_lock>:
 8008d68:	4801      	ldr	r0, [pc, #4]	@ (8008d70 <__malloc_lock+0x8>)
 8008d6a:	f7ff bf0e 	b.w	8008b8a <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	20001410 	.word	0x20001410

08008d74 <__malloc_unlock>:
 8008d74:	4801      	ldr	r0, [pc, #4]	@ (8008d7c <__malloc_unlock+0x8>)
 8008d76:	f7ff bf09 	b.w	8008b8c <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	20001410 	.word	0x20001410

08008d80 <__sfputc_r>:
 8008d80:	6893      	ldr	r3, [r2, #8]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	b410      	push	{r4}
 8008d88:	6093      	str	r3, [r2, #8]
 8008d8a:	da08      	bge.n	8008d9e <__sfputc_r+0x1e>
 8008d8c:	6994      	ldr	r4, [r2, #24]
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	db01      	blt.n	8008d96 <__sfputc_r+0x16>
 8008d92:	290a      	cmp	r1, #10
 8008d94:	d103      	bne.n	8008d9e <__sfputc_r+0x1e>
 8008d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9a:	f7ff bde8 	b.w	800896e <__swbuf_r>
 8008d9e:	6813      	ldr	r3, [r2, #0]
 8008da0:	1c58      	adds	r0, r3, #1
 8008da2:	6010      	str	r0, [r2, #0]
 8008da4:	7019      	strb	r1, [r3, #0]
 8008da6:	4608      	mov	r0, r1
 8008da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <__sfputs_r>:
 8008dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db0:	4606      	mov	r6, r0
 8008db2:	460f      	mov	r7, r1
 8008db4:	4614      	mov	r4, r2
 8008db6:	18d5      	adds	r5, r2, r3
 8008db8:	42ac      	cmp	r4, r5
 8008dba:	d101      	bne.n	8008dc0 <__sfputs_r+0x12>
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e007      	b.n	8008dd0 <__sfputs_r+0x22>
 8008dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc4:	463a      	mov	r2, r7
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f7ff ffda 	bl	8008d80 <__sfputc_r>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d1f3      	bne.n	8008db8 <__sfputs_r+0xa>
 8008dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dd4 <_vfiprintf_r>:
 8008dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd8:	460d      	mov	r5, r1
 8008dda:	b09d      	sub	sp, #116	@ 0x74
 8008ddc:	4614      	mov	r4, r2
 8008dde:	4698      	mov	r8, r3
 8008de0:	4606      	mov	r6, r0
 8008de2:	b118      	cbz	r0, 8008dec <_vfiprintf_r+0x18>
 8008de4:	6a03      	ldr	r3, [r0, #32]
 8008de6:	b90b      	cbnz	r3, 8008dec <_vfiprintf_r+0x18>
 8008de8:	f7ff fcd8 	bl	800879c <__sinit>
 8008dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dee:	07d9      	lsls	r1, r3, #31
 8008df0:	d405      	bmi.n	8008dfe <_vfiprintf_r+0x2a>
 8008df2:	89ab      	ldrh	r3, [r5, #12]
 8008df4:	059a      	lsls	r2, r3, #22
 8008df6:	d402      	bmi.n	8008dfe <_vfiprintf_r+0x2a>
 8008df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dfa:	f7ff fec6 	bl	8008b8a <__retarget_lock_acquire_recursive>
 8008dfe:	89ab      	ldrh	r3, [r5, #12]
 8008e00:	071b      	lsls	r3, r3, #28
 8008e02:	d501      	bpl.n	8008e08 <_vfiprintf_r+0x34>
 8008e04:	692b      	ldr	r3, [r5, #16]
 8008e06:	b99b      	cbnz	r3, 8008e30 <_vfiprintf_r+0x5c>
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff fdee 	bl	80089ec <__swsetup_r>
 8008e10:	b170      	cbz	r0, 8008e30 <_vfiprintf_r+0x5c>
 8008e12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e14:	07dc      	lsls	r4, r3, #31
 8008e16:	d504      	bpl.n	8008e22 <_vfiprintf_r+0x4e>
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	b01d      	add	sp, #116	@ 0x74
 8008e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	0598      	lsls	r0, r3, #22
 8008e26:	d4f7      	bmi.n	8008e18 <_vfiprintf_r+0x44>
 8008e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e2a:	f7ff feaf 	bl	8008b8c <__retarget_lock_release_recursive>
 8008e2e:	e7f3      	b.n	8008e18 <_vfiprintf_r+0x44>
 8008e30:	2300      	movs	r3, #0
 8008e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e34:	2320      	movs	r3, #32
 8008e36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e3e:	2330      	movs	r3, #48	@ 0x30
 8008e40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ff0 <_vfiprintf_r+0x21c>
 8008e44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e48:	f04f 0901 	mov.w	r9, #1
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	469a      	mov	sl, r3
 8008e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e54:	b10a      	cbz	r2, 8008e5a <_vfiprintf_r+0x86>
 8008e56:	2a25      	cmp	r2, #37	@ 0x25
 8008e58:	d1f9      	bne.n	8008e4e <_vfiprintf_r+0x7a>
 8008e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e5e:	d00b      	beq.n	8008e78 <_vfiprintf_r+0xa4>
 8008e60:	465b      	mov	r3, fp
 8008e62:	4622      	mov	r2, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7ff ffa1 	bl	8008dae <__sfputs_r>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	f000 80a7 	beq.w	8008fc0 <_vfiprintf_r+0x1ec>
 8008e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e74:	445a      	add	r2, fp
 8008e76:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e78:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 809f 	beq.w	8008fc0 <_vfiprintf_r+0x1ec>
 8008e82:	2300      	movs	r3, #0
 8008e84:	f04f 32ff 	mov.w	r2, #4294967295
 8008e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e8c:	f10a 0a01 	add.w	sl, sl, #1
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	9307      	str	r3, [sp, #28]
 8008e94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e98:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e9a:	4654      	mov	r4, sl
 8008e9c:	2205      	movs	r2, #5
 8008e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea2:	4853      	ldr	r0, [pc, #332]	@ (8008ff0 <_vfiprintf_r+0x21c>)
 8008ea4:	f7f7 f994 	bl	80001d0 <memchr>
 8008ea8:	9a04      	ldr	r2, [sp, #16]
 8008eaa:	b9d8      	cbnz	r0, 8008ee4 <_vfiprintf_r+0x110>
 8008eac:	06d1      	lsls	r1, r2, #27
 8008eae:	bf44      	itt	mi
 8008eb0:	2320      	movmi	r3, #32
 8008eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008eb6:	0713      	lsls	r3, r2, #28
 8008eb8:	bf44      	itt	mi
 8008eba:	232b      	movmi	r3, #43	@ 0x2b
 8008ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ec6:	d015      	beq.n	8008ef4 <_vfiprintf_r+0x120>
 8008ec8:	9a07      	ldr	r2, [sp, #28]
 8008eca:	4654      	mov	r4, sl
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f04f 0c0a 	mov.w	ip, #10
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ed8:	3b30      	subs	r3, #48	@ 0x30
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	d94b      	bls.n	8008f76 <_vfiprintf_r+0x1a2>
 8008ede:	b1b0      	cbz	r0, 8008f0e <_vfiprintf_r+0x13a>
 8008ee0:	9207      	str	r2, [sp, #28]
 8008ee2:	e014      	b.n	8008f0e <_vfiprintf_r+0x13a>
 8008ee4:	eba0 0308 	sub.w	r3, r0, r8
 8008ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8008eec:	4313      	orrs	r3, r2
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	46a2      	mov	sl, r4
 8008ef2:	e7d2      	b.n	8008e9a <_vfiprintf_r+0xc6>
 8008ef4:	9b03      	ldr	r3, [sp, #12]
 8008ef6:	1d19      	adds	r1, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	9103      	str	r1, [sp, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bfbb      	ittet	lt
 8008f00:	425b      	neglt	r3, r3
 8008f02:	f042 0202 	orrlt.w	r2, r2, #2
 8008f06:	9307      	strge	r3, [sp, #28]
 8008f08:	9307      	strlt	r3, [sp, #28]
 8008f0a:	bfb8      	it	lt
 8008f0c:	9204      	strlt	r2, [sp, #16]
 8008f0e:	7823      	ldrb	r3, [r4, #0]
 8008f10:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f12:	d10a      	bne.n	8008f2a <_vfiprintf_r+0x156>
 8008f14:	7863      	ldrb	r3, [r4, #1]
 8008f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f18:	d132      	bne.n	8008f80 <_vfiprintf_r+0x1ac>
 8008f1a:	9b03      	ldr	r3, [sp, #12]
 8008f1c:	1d1a      	adds	r2, r3, #4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	9203      	str	r2, [sp, #12]
 8008f22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f26:	3402      	adds	r4, #2
 8008f28:	9305      	str	r3, [sp, #20]
 8008f2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009000 <_vfiprintf_r+0x22c>
 8008f2e:	7821      	ldrb	r1, [r4, #0]
 8008f30:	2203      	movs	r2, #3
 8008f32:	4650      	mov	r0, sl
 8008f34:	f7f7 f94c 	bl	80001d0 <memchr>
 8008f38:	b138      	cbz	r0, 8008f4a <_vfiprintf_r+0x176>
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	eba0 000a 	sub.w	r0, r0, sl
 8008f40:	2240      	movs	r2, #64	@ 0x40
 8008f42:	4082      	lsls	r2, r0
 8008f44:	4313      	orrs	r3, r2
 8008f46:	3401      	adds	r4, #1
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4e:	4829      	ldr	r0, [pc, #164]	@ (8008ff4 <_vfiprintf_r+0x220>)
 8008f50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f54:	2206      	movs	r2, #6
 8008f56:	f7f7 f93b 	bl	80001d0 <memchr>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d03f      	beq.n	8008fde <_vfiprintf_r+0x20a>
 8008f5e:	4b26      	ldr	r3, [pc, #152]	@ (8008ff8 <_vfiprintf_r+0x224>)
 8008f60:	bb1b      	cbnz	r3, 8008faa <_vfiprintf_r+0x1d6>
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	3307      	adds	r3, #7
 8008f66:	f023 0307 	bic.w	r3, r3, #7
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	9303      	str	r3, [sp, #12]
 8008f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f70:	443b      	add	r3, r7
 8008f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f74:	e76a      	b.n	8008e4c <_vfiprintf_r+0x78>
 8008f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	e7a8      	b.n	8008ed2 <_vfiprintf_r+0xfe>
 8008f80:	2300      	movs	r3, #0
 8008f82:	3401      	adds	r4, #1
 8008f84:	9305      	str	r3, [sp, #20]
 8008f86:	4619      	mov	r1, r3
 8008f88:	f04f 0c0a 	mov.w	ip, #10
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f92:	3a30      	subs	r2, #48	@ 0x30
 8008f94:	2a09      	cmp	r2, #9
 8008f96:	d903      	bls.n	8008fa0 <_vfiprintf_r+0x1cc>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d0c6      	beq.n	8008f2a <_vfiprintf_r+0x156>
 8008f9c:	9105      	str	r1, [sp, #20]
 8008f9e:	e7c4      	b.n	8008f2a <_vfiprintf_r+0x156>
 8008fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e7f0      	b.n	8008f8c <_vfiprintf_r+0x1b8>
 8008faa:	ab03      	add	r3, sp, #12
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	462a      	mov	r2, r5
 8008fb0:	4b12      	ldr	r3, [pc, #72]	@ (8008ffc <_vfiprintf_r+0x228>)
 8008fb2:	a904      	add	r1, sp, #16
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f3af 8000 	nop.w
 8008fba:	4607      	mov	r7, r0
 8008fbc:	1c78      	adds	r0, r7, #1
 8008fbe:	d1d6      	bne.n	8008f6e <_vfiprintf_r+0x19a>
 8008fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fc2:	07d9      	lsls	r1, r3, #31
 8008fc4:	d405      	bmi.n	8008fd2 <_vfiprintf_r+0x1fe>
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	059a      	lsls	r2, r3, #22
 8008fca:	d402      	bmi.n	8008fd2 <_vfiprintf_r+0x1fe>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fce:	f7ff fddd 	bl	8008b8c <__retarget_lock_release_recursive>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	065b      	lsls	r3, r3, #25
 8008fd6:	f53f af1f 	bmi.w	8008e18 <_vfiprintf_r+0x44>
 8008fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fdc:	e71e      	b.n	8008e1c <_vfiprintf_r+0x48>
 8008fde:	ab03      	add	r3, sp, #12
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <_vfiprintf_r+0x228>)
 8008fe6:	a904      	add	r1, sp, #16
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 f879 	bl	80090e0 <_printf_i>
 8008fee:	e7e4      	b.n	8008fba <_vfiprintf_r+0x1e6>
 8008ff0:	08009a74 	.word	0x08009a74
 8008ff4:	08009a7e 	.word	0x08009a7e
 8008ff8:	00000000 	.word	0x00000000
 8008ffc:	08008daf 	.word	0x08008daf
 8009000:	08009a7a 	.word	0x08009a7a

08009004 <_printf_common>:
 8009004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009008:	4616      	mov	r6, r2
 800900a:	4698      	mov	r8, r3
 800900c:	688a      	ldr	r2, [r1, #8]
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009014:	4293      	cmp	r3, r2
 8009016:	bfb8      	it	lt
 8009018:	4613      	movlt	r3, r2
 800901a:	6033      	str	r3, [r6, #0]
 800901c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009020:	4607      	mov	r7, r0
 8009022:	460c      	mov	r4, r1
 8009024:	b10a      	cbz	r2, 800902a <_printf_common+0x26>
 8009026:	3301      	adds	r3, #1
 8009028:	6033      	str	r3, [r6, #0]
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	0699      	lsls	r1, r3, #26
 800902e:	bf42      	ittt	mi
 8009030:	6833      	ldrmi	r3, [r6, #0]
 8009032:	3302      	addmi	r3, #2
 8009034:	6033      	strmi	r3, [r6, #0]
 8009036:	6825      	ldr	r5, [r4, #0]
 8009038:	f015 0506 	ands.w	r5, r5, #6
 800903c:	d106      	bne.n	800904c <_printf_common+0x48>
 800903e:	f104 0a19 	add.w	sl, r4, #25
 8009042:	68e3      	ldr	r3, [r4, #12]
 8009044:	6832      	ldr	r2, [r6, #0]
 8009046:	1a9b      	subs	r3, r3, r2
 8009048:	42ab      	cmp	r3, r5
 800904a:	dc26      	bgt.n	800909a <_printf_common+0x96>
 800904c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	3b00      	subs	r3, #0
 8009054:	bf18      	it	ne
 8009056:	2301      	movne	r3, #1
 8009058:	0692      	lsls	r2, r2, #26
 800905a:	d42b      	bmi.n	80090b4 <_printf_common+0xb0>
 800905c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009060:	4641      	mov	r1, r8
 8009062:	4638      	mov	r0, r7
 8009064:	47c8      	blx	r9
 8009066:	3001      	adds	r0, #1
 8009068:	d01e      	beq.n	80090a8 <_printf_common+0xa4>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	6922      	ldr	r2, [r4, #16]
 800906e:	f003 0306 	and.w	r3, r3, #6
 8009072:	2b04      	cmp	r3, #4
 8009074:	bf02      	ittt	eq
 8009076:	68e5      	ldreq	r5, [r4, #12]
 8009078:	6833      	ldreq	r3, [r6, #0]
 800907a:	1aed      	subeq	r5, r5, r3
 800907c:	68a3      	ldr	r3, [r4, #8]
 800907e:	bf0c      	ite	eq
 8009080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009084:	2500      	movne	r5, #0
 8009086:	4293      	cmp	r3, r2
 8009088:	bfc4      	itt	gt
 800908a:	1a9b      	subgt	r3, r3, r2
 800908c:	18ed      	addgt	r5, r5, r3
 800908e:	2600      	movs	r6, #0
 8009090:	341a      	adds	r4, #26
 8009092:	42b5      	cmp	r5, r6
 8009094:	d11a      	bne.n	80090cc <_printf_common+0xc8>
 8009096:	2000      	movs	r0, #0
 8009098:	e008      	b.n	80090ac <_printf_common+0xa8>
 800909a:	2301      	movs	r3, #1
 800909c:	4652      	mov	r2, sl
 800909e:	4641      	mov	r1, r8
 80090a0:	4638      	mov	r0, r7
 80090a2:	47c8      	blx	r9
 80090a4:	3001      	adds	r0, #1
 80090a6:	d103      	bne.n	80090b0 <_printf_common+0xac>
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b0:	3501      	adds	r5, #1
 80090b2:	e7c6      	b.n	8009042 <_printf_common+0x3e>
 80090b4:	18e1      	adds	r1, r4, r3
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	2030      	movs	r0, #48	@ 0x30
 80090ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090be:	4422      	add	r2, r4
 80090c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090c8:	3302      	adds	r3, #2
 80090ca:	e7c7      	b.n	800905c <_printf_common+0x58>
 80090cc:	2301      	movs	r3, #1
 80090ce:	4622      	mov	r2, r4
 80090d0:	4641      	mov	r1, r8
 80090d2:	4638      	mov	r0, r7
 80090d4:	47c8      	blx	r9
 80090d6:	3001      	adds	r0, #1
 80090d8:	d0e6      	beq.n	80090a8 <_printf_common+0xa4>
 80090da:	3601      	adds	r6, #1
 80090dc:	e7d9      	b.n	8009092 <_printf_common+0x8e>
	...

080090e0 <_printf_i>:
 80090e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090e4:	7e0f      	ldrb	r7, [r1, #24]
 80090e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090e8:	2f78      	cmp	r7, #120	@ 0x78
 80090ea:	4691      	mov	r9, r2
 80090ec:	4680      	mov	r8, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	469a      	mov	sl, r3
 80090f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090f6:	d807      	bhi.n	8009108 <_printf_i+0x28>
 80090f8:	2f62      	cmp	r7, #98	@ 0x62
 80090fa:	d80a      	bhi.n	8009112 <_printf_i+0x32>
 80090fc:	2f00      	cmp	r7, #0
 80090fe:	f000 80d2 	beq.w	80092a6 <_printf_i+0x1c6>
 8009102:	2f58      	cmp	r7, #88	@ 0x58
 8009104:	f000 80b9 	beq.w	800927a <_printf_i+0x19a>
 8009108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800910c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009110:	e03a      	b.n	8009188 <_printf_i+0xa8>
 8009112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009116:	2b15      	cmp	r3, #21
 8009118:	d8f6      	bhi.n	8009108 <_printf_i+0x28>
 800911a:	a101      	add	r1, pc, #4	@ (adr r1, 8009120 <_printf_i+0x40>)
 800911c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009120:	08009179 	.word	0x08009179
 8009124:	0800918d 	.word	0x0800918d
 8009128:	08009109 	.word	0x08009109
 800912c:	08009109 	.word	0x08009109
 8009130:	08009109 	.word	0x08009109
 8009134:	08009109 	.word	0x08009109
 8009138:	0800918d 	.word	0x0800918d
 800913c:	08009109 	.word	0x08009109
 8009140:	08009109 	.word	0x08009109
 8009144:	08009109 	.word	0x08009109
 8009148:	08009109 	.word	0x08009109
 800914c:	0800928d 	.word	0x0800928d
 8009150:	080091b7 	.word	0x080091b7
 8009154:	08009247 	.word	0x08009247
 8009158:	08009109 	.word	0x08009109
 800915c:	08009109 	.word	0x08009109
 8009160:	080092af 	.word	0x080092af
 8009164:	08009109 	.word	0x08009109
 8009168:	080091b7 	.word	0x080091b7
 800916c:	08009109 	.word	0x08009109
 8009170:	08009109 	.word	0x08009109
 8009174:	0800924f 	.word	0x0800924f
 8009178:	6833      	ldr	r3, [r6, #0]
 800917a:	1d1a      	adds	r2, r3, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6032      	str	r2, [r6, #0]
 8009180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009188:	2301      	movs	r3, #1
 800918a:	e09d      	b.n	80092c8 <_printf_i+0x1e8>
 800918c:	6833      	ldr	r3, [r6, #0]
 800918e:	6820      	ldr	r0, [r4, #0]
 8009190:	1d19      	adds	r1, r3, #4
 8009192:	6031      	str	r1, [r6, #0]
 8009194:	0606      	lsls	r6, r0, #24
 8009196:	d501      	bpl.n	800919c <_printf_i+0xbc>
 8009198:	681d      	ldr	r5, [r3, #0]
 800919a:	e003      	b.n	80091a4 <_printf_i+0xc4>
 800919c:	0645      	lsls	r5, r0, #25
 800919e:	d5fb      	bpl.n	8009198 <_printf_i+0xb8>
 80091a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	da03      	bge.n	80091b0 <_printf_i+0xd0>
 80091a8:	232d      	movs	r3, #45	@ 0x2d
 80091aa:	426d      	negs	r5, r5
 80091ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091b0:	4859      	ldr	r0, [pc, #356]	@ (8009318 <_printf_i+0x238>)
 80091b2:	230a      	movs	r3, #10
 80091b4:	e011      	b.n	80091da <_printf_i+0xfa>
 80091b6:	6821      	ldr	r1, [r4, #0]
 80091b8:	6833      	ldr	r3, [r6, #0]
 80091ba:	0608      	lsls	r0, r1, #24
 80091bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80091c0:	d402      	bmi.n	80091c8 <_printf_i+0xe8>
 80091c2:	0649      	lsls	r1, r1, #25
 80091c4:	bf48      	it	mi
 80091c6:	b2ad      	uxthmi	r5, r5
 80091c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80091ca:	4853      	ldr	r0, [pc, #332]	@ (8009318 <_printf_i+0x238>)
 80091cc:	6033      	str	r3, [r6, #0]
 80091ce:	bf14      	ite	ne
 80091d0:	230a      	movne	r3, #10
 80091d2:	2308      	moveq	r3, #8
 80091d4:	2100      	movs	r1, #0
 80091d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091da:	6866      	ldr	r6, [r4, #4]
 80091dc:	60a6      	str	r6, [r4, #8]
 80091de:	2e00      	cmp	r6, #0
 80091e0:	bfa2      	ittt	ge
 80091e2:	6821      	ldrge	r1, [r4, #0]
 80091e4:	f021 0104 	bicge.w	r1, r1, #4
 80091e8:	6021      	strge	r1, [r4, #0]
 80091ea:	b90d      	cbnz	r5, 80091f0 <_printf_i+0x110>
 80091ec:	2e00      	cmp	r6, #0
 80091ee:	d04b      	beq.n	8009288 <_printf_i+0x1a8>
 80091f0:	4616      	mov	r6, r2
 80091f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80091f6:	fb03 5711 	mls	r7, r3, r1, r5
 80091fa:	5dc7      	ldrb	r7, [r0, r7]
 80091fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009200:	462f      	mov	r7, r5
 8009202:	42bb      	cmp	r3, r7
 8009204:	460d      	mov	r5, r1
 8009206:	d9f4      	bls.n	80091f2 <_printf_i+0x112>
 8009208:	2b08      	cmp	r3, #8
 800920a:	d10b      	bne.n	8009224 <_printf_i+0x144>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	07df      	lsls	r7, r3, #31
 8009210:	d508      	bpl.n	8009224 <_printf_i+0x144>
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	6861      	ldr	r1, [r4, #4]
 8009216:	4299      	cmp	r1, r3
 8009218:	bfde      	ittt	le
 800921a:	2330      	movle	r3, #48	@ 0x30
 800921c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009224:	1b92      	subs	r2, r2, r6
 8009226:	6122      	str	r2, [r4, #16]
 8009228:	f8cd a000 	str.w	sl, [sp]
 800922c:	464b      	mov	r3, r9
 800922e:	aa03      	add	r2, sp, #12
 8009230:	4621      	mov	r1, r4
 8009232:	4640      	mov	r0, r8
 8009234:	f7ff fee6 	bl	8009004 <_printf_common>
 8009238:	3001      	adds	r0, #1
 800923a:	d14a      	bne.n	80092d2 <_printf_i+0x1f2>
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	b004      	add	sp, #16
 8009242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	f043 0320 	orr.w	r3, r3, #32
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	4833      	ldr	r0, [pc, #204]	@ (800931c <_printf_i+0x23c>)
 8009250:	2778      	movs	r7, #120	@ 0x78
 8009252:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	6831      	ldr	r1, [r6, #0]
 800925a:	061f      	lsls	r7, r3, #24
 800925c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009260:	d402      	bmi.n	8009268 <_printf_i+0x188>
 8009262:	065f      	lsls	r7, r3, #25
 8009264:	bf48      	it	mi
 8009266:	b2ad      	uxthmi	r5, r5
 8009268:	6031      	str	r1, [r6, #0]
 800926a:	07d9      	lsls	r1, r3, #31
 800926c:	bf44      	itt	mi
 800926e:	f043 0320 	orrmi.w	r3, r3, #32
 8009272:	6023      	strmi	r3, [r4, #0]
 8009274:	b11d      	cbz	r5, 800927e <_printf_i+0x19e>
 8009276:	2310      	movs	r3, #16
 8009278:	e7ac      	b.n	80091d4 <_printf_i+0xf4>
 800927a:	4827      	ldr	r0, [pc, #156]	@ (8009318 <_printf_i+0x238>)
 800927c:	e7e9      	b.n	8009252 <_printf_i+0x172>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	f023 0320 	bic.w	r3, r3, #32
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	e7f6      	b.n	8009276 <_printf_i+0x196>
 8009288:	4616      	mov	r6, r2
 800928a:	e7bd      	b.n	8009208 <_printf_i+0x128>
 800928c:	6833      	ldr	r3, [r6, #0]
 800928e:	6825      	ldr	r5, [r4, #0]
 8009290:	6961      	ldr	r1, [r4, #20]
 8009292:	1d18      	adds	r0, r3, #4
 8009294:	6030      	str	r0, [r6, #0]
 8009296:	062e      	lsls	r6, r5, #24
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	d501      	bpl.n	80092a0 <_printf_i+0x1c0>
 800929c:	6019      	str	r1, [r3, #0]
 800929e:	e002      	b.n	80092a6 <_printf_i+0x1c6>
 80092a0:	0668      	lsls	r0, r5, #25
 80092a2:	d5fb      	bpl.n	800929c <_printf_i+0x1bc>
 80092a4:	8019      	strh	r1, [r3, #0]
 80092a6:	2300      	movs	r3, #0
 80092a8:	6123      	str	r3, [r4, #16]
 80092aa:	4616      	mov	r6, r2
 80092ac:	e7bc      	b.n	8009228 <_printf_i+0x148>
 80092ae:	6833      	ldr	r3, [r6, #0]
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	6032      	str	r2, [r6, #0]
 80092b4:	681e      	ldr	r6, [r3, #0]
 80092b6:	6862      	ldr	r2, [r4, #4]
 80092b8:	2100      	movs	r1, #0
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7f6 ff88 	bl	80001d0 <memchr>
 80092c0:	b108      	cbz	r0, 80092c6 <_printf_i+0x1e6>
 80092c2:	1b80      	subs	r0, r0, r6
 80092c4:	6060      	str	r0, [r4, #4]
 80092c6:	6863      	ldr	r3, [r4, #4]
 80092c8:	6123      	str	r3, [r4, #16]
 80092ca:	2300      	movs	r3, #0
 80092cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092d0:	e7aa      	b.n	8009228 <_printf_i+0x148>
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	4632      	mov	r2, r6
 80092d6:	4649      	mov	r1, r9
 80092d8:	4640      	mov	r0, r8
 80092da:	47d0      	blx	sl
 80092dc:	3001      	adds	r0, #1
 80092de:	d0ad      	beq.n	800923c <_printf_i+0x15c>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	079b      	lsls	r3, r3, #30
 80092e4:	d413      	bmi.n	800930e <_printf_i+0x22e>
 80092e6:	68e0      	ldr	r0, [r4, #12]
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	4298      	cmp	r0, r3
 80092ec:	bfb8      	it	lt
 80092ee:	4618      	movlt	r0, r3
 80092f0:	e7a6      	b.n	8009240 <_printf_i+0x160>
 80092f2:	2301      	movs	r3, #1
 80092f4:	4632      	mov	r2, r6
 80092f6:	4649      	mov	r1, r9
 80092f8:	4640      	mov	r0, r8
 80092fa:	47d0      	blx	sl
 80092fc:	3001      	adds	r0, #1
 80092fe:	d09d      	beq.n	800923c <_printf_i+0x15c>
 8009300:	3501      	adds	r5, #1
 8009302:	68e3      	ldr	r3, [r4, #12]
 8009304:	9903      	ldr	r1, [sp, #12]
 8009306:	1a5b      	subs	r3, r3, r1
 8009308:	42ab      	cmp	r3, r5
 800930a:	dcf2      	bgt.n	80092f2 <_printf_i+0x212>
 800930c:	e7eb      	b.n	80092e6 <_printf_i+0x206>
 800930e:	2500      	movs	r5, #0
 8009310:	f104 0619 	add.w	r6, r4, #25
 8009314:	e7f5      	b.n	8009302 <_printf_i+0x222>
 8009316:	bf00      	nop
 8009318:	08009a85 	.word	0x08009a85
 800931c:	08009a96 	.word	0x08009a96

08009320 <__sflush_r>:
 8009320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009328:	0716      	lsls	r6, r2, #28
 800932a:	4605      	mov	r5, r0
 800932c:	460c      	mov	r4, r1
 800932e:	d454      	bmi.n	80093da <__sflush_r+0xba>
 8009330:	684b      	ldr	r3, [r1, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	dc02      	bgt.n	800933c <__sflush_r+0x1c>
 8009336:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	dd48      	ble.n	80093ce <__sflush_r+0xae>
 800933c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800933e:	2e00      	cmp	r6, #0
 8009340:	d045      	beq.n	80093ce <__sflush_r+0xae>
 8009342:	2300      	movs	r3, #0
 8009344:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009348:	682f      	ldr	r7, [r5, #0]
 800934a:	6a21      	ldr	r1, [r4, #32]
 800934c:	602b      	str	r3, [r5, #0]
 800934e:	d030      	beq.n	80093b2 <__sflush_r+0x92>
 8009350:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	0759      	lsls	r1, r3, #29
 8009356:	d505      	bpl.n	8009364 <__sflush_r+0x44>
 8009358:	6863      	ldr	r3, [r4, #4]
 800935a:	1ad2      	subs	r2, r2, r3
 800935c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800935e:	b10b      	cbz	r3, 8009364 <__sflush_r+0x44>
 8009360:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009362:	1ad2      	subs	r2, r2, r3
 8009364:	2300      	movs	r3, #0
 8009366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009368:	6a21      	ldr	r1, [r4, #32]
 800936a:	4628      	mov	r0, r5
 800936c:	47b0      	blx	r6
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	d106      	bne.n	8009382 <__sflush_r+0x62>
 8009374:	6829      	ldr	r1, [r5, #0]
 8009376:	291d      	cmp	r1, #29
 8009378:	d82b      	bhi.n	80093d2 <__sflush_r+0xb2>
 800937a:	4a2a      	ldr	r2, [pc, #168]	@ (8009424 <__sflush_r+0x104>)
 800937c:	410a      	asrs	r2, r1
 800937e:	07d6      	lsls	r6, r2, #31
 8009380:	d427      	bmi.n	80093d2 <__sflush_r+0xb2>
 8009382:	2200      	movs	r2, #0
 8009384:	6062      	str	r2, [r4, #4]
 8009386:	04d9      	lsls	r1, r3, #19
 8009388:	6922      	ldr	r2, [r4, #16]
 800938a:	6022      	str	r2, [r4, #0]
 800938c:	d504      	bpl.n	8009398 <__sflush_r+0x78>
 800938e:	1c42      	adds	r2, r0, #1
 8009390:	d101      	bne.n	8009396 <__sflush_r+0x76>
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	b903      	cbnz	r3, 8009398 <__sflush_r+0x78>
 8009396:	6560      	str	r0, [r4, #84]	@ 0x54
 8009398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800939a:	602f      	str	r7, [r5, #0]
 800939c:	b1b9      	cbz	r1, 80093ce <__sflush_r+0xae>
 800939e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093a2:	4299      	cmp	r1, r3
 80093a4:	d002      	beq.n	80093ac <__sflush_r+0x8c>
 80093a6:	4628      	mov	r0, r5
 80093a8:	f7ff fbf2 	bl	8008b90 <_free_r>
 80093ac:	2300      	movs	r3, #0
 80093ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80093b0:	e00d      	b.n	80093ce <__sflush_r+0xae>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4628      	mov	r0, r5
 80093b6:	47b0      	blx	r6
 80093b8:	4602      	mov	r2, r0
 80093ba:	1c50      	adds	r0, r2, #1
 80093bc:	d1c9      	bne.n	8009352 <__sflush_r+0x32>
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0c6      	beq.n	8009352 <__sflush_r+0x32>
 80093c4:	2b1d      	cmp	r3, #29
 80093c6:	d001      	beq.n	80093cc <__sflush_r+0xac>
 80093c8:	2b16      	cmp	r3, #22
 80093ca:	d11e      	bne.n	800940a <__sflush_r+0xea>
 80093cc:	602f      	str	r7, [r5, #0]
 80093ce:	2000      	movs	r0, #0
 80093d0:	e022      	b.n	8009418 <__sflush_r+0xf8>
 80093d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d6:	b21b      	sxth	r3, r3
 80093d8:	e01b      	b.n	8009412 <__sflush_r+0xf2>
 80093da:	690f      	ldr	r7, [r1, #16]
 80093dc:	2f00      	cmp	r7, #0
 80093de:	d0f6      	beq.n	80093ce <__sflush_r+0xae>
 80093e0:	0793      	lsls	r3, r2, #30
 80093e2:	680e      	ldr	r6, [r1, #0]
 80093e4:	bf08      	it	eq
 80093e6:	694b      	ldreq	r3, [r1, #20]
 80093e8:	600f      	str	r7, [r1, #0]
 80093ea:	bf18      	it	ne
 80093ec:	2300      	movne	r3, #0
 80093ee:	eba6 0807 	sub.w	r8, r6, r7
 80093f2:	608b      	str	r3, [r1, #8]
 80093f4:	f1b8 0f00 	cmp.w	r8, #0
 80093f8:	dde9      	ble.n	80093ce <__sflush_r+0xae>
 80093fa:	6a21      	ldr	r1, [r4, #32]
 80093fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093fe:	4643      	mov	r3, r8
 8009400:	463a      	mov	r2, r7
 8009402:	4628      	mov	r0, r5
 8009404:	47b0      	blx	r6
 8009406:	2800      	cmp	r0, #0
 8009408:	dc08      	bgt.n	800941c <__sflush_r+0xfc>
 800940a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800940e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941c:	4407      	add	r7, r0
 800941e:	eba8 0800 	sub.w	r8, r8, r0
 8009422:	e7e7      	b.n	80093f4 <__sflush_r+0xd4>
 8009424:	dfbffffe 	.word	0xdfbffffe

08009428 <_fflush_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	690b      	ldr	r3, [r1, #16]
 800942c:	4605      	mov	r5, r0
 800942e:	460c      	mov	r4, r1
 8009430:	b913      	cbnz	r3, 8009438 <_fflush_r+0x10>
 8009432:	2500      	movs	r5, #0
 8009434:	4628      	mov	r0, r5
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	b118      	cbz	r0, 8009442 <_fflush_r+0x1a>
 800943a:	6a03      	ldr	r3, [r0, #32]
 800943c:	b90b      	cbnz	r3, 8009442 <_fflush_r+0x1a>
 800943e:	f7ff f9ad 	bl	800879c <__sinit>
 8009442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0f3      	beq.n	8009432 <_fflush_r+0xa>
 800944a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800944c:	07d0      	lsls	r0, r2, #31
 800944e:	d404      	bmi.n	800945a <_fflush_r+0x32>
 8009450:	0599      	lsls	r1, r3, #22
 8009452:	d402      	bmi.n	800945a <_fflush_r+0x32>
 8009454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009456:	f7ff fb98 	bl	8008b8a <__retarget_lock_acquire_recursive>
 800945a:	4628      	mov	r0, r5
 800945c:	4621      	mov	r1, r4
 800945e:	f7ff ff5f 	bl	8009320 <__sflush_r>
 8009462:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009464:	07da      	lsls	r2, r3, #31
 8009466:	4605      	mov	r5, r0
 8009468:	d4e4      	bmi.n	8009434 <_fflush_r+0xc>
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	059b      	lsls	r3, r3, #22
 800946e:	d4e1      	bmi.n	8009434 <_fflush_r+0xc>
 8009470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009472:	f7ff fb8b 	bl	8008b8c <__retarget_lock_release_recursive>
 8009476:	e7dd      	b.n	8009434 <_fflush_r+0xc>

08009478 <__swhatbuf_r>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	460c      	mov	r4, r1
 800947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009480:	2900      	cmp	r1, #0
 8009482:	b096      	sub	sp, #88	@ 0x58
 8009484:	4615      	mov	r5, r2
 8009486:	461e      	mov	r6, r3
 8009488:	da0d      	bge.n	80094a6 <__swhatbuf_r+0x2e>
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009490:	f04f 0100 	mov.w	r1, #0
 8009494:	bf14      	ite	ne
 8009496:	2340      	movne	r3, #64	@ 0x40
 8009498:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800949c:	2000      	movs	r0, #0
 800949e:	6031      	str	r1, [r6, #0]
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	b016      	add	sp, #88	@ 0x58
 80094a4:	bd70      	pop	{r4, r5, r6, pc}
 80094a6:	466a      	mov	r2, sp
 80094a8:	f000 f848 	bl	800953c <_fstat_r>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	dbec      	blt.n	800948a <__swhatbuf_r+0x12>
 80094b0:	9901      	ldr	r1, [sp, #4]
 80094b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094ba:	4259      	negs	r1, r3
 80094bc:	4159      	adcs	r1, r3
 80094be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094c2:	e7eb      	b.n	800949c <__swhatbuf_r+0x24>

080094c4 <__smakebuf_r>:
 80094c4:	898b      	ldrh	r3, [r1, #12]
 80094c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094c8:	079d      	lsls	r5, r3, #30
 80094ca:	4606      	mov	r6, r0
 80094cc:	460c      	mov	r4, r1
 80094ce:	d507      	bpl.n	80094e0 <__smakebuf_r+0x1c>
 80094d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	6123      	str	r3, [r4, #16]
 80094d8:	2301      	movs	r3, #1
 80094da:	6163      	str	r3, [r4, #20]
 80094dc:	b003      	add	sp, #12
 80094de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e0:	ab01      	add	r3, sp, #4
 80094e2:	466a      	mov	r2, sp
 80094e4:	f7ff ffc8 	bl	8009478 <__swhatbuf_r>
 80094e8:	9f00      	ldr	r7, [sp, #0]
 80094ea:	4605      	mov	r5, r0
 80094ec:	4639      	mov	r1, r7
 80094ee:	4630      	mov	r0, r6
 80094f0:	f7ff fbba 	bl	8008c68 <_malloc_r>
 80094f4:	b948      	cbnz	r0, 800950a <__smakebuf_r+0x46>
 80094f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094fa:	059a      	lsls	r2, r3, #22
 80094fc:	d4ee      	bmi.n	80094dc <__smakebuf_r+0x18>
 80094fe:	f023 0303 	bic.w	r3, r3, #3
 8009502:	f043 0302 	orr.w	r3, r3, #2
 8009506:	81a3      	strh	r3, [r4, #12]
 8009508:	e7e2      	b.n	80094d0 <__smakebuf_r+0xc>
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	6020      	str	r0, [r4, #0]
 800950e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009512:	81a3      	strh	r3, [r4, #12]
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800951a:	b15b      	cbz	r3, 8009534 <__smakebuf_r+0x70>
 800951c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009520:	4630      	mov	r0, r6
 8009522:	f000 f81d 	bl	8009560 <_isatty_r>
 8009526:	b128      	cbz	r0, 8009534 <__smakebuf_r+0x70>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	f023 0303 	bic.w	r3, r3, #3
 800952e:	f043 0301 	orr.w	r3, r3, #1
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	431d      	orrs	r5, r3
 8009538:	81a5      	strh	r5, [r4, #12]
 800953a:	e7cf      	b.n	80094dc <__smakebuf_r+0x18>

0800953c <_fstat_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d07      	ldr	r5, [pc, #28]	@ (800955c <_fstat_r+0x20>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	4611      	mov	r1, r2
 8009548:	602b      	str	r3, [r5, #0]
 800954a:	f7f7 fef4 	bl	8001336 <_fstat>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	d102      	bne.n	8009558 <_fstat_r+0x1c>
 8009552:	682b      	ldr	r3, [r5, #0]
 8009554:	b103      	cbz	r3, 8009558 <_fstat_r+0x1c>
 8009556:	6023      	str	r3, [r4, #0]
 8009558:	bd38      	pop	{r3, r4, r5, pc}
 800955a:	bf00      	nop
 800955c:	2000140c 	.word	0x2000140c

08009560 <_isatty_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4d06      	ldr	r5, [pc, #24]	@ (800957c <_isatty_r+0x1c>)
 8009564:	2300      	movs	r3, #0
 8009566:	4604      	mov	r4, r0
 8009568:	4608      	mov	r0, r1
 800956a:	602b      	str	r3, [r5, #0]
 800956c:	f7f7 fef3 	bl	8001356 <_isatty>
 8009570:	1c43      	adds	r3, r0, #1
 8009572:	d102      	bne.n	800957a <_isatty_r+0x1a>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	b103      	cbz	r3, 800957a <_isatty_r+0x1a>
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	2000140c 	.word	0x2000140c

08009580 <_sbrk_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4d06      	ldr	r5, [pc, #24]	@ (800959c <_sbrk_r+0x1c>)
 8009584:	2300      	movs	r3, #0
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	602b      	str	r3, [r5, #0]
 800958c:	f7f7 fefc 	bl	8001388 <_sbrk>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_sbrk_r+0x1a>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_sbrk_r+0x1a>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	2000140c 	.word	0x2000140c

080095a0 <_init>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr

080095ac <_fini>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	bf00      	nop
 80095b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b2:	bc08      	pop	{r3}
 80095b4:	469e      	mov	lr, r3
 80095b6:	4770      	bx	lr
