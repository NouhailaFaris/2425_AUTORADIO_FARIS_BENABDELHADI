
2424_AUTORADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009848  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  080099d8  080099d8  0000a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f2c  08009f2c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f2c  08009f2c  0000af2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f34  08009f34  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f34  08009f34  0000af34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f38  08009f38  0000af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009f3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015b0  2000006c  08009fa8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000161c  08009fa8  0000b61c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abdd  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004262  00000000  00000000  00025c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00029ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001198  00000000  00000000  0002b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006659  00000000  00000000  0002c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1fc  00000000  00000000  00032da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9f74  00000000  00000000  00050fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014af19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  0014af5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001513d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099c0 	.word	0x080099c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080099c0 	.word	0x080099c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 f975 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 f98e 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 f96d 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 f986 	bl	80018aa <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	200000e0 	.word	0x200000e0

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f006 ffef 	bl	80075e0 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	080099e4 	.word	0x080099e4
 8000614:	20000088 	.word	0x20000088

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f007 f829 	bl	8007678 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <MX_GPIO_Init+0xec>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xec>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <MX_GPIO_Init+0xec>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2121      	movs	r1, #33	@ 0x21
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 fd3b 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_GPIO_Init+0xf0>)
 80006b0:	f001 fd36 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_GPIO_Init+0xf4>)
 80006cc:	f001 fb7e 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80006d0:	2321      	movs	r3, #33	@ 0x21
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f001 fb6f 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xf0>)
 8000706:	f001 fb61 	bl	8001dcc <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800

08000720 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f001 fcf8 	bl	8002150 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fa9c 	bl	8000ca2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f002 fb73 	bl	8002e58 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fa93 	bl	8000ca2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f002 fbb5 	bl	8002eee <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fa8a 	bl	8000ca2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200002e0 	.word	0x200002e0
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	@ 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f008 fb79 	bl	8008eb8 <memset>
  if(i2cHandle->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <HAL_I2C_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fa37 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f000 fa5b 	bl	8000ca2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0xb8>)
 800082c:	f001 face 	bl	8001dcc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083a:	6593      	str	r3, [r2, #88]	@ 0x58
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	@ 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005800 	.word	0x40005800
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2201      	movs	r2, #1
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <__io_putchar+0x20>)
 800086e:	f005 fdcc 	bl	800640a <HAL_UART_Transmit>
	return ch;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000738 	.word	0x20000738

08000880 <I2C_Scan>:

void I2C_Scan(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	printf("Scanning I2C bus\r\n");
 8000886:	4811      	ldr	r0, [pc, #68]	@ (80008cc <I2C_Scan+0x4c>)
 8000888:	f008 fa36 	bl	8008cf8 <puts>
	for (uint16_t addr = 0; addr < 128; addr++) {
 800088c:	2300      	movs	r3, #0
 800088e:	80fb      	strh	r3, [r7, #6]
 8000890:	e011      	b.n	80008b6 <I2C_Scan+0x36>
		if (HAL_I2C_IsDeviceReady(&hi2c2, addr , 2, HAL_MAX_DELAY) == HAL_OK) {
 8000892:	88f9      	ldrh	r1, [r7, #6]
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	2202      	movs	r2, #2
 800089a:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <I2C_Scan+0x50>)
 800089c:	f001 ff22 	bl	80026e4 <HAL_I2C_IsDeviceReady>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d104      	bne.n	80008b0 <I2C_Scan+0x30>
			printf("Périphérique trouvé à l'adresse 0x%02X\r\n", addr);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	480a      	ldr	r0, [pc, #40]	@ (80008d4 <I2C_Scan+0x54>)
 80008ac:	f008 f9bc 	bl	8008c28 <iprintf>
	for (uint16_t addr = 0; addr < 128; addr++) {
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	3301      	adds	r3, #1
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008ba:	d9ea      	bls.n	8000892 <I2C_Scan+0x12>
		}
	}
	printf("Scan terminé.\r\n");
 80008bc:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <I2C_Scan+0x58>)
 80008be:	f008 fa1b 	bl	8008cf8 <puts>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	08009a00 	.word	0x08009a00
 80008d0:	200002e0 	.word	0x200002e0
 80008d4:	08009a14 	.word	0x08009a14
 80008d8:	08009a44 	.word	0x08009a44

080008dc <Read_CHIP_ID_Debug>:

void Read_CHIP_ID_Debug(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af04      	add	r7, sp, #16
	uint8_t chip_id[2] = {0};
 80008e2:	2300      	movs	r3, #0
 80008e4:	80bb      	strh	r3, [r7, #4]

	printf("Lecture du registre CHIP_ID \r\n");
 80008e6:	4819      	ldr	r0, [pc, #100]	@ (800094c <Read_CHIP_ID_Debug+0x70>)
 80008e8:	f008 fa06 	bl	8008cf8 <puts>

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, CHIP_ID_REG, I2C_MEMADD_SIZE_16BIT, chip_id, 2, HAL_MAX_DELAY);
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2302      	movs	r3, #2
 80008fc:	2200      	movs	r2, #0
 80008fe:	2114      	movs	r1, #20
 8000900:	4813      	ldr	r0, [pc, #76]	@ (8000950 <Read_CHIP_ID_Debug+0x74>)
 8000902:	f001 fdd5 	bl	80024b0 <HAL_I2C_Mem_Read>
 8000906:	4603      	mov	r3, r0
 8000908:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) {
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10d      	bne.n	800092c <Read_CHIP_ID_Debug+0x50>
		// Appliquer le décalage de 8 bits pour le MSB
		uint16_t chip_id_val = (chip_id[0] << 8) | chip_id[1];
 8000910:	793b      	ldrb	r3, [r7, #4]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b21a      	sxth	r2, r3
 8000916:	797b      	ldrb	r3, [r7, #5]
 8000918:	b21b      	sxth	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b21b      	sxth	r3, r3
 800091e:	80fb      	strh	r3, [r7, #6]
		printf("CHIP_ID lu avec succès : 0x%04X\r\n", chip_id_val);
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <Read_CHIP_ID_Debug+0x78>)
 8000926:	f008 f97f 	bl	8008c28 <iprintf>
	} else {
		printf("Erreur : Impossible de lire le CHIP_ID\r\n");
		uint32_t i2c_error = HAL_I2C_GetError(&hi2c2);
		printf("Erreur I2C\r\n", i2c_error);
	}
}
 800092a:	e00a      	b.n	8000942 <Read_CHIP_ID_Debug+0x66>
		printf("Erreur : Impossible de lire le CHIP_ID\r\n");
 800092c:	480a      	ldr	r0, [pc, #40]	@ (8000958 <Read_CHIP_ID_Debug+0x7c>)
 800092e:	f008 f9e3 	bl	8008cf8 <puts>
		uint32_t i2c_error = HAL_I2C_GetError(&hi2c2);
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <Read_CHIP_ID_Debug+0x74>)
 8000934:	f001 ffc2 	bl	80028bc <HAL_I2C_GetError>
 8000938:	60b8      	str	r0, [r7, #8]
		printf("Erreur I2C\r\n", i2c_error);
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	4807      	ldr	r0, [pc, #28]	@ (800095c <Read_CHIP_ID_Debug+0x80>)
 800093e:	f008 f973 	bl	8008c28 <iprintf>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	08009a54 	.word	0x08009a54
 8000950:	200002e0 	.word	0x200002e0
 8000954:	08009a74 	.word	0x08009a74
 8000958:	08009a98 	.word	0x08009a98
 800095c:	08009ac0 	.word	0x08009ac0

08000960 <Read_Write_Test_Register>:
void Read_Write_Test_Register(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af04      	add	r7, sp, #16
	uint8_t read_data[2] = {0};
 8000966:	2300      	movs	r3, #0
 8000968:	813b      	strh	r3, [r7, #8]
	uint16_t test_value = 0xABCD; // Exemple de valeur à écrire
 800096a:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 800096e:	81fb      	strh	r3, [r7, #14]
	uint8_t test_data[2] = { (test_value >> 8) & 0xFF, test_value & 0xFF };
 8000970:	89fb      	ldrh	r3, [r7, #14]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b29b      	uxth	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	713b      	strb	r3, [r7, #4]
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	717b      	strb	r3, [r7, #5]

	printf("Lecture du registre avant écriture\r\n");
 8000980:	4833      	ldr	r0, [pc, #204]	@ (8000a50 <Read_Write_Test_Register+0xf0>)
 8000982:	f008 f9b9 	bl	8008cf8 <puts>
	if (HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, read_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2302      	movs	r3, #2
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2302      	movs	r3, #2
 8000998:	2230      	movs	r2, #48	@ 0x30
 800099a:	2114      	movs	r1, #20
 800099c:	482d      	ldr	r0, [pc, #180]	@ (8000a54 <Read_Write_Test_Register+0xf4>)
 800099e:	f001 fd87 	bl	80024b0 <HAL_I2C_Mem_Read>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10a      	bne.n	80009be <Read_Write_Test_Register+0x5e>
		uint16_t value = (read_data[0]) | read_data[1];
 80009a8:	7a3a      	ldrb	r2, [r7, #8]
 80009aa:	7a7b      	ldrb	r3, [r7, #9]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	81bb      	strh	r3, [r7, #12]
		printf("Valeur lue avant écriture : 0x%04X\r\n", value);
 80009b2:	89bb      	ldrh	r3, [r7, #12]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4828      	ldr	r0, [pc, #160]	@ (8000a58 <Read_Write_Test_Register+0xf8>)
 80009b8:	f008 f936 	bl	8008c28 <iprintf>
 80009bc:	e002      	b.n	80009c4 <Read_Write_Test_Register+0x64>
	} else {
		printf("Erreur lors de la lecture du registre avant écriture\r\n");
 80009be:	4827      	ldr	r0, [pc, #156]	@ (8000a5c <Read_Write_Test_Register+0xfc>)
 80009c0:	f008 f99a 	bl	8008cf8 <puts>
	}

	printf("Écriture dans le registre\r\n");
 80009c4:	4826      	ldr	r0, [pc, #152]	@ (8000a60 <Read_Write_Test_Register+0x100>)
 80009c6:	f008 f997 	bl	8008cf8 <puts>
	if (HAL_I2C_Mem_Write(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, test_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2302      	movs	r3, #2
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2302      	movs	r3, #2
 80009da:	2230      	movs	r2, #48	@ 0x30
 80009dc:	2114      	movs	r1, #20
 80009de:	481d      	ldr	r0, [pc, #116]	@ (8000a54 <Read_Write_Test_Register+0xf4>)
 80009e0:	f001 fc52 	bl	8002288 <HAL_I2C_Mem_Write>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <Read_Write_Test_Register+0x96>
		printf("Valeur écrite avec succès : 0x%04X\r\n", test_value);
 80009ea:	89fb      	ldrh	r3, [r7, #14]
 80009ec:	4619      	mov	r1, r3
 80009ee:	481d      	ldr	r0, [pc, #116]	@ (8000a64 <Read_Write_Test_Register+0x104>)
 80009f0:	f008 f91a 	bl	8008c28 <iprintf>
 80009f4:	e002      	b.n	80009fc <Read_Write_Test_Register+0x9c>
	} else {
		printf("Erreur lors de l'écriture dans le registre\r\n");
 80009f6:	481c      	ldr	r0, [pc, #112]	@ (8000a68 <Read_Write_Test_Register+0x108>)
 80009f8:	f008 f97e 	bl	8008cf8 <puts>
	}

	printf("Lecture du registre après écriture\r\n");
 80009fc:	481b      	ldr	r0, [pc, #108]	@ (8000a6c <Read_Write_Test_Register+0x10c>)
 80009fe:	f008 f97b 	bl	8008cf8 <puts>
	if (HAL_I2C_Mem_Read(&hi2c2, SGTL5000_I2C_ADDR, TEST_REGISTER, I2C_MEMADD_SIZE_16BIT, read_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	2302      	movs	r3, #2
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2302      	movs	r3, #2
 8000a14:	2230      	movs	r2, #48	@ 0x30
 8000a16:	2114      	movs	r1, #20
 8000a18:	480e      	ldr	r0, [pc, #56]	@ (8000a54 <Read_Write_Test_Register+0xf4>)
 8000a1a:	f001 fd49 	bl	80024b0 <HAL_I2C_Mem_Read>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10d      	bne.n	8000a40 <Read_Write_Test_Register+0xe0>
		uint16_t value = (read_data[0] << 8) | read_data[1];
 8000a24:	7a3b      	ldrb	r3, [r7, #8]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	7a7b      	ldrb	r3, [r7, #9]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	817b      	strh	r3, [r7, #10]
		printf("Valeur lue après écriture : 0x%04X\r\n", value);
 8000a34:	897b      	ldrh	r3, [r7, #10]
 8000a36:	4619      	mov	r1, r3
 8000a38:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <Read_Write_Test_Register+0x110>)
 8000a3a:	f008 f8f5 	bl	8008c28 <iprintf>
	} else {
		printf("Erreur lors de la lecture du registre après écriture\r\n");
	}
}
 8000a3e:	e002      	b.n	8000a46 <Read_Write_Test_Register+0xe6>
		printf("Erreur lors de la lecture du registre après écriture\r\n");
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <Read_Write_Test_Register+0x114>)
 8000a42:	f008 f959 	bl	8008cf8 <puts>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	08009ad0 	.word	0x08009ad0
 8000a54:	200002e0 	.word	0x200002e0
 8000a58:	08009af8 	.word	0x08009af8
 8000a5c:	08009b20 	.word	0x08009b20
 8000a60:	08009b58 	.word	0x08009b58
 8000a64:	08009b74 	.word	0x08009b74
 8000a68:	08009b9c 	.word	0x08009b9c
 8000a6c:	08009bcc 	.word	0x08009bcc
 8000a70:	08009bf4 	.word	0x08009bf4
 8000a74:	08009c1c 	.word	0x08009c1c

08000a78 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a7c:	f000 fda2 	bl	80015c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a80:	f000 f894 	bl	8000bac <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000a84:	f000 f8e3 	bl	8000c4e <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a88:	f7ff fdce 	bl	8000628 <MX_GPIO_Init>
	MX_DMA_Init();
 8000a8c:	f7ff fd68 	bl	8000560 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000a90:	f000 fcda 	bl	8001448 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000a94:	f000 faf4 	bl	8001080 <MX_SPI3_Init>
	MX_I2C2_Init();
 8000a98:	f7ff fe42 	bl	8000720 <MX_I2C2_Init>
	MX_SAI2_Init();
 8000a9c:	f000 f908 	bl	8000cb0 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000aa0:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <main+0x110>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b38      	ldr	r3, [pc, #224]	@ (8000b88 <main+0x110>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000aae:	601a      	str	r2, [r3, #0]
	printf("Demarrage du systeme...\r\n");
 8000ab0:	4836      	ldr	r0, [pc, #216]	@ (8000b8c <main+0x114>)
 8000ab2:	f008 f921 	bl	8008cf8 <puts>
	I2C_Scan();
 8000ab6:	f7ff fee3 	bl	8000880 <I2C_Scan>
	Read_CHIP_ID_Debug();
 8000aba:	f7ff ff0f 	bl	80008dc <Read_CHIP_ID_Debug>
	Read_Write_Test_Register();
 8000abe:	f7ff ff4f 	bl	8000960 <Read_Write_Test_Register>
	printf("Début des tests des registres SGTL5000\r\n");
 8000ac2:	4833      	ldr	r0, [pc, #204]	@ (8000b90 <main+0x118>)
 8000ac4:	f008 f918 	bl	8008cf8 <puts>

	// Tester chaque registre
	Test_Register(&hi2c2, CHIP_ANA_POWER, 0x6AFF);
 8000ac8:	f646 22ff 	movw	r2, #27391	@ 0x6aff
 8000acc:	2130      	movs	r1, #48	@ 0x30
 8000ace:	4831      	ldr	r0, [pc, #196]	@ (8000b94 <main+0x11c>)
 8000ad0:	f000 fa80 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_LINREG_CTRL, 0x006C);
 8000ad4:	226c      	movs	r2, #108	@ 0x6c
 8000ad6:	2126      	movs	r1, #38	@ 0x26
 8000ad8:	482e      	ldr	r0, [pc, #184]	@ (8000b94 <main+0x11c>)
 8000ada:	f000 fa7b 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_REF_CTRL, 0x004E);
 8000ade:	224e      	movs	r2, #78	@ 0x4e
 8000ae0:	2128      	movs	r1, #40	@ 0x28
 8000ae2:	482c      	ldr	r0, [pc, #176]	@ (8000b94 <main+0x11c>)
 8000ae4:	f000 fa76 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_LINE_OUT_CTRL, 0x0322);
 8000ae8:	f240 3222 	movw	r2, #802	@ 0x322
 8000aec:	212c      	movs	r1, #44	@ 0x2c
 8000aee:	4829      	ldr	r0, [pc, #164]	@ (8000b94 <main+0x11c>)
 8000af0:	f000 fa70 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_SHORT_CTRL, 0x1106);
 8000af4:	f241 1206 	movw	r2, #4358	@ 0x1106
 8000af8:	213c      	movs	r1, #60	@ 0x3c
 8000afa:	4826      	ldr	r0, [pc, #152]	@ (8000b94 <main+0x11c>)
 8000afc:	f000 fa6a 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_ANA_CTRL, 0x0133);
 8000b00:	f240 1233 	movw	r2, #307	@ 0x133
 8000b04:	2124      	movs	r1, #36	@ 0x24
 8000b06:	4823      	ldr	r0, [pc, #140]	@ (8000b94 <main+0x11c>)
 8000b08:	f000 fa64 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_DIG_POWER, 0x0073);
 8000b0c:	2273      	movs	r2, #115	@ 0x73
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4820      	ldr	r0, [pc, #128]	@ (8000b94 <main+0x11c>)
 8000b12:	f000 fa5f 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_LINE_OUT_VOL, 0x0505);
 8000b16:	f240 5205 	movw	r2, #1285	@ 0x505
 8000b1a:	212e      	movs	r1, #46	@ 0x2e
 8000b1c:	481d      	ldr	r0, [pc, #116]	@ (8000b94 <main+0x11c>)
 8000b1e:	f000 fa59 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_CLK_CTRL, 0x0002);
 8000b22:	2202      	movs	r2, #2
 8000b24:	2104      	movs	r1, #4
 8000b26:	481b      	ldr	r0, [pc, #108]	@ (8000b94 <main+0x11c>)
 8000b28:	f000 fa54 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_I2S_CTRL, 0x0001);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2106      	movs	r1, #6
 8000b30:	4818      	ldr	r0, [pc, #96]	@ (8000b94 <main+0x11c>)
 8000b32:	f000 fa4f 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_ADCDAC_CTRL, 0x000C);
 8000b36:	220c      	movs	r2, #12
 8000b38:	210e      	movs	r1, #14
 8000b3a:	4816      	ldr	r0, [pc, #88]	@ (8000b94 <main+0x11c>)
 8000b3c:	f000 fa4a 	bl	8000fd4 <Test_Register>
	Test_Register(&hi2c2, CHIP_DAC_VOL, 0x3C3C);
 8000b40:	f643 423c 	movw	r2, #15420	@ 0x3c3c
 8000b44:	2110      	movs	r1, #16
 8000b46:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <main+0x11c>)
 8000b48:	f000 fa44 	bl	8000fd4 <Test_Register>

	printf("Tests terminés.\r\n");
 8000b4c:	4812      	ldr	r0, [pc, #72]	@ (8000b98 <main+0x120>)
 8000b4e:	f008 f8d3 	bl	8008cf8 <puts>
	printf("Démarrage du système...\r\n");
 8000b52:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <main+0x124>)
 8000b54:	f008 f8d0 	bl	8008cf8 <puts>
	/* Démarrer la transmission DMA */
	if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, tx_buffer, BUFFER_SIZE) != HAL_OK) {
 8000b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b5c:	4910      	ldr	r1, [pc, #64]	@ (8000ba0 <main+0x128>)
 8000b5e:	480a      	ldr	r0, [pc, #40]	@ (8000b88 <main+0x110>)
 8000b60:	f004 fd9a 	bl	8005698 <HAL_SAI_Transmit_DMA>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d004      	beq.n	8000b74 <main+0xfc>
		printf("Erreur : Impossible de démarrer la transmission I2S\r\n");
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <main+0x12c>)
 8000b6c:	f008 f8c4 	bl	8008cf8 <puts>
		Error_Handler();
 8000b70:	f000 f897 	bl	8000ca2 <Error_Handler>
	}

	printf("Transmission I2S démarrée avec succès\r\n");
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <main+0x130>)
 8000b76:	f008 f8bf 	bl	8008cf8 <puts>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000b7a:	f7ff fd31 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000b7e:	f006 fd28 	bl	80075d2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000b82:	bf00      	nop
 8000b84:	e7fd      	b.n	8000b82 <main+0x10a>
 8000b86:	bf00      	nop
 8000b88:	20000534 	.word	0x20000534
 8000b8c:	08009c54 	.word	0x08009c54
 8000b90:	08009c70 	.word	0x08009c70
 8000b94:	200002e0 	.word	0x200002e0
 8000b98:	08009c9c 	.word	0x08009c9c
 8000b9c:	08009cb0 	.word	0x08009cb0
 8000ba0:	20000334 	.word	0x20000334
 8000ba4:	08009ccc 	.word	0x08009ccc
 8000ba8:	08009d04 	.word	0x08009d04

08000bac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b096      	sub	sp, #88	@ 0x58
 8000bb0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2244      	movs	r2, #68	@ 0x44
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 f97c 	bl	8008eb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bd2:	f002 f9e7 	bl	8002fa4 <HAL_PWREx_ControlVoltageScaling>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000bdc:	f000 f861 	bl	8000ca2 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be0:	2302      	movs	r3, #2
 8000be2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bea:	2310      	movs	r3, #16
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fa1e 	bl	8003050 <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000c1a:	f000 f842 	bl	8000ca2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c22:	2303      	movs	r3, #3
 8000c24:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	2104      	movs	r1, #4
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 fde6 	bl	8003808 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000c42:	f000 f82e 	bl	8000ca2 <Error_Handler>
	}
}
 8000c46:	bf00      	nop
 8000c48:	3758      	adds	r7, #88	@ 0x58
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b0a2      	sub	sp, #136	@ 0x88
 8000c52:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2288      	movs	r2, #136	@ 0x88
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f008 f92c 	bl	8008eb8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c64:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000c72:	230d      	movs	r3, #13
 8000c74:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000c76:	2311      	movs	r3, #17
 8000c78:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000c82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c86:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 ffe0 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000c96:	f000 f804 	bl	8000ca2 <Error_Handler>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3788      	adds	r7, #136	@ 0x88
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca6:	b672      	cpsid	i
}
 8000ca8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000caa:	bf00      	nop
 8000cac:	e7fd      	b.n	8000caa <Error_Handler+0x8>
	...

08000cb0 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d64 <MX_SAI2_Init+0xb4>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cba:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cd2:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000cd8:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cda:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000cde:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4818      	ldr	r0, [pc, #96]	@ (8000d60 <MX_SAI2_Init+0xb0>)
 8000d00:	f004 fac0 	bl	8005284 <HAL_SAI_InitProtocol>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000d0a:	f7ff ffca 	bl	8000ca2 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d10:	4a16      	ldr	r2, [pc, #88]	@ (8000d6c <MX_SAI2_Init+0xbc>)
 8000d12:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000d44:	2302      	movs	r3, #2
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <MX_SAI2_Init+0xb8>)
 8000d4c:	f004 fa9a 	bl	8005284 <HAL_SAI_InitProtocol>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000d56:	f7ff ffa4 	bl	8000ca2 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000534 	.word	0x20000534
 8000d64:	40015804 	.word	0x40015804
 8000d68:	200005b8 	.word	0x200005b8
 8000d6c:	40015824 	.word	0x40015824

08000d70 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a64      	ldr	r2, [pc, #400]	@ (8000f10 <HAL_SAI_MspInit+0x1a0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d15e      	bne.n	8000e40 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000d82:	4b64      	ldr	r3, [pc, #400]	@ (8000f14 <HAL_SAI_MspInit+0x1a4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d113      	bne.n	8000db2 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000d8a:	4b63      	ldr	r3, [pc, #396]	@ (8000f18 <HAL_SAI_MspInit+0x1a8>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8e:	4a62      	ldr	r2, [pc, #392]	@ (8000f18 <HAL_SAI_MspInit+0x1a8>)
 8000d90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d96:	4b60      	ldr	r3, [pc, #384]	@ (8000f18 <HAL_SAI_MspInit+0x1a8>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2105      	movs	r1, #5
 8000da6:	204b      	movs	r0, #75	@ 0x4b
 8000da8:	f000 fd63 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000dac:	204b      	movs	r0, #75	@ 0x4b
 8000dae:	f000 fd7c 	bl	80018aa <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000db2:	4b58      	ldr	r3, [pc, #352]	@ (8000f14 <HAL_SAI_MspInit+0x1a4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a56      	ldr	r2, [pc, #344]	@ (8000f14 <HAL_SAI_MspInit+0x1a4>)
 8000dba:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dbc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000dce:	230d      	movs	r3, #13
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4850      	ldr	r0, [pc, #320]	@ (8000f1c <HAL_SAI_MspInit+0x1ac>)
 8000dda:	f000 fff7 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000dde:	4b50      	ldr	r3, [pc, #320]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000de0:	4a50      	ldr	r2, [pc, #320]	@ (8000f24 <HAL_SAI_MspInit+0x1b4>)
 8000de2:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000de4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dea:	4b4d      	ldr	r3, [pc, #308]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000dec:	2210      	movs	r2, #16
 8000dee:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b4a      	ldr	r3, [pc, #296]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000df8:	2280      	movs	r2, #128	@ 0x80
 8000dfa:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dfc:	4b48      	ldr	r3, [pc, #288]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e04:	4b46      	ldr	r3, [pc, #280]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000e06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e0a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000e0c:	4b44      	ldr	r3, [pc, #272]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000e0e:	2220      	movs	r2, #32
 8000e10:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000e12:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000e18:	4841      	ldr	r0, [pc, #260]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000e1a:	f000 fd61 	bl	80018e0 <HAL_DMA_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000e24:	f7ff ff3d 	bl	8000ca2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000e2c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3a      	ldr	r2, [pc, #232]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000e38:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e3a:	4a39      	ldr	r2, [pc, #228]	@ (8000f20 <HAL_SAI_MspInit+0x1b0>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a38      	ldr	r2, [pc, #224]	@ (8000f28 <HAL_SAI_MspInit+0x1b8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d15e      	bne.n	8000f08 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000e4a:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <HAL_SAI_MspInit+0x1a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d113      	bne.n	8000e7a <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e52:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <HAL_SAI_MspInit+0x1a8>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e56:	4a30      	ldr	r2, [pc, #192]	@ (8000f18 <HAL_SAI_MspInit+0x1a8>)
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <HAL_SAI_MspInit+0x1a8>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	204b      	movs	r0, #75	@ 0x4b
 8000e70:	f000 fcff 	bl	8001872 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e74:	204b      	movs	r0, #75	@ 0x4b
 8000e76:	f000 fd18 	bl	80018aa <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <HAL_SAI_MspInit+0x1a4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a24      	ldr	r2, [pc, #144]	@ (8000f14 <HAL_SAI_MspInit+0x1a4>)
 8000e82:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e96:	230d      	movs	r3, #13
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4822      	ldr	r0, [pc, #136]	@ (8000f2c <HAL_SAI_MspInit+0x1bc>)
 8000ea2:	f000 ff93 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000ea6:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000ea8:	4a22      	ldr	r2, [pc, #136]	@ (8000f34 <HAL_SAI_MspInit+0x1c4>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000eac:	4b20      	ldr	r3, [pc, #128]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eca:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000ece:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000ee0:	4813      	ldr	r0, [pc, #76]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000ee2:	f000 fcfd 	bl	80018e0 <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000eec:	f7ff fed9 	bl	8000ca2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000ef4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000f00:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f02:	4a0b      	ldr	r2, [pc, #44]	@ (8000f30 <HAL_SAI_MspInit+0x1c0>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	@ 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40015804 	.word	0x40015804
 8000f14:	200006cc 	.word	0x200006cc
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400
 8000f20:	2000063c 	.word	0x2000063c
 8000f24:	4002006c 	.word	0x4002006c
 8000f28:	40015824 	.word	0x40015824
 8000f2c:	48000800 	.word	0x48000800
 8000f30:	20000684 	.word	0x20000684
 8000f34:	40020080 	.word	0x40020080

08000f38 <SGTL5000_WriteRegister>:

#include "sgtl5000.h"
#include <stdio.h>

// Fonction pour écrire dans un registre
HAL_StatusTypeDef SGTL5000_WriteRegister(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t value) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
    uint8_t data[2] = {
 8000f48:	883b      	ldrh	r3, [r7, #0]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	733b      	strb	r3, [r7, #12]
 8000f52:	883b      	ldrh	r3, [r7, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	737b      	strb	r3, [r7, #13]
        (value >> 8) & 0xFF, // MSB de la valeur
        value & 0xFF         // LSB de la valeur
    };

    // Utilisation de HAL_I2C_Mem_Write
    return HAL_I2C_Mem_Write(hi2c, SGTL5000_I2C_ADDR, reg, I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY);
 8000f58:	887a      	ldrh	r2, [r7, #2]
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2302      	movs	r3, #2
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	2114      	movs	r1, #20
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f001 f98a 	bl	8002288 <HAL_I2C_Mem_Write>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <SGTL5000_ReadRegister>:

// Fonction pour lire un registre
HAL_StatusTypeDef SGTL5000_ReadRegister(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t *value) {
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b08a      	sub	sp, #40	@ 0x28
 8000f82:	af04      	add	r7, sp, #16
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	460b      	mov	r3, r1
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	817b      	strh	r3, [r7, #10]
    uint8_t data[2] = { 0 };
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	82bb      	strh	r3, [r7, #20]

    // Utilisation de HAL_I2C_Mem_Read
    if (HAL_I2C_Mem_Read(hi2c, SGTL5000_I2C_ADDR, reg, I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000f90:	897a      	ldrh	r2, [r7, #10]
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2302      	movs	r3, #2
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	2114      	movs	r1, #20
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f001 fa82 	bl	80024b0 <HAL_I2C_Mem_Read>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SGTL5000_ReadRegister+0x38>
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00a      	b.n	8000fcc <SGTL5000_ReadRegister+0x4e>
    }

    // Combiner les octets pour former une valeur 16 bits
    *value = (data[0] << 8) | data[1];
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	7d7b      	ldrb	r3, [r7, #21]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <Test_Register>:

    return status;
}

// Fonction de test d'un registre
void Test_Register(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t write_value) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	803b      	strh	r3, [r7, #0]
    uint16_t read_value = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	81fb      	strh	r3, [r7, #14]

    // Écriture dans le registre
    if (SGTL5000_WriteRegister(hi2c, reg, write_value) == HAL_OK) {
 8000fe8:	883a      	ldrh	r2, [r7, #0]
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa2 	bl	8000f38 <SGTL5000_WriteRegister>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d110      	bne.n	800101c <Test_Register+0x48>
        printf("Écriture réussie dans le registre 0x%04X avec la valeur 0x%04X\r\n", reg, write_value);
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	883a      	ldrh	r2, [r7, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4819      	ldr	r0, [pc, #100]	@ (8001068 <Test_Register+0x94>)
 8001002:	f007 fe11 	bl	8008c28 <iprintf>
        printf("Erreur lors de l'écriture dans le registre 0x%04X\r\n", reg);
        return;
    }

    // Lecture du registre
    if (SGTL5000_ReadRegister(hi2c, reg, &read_value) == HAL_OK) {
 8001006:	f107 020e 	add.w	r2, r7, #14
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffb5 	bl	8000f7e <SGTL5000_ReadRegister>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d11e      	bne.n	8001058 <Test_Register+0x84>
 800101a:	e005      	b.n	8001028 <Test_Register+0x54>
        printf("Erreur lors de l'écriture dans le registre 0x%04X\r\n", reg);
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	4619      	mov	r1, r3
 8001020:	4812      	ldr	r0, [pc, #72]	@ (800106c <Test_Register+0x98>)
 8001022:	f007 fe01 	bl	8008c28 <iprintf>
 8001026:	e01c      	b.n	8001062 <Test_Register+0x8e>
        printf("Lecture réussie du registre 0x%04X. Valeur lue : 0x%04X\r\n", reg, read_value);
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	89fa      	ldrh	r2, [r7, #14]
 800102c:	4619      	mov	r1, r3
 800102e:	4810      	ldr	r0, [pc, #64]	@ (8001070 <Test_Register+0x9c>)
 8001030:	f007 fdfa 	bl	8008c28 <iprintf>

        // Vérification
        if (read_value == write_value) {
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	883a      	ldrh	r2, [r7, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d105      	bne.n	8001048 <Test_Register+0x74>
            printf("Test réussi pour le registre 0x%04X. La valeur correspond.\r\n", reg);
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <Test_Register+0xa0>)
 8001042:	f007 fdf1 	bl	8008c28 <iprintf>
 8001046:	e00c      	b.n	8001062 <Test_Register+0x8e>
        } else {
            printf("Erreur : La valeur lue 0x%04X ne correspond pas à la valeur écrite 0x%04X.\r\n", read_value, write_value);
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	4619      	mov	r1, r3
 800104c:	883b      	ldrh	r3, [r7, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	4809      	ldr	r0, [pc, #36]	@ (8001078 <Test_Register+0xa4>)
 8001052:	f007 fde9 	bl	8008c28 <iprintf>
 8001056:	e004      	b.n	8001062 <Test_Register+0x8e>
        }
    } else {
        printf("Erreur lors de la lecture du registre 0x%04X\r\n", reg);
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4619      	mov	r1, r3
 800105c:	4807      	ldr	r0, [pc, #28]	@ (800107c <Test_Register+0xa8>)
 800105e:	f007 fde3 	bl	8008c28 <iprintf>
    }
}
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08009d30 	.word	0x08009d30
 800106c:	08009d74 	.word	0x08009d74
 8001070:	08009dac 	.word	0x08009dac
 8001074:	08009de8 	.word	0x08009de8
 8001078:	08009e28 	.word	0x08009e28
 800107c:	08009e78 	.word	0x08009e78

08001080 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_SPI3_Init+0x74>)
 8001086:	4a1c      	ldr	r2, [pc, #112]	@ (80010f8 <MX_SPI3_Init+0x78>)
 8001088:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_SPI3_Init+0x74>)
 800108c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001090:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_SPI3_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_SPI3_Init+0x74>)
 800109a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800109e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010b6:	2210      	movs	r2, #16
 80010b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010ce:	2207      	movs	r2, #7
 80010d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010da:	2208      	movs	r2, #8
 80010dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_SPI3_Init+0x74>)
 80010e0:	f004 ff8f 	bl	8006002 <HAL_SPI_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f7ff fdda 	bl	8000ca2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200006d0 	.word	0x200006d0
 80010f8:	40003c00 	.word	0x40003c00

080010fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a29      	ldr	r2, [pc, #164]	@ (80011c0 <HAL_SPI_MspInit+0xc4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d14c      	bne.n	80011b8 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800111e:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001122:	4a28      	ldr	r2, [pc, #160]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 8001124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001128:	6593      	str	r3, [r2, #88]	@ 0x58
 800112a:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b23      	ldr	r3, [pc, #140]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a22      	ldr	r2, [pc, #136]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a1c      	ldr	r2, [pc, #112]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <HAL_SPI_MspInit+0xc8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001166:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001178:	2306      	movs	r3, #6
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <HAL_SPI_MspInit+0xcc>)
 8001184:	f000 fe22 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001188:	2320      	movs	r3, #32
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001198:	2306      	movs	r3, #6
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480a      	ldr	r0, [pc, #40]	@ (80011cc <HAL_SPI_MspInit+0xd0>)
 80011a4:	f000 fe12 	bl	8001dcc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2105      	movs	r1, #5
 80011ac:	2033      	movs	r0, #51	@ 0x33
 80011ae:	f000 fb60 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80011b2:	2033      	movs	r0, #51	@ 0x33
 80011b4:	f000 fb79 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	@ 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40003c00 	.word	0x40003c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000800 	.word	0x48000800
 80011cc:	48000400 	.word	0x48000400

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_MspInit+0x4c>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <HAL_MspInit+0x4c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_MspInit+0x4c>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_MspInit+0x4c>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <HAL_MspInit+0x4c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_MspInit+0x4c>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	210f      	movs	r1, #15
 800120a:	f06f 0001 	mvn.w	r0, #1
 800120e:	f000 fb30 	bl	8001872 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <NMI_Handler+0x4>

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <UsageFault_Handler+0x4>

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f000 fa0f 	bl	800167c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800125e:	f006 ff9b 	bl	8008198 <xTaskGetSchedulerState>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d001      	beq.n	800126c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001268:	f007 f9de 	bl	8008628 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <DMA1_Channel6_IRQHandler+0x10>)
 8001276:	f000 fcca 	bl	8001c0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000063c 	.word	0x2000063c

08001284 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <DMA1_Channel7_IRQHandler+0x10>)
 800128a:	f000 fcc0 	bl	8001c0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000684 	.word	0x20000684

08001298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <USART2_IRQHandler+0x10>)
 800129e:	f005 f93d 	bl	800651c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000738 	.word	0x20000738

080012ac <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <SPI3_IRQHandler+0x10>)
 80012b2:	f004 ff49 	bl	8006148 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200006d0 	.word	0x200006d0

080012c0 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <SAI2_IRQHandler+0x14>)
 80012c6:	f004 fa97 	bl	80057f8 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <SAI2_IRQHandler+0x18>)
 80012cc:	f004 fa94 	bl	80057f8 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000534 	.word	0x20000534
 80012d8:	200005b8 	.word	0x200005b8

080012dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e00a      	b.n	8001304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ee:	f3af 8000 	nop.w
 80012f2:	4601      	mov	r1, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	b2ca      	uxtb	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf0      	blt.n	80012ee <_read+0x12>
  }

  return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e009      	b.n	800133c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fa93 	bl	800085c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf1      	blt.n	8001328 <_write+0x12>
  }
  return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001376:	605a      	str	r2, [r3, #4]
  return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f007 fdb4 	bl	8008f54 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20018000 	.word	0x20018000
 8001418:	00000400 	.word	0x00000400
 800141c:	20000734 	.word	0x20000734
 8001420:	20001620 	.word	0x20001620

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 800144e:	4a15      	ldr	r2, [pc, #84]	@ (80014a4 <MX_USART2_UART_Init+0x5c>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_USART2_UART_Init+0x58>)
 800148c:	f004 ff6f 	bl	800636e <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001496:	f7ff fc04 	bl	8000ca2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000738 	.word	0x20000738
 80014a4:	40004400 	.word	0x40004400

080014a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0ac      	sub	sp, #176	@ 0xb0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2288      	movs	r2, #136	@ 0x88
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f007 fcf5 	bl	8008eb8 <memset>
  if(uartHandle->Instance==USART2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <HAL_UART_MspInit+0xc0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d143      	bne.n	8001560 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014d8:	2302      	movs	r3, #2
 80014da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014dc:	2300      	movs	r3, #0
 80014de:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fbb3 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014f0:	f7ff fbd7 	bl	8000ca2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_UART_MspInit+0xc4>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <HAL_UART_MspInit+0xc4>)
 80014fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001500:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <HAL_UART_MspInit+0xc4>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <HAL_UART_MspInit+0xc4>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	4a16      	ldr	r2, [pc, #88]	@ (800156c <HAL_UART_MspInit+0xc4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <HAL_UART_MspInit+0xc4>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8001524:	230c      	movs	r3, #12
 8001526:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153c:	2307      	movs	r3, #7
 800153e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154c:	f000 fc3e 	bl	8001dcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2105      	movs	r1, #5
 8001554:	2026      	movs	r0, #38	@ 0x26
 8001556:	f000 f98c 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800155a:	2026      	movs	r0, #38	@ 0x26
 800155c:	f000 f9a5 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	37b0      	adds	r7, #176	@ 0xb0
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40004400 	.word	0x40004400
 800156c:	40021000 	.word	0x40021000

08001570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001574:	f7ff ff56 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	@ (80015b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	@ (80015bc <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f007 fcdf 	bl	8008f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a2:	f7ff fa69 	bl	8000a78 <main>

080015a6 <LoopForever>:

LoopForever:
    b LoopForever
 80015a6:	e7fe      	b.n	80015a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015b4:	08009f3c 	.word	0x08009f3c
  ldr r2, =_sbss
 80015b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015bc:	2000161c 	.word	0x2000161c

080015c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_2_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <HAL_Init+0x3c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <HAL_Init+0x3c>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015da:	2003      	movs	r0, #3
 80015dc:	f000 f93e 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e0:	200f      	movs	r0, #15
 80015e2:	f000 f80f 	bl	8001604 <HAL_InitTick>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	e001      	b.n	80015f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f2:	f7ff fded 	bl	80011d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40022000 	.word	0x40022000

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001610:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <HAL_InitTick+0x6c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d023      	beq.n	8001660 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <HAL_InitTick+0x70>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_InitTick+0x6c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f949 	bl	80018c6 <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d809      	bhi.n	8001654 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f913 	bl	8001872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164c:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_InitTick+0x74>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e007      	b.n	8001664 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e004      	b.n	8001664 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e001      	b.n	8001664 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	20000000 	.word	0x20000000
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008
 80016a0:	200007c0 	.word	0x200007c0

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200007c0 	.word	0x200007c0

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ee:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	2b00      	cmp	r3, #0
 8001730:	db0b      	blt.n	800174a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	f003 021f 	and.w	r2, r3, #31
 8001738:	4907      	ldr	r1, [pc, #28]	@ (8001758 <__NVIC_EnableIRQ+0x38>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	2001      	movs	r0, #1
 8001742:	fa00 f202 	lsl.w	r2, r0, r2
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db0a      	blt.n	8001786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	@ (80017a8 <__NVIC_SetPriority+0x4c>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	440b      	add	r3, r1
 8001780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001784:	e00a      	b.n	800179c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4908      	ldr	r1, [pc, #32]	@ (80017ac <__NVIC_SetPriority+0x50>)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3b04      	subs	r3, #4
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	440b      	add	r3, r1
 800179a:	761a      	strb	r2, [r3, #24]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f1c3 0307 	rsb	r3, r3, #7
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf28      	it	cs
 80017ce:	2304      	movcs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3304      	adds	r3, #4
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d902      	bls.n	80017e0 <NVIC_EncodePriority+0x30>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3b03      	subs	r3, #3
 80017de:	e000      	b.n	80017e2 <NVIC_EncodePriority+0x32>
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	401a      	ands	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43d9      	mvns	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	4313      	orrs	r3, r2
         );
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	@ 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f7ff ff8e 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff29 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff3e 	bl	8001704 <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff8e 	bl	80017b0 <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff5d 	bl	800175c <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff31 	bl	8001720 <__NVIC_EnableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffa2 	bl	8001818 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e098      	b.n	8001a24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a30 <HAL_DMA_Init+0x150>)
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d80f      	bhi.n	800191e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <HAL_DMA_Init+0x154>)
 8001906:	4413      	add	r3, r2
 8001908:	4a4b      	ldr	r2, [pc, #300]	@ (8001a38 <HAL_DMA_Init+0x158>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	009a      	lsls	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a48      	ldr	r2, [pc, #288]	@ (8001a3c <HAL_DMA_Init+0x15c>)
 800191a:	641a      	str	r2, [r3, #64]	@ 0x40
 800191c:	e00e      	b.n	800193c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	4b46      	ldr	r3, [pc, #280]	@ (8001a40 <HAL_DMA_Init+0x160>)
 8001926:	4413      	add	r3, r2
 8001928:	4a43      	ldr	r2, [pc, #268]	@ (8001a38 <HAL_DMA_Init+0x158>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	009a      	lsls	r2, r3, #2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a42      	ldr	r2, [pc, #264]	@ (8001a44 <HAL_DMA_Init+0x164>)
 800193a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001996:	d039      	beq.n	8001a0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	4a27      	ldr	r2, [pc, #156]	@ (8001a3c <HAL_DMA_Init+0x15c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11a      	bne.n	80019d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019a2:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <HAL_DMA_Init+0x168>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f003 031c 	and.w	r3, r3, #28
 80019ae:	210f      	movs	r1, #15
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4924      	ldr	r1, [pc, #144]	@ (8001a48 <HAL_DMA_Init+0x168>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <HAL_DMA_Init+0x168>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	f003 031c 	and.w	r3, r3, #28
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	491d      	ldr	r1, [pc, #116]	@ (8001a48 <HAL_DMA_Init+0x168>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
 80019d6:	e019      	b.n	8001a0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <HAL_DMA_Init+0x16c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e0:	f003 031c 	and.w	r3, r3, #28
 80019e4:	210f      	movs	r1, #15
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	4917      	ldr	r1, [pc, #92]	@ (8001a4c <HAL_DMA_Init+0x16c>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_DMA_Init+0x16c>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6859      	ldr	r1, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f003 031c 	and.w	r3, r3, #28
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	4911      	ldr	r1, [pc, #68]	@ (8001a4c <HAL_DMA_Init+0x16c>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40020407 	.word	0x40020407
 8001a34:	bffdfff8 	.word	0xbffdfff8
 8001a38:	cccccccd 	.word	0xcccccccd
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	bffdfbf8 	.word	0xbffdfbf8
 8001a44:	40020400 	.word	0x40020400
 8001a48:	400200a8 	.word	0x400200a8
 8001a4c:	400204a8 	.word	0x400204a8

08001a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_DMA_Start_IT+0x20>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e04b      	b.n	8001b08 <HAL_DMA_Start_IT+0xb8>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d13a      	bne.n	8001afa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f95f 	bl	8001d6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 020e 	orr.w	r2, r2, #14
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e00f      	b.n	8001ae8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 020a 	orr.w	r2, r2, #10
 8001ae6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e005      	b.n	8001b06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
 8001b04:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d008      	beq.n	8001b3a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e022      	b.n	8001b80 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 020e 	bic.w	r2, r2, #14
 8001b48:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f003 021c 	and.w	r2, r3, #28
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d005      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e029      	b.n	8001c04 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 020e 	bic.w	r2, r2, #14
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	f003 021c 	and.w	r2, r3, #28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
    }
  }
  return status;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f003 031c 	and.w	r3, r3, #28
 8001c2e:	2204      	movs	r2, #4
 8001c30:	409a      	lsls	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d026      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x7a>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d021      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0204 	bic.w	r2, r2, #4
 8001c60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f003 021c 	and.w	r2, r3, #28
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2104      	movs	r1, #4
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d071      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c86:	e06c      	b.n	8001d62 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	f003 031c 	and.w	r3, r3, #28
 8001c90:	2202      	movs	r2, #2
 8001c92:	409a      	lsls	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d02e      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xec>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d029      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10b      	bne.n	8001ccc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 020a 	bic.w	r2, r2, #10
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd0:	f003 021c 	and.w	r2, r3, #28
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	2102      	movs	r1, #2
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d038      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001cf8:	e033      	b.n	8001d62 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f003 031c 	and.w	r3, r3, #28
 8001d02:	2208      	movs	r2, #8
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d02a      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x156>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d025      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 020e 	bic.w	r2, r2, #14
 8001d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	f003 021c 	and.w	r2, r3, #28
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
}
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f003 021c 	and.w	r2, r3, #28
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d108      	bne.n	8001db0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dae:	e007      	b.n	8001dc0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	60da      	str	r2, [r3, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e17f      	b.n	80020dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8171 	beq.w	80020d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d005      	beq.n	8001e0c <HAL_GPIO_Init+0x40>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d130      	bne.n	8001e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e42:	2201      	movs	r2, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 0201 	and.w	r2, r3, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d118      	bne.n	8001eac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e80:	2201      	movs	r2, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	f003 0201 	and.w	r2, r3, #1
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d017      	beq.n	8001ee8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d123      	bne.n	8001f3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	6939      	ldr	r1, [r7, #16]
 8001f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80ac 	beq.w	80020d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80020fc <HAL_GPIO_Init+0x330>)
 8001f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f82:	4a5e      	ldr	r2, [pc, #376]	@ (80020fc <HAL_GPIO_Init+0x330>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80020fc <HAL_GPIO_Init+0x330>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f96:	4a5a      	ldr	r2, [pc, #360]	@ (8002100 <HAL_GPIO_Init+0x334>)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fc0:	d025      	beq.n	800200e <HAL_GPIO_Init+0x242>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8002104 <HAL_GPIO_Init+0x338>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01f      	beq.n	800200a <HAL_GPIO_Init+0x23e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4e      	ldr	r2, [pc, #312]	@ (8002108 <HAL_GPIO_Init+0x33c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_Init+0x23a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800210c <HAL_GPIO_Init+0x340>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0x236>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4c      	ldr	r2, [pc, #304]	@ (8002110 <HAL_GPIO_Init+0x344>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_Init+0x232>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4b      	ldr	r2, [pc, #300]	@ (8002114 <HAL_GPIO_Init+0x348>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x22e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4a      	ldr	r2, [pc, #296]	@ (8002118 <HAL_GPIO_Init+0x34c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_Init+0x22a>
 8001ff2:	2306      	movs	r3, #6
 8001ff4:	e00c      	b.n	8002010 <HAL_GPIO_Init+0x244>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e00a      	b.n	8002010 <HAL_GPIO_Init+0x244>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e008      	b.n	8002010 <HAL_GPIO_Init+0x244>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x244>
 8002002:	2303      	movs	r3, #3
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x244>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x244>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x244>
 800200e:	2300      	movs	r3, #0
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4093      	lsls	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002020:	4937      	ldr	r1, [pc, #220]	@ (8002100 <HAL_GPIO_Init+0x334>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800202e:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_GPIO_Init+0x350>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002052:	4a32      	ldr	r2, [pc, #200]	@ (800211c <HAL_GPIO_Init+0x350>)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002058:	4b30      	ldr	r3, [pc, #192]	@ (800211c <HAL_GPIO_Init+0x350>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800207c:	4a27      	ldr	r2, [pc, #156]	@ (800211c <HAL_GPIO_Init+0x350>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002082:	4b26      	ldr	r3, [pc, #152]	@ (800211c <HAL_GPIO_Init+0x350>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a6:	4a1d      	ldr	r2, [pc, #116]	@ (800211c <HAL_GPIO_Init+0x350>)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <HAL_GPIO_Init+0x350>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020d0:	4a12      	ldr	r2, [pc, #72]	@ (800211c <HAL_GPIO_Init+0x350>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f47f ae78 	bne.w	8001ddc <HAL_GPIO_Init+0x10>
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000
 8002104:	48000400 	.word	0x48000400
 8002108:	48000800 	.word	0x48000800
 800210c:	48000c00 	.word	0x48000c00
 8002110:	48001000 	.word	0x48001000
 8002114:	48001400 	.word	0x48001400
 8002118:	48001800 	.word	0x48001800
 800211c:	40010400 	.word	0x40010400

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800213c:	e002      	b.n	8002144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e08d      	b.n	800227e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fb12 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	@ 0x24
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e006      	b.n	80021d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d108      	bne.n	80021f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	e007      	b.n	8002202 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	460b      	mov	r3, r1
 800229c:	813b      	strh	r3, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	f040 80f9 	bne.w	80024a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_I2C_Mem_Write+0x34>
 80022b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d105      	bne.n	80022c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0ed      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Mem_Write+0x4e>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e0e6      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022de:	f7ff f9e1 	bl	80016a4 <HAL_GetTick>
 80022e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2319      	movs	r3, #25
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fbbb 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0d1      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2221      	movs	r2, #33	@ 0x21
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	@ 0x40
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a3a      	ldr	r2, [r7, #32]
 800231a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002328:	88f8      	ldrh	r0, [r7, #6]
 800232a:	893a      	ldrh	r2, [r7, #8]
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4603      	mov	r3, r0
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 facb 	bl	80028d4 <I2C_RequestMemoryWrite>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0a9      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2bff      	cmp	r3, #255	@ 0xff
 8002358:	d90e      	bls.n	8002378 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22ff      	movs	r2, #255	@ 0xff
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002364:	b2da      	uxtb	r2, r3
 8002366:	8979      	ldrh	r1, [r7, #10]
 8002368:	2300      	movs	r3, #0
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fd3f 	bl	8002df4 <I2C_TransferConfig>
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	2300      	movs	r3, #0
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fd2e 	bl	8002df4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fbbe 	bl	8002b1e <I2C_WaitOnTXISFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e07b      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d034      	beq.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d130      	bne.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	@ 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fb37 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e04d      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2bff      	cmp	r3, #255	@ 0xff
 8002410:	d90e      	bls.n	8002430 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	22ff      	movs	r2, #255	@ 0xff
 8002416:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fce3 	bl	8002df4 <I2C_TransferConfig>
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fcd2 	bl	8002df4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d19e      	bne.n	8002398 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fba4 	bl	8002bac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e01a      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2220      	movs	r2, #32
 8002474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_I2C_Mem_Write+0x224>)
 8002482:	400b      	ands	r3, r1
 8002484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	fe00e800 	.word	0xfe00e800

080024b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	817b      	strh	r3, [r7, #10]
 80024c2:	460b      	mov	r3, r1
 80024c4:	813b      	strh	r3, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	f040 80fd 	bne.w	80026d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x34>
 80024de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0f1      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_I2C_Mem_Read+0x4e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0ea      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002506:	f7ff f8cd 	bl	80016a4 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 faa7 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0d5      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2222      	movs	r2, #34	@ 0x22
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2240      	movs	r2, #64	@ 0x40
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002548:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002550:	88f8      	ldrh	r0, [r7, #6]
 8002552:	893a      	ldrh	r2, [r7, #8]
 8002554:	8979      	ldrh	r1, [r7, #10]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4603      	mov	r3, r0
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa0b 	bl	800297c <I2C_RequestMemoryRead>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0ad      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2bff      	cmp	r3, #255	@ 0xff
 8002580:	d90e      	bls.n	80025a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	4b52      	ldr	r3, [pc, #328]	@ (80026dc <HAL_I2C_Mem_Read+0x22c>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fc2b 	bl	8002df4 <I2C_TransferConfig>
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <HAL_I2C_Mem_Read+0x22c>)
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fc1a 	bl	8002df4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c6:	2200      	movs	r2, #0
 80025c8:	2104      	movs	r1, #4
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa4e 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07c      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d034      	beq.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d130      	bne.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	2200      	movs	r2, #0
 8002626:	2180      	movs	r1, #128	@ 0x80
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fa1f 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e04d      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2bff      	cmp	r3, #255	@ 0xff
 8002640:	d90e      	bls.n	8002660 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fbcb 	bl	8002df4 <I2C_TransferConfig>
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fbba 	bl	8002df4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d19a      	bne.n	80025c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa8c 	bl	8002bac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e01a      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2220      	movs	r2, #32
 80026a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_I2C_Mem_Read+0x230>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	80002400 	.word	0x80002400
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	460b      	mov	r3, r1
 80026f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b20      	cmp	r3, #32
 8002702:	f040 80d6 	bne.w	80028b2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002714:	d101      	bne.n	800271a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002716:	2302      	movs	r3, #2
 8002718:	e0cc      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_I2C_IsDeviceReady+0x44>
 8002724:	2302      	movs	r3, #2
 8002726:	e0c5      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x1d0>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2224      	movs	r2, #36	@ 0x24
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_I2C_IsDeviceReady+0x72>
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002750:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002754:	e006      	b.n	8002764 <HAL_I2C_IsDeviceReady+0x80>
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002760:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800276a:	f7fe ff9b 	bl	80016a4 <HAL_GetTick>
 800276e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b20      	cmp	r3, #32
 800277c:	bf0c      	ite	eq
 800277e:	2301      	moveq	r3, #1
 8002780:	2300      	movne	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b10      	cmp	r3, #16
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800279c:	e034      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d01a      	beq.n	80027dc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7fe ff7d 	bl	80016a4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <HAL_I2C_IsDeviceReady+0xd8>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10f      	bne.n	80027dc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e06b      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002808:	7ffb      	ldrb	r3, [r7, #31]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_I2C_IsDeviceReady+0x130>
 800280e:	7fbb      	ldrb	r3, [r7, #30]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0c4      	beq.n	800279e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d01a      	beq.n	8002858 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	2120      	movs	r1, #32
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f91d 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e03b      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2220      	movs	r2, #32
 8002842:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e02d      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2200      	movs	r2, #0
 8002860:	2120      	movs	r1, #32
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f902 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e020      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2210      	movs	r2, #16
 8002878:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2220      	movs	r2, #32
 8002880:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	f63f af56 	bhi.w	800273e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	817b      	strh	r3, [r7, #10]
 80028e6:	460b      	mov	r3, r1
 80028e8:	813b      	strh	r3, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <I2C_RequestMemoryWrite+0xa4>)
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fa79 	bl	8002df4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	69b9      	ldr	r1, [r7, #24]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f909 	bl	8002b1e <I2C_WaitOnTXISFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e02c      	b.n	8002970 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	629a      	str	r2, [r3, #40]	@ 0x28
 8002926:	e015      	b.n	8002954 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	69b9      	ldr	r1, [r7, #24]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f8ef 	bl	8002b1e <I2C_WaitOnTXISFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e012      	b.n	8002970 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800294a:	893b      	ldrh	r3, [r7, #8]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2200      	movs	r2, #0
 800295c:	2180      	movs	r1, #128	@ 0x80
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f884 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	80002000 	.word	0x80002000

0800297c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	8979      	ldrh	r1, [r7, #10]
 800299c:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <I2C_RequestMemoryRead+0xa4>)
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2300      	movs	r3, #0
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fa26 	bl	8002df4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	69b9      	ldr	r1, [r7, #24]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f8b6 	bl	8002b1e <I2C_WaitOnTXISFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e02c      	b.n	8002a16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d105      	bne.n	80029ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c2:	893b      	ldrh	r3, [r7, #8]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80029cc:	e015      	b.n	80029fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029ce:	893b      	ldrh	r3, [r7, #8]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f89c 	bl	8002b1e <I2C_WaitOnTXISFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e012      	b.n	8002a16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2140      	movs	r1, #64	@ 0x40
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f831 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	80002000 	.word	0x80002000

08002a24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d103      	bne.n	8002a42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d007      	beq.n	8002a60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	619a      	str	r2, [r3, #24]
  }
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7c:	e03b      	b.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f8d6 	bl	8002c34 <I2C_IsErrorOccurred>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e041      	b.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d02d      	beq.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7fe fe03 	bl	80016a4 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d122      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d113      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f043 0220 	orr.w	r2, r3, #32
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d0b4      	beq.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b2a:	e033      	b.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f87f 	bl	8002c34 <I2C_IsErrorOccurred>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e031      	b.n	8002ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d025      	beq.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe fdac 	bl	80016a4 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11a      	bne.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d013      	beq.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e007      	b.n	8002ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d1c4      	bne.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb8:	e02f      	b.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f838 	bl	8002c34 <I2C_IsErrorOccurred>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e02d      	b.n	8002c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fe fd69 	bl	80016a4 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11a      	bne.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d013      	beq.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e007      	b.n	8002c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d1c8      	bne.n	8002bba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	@ 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d068      	beq.n	8002d32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2210      	movs	r2, #16
 8002c66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c68:	e049      	b.n	8002cfe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d045      	beq.n	8002cfe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7fe fd17 	bl	80016a4 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_IsErrorOccurred+0x54>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d13a      	bne.n	8002cfe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002caa:	d121      	bne.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cb2:	d01d      	beq.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d01a      	beq.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cca:	f7fe fceb 	bl	80016a4 <HAL_GetTick>
 8002cce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	e00e      	b.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cd2:	f7fe fce7 	bl	80016a4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b19      	cmp	r3, #25
 8002cde:	d907      	bls.n	8002cf0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f043 0320 	orr.w	r3, r3, #32
 8002ce6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002cee:	e006      	b.n	8002cfe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d1e9      	bne.n	8002cd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d003      	beq.n	8002d14 <I2C_IsErrorOccurred+0xe0>
 8002d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0aa      	beq.n	8002c6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2220      	movs	r2, #32
 8002d22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01c      	beq.n	8002de2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fe3b 	bl	8002a24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b0d      	ldr	r3, [pc, #52]	@ (8002df0 <I2C_IsErrorOccurred+0x1bc>)
 8002dba:	400b      	ands	r3, r1
 8002dbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002de2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3728      	adds	r7, #40	@ 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	fe00e800 	.word	0xfe00e800

08002df4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	4613      	mov	r3, r2
 8002e04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e0c:	7a7b      	ldrb	r3, [r7, #9]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	0d5b      	lsrs	r3, r3, #21
 8002e2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <I2C_TransferConfig+0x60>)
 8002e34:	430b      	orrs	r3, r1
 8002e36:	43db      	mvns	r3, r3
 8002e38:	ea02 0103 	and.w	r1, r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	03ff63ff 	.word	0x03ff63ff

08002e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d138      	bne.n	8002ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e032      	b.n	8002ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	@ 0x24
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d139      	bne.n	8002f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e033      	b.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	@ 0x24
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40007000 	.word	0x40007000

08002fa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb2:	d130      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb4:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc0:	d038      	beq.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fca:	4a1e      	ldr	r2, [pc, #120]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2232      	movs	r2, #50	@ 0x32
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800304c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0c9b      	lsrs	r3, r3, #18
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe8:	e002      	b.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff0:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffc:	d102      	bne.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f2      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003004:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003010:	d110      	bne.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e00f      	b.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003022:	d007      	beq.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003024:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800302c:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003032:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40007000 	.word	0x40007000
 8003048:	20000000 	.word	0x20000000
 800304c:	431bde83 	.word	0x431bde83

08003050 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e3ca      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003062:	4b97      	ldr	r3, [pc, #604]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800306c:	4b94      	ldr	r3, [pc, #592]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80e4 	beq.w	800324c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_RCC_OscConfig+0x4a>
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	f040 808b 	bne.w	80031a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b01      	cmp	r3, #1
 8003096:	f040 8087 	bne.w	80031a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309a:	4b89      	ldr	r3, [pc, #548]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_RCC_OscConfig+0x62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e3a2      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1a      	ldr	r2, [r3, #32]
 80030b6:	4b82      	ldr	r3, [pc, #520]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <HAL_RCC_OscConfig+0x7c>
 80030c2:	4b7f      	ldr	r3, [pc, #508]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ca:	e005      	b.n	80030d8 <HAL_RCC_OscConfig+0x88>
 80030cc:	4b7c      	ldr	r3, [pc, #496]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d8:	4293      	cmp	r3, r2
 80030da:	d223      	bcs.n	8003124 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fd55 	bl	8003b90 <RCC_SetFlashLatencyFromMSIRange>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e383      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f0:	4b73      	ldr	r3, [pc, #460]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a72      	ldr	r2, [pc, #456]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030f6:	f043 0308 	orr.w	r3, r3, #8
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b70      	ldr	r3, [pc, #448]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	496d      	ldr	r1, [pc, #436]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800310e:	4b6c      	ldr	r3, [pc, #432]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	4968      	ldr	r1, [pc, #416]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
 8003122:	e025      	b.n	8003170 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003124:	4b66      	ldr	r3, [pc, #408]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b63      	ldr	r3, [pc, #396]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4960      	ldr	r1, [pc, #384]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003142:	4b5f      	ldr	r3, [pc, #380]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	495b      	ldr	r1, [pc, #364]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fd15 	bl	8003b90 <RCC_SetFlashLatencyFromMSIRange>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e343      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003170:	f000 fc4a 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b52      	ldr	r3, [pc, #328]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	4950      	ldr	r1, [pc, #320]	@ (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	4a4e      	ldr	r2, [pc, #312]	@ (80032c8 <HAL_RCC_OscConfig+0x278>)
 800318e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003190:	4b4e      	ldr	r3, [pc, #312]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe fa35 	bl	8001604 <HAL_InitTick>
 800319a:	4603      	mov	r3, r0
 800319c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d052      	beq.n	800324a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	e327      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d032      	beq.n	8003216 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031b0:	4b43      	ldr	r3, [pc, #268]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a42      	ldr	r2, [pc, #264]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fa72 	bl	80016a4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c4:	f7fe fa6e 	bl	80016a4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e310      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d6:	4b3a      	ldr	r3, [pc, #232]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e2:	4b37      	ldr	r3, [pc, #220]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a36      	ldr	r2, [pc, #216]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031e8:	f043 0308 	orr.w	r3, r3, #8
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b34      	ldr	r3, [pc, #208]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4931      	ldr	r1, [pc, #196]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003200:	4b2f      	ldr	r3, [pc, #188]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	492c      	ldr	r1, [pc, #176]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	e01a      	b.n	800324c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003216:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a29      	ldr	r2, [pc, #164]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003222:	f7fe fa3f 	bl	80016a4 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800322a:	f7fe fa3b 	bl	80016a4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e2dd      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800323c:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x1da>
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800324a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d074      	beq.n	8003342 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d005      	beq.n	800326a <HAL_RCC_OscConfig+0x21a>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d10e      	bne.n	8003282 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d10b      	bne.n	8003282 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326a:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d064      	beq.n	8003340 <HAL_RCC_OscConfig+0x2f0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d160      	bne.n	8003340 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e2ba      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x24a>
 800328c:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0b      	ldr	r2, [pc, #44]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e026      	b.n	80032e8 <HAL_RCC_OscConfig+0x298>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a2:	d115      	bne.n	80032d0 <HAL_RCC_OscConfig+0x280>
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a05      	ldr	r2, [pc, #20]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b03      	ldr	r3, [pc, #12]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a02      	ldr	r2, [pc, #8]	@ (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	e014      	b.n	80032e8 <HAL_RCC_OscConfig+0x298>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08009eb0 	.word	0x08009eb0
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004
 80032d0:	4ba0      	ldr	r3, [pc, #640]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a9c      	ldr	r2, [pc, #624]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80032e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe f9d8 	bl	80016a4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fe f9d4 	bl	80016a4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	@ 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e276      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330a:	4b92      	ldr	r3, [pc, #584]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x2a8>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe f9c4 	bl	80016a4 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7fe f9c0 	bl	80016a4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	@ 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e262      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003332:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x2d0>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d060      	beq.n	8003410 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x310>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d119      	bne.n	800338e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d116      	bne.n	800338e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003360:	4b7c      	ldr	r3, [pc, #496]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_OscConfig+0x328>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e23f      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003378:	4b76      	ldr	r3, [pc, #472]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	4973      	ldr	r1, [pc, #460]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338c:	e040      	b.n	8003410 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d023      	beq.n	80033de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003396:	4b6f      	ldr	r3, [pc, #444]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6e      	ldr	r2, [pc, #440]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fe f97f 	bl	80016a4 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fe f97b 	bl	80016a4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e21d      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033bc:	4b65      	ldr	r3, [pc, #404]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b62      	ldr	r3, [pc, #392]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	495f      	ldr	r1, [pc, #380]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	e018      	b.n	8003410 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b5d      	ldr	r3, [pc, #372]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe f95b 	bl	80016a4 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fe f957 	bl	80016a4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1f9      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003404:	4b53      	ldr	r3, [pc, #332]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03c      	beq.n	8003496 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01c      	beq.n	800345e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003424:	4b4b      	ldr	r3, [pc, #300]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342a:	4a4a      	ldr	r2, [pc, #296]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe f936 	bl	80016a4 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343c:	f7fe f932 	bl	80016a4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1d4      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800344e:	4b41      	ldr	r3, [pc, #260]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ef      	beq.n	800343c <HAL_RCC_OscConfig+0x3ec>
 800345c:	e01b      	b.n	8003496 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345e:	4b3d      	ldr	r3, [pc, #244]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003464:	4a3b      	ldr	r2, [pc, #236]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7fe f919 	bl	80016a4 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003476:	f7fe f915 	bl	80016a4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1b7      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003488:	4b32      	ldr	r3, [pc, #200]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800348a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ef      	bne.n	8003476 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a6 	beq.w	80035f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b27      	ldr	r3, [pc, #156]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	4a26      	ldr	r2, [pc, #152]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	@ 0x58
 80034c0:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d0:	4b21      	ldr	r3, [pc, #132]	@ (8003558 <HAL_RCC_OscConfig+0x508>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d118      	bne.n	800350e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <HAL_RCC_OscConfig+0x508>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <HAL_RCC_OscConfig+0x508>)
 80034e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e8:	f7fe f8dc 	bl	80016a4 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f0:	f7fe f8d8 	bl	80016a4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e17a      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_RCC_OscConfig+0x508>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d108      	bne.n	8003528 <HAL_RCC_OscConfig+0x4d8>
 8003516:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003526:	e029      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d115      	bne.n	800355c <HAL_RCC_OscConfig+0x50c>
 8003530:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a07      	ldr	r2, [pc, #28]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003540:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	4a03      	ldr	r2, [pc, #12]	@ (8003554 <HAL_RCC_OscConfig+0x504>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003550:	e014      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
 800355c:	4b9c      	ldr	r3, [pc, #624]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	4a9b      	ldr	r2, [pc, #620]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800356c:	4b98      	ldr	r3, [pc, #608]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003572:	4a97      	ldr	r2, [pc, #604]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d016      	beq.n	80035b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe f88e 	bl	80016a4 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fe f88a 	bl	80016a4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e12a      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a2:	4b8b      	ldr	r3, [pc, #556]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ed      	beq.n	800358c <HAL_RCC_OscConfig+0x53c>
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fe f877 	bl	80016a4 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe f873 	bl	80016a4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e113      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d0:	4b7f      	ldr	r3, [pc, #508]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ed      	bne.n	80035ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4b7a      	ldr	r3, [pc, #488]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	4a79      	ldr	r2, [pc, #484]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80fe 	beq.w	80037f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	2b02      	cmp	r3, #2
 8003600:	f040 80d0 	bne.w	80037a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003604:	4b72      	ldr	r3, [pc, #456]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0203 	and.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003614:	429a      	cmp	r2, r3
 8003616:	d130      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	3b01      	subs	r3, #1
 8003624:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d127      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003634:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d11f      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003644:	2a07      	cmp	r2, #7
 8003646:	bf14      	ite	ne
 8003648:	2201      	movne	r2, #1
 800364a:	2200      	moveq	r2, #0
 800364c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800364e:	4293      	cmp	r3, r2
 8003650:	d113      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	3b01      	subs	r3, #1
 8003660:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d109      	bne.n	800367a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d06e      	beq.n	8003758 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b0c      	cmp	r3, #12
 800367e:	d069      	beq.n	8003754 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003680:	4b53      	ldr	r3, [pc, #332]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800368c:	4b50      	ldr	r3, [pc, #320]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0ad      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800369c:	4b4c      	ldr	r3, [pc, #304]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4b      	ldr	r2, [pc, #300]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036a8:	f7fd fffc 	bl	80016a4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fd fff8 	bl	80016a4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e09a      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c2:	4b43      	ldr	r3, [pc, #268]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ce:	4b40      	ldr	r3, [pc, #256]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4b40      	ldr	r3, [pc, #256]	@ (80037d4 <HAL_RCC_OscConfig+0x784>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036de:	3a01      	subs	r2, #1
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036e8:	0212      	lsls	r2, r2, #8
 80036ea:	4311      	orrs	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036f0:	0852      	lsrs	r2, r2, #1
 80036f2:	3a01      	subs	r2, #1
 80036f4:	0552      	lsls	r2, r2, #21
 80036f6:	4311      	orrs	r1, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036fc:	0852      	lsrs	r2, r2, #1
 80036fe:	3a01      	subs	r2, #1
 8003700:	0652      	lsls	r2, r2, #25
 8003702:	4311      	orrs	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003708:	0912      	lsrs	r2, r2, #4
 800370a:	0452      	lsls	r2, r2, #17
 800370c:	430a      	orrs	r2, r1
 800370e:	4930      	ldr	r1, [pc, #192]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003710:	4313      	orrs	r3, r2
 8003712:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003714:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2d      	ldr	r2, [pc, #180]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003720:	4b2b      	ldr	r3, [pc, #172]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a2a      	ldr	r2, [pc, #168]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800372a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800372c:	f7fd ffba 	bl	80016a4 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fd ffb6 	bl	80016a4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e058      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b22      	ldr	r3, [pc, #136]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003752:	e050      	b.n	80037f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e04f      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003758:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d148      	bne.n	80037f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003764:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003770:	4b17      	ldr	r3, [pc, #92]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800377c:	f7fd ff92 	bl	80016a4 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd ff8e 	bl	80016a4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e030      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	4b0e      	ldr	r3, [pc, #56]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x734>
 80037a2:	e028      	b.n	80037f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d023      	beq.n	80037f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a08      	ldr	r2, [pc, #32]	@ (80037d0 <HAL_RCC_OscConfig+0x780>)
 80037b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fd ff75 	bl	80016a4 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037bc:	e00c      	b.n	80037d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd ff71 	bl	80016a4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d905      	bls.n	80037d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e013      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
 80037d0:	40021000 	.word	0x40021000
 80037d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCC_OscConfig+0x7b0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ec      	bne.n	80037be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <HAL_RCC_OscConfig+0x7b0>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4905      	ldr	r1, [pc, #20]	@ (8003800 <HAL_RCC_OscConfig+0x7b0>)
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCC_OscConfig+0x7b4>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
 80037f0:	e001      	b.n	80037f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	feeefffc 	.word	0xfeeefffc

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0e7      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b75      	ldr	r3, [pc, #468]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d910      	bls.n	800384c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b72      	ldr	r3, [pc, #456]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4970      	ldr	r1, [pc, #448]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b6e      	ldr	r3, [pc, #440]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cf      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	4b66      	ldr	r3, [pc, #408]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003864:	429a      	cmp	r2, r3
 8003866:	d908      	bls.n	800387a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b63      	ldr	r3, [pc, #396]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4960      	ldr	r1, [pc, #384]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d04c      	beq.n	8003920 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	4b5a      	ldr	r3, [pc, #360]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d121      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0a6      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a6:	4b54      	ldr	r3, [pc, #336]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e09a      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038be:	4b4e      	ldr	r3, [pc, #312]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e08e      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ce:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e086      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038de:	4b46      	ldr	r3, [pc, #280]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4943      	ldr	r1, [pc, #268]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fd fed8 	bl	80016a4 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fd fed4 	bl	80016a4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e06e      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b3a      	ldr	r3, [pc, #232]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 020c 	and.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1eb      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003938:	429a      	cmp	r2, r3
 800393a:	d208      	bcs.n	800394e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b2e      	ldr	r3, [pc, #184]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	492b      	ldr	r1, [pc, #172]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800394e:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d210      	bcs.n	800397e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395c:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 0207 	bic.w	r2, r3, #7
 8003964:	4923      	ldr	r1, [pc, #140]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396c:	4b21      	ldr	r3, [pc, #132]	@ (80039f4 <HAL_RCC_ClockConfig+0x1ec>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e036      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	4918      	ldr	r1, [pc, #96]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a8:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4910      	ldr	r1, [pc, #64]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039bc:	f000 f824 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	490b      	ldr	r1, [pc, #44]	@ (80039fc <HAL_RCC_ClockConfig+0x1f4>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
 80039d8:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <HAL_RCC_ClockConfig+0x1f8>)
 80039da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <HAL_RCC_ClockConfig+0x1fc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd fe0f 	bl	8001604 <HAL_InitTick>
 80039e6:	4603      	mov	r3, r0
 80039e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80039ea:	7afb      	ldrb	r3, [r7, #11]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08009eb0 	.word	0x08009eb0
 8003a00:	20000000 	.word	0x20000000
 8003a04:	20000004 	.word	0x20000004

08003a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	@ 0x24
 8003a0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a16:	4b3e      	ldr	r3, [pc, #248]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a20:	4b3b      	ldr	r3, [pc, #236]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x34>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d121      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d11e      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a3c:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a48:	4b31      	ldr	r3, [pc, #196]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e005      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a58:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a64:	4a2b      	ldr	r2, [pc, #172]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d102      	bne.n	8003a86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a80:	4b25      	ldr	r3, [pc, #148]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	e004      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a8c:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d134      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a96:	4b1e      	ldr	r3, [pc, #120]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0xa6>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d003      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xac>
 8003aac:	e005      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aae:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ab0:	617b      	str	r3, [r7, #20]
      break;
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ab4:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ab6:	617b      	str	r3, [r7, #20]
      break;
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	617b      	str	r3, [r7, #20]
      break;
 8003abe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac0:	4b13      	ldr	r3, [pc, #76]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	3301      	adds	r3, #1
 8003acc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ace:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	fb03 f202 	mul.w	r2, r3, r2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	0e5b      	lsrs	r3, r3, #25
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	3301      	adds	r3, #1
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b00:	69bb      	ldr	r3, [r7, #24]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3724      	adds	r7, #36	@ 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	08009ec8 	.word	0x08009ec8
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4904      	ldr	r1, [pc, #16]	@ (8003b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08009ec0 	.word	0x08009ec0

08003b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b68:	f7ff ffda 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0adb      	lsrs	r3, r3, #11
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4904      	ldr	r1, [pc, #16]	@ (8003b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	08009ec0 	.word	0x08009ec0

08003b90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ba8:	f7ff f9ee 	bl	8002f88 <HAL_PWREx_GetVoltageRange>
 8003bac:	6178      	str	r0, [r7, #20]
 8003bae:	e014      	b.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb0:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	4a24      	ldr	r2, [pc, #144]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bbc:	4b22      	ldr	r3, [pc, #136]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bc8:	f7ff f9de 	bl	8002f88 <HAL_PWREx_GetVoltageRange>
 8003bcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be0:	d10b      	bne.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	d919      	bls.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bec:	d902      	bls.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bee:	2302      	movs	r3, #2
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	e013      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	e010      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b80      	cmp	r3, #128	@ 0x80
 8003bfe:	d902      	bls.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c00:	2303      	movs	r3, #3
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e00a      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b80      	cmp	r3, #128	@ 0x80
 8003c0a:	d102      	bne.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e004      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b70      	cmp	r3, #112	@ 0x70
 8003c16:	d101      	bne.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c18:	2301      	movs	r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 0207 	bic.w	r2, r3, #7
 8003c24:	4909      	ldr	r1, [pc, #36]	@ (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c2c:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d001      	beq.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40022000 	.word	0x40022000

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d041      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c74:	d02a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c7a:	d824      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c86:	d81e      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c94:	4b86      	ldr	r3, [pc, #536]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a85      	ldr	r2, [pc, #532]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca0:	e015      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 f829 	bl	8004d00 <RCCEx_PLLSAI1_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f914 	bl	8004ee8 <RCCEx_PLLSAI2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd4:	4b76      	ldr	r3, [pc, #472]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ce2:	4973      	ldr	r1, [pc, #460]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d041      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d04:	d02a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d0a:	d824      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d10:	d008      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d16:	d81e      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d20:	d010      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d22:	e018      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d24:	4b62      	ldr	r3, [pc, #392]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a61      	ldr	r2, [pc, #388]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d30:	e015      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 ffe1 	bl	8004d00 <RCCEx_PLLSAI1_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d42:	e00c      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3320      	adds	r3, #32
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f8cc 	bl	8004ee8 <RCCEx_PLLSAI2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	74fb      	strb	r3, [r7, #19]
      break;
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d64:	4b52      	ldr	r3, [pc, #328]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d72:	494f      	ldr	r1, [pc, #316]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a0 	beq.w	8003ece <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d92:	4b47      	ldr	r3, [pc, #284]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	4b41      	ldr	r3, [pc, #260]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dac:	4a40      	ldr	r2, [pc, #256]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003db4:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd0:	f7fd fc68 	bl	80016a4 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd6:	e009      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd8:	f7fd fc64 	bl	80016a4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d902      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dea:	e005      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dec:	4b31      	ldr	r3, [pc, #196]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ef      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d15c      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01f      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d019      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e1c:	4b24      	ldr	r3, [pc, #144]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e28:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2e:	4a20      	ldr	r2, [pc, #128]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e38:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e48:	4a19      	ldr	r2, [pc, #100]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fc23 	bl	80016a4 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e60:	e00b      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fd fc1f 	bl	80016a4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d902      	bls.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	74fb      	strb	r3, [r7, #19]
            break;
 8003e78:	e006      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ec      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8e:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e9e:	4904      	ldr	r1, [pc, #16]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ea6:	e009      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebc:	7c7b      	ldrb	r3, [r7, #17]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d105      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec6:	4a9d      	ldr	r2, [pc, #628]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eda:	4b98      	ldr	r3, [pc, #608]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f023 0203 	bic.w	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	4994      	ldr	r1, [pc, #592]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003efc:	4b8f      	ldr	r3, [pc, #572]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f023 020c 	bic.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	498c      	ldr	r1, [pc, #560]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f1e:	4b87      	ldr	r3, [pc, #540]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	4983      	ldr	r1, [pc, #524]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f40:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	497b      	ldr	r1, [pc, #492]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f62:	4b76      	ldr	r3, [pc, #472]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	4972      	ldr	r1, [pc, #456]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f84:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f92:	496a      	ldr	r1, [pc, #424]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	4961      	ldr	r1, [pc, #388]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	4959      	ldr	r1, [pc, #356]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fea:	4b54      	ldr	r3, [pc, #336]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff8:	4950      	ldr	r1, [pc, #320]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800400c:	4b4b      	ldr	r3, [pc, #300]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401a:	4948      	ldr	r1, [pc, #288]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004034:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	493f      	ldr	r1, [pc, #252]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d028      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004050:	4b3a      	ldr	r3, [pc, #232]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004056:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800405e:	4937      	ldr	r1, [pc, #220]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800406a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800406e:	d106      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004070:	4b32      	ldr	r3, [pc, #200]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a31      	ldr	r2, [pc, #196]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800407a:	60d3      	str	r3, [r2, #12]
 800407c:	e011      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004082:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004086:	d10c      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fe36 	bl	8004d00 <RCCEx_PLLSAI1_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d028      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ae:	4b23      	ldr	r3, [pc, #140]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	491f      	ldr	r1, [pc, #124]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040cc:	d106      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d8:	60d3      	str	r3, [r2, #12]
 80040da:	e011      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fe07 	bl	8004d00 <RCCEx_PLLSAI1_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d02b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411a:	4908      	ldr	r1, [pc, #32]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412a:	d109      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412c:	4b03      	ldr	r3, [pc, #12]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a02      	ldr	r2, [pc, #8]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004136:	60d3      	str	r3, [r2, #12]
 8004138:	e014      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fdd5 	bl	8004d00 <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d02f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004170:	4b2b      	ldr	r3, [pc, #172]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800417e:	4928      	ldr	r1, [pc, #160]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800418a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800418e:	d10d      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fdb2 	bl	8004d00 <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d014      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
 80041aa:	e011      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3320      	adds	r3, #32
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fe93 	bl	8004ee8 <RCCEx_PLLSAI2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041dc:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ea:	490d      	ldr	r1, [pc, #52]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800420e:	4904      	ldr	r1, [pc, #16]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004216:	7cbb      	ldrb	r3, [r7, #18]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004236:	d13e      	bne.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004238:	4bb2      	ldr	r3, [pc, #712]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004242:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800424a:	d028      	beq.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004252:	f200 8542 	bhi.w	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800425c:	d005      	beq.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004264:	d00e      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004266:	f000 bd38 	b.w	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800426a:	4ba6      	ldr	r3, [pc, #664]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	f040 8532 	bne.w	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800427a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800427e:	61fb      	str	r3, [r7, #28]
      break;
 8004280:	f000 bd2d 	b.w	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004284:	4b9f      	ldr	r3, [pc, #636]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	f040 8527 	bne.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004294:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004298:	61fb      	str	r3, [r7, #28]
      break;
 800429a:	f000 bd22 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800429e:	4b99      	ldr	r3, [pc, #612]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042aa:	f040 851c 	bne.w	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80042ae:	4b96      	ldr	r3, [pc, #600]	@ (8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80042b0:	61fb      	str	r3, [r7, #28]
      break;
 80042b2:	f000 bd18 	b.w	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b6:	4b93      	ldr	r3, [pc, #588]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d036      	beq.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d840      	bhi.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d003      	beq.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d020      	beq.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80042d8:	e039      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80042da:	4b8a      	ldr	r3, [pc, #552]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d116      	bne.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80042e6:	4b87      	ldr	r3, [pc, #540]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80042f2:	4b84      	ldr	r3, [pc, #528]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	e005      	b.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80042fe:	4b81      	ldr	r3, [pc, #516]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	4a80      	ldr	r2, [pc, #512]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800430c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004310:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004312:	e01f      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
      break;
 8004318:	e01c      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800431a:	4b7a      	ldr	r3, [pc, #488]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004326:	d102      	bne.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004328:	4b79      	ldr	r3, [pc, #484]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800432a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800432c:	e012      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	61bb      	str	r3, [r7, #24]
      break;
 8004332:	e00f      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004334:	4b73      	ldr	r3, [pc, #460]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004340:	d102      	bne.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004342:	4b74      	ldr	r3, [pc, #464]	@ (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004344:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004346:	e005      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]
      break;
 800434c:	e002      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
      break;
 8004352:	bf00      	nop
    }

    switch(PeriphClk)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800435a:	f000 80dd 	beq.w	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004364:	f200 84c1 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800436e:	f000 80d3 	beq.w	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004378:	f200 84b7 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004382:	f000 835f 	beq.w	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438c:	f200 84ad 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004396:	f000 847e 	beq.w	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a0:	f200 84a3 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043aa:	f000 82cd 	beq.w	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043b4:	f200 8499 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043be:	f000 80ab 	beq.w	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043c8:	f200 848f 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d2:	f000 8090 	beq.w	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043dc:	f200 8485 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e6:	d07f      	beq.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ee:	f200 847c 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f8:	f000 8403 	beq.w	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004402:	f200 8472 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440c:	f000 83af 	beq.w	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004416:	f200 8468 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004420:	f000 8379 	beq.w	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442a:	f200 845e 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b80      	cmp	r3, #128	@ 0x80
 8004432:	f000 8344 	beq.w	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b80      	cmp	r3, #128	@ 0x80
 800443a:	f200 8456 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b20      	cmp	r3, #32
 8004442:	d84b      	bhi.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 844f 	beq.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3b01      	subs	r3, #1
 8004450:	2b1f      	cmp	r3, #31
 8004452:	f200 844a 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004456:	a201      	add	r2, pc, #4	@ (adr r2, 800445c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	08004645 	.word	0x08004645
 8004460:	080046b3 	.word	0x080046b3
 8004464:	08004ceb 	.word	0x08004ceb
 8004468:	08004747 	.word	0x08004747
 800446c:	08004ceb 	.word	0x08004ceb
 8004470:	08004ceb 	.word	0x08004ceb
 8004474:	08004ceb 	.word	0x08004ceb
 8004478:	080047cd 	.word	0x080047cd
 800447c:	08004ceb 	.word	0x08004ceb
 8004480:	08004ceb 	.word	0x08004ceb
 8004484:	08004ceb 	.word	0x08004ceb
 8004488:	08004ceb 	.word	0x08004ceb
 800448c:	08004ceb 	.word	0x08004ceb
 8004490:	08004ceb 	.word	0x08004ceb
 8004494:	08004ceb 	.word	0x08004ceb
 8004498:	08004845 	.word	0x08004845
 800449c:	08004ceb 	.word	0x08004ceb
 80044a0:	08004ceb 	.word	0x08004ceb
 80044a4:	08004ceb 	.word	0x08004ceb
 80044a8:	08004ceb 	.word	0x08004ceb
 80044ac:	08004ceb 	.word	0x08004ceb
 80044b0:	08004ceb 	.word	0x08004ceb
 80044b4:	08004ceb 	.word	0x08004ceb
 80044b8:	08004ceb 	.word	0x08004ceb
 80044bc:	08004ceb 	.word	0x08004ceb
 80044c0:	08004ceb 	.word	0x08004ceb
 80044c4:	08004ceb 	.word	0x08004ceb
 80044c8:	08004ceb 	.word	0x08004ceb
 80044cc:	08004ceb 	.word	0x08004ceb
 80044d0:	08004ceb 	.word	0x08004ceb
 80044d4:	08004ceb 	.word	0x08004ceb
 80044d8:	080048c7 	.word	0x080048c7
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b40      	cmp	r3, #64	@ 0x40
 80044e0:	f000 82c1 	beq.w	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80044e4:	f000 bc01 	b.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80044ee:	f000 fdd9 	bl	80050a4 <RCCEx_GetSAIxPeriphCLKFreq>
 80044f2:	61f8      	str	r0, [r7, #28]
      break;
 80044f4:	e3fa      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80044f6:	69b9      	ldr	r1, [r7, #24]
 80044f8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80044fc:	f000 fdd2 	bl	80050a4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004500:	61f8      	str	r0, [r7, #28]
      break;
 8004502:	e3f3      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004504:	40021000 	.word	0x40021000
 8004508:	0003d090 	.word	0x0003d090
 800450c:	08009ec8 	.word	0x08009ec8
 8004510:	00f42400 	.word	0x00f42400
 8004514:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004518:	4ba9      	ldr	r3, [pc, #676]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800452a:	d00c      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004532:	d87f      	bhi.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800453a:	d04e      	beq.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004542:	d01d      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004544:	e076      	b.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004546:	4b9e      	ldr	r3, [pc, #632]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d172      	bne.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004552:	4b9b      	ldr	r3, [pc, #620]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800455e:	4b98      	ldr	r3, [pc, #608]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	e005      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800456a:	4b95      	ldr	r3, [pc, #596]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800456c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	4a93      	ldr	r2, [pc, #588]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457c:	61fb      	str	r3, [r7, #28]
          break;
 800457e:	e05b      	b.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004580:	4b8f      	ldr	r3, [pc, #572]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800458c:	d156      	bne.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800458e:	4b8c      	ldr	r3, [pc, #560]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800459a:	d14f      	bne.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800459c:	4b88      	ldr	r3, [pc, #544]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045a6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	fb03 f202 	mul.w	r2, r3, r2
 80045b0:	4b83      	ldr	r3, [pc, #524]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	3301      	adds	r3, #1
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80045c2:	4b7f      	ldr	r3, [pc, #508]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	0d5b      	lsrs	r3, r3, #21
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	3301      	adds	r3, #1
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	61fb      	str	r3, [r7, #28]
          break;
 80045d8:	e030      	b.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80045da:	4b79      	ldr	r3, [pc, #484]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e6:	d12b      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80045e8:	4b75      	ldr	r3, [pc, #468]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f4:	d124      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80045f6:	4b72      	ldr	r3, [pc, #456]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004600:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	fb03 f202 	mul.w	r2, r3, r2
 800460a:	4b6d      	ldr	r3, [pc, #436]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	3301      	adds	r3, #1
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800461c:	4b68      	ldr	r3, [pc, #416]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	0d5b      	lsrs	r3, r3, #21
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	3301      	adds	r3, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	61fb      	str	r3, [r7, #28]
          break;
 8004632:	e005      	b.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004634:	bf00      	nop
 8004636:	e359      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004638:	bf00      	nop
 800463a:	e357      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800463c:	bf00      	nop
 800463e:	e355      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004640:	bf00      	nop
        break;
 8004642:	e353      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004644:	4b5e      	ldr	r3, [pc, #376]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d827      	bhi.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004656:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	0800466d 	.word	0x0800466d
 8004660:	08004675 	.word	0x08004675
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004691 	.word	0x08004691
          frequency = HAL_RCC_GetPCLK2Freq();
 800466c:	f7ff fa7a 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 8004670:	61f8      	str	r0, [r7, #28]
          break;
 8004672:	e01d      	b.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004674:	f7ff f9c8 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8004678:	61f8      	str	r0, [r7, #28]
          break;
 800467a:	e019      	b.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800467c:	4b50      	ldr	r3, [pc, #320]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004688:	d10f      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800468a:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800468c:	61fb      	str	r3, [r7, #28]
          break;
 800468e:	e00c      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004690:	4b4b      	ldr	r3, [pc, #300]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b02      	cmp	r3, #2
 800469c:	d107      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800469e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046a2:	61fb      	str	r3, [r7, #28]
          break;
 80046a4:	e003      	b.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80046a6:	bf00      	nop
 80046a8:	e320      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046aa:	bf00      	nop
 80046ac:	e31e      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046ae:	bf00      	nop
        break;
 80046b0:	e31c      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80046b2:	4b43      	ldr	r3, [pc, #268]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d83a      	bhi.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80046c4:	a201      	add	r2, pc, #4	@ (adr r2, 80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004701 	.word	0x08004701
 80046d0:	0800473b 	.word	0x0800473b
 80046d4:	0800473b 	.word	0x0800473b
 80046d8:	0800473b 	.word	0x0800473b
 80046dc:	08004709 	.word	0x08004709
 80046e0:	0800473b 	.word	0x0800473b
 80046e4:	0800473b 	.word	0x0800473b
 80046e8:	0800473b 	.word	0x0800473b
 80046ec:	08004711 	.word	0x08004711
 80046f0:	0800473b 	.word	0x0800473b
 80046f4:	0800473b 	.word	0x0800473b
 80046f8:	0800473b 	.word	0x0800473b
 80046fc:	08004725 	.word	0x08004725
          frequency = HAL_RCC_GetPCLK1Freq();
 8004700:	f7ff fa1a 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004704:	61f8      	str	r0, [r7, #28]
          break;
 8004706:	e01d      	b.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004708:	f7ff f97e 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 800470c:	61f8      	str	r0, [r7, #28]
          break;
 800470e:	e019      	b.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004710:	4b2b      	ldr	r3, [pc, #172]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471c:	d10f      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800471e:	4b2a      	ldr	r3, [pc, #168]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004720:	61fb      	str	r3, [r7, #28]
          break;
 8004722:	e00c      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004724:	4b26      	ldr	r3, [pc, #152]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d107      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004736:	61fb      	str	r3, [r7, #28]
          break;
 8004738:	e003      	b.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800473a:	bf00      	nop
 800473c:	e2d6      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800473e:	bf00      	nop
 8004740:	e2d4      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004742:	bf00      	nop
        break;
 8004744:	e2d2      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004746:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b30      	cmp	r3, #48	@ 0x30
 8004756:	d021      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b30      	cmp	r3, #48	@ 0x30
 800475c:	d829      	bhi.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b20      	cmp	r3, #32
 8004762:	d011      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b20      	cmp	r3, #32
 8004768:	d823      	bhi.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b10      	cmp	r3, #16
 8004774:	d004      	beq.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004776:	e01c      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004778:	f7ff f9de 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 800477c:	61f8      	str	r0, [r7, #28]
          break;
 800477e:	e01d      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004780:	f7ff f942 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8004784:	61f8      	str	r0, [r7, #28]
          break;
 8004786:	e019      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004788:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004794:	d10f      	bne.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004796:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004798:	61fb      	str	r3, [r7, #28]
          break;
 800479a:	e00c      	b.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800479c:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d107      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80047aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ae:	61fb      	str	r3, [r7, #28]
          break;
 80047b0:	e003      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80047b2:	bf00      	nop
 80047b4:	e29a      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047b6:	bf00      	nop
 80047b8:	e298      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047ba:	bf00      	nop
        break;
 80047bc:	e296      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	08009ec8 	.word	0x08009ec8
 80047c8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80047cc:	4b9b      	ldr	r3, [pc, #620]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2bc0      	cmp	r3, #192	@ 0xc0
 80047dc:	d021      	beq.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80047e2:	d829      	bhi.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b80      	cmp	r3, #128	@ 0x80
 80047e8:	d011      	beq.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b80      	cmp	r3, #128	@ 0x80
 80047ee:	d823      	bhi.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b40      	cmp	r3, #64	@ 0x40
 80047fa:	d004      	beq.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80047fc:	e01c      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7ff f99b 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004802:	61f8      	str	r0, [r7, #28]
          break;
 8004804:	e01d      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004806:	f7ff f8ff 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 800480a:	61f8      	str	r0, [r7, #28]
          break;
 800480c:	e019      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800480e:	4b8b      	ldr	r3, [pc, #556]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800481a:	d10f      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 800481c:	4b88      	ldr	r3, [pc, #544]	@ (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800481e:	61fb      	str	r3, [r7, #28]
          break;
 8004820:	e00c      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004822:	4b86      	ldr	r3, [pc, #536]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b02      	cmp	r3, #2
 800482e:	d107      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004834:	61fb      	str	r3, [r7, #28]
          break;
 8004836:	e003      	b.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004838:	bf00      	nop
 800483a:	e257      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800483c:	bf00      	nop
 800483e:	e255      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004840:	bf00      	nop
        break;
 8004842:	e253      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004844:	4b7d      	ldr	r3, [pc, #500]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004856:	d025      	beq.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485e:	d82c      	bhi.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004866:	d013      	beq.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800486e:	d824      	bhi.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d004      	beq.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487c:	d004      	beq.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800487e:	e01c      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004880:	f7ff f95a 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004884:	61f8      	str	r0, [r7, #28]
          break;
 8004886:	e01d      	b.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004888:	f7ff f8be 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 800488c:	61f8      	str	r0, [r7, #28]
          break;
 800488e:	e019      	b.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004890:	4b6a      	ldr	r3, [pc, #424]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489c:	d10f      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800489e:	4b68      	ldr	r3, [pc, #416]	@ (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80048a0:	61fb      	str	r3, [r7, #28]
          break;
 80048a2:	e00c      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048a4:	4b65      	ldr	r3, [pc, #404]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d107      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b6:	61fb      	str	r3, [r7, #28]
          break;
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80048ba:	bf00      	nop
 80048bc:	e216      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048be:	bf00      	nop
 80048c0:	e214      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048c2:	bf00      	nop
        break;
 80048c4:	e212      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80048c6:	4b5d      	ldr	r3, [pc, #372]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048d8:	d025      	beq.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e0:	d82c      	bhi.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e8:	d013      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f0:	d824      	bhi.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fe:	d004      	beq.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004900:	e01c      	b.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004902:	f7ff f919 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004906:	61f8      	str	r0, [r7, #28]
          break;
 8004908:	e01d      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800490a:	f7ff f87d 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 800490e:	61f8      	str	r0, [r7, #28]
          break;
 8004910:	e019      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004912:	4b4a      	ldr	r3, [pc, #296]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800491e:	d10f      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004920:	4b47      	ldr	r3, [pc, #284]	@ (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004922:	61fb      	str	r3, [r7, #28]
          break;
 8004924:	e00c      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004926:	4b45      	ldr	r3, [pc, #276]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d107      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004938:	61fb      	str	r3, [r7, #28]
          break;
 800493a:	e003      	b.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 800493c:	bf00      	nop
 800493e:	e1d5      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004940:	bf00      	nop
 8004942:	e1d3      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004944:	bf00      	nop
        break;
 8004946:	e1d1      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004948:	4b3c      	ldr	r3, [pc, #240]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800495a:	d00c      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004962:	d864      	bhi.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800496a:	d008      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004972:	d030      	beq.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004974:	e05b      	b.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004976:	f7ff f847 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 800497a:	61f8      	str	r0, [r7, #28]
          break;
 800497c:	e05c      	b.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800497e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800498a:	d152      	bne.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800498c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d04c      	beq.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004998:	4b28      	ldr	r3, [pc, #160]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049a2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	fb03 f202 	mul.w	r2, r3, r2
 80049ac:	4b23      	ldr	r3, [pc, #140]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	3301      	adds	r3, #1
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80049be:	4b1f      	ldr	r3, [pc, #124]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	0e5b      	lsrs	r3, r3, #25
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	3301      	adds	r3, #1
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	61fb      	str	r3, [r7, #28]
          break;
 80049d4:	e02d      	b.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80049d6:	4b19      	ldr	r3, [pc, #100]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e2:	d128      	bne.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80049e4:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d022      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80049f0:	4b12      	ldr	r3, [pc, #72]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fa:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	fb03 f202 	mul.w	r2, r3, r2
 8004a04:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	3301      	adds	r3, #1
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004a16:	4b09      	ldr	r3, [pc, #36]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	0e5b      	lsrs	r3, r3, #25
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	3301      	adds	r3, #1
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2a:	61fb      	str	r3, [r7, #28]
          break;
 8004a2c:	e003      	b.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004a2e:	bf00      	nop
 8004a30:	e15c      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a32:	bf00      	nop
 8004a34:	e15a      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a36:	bf00      	nop
        break;
 8004a38:	e158      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004a44:	4b9d      	ldr	r3, [pc, #628]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a4e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004a56:	f7ff f885 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 8004a5a:	61f8      	str	r0, [r7, #28]
        break;
 8004a5c:	e146      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7fe ffd3 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8004a62:	61f8      	str	r0, [r7, #28]
        break;
 8004a64:	e142      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004a66:	4b95      	ldr	r3, [pc, #596]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a78:	d013      	beq.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a80:	d819      	bhi.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a8e:	d004      	beq.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004a90:	e011      	b.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a92:	f7ff f851 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004a96:	61f8      	str	r0, [r7, #28]
          break;
 8004a98:	e010      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a9a:	f7fe ffb5 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8004a9e:	61f8      	str	r0, [r7, #28]
          break;
 8004aa0:	e00c      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aa2:	4b86      	ldr	r3, [pc, #536]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aae:	d104      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004ab0:	4b83      	ldr	r3, [pc, #524]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004ab2:	61fb      	str	r3, [r7, #28]
          break;
 8004ab4:	e001      	b.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004ab6:	bf00      	nop
 8004ab8:	e118      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aba:	bf00      	nop
        break;
 8004abc:	e116      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004abe:	4b7f      	ldr	r3, [pc, #508]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad0:	d013      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad8:	d819      	bhi.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ae6:	d004      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004ae8:	e011      	b.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004aea:	f7ff f825 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004aee:	61f8      	str	r0, [r7, #28]
          break;
 8004af0:	e010      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004af2:	f7fe ff89 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8004af6:	61f8      	str	r0, [r7, #28]
          break;
 8004af8:	e00c      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004afa:	4b70      	ldr	r3, [pc, #448]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b06:	d104      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004b08:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004b0a:	61fb      	str	r3, [r7, #28]
          break;
 8004b0c:	e001      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004b0e:	bf00      	nop
 8004b10:	e0ec      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b12:	bf00      	nop
        break;
 8004b14:	e0ea      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004b16:	4b69      	ldr	r3, [pc, #420]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b28:	d013      	beq.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b30:	d819      	bhi.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3e:	d004      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004b40:	e011      	b.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b42:	f7fe fff9 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004b46:	61f8      	str	r0, [r7, #28]
          break;
 8004b48:	e010      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7fe ff5d 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8004b4e:	61f8      	str	r0, [r7, #28]
          break;
 8004b50:	e00c      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b52:	4b5a      	ldr	r3, [pc, #360]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b5e:	d104      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004b60:	4b57      	ldr	r3, [pc, #348]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004b62:	61fb      	str	r3, [r7, #28]
          break;
 8004b64:	e001      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004b66:	bf00      	nop
 8004b68:	e0c0      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b6a:	bf00      	nop
        break;
 8004b6c:	e0be      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b6e:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b80:	d02c      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b88:	d833      	bhi.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b90:	d01a      	beq.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b98:	d82b      	bhi.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ba6:	d004      	beq.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004ba8:	e023      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004baa:	f7fe ffc5 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004bae:	61f8      	str	r0, [r7, #28]
          break;
 8004bb0:	e026      	b.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004bb2:	4b42      	ldr	r3, [pc, #264]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d11a      	bne.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004bc0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004bc4:	61fb      	str	r3, [r7, #28]
          break;
 8004bc6:	e016      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd4:	d111      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004bd8:	61fb      	str	r3, [r7, #28]
          break;
 8004bda:	e00e      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bdc:	4b37      	ldr	r3, [pc, #220]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d109      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bee:	61fb      	str	r3, [r7, #28]
          break;
 8004bf0:	e005      	b.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004bf2:	bf00      	nop
 8004bf4:	e07a      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bf6:	bf00      	nop
 8004bf8:	e078      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bfa:	bf00      	nop
 8004bfc:	e076      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bfe:	bf00      	nop
        break;
 8004c00:	e074      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c02:	4b2e      	ldr	r3, [pc, #184]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c14:	d02c      	beq.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c1c:	d833      	bhi.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c24:	d01a      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c2c:	d82b      	bhi.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c3a:	d004      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004c3c:	e023      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c3e:	f7fe ff7b 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004c42:	61f8      	str	r0, [r7, #28]
          break;
 8004c44:	e026      	b.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c46:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d11a      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004c54:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c58:	61fb      	str	r3, [r7, #28]
          break;
 8004c5a:	e016      	b.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c5c:	4b17      	ldr	r3, [pc, #92]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c68:	d111      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004c6a:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c6c:	61fb      	str	r3, [r7, #28]
          break;
 8004c6e:	e00e      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c70:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c82:	61fb      	str	r3, [r7, #28]
          break;
 8004c84:	e005      	b.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004c86:	bf00      	nop
 8004c88:	e030      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c8a:	bf00      	nop
 8004c8c:	e02e      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c8e:	bf00      	nop
 8004c90:	e02c      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c92:	bf00      	nop
        break;
 8004c94:	e02a      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004c96:	4b09      	ldr	r3, [pc, #36]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cae:	d009      	beq.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004cb0:	e012      	b.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cb2:	f7fe ff41 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8004cb6:	61f8      	str	r0, [r7, #28]
          break;
 8004cb8:	e00e      	b.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004cd4:	61fb      	str	r3, [r7, #28]
          break;
 8004cd6:	bf00      	nop
        break;
 8004cd8:	e008      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e006      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e004      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004cea:	bf00      	nop
    }
  }

  return(frequency);
 8004cec:	69fb      	ldr	r3, [r7, #28]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d0e:	4b75      	ldr	r3, [pc, #468]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d1a:	4b72      	ldr	r3, [pc, #456]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d10d      	bne.n	8004d46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d32:	4b6c      	ldr	r3, [pc, #432]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
       ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d047      	beq.n	8004dd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	e044      	b.n	8004dd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d018      	beq.n	8004d86 <RCCEx_PLLSAI1_Config+0x86>
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d825      	bhi.n	8004da4 <RCCEx_PLLSAI1_Config+0xa4>
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d002      	beq.n	8004d62 <RCCEx_PLLSAI1_Config+0x62>
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d009      	beq.n	8004d74 <RCCEx_PLLSAI1_Config+0x74>
 8004d60:	e020      	b.n	8004da4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d62:	4b60      	ldr	r3, [pc, #384]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d11d      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d72:	e01a      	b.n	8004daa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d74:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d116      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d84:	e013      	b.n	8004dae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d86:	4b57      	ldr	r3, [pc, #348]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d92:	4b54      	ldr	r3, [pc, #336]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004da2:	e006      	b.n	8004db2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e004      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004daa:	bf00      	nop
 8004dac:	e002      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dba:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	4944      	ldr	r1, [pc, #272]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d17d      	bne.n	8004ed8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ddc:	4b41      	ldr	r3, [pc, #260]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a40      	ldr	r2, [pc, #256]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de8:	f7fc fc5c 	bl	80016a4 <HAL_GetTick>
 8004dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dee:	e009      	b.n	8004e04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004df0:	f7fc fc58 	bl	80016a4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d902      	bls.n	8004e04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	73fb      	strb	r3, [r7, #15]
        break;
 8004e02:	e005      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e04:	4b37      	ldr	r3, [pc, #220]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ef      	bne.n	8004df0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d160      	bne.n	8004ed8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d111      	bne.n	8004e40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e1c:	4b31      	ldr	r3, [pc, #196]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6892      	ldr	r2, [r2, #8]
 8004e2c:	0211      	lsls	r1, r2, #8
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68d2      	ldr	r2, [r2, #12]
 8004e32:	0912      	lsrs	r2, r2, #4
 8004e34:	0452      	lsls	r2, r2, #17
 8004e36:	430a      	orrs	r2, r1
 8004e38:	492a      	ldr	r1, [pc, #168]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	610b      	str	r3, [r1, #16]
 8004e3e:	e027      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d112      	bne.n	8004e6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e46:	4b27      	ldr	r3, [pc, #156]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6892      	ldr	r2, [r2, #8]
 8004e56:	0211      	lsls	r1, r2, #8
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6912      	ldr	r2, [r2, #16]
 8004e5c:	0852      	lsrs	r2, r2, #1
 8004e5e:	3a01      	subs	r2, #1
 8004e60:	0552      	lsls	r2, r2, #21
 8004e62:	430a      	orrs	r2, r1
 8004e64:	491f      	ldr	r1, [pc, #124]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]
 8004e6a:	e011      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6892      	ldr	r2, [r2, #8]
 8004e7c:	0211      	lsls	r1, r2, #8
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6952      	ldr	r2, [r2, #20]
 8004e82:	0852      	lsrs	r2, r2, #1
 8004e84:	3a01      	subs	r2, #1
 8004e86:	0652      	lsls	r2, r2, #25
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	4916      	ldr	r1, [pc, #88]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e90:	4b14      	ldr	r3, [pc, #80]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a13      	ldr	r2, [pc, #76]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fc fc02 	bl	80016a4 <HAL_GetTick>
 8004ea0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ea2:	e009      	b.n	8004eb8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea4:	f7fc fbfe 	bl	80016a4 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d902      	bls.n	8004eb8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	73fb      	strb	r3, [r7, #15]
          break;
 8004eb6:	e005      	b.n	8004ec4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0ef      	beq.n	8004ea4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004eca:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	4904      	ldr	r1, [pc, #16]	@ (8004ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000

08004ee8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d018      	beq.n	8004f34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f02:	4b67      	ldr	r3, [pc, #412]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0203 	and.w	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d10d      	bne.n	8004f2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
       ||
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f1a:	4b61      	ldr	r3, [pc, #388]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
       ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d047      	beq.n	8004fbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	73fb      	strb	r3, [r7, #15]
 8004f32:	e044      	b.n	8004fbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d018      	beq.n	8004f6e <RCCEx_PLLSAI2_Config+0x86>
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d825      	bhi.n	8004f8c <RCCEx_PLLSAI2_Config+0xa4>
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d002      	beq.n	8004f4a <RCCEx_PLLSAI2_Config+0x62>
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d009      	beq.n	8004f5c <RCCEx_PLLSAI2_Config+0x74>
 8004f48:	e020      	b.n	8004f8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f4a:	4b55      	ldr	r3, [pc, #340]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11d      	bne.n	8004f92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f5a:	e01a      	b.n	8004f92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f5c:	4b50      	ldr	r3, [pc, #320]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d116      	bne.n	8004f96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6c:	e013      	b.n	8004f96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10f      	bne.n	8004f9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f7a:	4b49      	ldr	r3, [pc, #292]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f8a:	e006      	b.n	8004f9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f90:	e004      	b.n	8004f9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10d      	bne.n	8004fbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6819      	ldr	r1, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	4939      	ldr	r1, [pc, #228]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d167      	bne.n	8005094 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fc4:	4b36      	ldr	r3, [pc, #216]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a35      	ldr	r2, [pc, #212]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd0:	f7fc fb68 	bl	80016a4 <HAL_GetTick>
 8004fd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fd6:	e009      	b.n	8004fec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fd8:	f7fc fb64 	bl	80016a4 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d902      	bls.n	8004fec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	73fb      	strb	r3, [r7, #15]
        break;
 8004fea:	e005      	b.n	8004ff8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fec:	4b2c      	ldr	r3, [pc, #176]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ef      	bne.n	8004fd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d14a      	bne.n	8005094 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d111      	bne.n	8005028 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005004:	4b26      	ldr	r3, [pc, #152]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800500c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6892      	ldr	r2, [r2, #8]
 8005014:	0211      	lsls	r1, r2, #8
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68d2      	ldr	r2, [r2, #12]
 800501a:	0912      	lsrs	r2, r2, #4
 800501c:	0452      	lsls	r2, r2, #17
 800501e:	430a      	orrs	r2, r1
 8005020:	491f      	ldr	r1, [pc, #124]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005022:	4313      	orrs	r3, r2
 8005024:	614b      	str	r3, [r1, #20]
 8005026:	e011      	b.n	800504c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005028:	4b1d      	ldr	r3, [pc, #116]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005030:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6892      	ldr	r2, [r2, #8]
 8005038:	0211      	lsls	r1, r2, #8
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6912      	ldr	r2, [r2, #16]
 800503e:	0852      	lsrs	r2, r2, #1
 8005040:	3a01      	subs	r2, #1
 8005042:	0652      	lsls	r2, r2, #25
 8005044:	430a      	orrs	r2, r1
 8005046:	4916      	ldr	r1, [pc, #88]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005048:	4313      	orrs	r3, r2
 800504a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800504c:	4b14      	ldr	r3, [pc, #80]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a13      	ldr	r2, [pc, #76]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005058:	f7fc fb24 	bl	80016a4 <HAL_GetTick>
 800505c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800505e:	e009      	b.n	8005074 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005060:	f7fc fb20 	bl	80016a4 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d902      	bls.n	8005074 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	73fb      	strb	r3, [r7, #15]
          break;
 8005072:	e005      	b.n	8005080 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005074:	4b0a      	ldr	r3, [pc, #40]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0ef      	beq.n	8005060 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005086:	4b06      	ldr	r3, [pc, #24]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	4904      	ldr	r1, [pc, #16]	@ (80050a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000

080050a4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	@ 0x24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c0:	d10c      	bne.n	80050dc <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80050c2:	4b6e      	ldr	r3, [pc, #440]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80050cc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050d4:	d112      	bne.n	80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80050d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	e00f      	b.n	80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e2:	d10b      	bne.n	80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80050e4:	4b65      	ldr	r3, [pc, #404]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80050ee:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050f6:	d101      	bne.n	80050fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80050f8:	4b61      	ldr	r3, [pc, #388]	@ (8005280 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80050fa:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 80b4 	bne.w	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800510e:	d003      	beq.n	8005118 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005116:	d135      	bne.n	8005184 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005118:	4b58      	ldr	r3, [pc, #352]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005120:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005124:	f040 80a1 	bne.w	800526a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005128:	4b54      	ldr	r3, [pc, #336]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 809a 	beq.w	800526a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005136:	4b51      	ldr	r3, [pc, #324]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	3301      	adds	r3, #1
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800514a:	4b4c      	ldr	r3, [pc, #304]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005154:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800515c:	4b47      	ldr	r3, [pc, #284]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005168:	2311      	movs	r3, #17
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e001      	b.n	8005172 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800516e:	2307      	movs	r3, #7
 8005170:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	fb03 f202 	mul.w	r2, r3, r2
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005182:	e072      	b.n	800526a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d133      	bne.n	80051f2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800518a:	4b3c      	ldr	r3, [pc, #240]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005196:	d169      	bne.n	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005198:	4b38      	ldr	r3, [pc, #224]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d063      	beq.n	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051a4:	4b35      	ldr	r3, [pc, #212]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	3301      	adds	r3, #1
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80051b8:	4b30      	ldr	r3, [pc, #192]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051c2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80051ca:	4b2c      	ldr	r3, [pc, #176]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80051d6:	2311      	movs	r3, #17
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e001      	b.n	80051e0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80051dc:	2307      	movs	r3, #7
 80051de:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	fb03 f202 	mul.w	r2, r3, r2
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	e03c      	b.n	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051f8:	d003      	beq.n	8005202 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005200:	d134      	bne.n	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005202:	4b1e      	ldr	r3, [pc, #120]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800520a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800520e:	d12d      	bne.n	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005210:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d027      	beq.n	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800521c:	4b17      	ldr	r3, [pc, #92]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	3301      	adds	r3, #1
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005230:	4b12      	ldr	r3, [pc, #72]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005242:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800524e:	2311      	movs	r3, #17
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	e001      	b.n	8005258 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005254:	2307      	movs	r3, #7
 8005256:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	fb03 f202 	mul.w	r2, r3, r2
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	e000      	b.n	800526c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800526a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800526c:	69fb      	ldr	r3, [r7, #28]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3724      	adds	r7, #36	@ 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40021000 	.word	0x40021000
 8005280:	001fff68 	.word	0x001fff68

08005284 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d904      	bls.n	80052a2 <HAL_SAI_InitProtocol+0x1e>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	3b03      	subs	r3, #3
 800529c:	2b01      	cmp	r3, #1
 800529e:	d812      	bhi.n	80052c6 <HAL_SAI_InitProtocol+0x42>
 80052a0:	e008      	b.n	80052b4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fc67 	bl	8005b7c <SAI_InitI2S>
 80052ae:	4603      	mov	r3, r0
 80052b0:	75fb      	strb	r3, [r7, #23]
      break;
 80052b2:	e00b      	b.n	80052cc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fd10 	bl	8005ce0 <SAI_InitPCM>
 80052c0:	4603      	mov	r3, r0
 80052c2:	75fb      	strb	r3, [r7, #23]
      break;
 80052c4:	e002      	b.n	80052cc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
      break;
 80052ca:	bf00      	nop
  }

  if (status == HAL_OK)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f808 	bl	80052e8 <HAL_SAI_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e155      	b.n	80055a6 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fb fd2e 	bl	8000d70 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fd9d 	bl	8005e54 <SAI_Disable>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e140      	b.n	80055a6 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d00c      	beq.n	800534e <HAL_SAI_Init+0x66>
 8005334:	2b02      	cmp	r3, #2
 8005336:	d80d      	bhi.n	8005354 <HAL_SAI_Init+0x6c>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_SAI_Init+0x5a>
 800533c:	2b01      	cmp	r3, #1
 800533e:	d003      	beq.n	8005348 <HAL_SAI_Init+0x60>
 8005340:	e008      	b.n	8005354 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      break;
 8005346:	e008      	b.n	800535a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005348:	2310      	movs	r3, #16
 800534a:	61fb      	str	r3, [r7, #28]
      break;
 800534c:	e005      	b.n	800535a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800534e:	2320      	movs	r3, #32
 8005350:	61fb      	str	r3, [r7, #28]
      break;
 8005352:	e002      	b.n	800535a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
      break;
 8005358:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d81d      	bhi.n	800539e <HAL_SAI_Init+0xb6>
 8005362:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <HAL_SAI_Init+0x80>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005379 	.word	0x08005379
 800536c:	0800537f 	.word	0x0800537f
 8005370:	08005387 	.word	0x08005387
 8005374:	0800538f 	.word	0x0800538f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
      break;
 800537c:	e012      	b.n	80053a4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800537e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005382:	617b      	str	r3, [r7, #20]
      break;
 8005384:	e00e      	b.n	80053a4 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005386:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800538a:	617b      	str	r3, [r7, #20]
      break;
 800538c:	e00a      	b.n	80053a4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800538e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005392:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
      break;
 800539c:	e002      	b.n	80053a4 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
      break;
 80053a2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a81      	ldr	r2, [pc, #516]	@ (80055b0 <HAL_SAI_Init+0x2c8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_SAI_Init+0xd0>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a80      	ldr	r2, [pc, #512]	@ (80055b4 <HAL_SAI_Init+0x2cc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d103      	bne.n	80053c0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80053b8:	4a7f      	ldr	r2, [pc, #508]	@ (80055b8 <HAL_SAI_Init+0x2d0>)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e002      	b.n	80053c6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80053c0:	4a7e      	ldr	r2, [pc, #504]	@ (80055bc <HAL_SAI_Init+0x2d4>)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d041      	beq.n	8005452 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a77      	ldr	r2, [pc, #476]	@ (80055b0 <HAL_SAI_Init+0x2c8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_SAI_Init+0xfa>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a75      	ldr	r2, [pc, #468]	@ (80055b4 <HAL_SAI_Init+0x2cc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d105      	bne.n	80053ee <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80053e2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80053e6:	f7fe ff1d 	bl	8004224 <HAL_RCCEx_GetPeriphCLKFreq>
 80053ea:	6138      	str	r0, [r7, #16]
 80053ec:	e004      	b.n	80053f8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80053ee:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80053f2:	f7fe ff17 	bl	8004224 <HAL_RCCEx_GetPeriphCLKFreq>
 80053f6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	025b      	lsls	r3, r3, #9
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a6b      	ldr	r2, [pc, #428]	@ (80055c0 <HAL_SAI_Init+0x2d8>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	08da      	lsrs	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	4b67      	ldr	r3, [pc, #412]	@ (80055c0 <HAL_SAI_Init+0x2d8>)
 8005422:	fba3 2301 	umull	r2, r3, r3, r1
 8005426:	08da      	lsrs	r2, r3, #3
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	1aca      	subs	r2, r1, r3
 8005432:	2a08      	cmp	r2, #8
 8005434:	d904      	bls.n	8005440 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005444:	2b04      	cmp	r3, #4
 8005446:	d104      	bne.n	8005452 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	085a      	lsrs	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_SAI_Init+0x17a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d109      	bne.n	8005476 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_SAI_Init+0x186>
 800546a:	2300      	movs	r3, #0
 800546c:	e001      	b.n	8005472 <HAL_SAI_Init+0x18a>
 800546e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	e008      	b.n	8005488 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d102      	bne.n	8005484 <HAL_SAI_Init+0x19c>
 800547e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005482:	e000      	b.n	8005486 <HAL_SAI_Init+0x19e>
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b4c      	ldr	r3, [pc, #304]	@ (80055c4 <HAL_SAI_Init+0x2dc>)
 8005494:	400b      	ands	r3, r1
 8005496:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6819      	ldr	r1, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054ac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	431a      	orrs	r2, r3
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80054c0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80054cc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	051b      	lsls	r3, r3, #20
 80054d4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80054ec:	f023 030f 	bic.w	r3, r3, #15
 80054f0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6899      	ldr	r1, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b2b      	ldr	r3, [pc, #172]	@ (80055c8 <HAL_SAI_Init+0x2e0>)
 800551c:	400b      	ands	r3, r1
 800551e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6899      	ldr	r1, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005530:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8005536:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800553c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	3b01      	subs	r3, #1
 8005544:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005546:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68d9      	ldr	r1, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800555e:	400b      	ands	r3, r1
 8005560:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68d9      	ldr	r1, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005570:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005576:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005578:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557e:	3b01      	subs	r3, #1
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40015404 	.word	0x40015404
 80055b4:	40015424 	.word	0x40015424
 80055b8:	40015400 	.word	0x40015400
 80055bc:	40015800 	.word	0x40015800
 80055c0:	cccccccd 	.word	0xcccccccd
 80055c4:	ff05c010 	.word	0xff05c010
 80055c8:	fff88000 	.word	0xfff88000

080055cc <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_SAI_Abort+0x1a>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e053      	b.n	800568e <HAL_SAI_Abort+0xc2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fc30 	bl	8005e54 <SAI_Disable>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800560c:	d125      	bne.n	800565a <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800561c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b12      	cmp	r3, #18
 8005628:	d108      	bne.n	800563c <HAL_SAI_Abort+0x70>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005636:	4618      	mov	r0, r3
 8005638:	f7fc fa6a 	bl	8001b10 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b22      	cmp	r3, #34	@ 0x22
 8005646:	d108      	bne.n	800565a <HAL_SAI_Abort+0x8e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005654:	4618      	mov	r0, r3
 8005656:	f7fc fa5b 	bl	8001b10 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f04f 32ff 	mov.w	r2, #4294967295
 800566a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0208 	orr.w	r2, r2, #8
 800567a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80056a6:	f7fb fffd 	bl	80016a4 <HAL_GetTick>
 80056aa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_SAI_Transmit_DMA+0x20>
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e093      	b.n	80057e4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f040 808c 	bne.w	80057e2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_SAI_Transmit_DMA+0x40>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e085      	b.n	80057e4 <HAL_SAI_Transmit_DMA+0x14c>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2212      	movs	r2, #18
 8005702:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800570a:	4a38      	ldr	r2, [pc, #224]	@ (80057ec <HAL_SAI_Transmit_DMA+0x154>)
 800570c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005712:	4a37      	ldr	r2, [pc, #220]	@ (80057f0 <HAL_SAI_Transmit_DMA+0x158>)
 8005714:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571a:	4a36      	ldr	r2, [pc, #216]	@ (80057f4 <HAL_SAI_Transmit_DMA+0x15c>)
 800571c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005722:	2200      	movs	r2, #0
 8005724:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800572e:	4619      	mov	r1, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	331c      	adds	r3, #28
 8005736:	461a      	mov	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800573e:	f7fc f987 	bl	8001a50 <HAL_DMA_Start_IT>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e047      	b.n	80057e4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005754:	2100      	movs	r1, #0
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fb44 	bl	8005de4 <SAI_InterruptFlag>
 800575c:	4601      	mov	r1, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800577a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800577c:	e015      	b.n	80057aa <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800577e:	f7fb ff91 	bl	80016a4 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800578c:	d90d      	bls.n	80057aa <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005794:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e01c      	b.n	80057e4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0e2      	beq.n	800577e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80057d4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e000      	b.n	80057e4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80057e2:	2302      	movs	r3, #2
  }
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	08005f27 	.word	0x08005f27
 80057f0:	08005ec9 	.word	0x08005ec9
 80057f4:	08005f43 	.word	0x08005f43

080057f8 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8192 	beq.w	8005b32 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <HAL_SAI_IRQHandler+0x4c>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
 8005842:	e176      	b.n	8005b32 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01e      	beq.n	800588c <HAL_SAI_IRQHandler+0x94>
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d019      	beq.n	800588c <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b22      	cmp	r3, #34	@ 0x22
 800586a:	d101      	bne.n	8005870 <HAL_SAI_IRQHandler+0x78>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_SAI_IRQHandler+0x7a>
 8005870:	2302      	movs	r3, #2
 8005872:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f96f 	bl	8005b68 <HAL_SAI_ErrorCallback>
 800588a:	e152      	b.n	8005b32 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d011      	beq.n	80058ba <HAL_SAI_IRQHandler+0xc2>
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00c      	beq.n	80058ba <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2202      	movs	r2, #2
 80058a6:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8140 	beq.w	8005b32 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b6:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80058b8:	e13b      	b.n	8005b32 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d055      	beq.n	8005970 <HAL_SAI_IRQHandler+0x178>
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d050      	beq.n	8005970 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2220      	movs	r2, #32
 80058d4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058dc:	f043 0204 	orr.w	r2, r3, #4
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d038      	beq.n	8005962 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d016      	beq.n	8005926 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058fc:	4a8f      	ldr	r2, [pc, #572]	@ (8005b3c <HAL_SAI_IRQHandler+0x344>)
 80058fe:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005904:	4618      	mov	r0, r3
 8005906:	f7fc f941 	bl	8001b8c <HAL_DMA_Abort_IT>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005916:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f921 	bl	8005b68 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80fc 	beq.w	8005b28 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005934:	4a81      	ldr	r2, [pc, #516]	@ (8005b3c <HAL_SAI_IRQHandler+0x344>)
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	4618      	mov	r0, r3
 800593e:	f7fc f925 	bl	8001b8c <HAL_DMA_Abort_IT>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80ef 	beq.w	8005b28 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005950:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f904 	bl	8005b68 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005960:	e0e2      	b.n	8005b28 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fe32 	bl	80055cc <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8fd 	bl	8005b68 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800596e:	e0db      	b.n	8005b28 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d055      	beq.n	8005a26 <HAL_SAI_IRQHandler+0x22e>
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d050      	beq.n	8005a26 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2240      	movs	r2, #64	@ 0x40
 800598a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005992:	f043 0208 	orr.w	r2, r3, #8
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d038      	beq.n	8005a18 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b2:	4a62      	ldr	r2, [pc, #392]	@ (8005b3c <HAL_SAI_IRQHandler+0x344>)
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fc f8e6 	bl	8001b8c <HAL_DMA_Abort_IT>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8c6 	bl	8005b68 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80a3 	beq.w	8005b2c <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ea:	4a54      	ldr	r2, [pc, #336]	@ (8005b3c <HAL_SAI_IRQHandler+0x344>)
 80059ec:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fc f8ca 	bl	8001b8c <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8096 	beq.w	8005b2c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8a9 	bl	8005b68 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a16:	e089      	b.n	8005b2c <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fdd7 	bl	80055cc <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8a2 	bl	8005b68 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a24:	e082      	b.n	8005b2c <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d061      	beq.n	8005af4 <HAL_SAI_IRQHandler+0x2fc>
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d05c      	beq.n	8005af4 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d036      	beq.n	8005aca <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d016      	beq.n	8005a92 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a68:	4a34      	ldr	r2, [pc, #208]	@ (8005b3c <HAL_SAI_IRQHandler+0x344>)
 8005a6a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fc f88b 	bl	8001b8c <HAL_DMA_Abort_IT>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f86b 	bl	8005b68 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d04a      	beq.n	8005b30 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9e:	4a27      	ldr	r2, [pc, #156]	@ (8005b3c <HAL_SAI_IRQHandler+0x344>)
 8005aa0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fc f870 	bl	8001b8c <HAL_DMA_Abort_IT>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d03e      	beq.n	8005b30 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f850 	bl	8005b68 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005ac8:	e032      	b.n	8005b30 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ada:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f83b 	bl	8005b68 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005af2:	e01d      	b.n	8005b30 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d019      	beq.n	8005b32 <HAL_SAI_IRQHandler+0x33a>
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d014      	beq.n	8005b32 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2210      	movs	r2, #16
 8005b0e:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b16:	f043 0210 	orr.w	r2, r3, #16
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f821 	bl	8005b68 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005b26:	e004      	b.n	8005b32 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b28:	bf00      	nop
 8005b2a:	e002      	b.n	8005b32 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b2c:	bf00      	nop
 8005b2e:	e000      	b.n	8005b32 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b30:	bf00      	nop
}
 8005b32:	bf00      	nop
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	08005f95 	.word	0x08005f95

08005b40 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <SAI_InitI2S+0x2e>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d103      	bne.n	8005bb2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005bb0:	e002      	b.n	8005bb8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005bbe:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e077      	b.n	8005cd2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d107      	bne.n	8005bf8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005bf4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005bf6:	e006      	b.n	8005c06 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005bfe:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d84f      	bhi.n	8005cac <SAI_InitI2S+0x130>
 8005c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <SAI_InitI2S+0x98>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005c47 	.word	0x08005c47
 8005c1c:	08005c69 	.word	0x08005c69
 8005c20:	08005c8b 	.word	0x08005c8b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2280      	movs	r2, #128	@ 0x80
 8005c28:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	011a      	lsls	r2, r3, #4
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2240      	movs	r2, #64	@ 0x40
 8005c42:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c44:	e035      	b.n	8005cb2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2280      	movs	r2, #128	@ 0x80
 8005c4a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	019a      	lsls	r2, r3, #6
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2280      	movs	r2, #128	@ 0x80
 8005c64:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c66:	e024      	b.n	8005cb2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	22c0      	movs	r2, #192	@ 0xc0
 8005c6c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	019a      	lsls	r2, r3, #6
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2280      	movs	r2, #128	@ 0x80
 8005c86:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c88:	e013      	b.n	8005cb2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	22e0      	movs	r2, #224	@ 0xe0
 8005c8e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	019a      	lsls	r2, r3, #6
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	085b      	lsrs	r3, r3, #1
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2280      	movs	r2, #128	@ 0x80
 8005ca8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005caa:	e002      	b.n	8005cb2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d10b      	bne.n	8005cd0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d102      	bne.n	8005cc4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d102      	bne.n	8005cd0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop

08005ce0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <SAI_InitPCM+0x2e>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d103      	bne.n	8005d16 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d14:	e002      	b.n	8005d1c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d30:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d44:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d103      	bne.n	8005d54 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44
 8005d52:	e002      	b.n	8005d5a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	220d      	movs	r2, #13
 8005d58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d837      	bhi.n	8005dd0 <SAI_InitPCM+0xf0>
 8005d60:	a201      	add	r2, pc, #4	@ (adr r2, 8005d68 <SAI_InitPCM+0x88>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005d79 	.word	0x08005d79
 8005d6c:	08005d8f 	.word	0x08005d8f
 8005d70:	08005da5 	.word	0x08005da5
 8005d74:	08005dbb 	.word	0x08005dbb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2280      	movs	r2, #128	@ 0x80
 8005d7c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	011a      	lsls	r2, r3, #4
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2240      	movs	r2, #64	@ 0x40
 8005d8a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d8c:	e023      	b.n	8005dd6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2280      	movs	r2, #128	@ 0x80
 8005d92:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2280      	movs	r2, #128	@ 0x80
 8005da0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005da2:	e018      	b.n	8005dd6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	22c0      	movs	r2, #192	@ 0xc0
 8005da8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2280      	movs	r2, #128	@ 0x80
 8005db6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005db8:	e00d      	b.n	8005dd6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	22e0      	movs	r2, #224	@ 0xe0
 8005dbe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2280      	movs	r2, #128	@ 0x80
 8005dcc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005dce:	e002      	b.n	8005dd6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd4:	bf00      	nop
  }

  return status;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d103      	bne.n	8005e02 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f043 0308 	orr.w	r3, r3, #8
 8005e00:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d10b      	bne.n	8005e22 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d003      	beq.n	8005e1a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d103      	bne.n	8005e22 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f043 0310 	orr.w	r3, r3, #16
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d003      	beq.n	8005e32 <SAI_InterruptFlag+0x4e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d104      	bne.n	8005e3c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e003      	b.n	8005e44 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f043 0304 	orr.w	r3, r3, #4
 8005e42:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005e44:	68fb      	ldr	r3, [r7, #12]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005e5c:	4b18      	ldr	r3, [pc, #96]	@ (8005ec0 <SAI_Disable+0x6c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a18      	ldr	r2, [pc, #96]	@ (8005ec4 <SAI_Disable+0x70>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	0b1b      	lsrs	r3, r3, #12
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005e7e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	72fb      	strb	r3, [r7, #11]
      break;
 8005e9a:	e009      	b.n	8005eb0 <SAI_Disable+0x5c>
    }
    count--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e7      	bne.n	8005e80 <SAI_Disable+0x2c>

  return status;
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20000000 	.word	0x20000000
 8005ec4:	95cbec1b 	.word	0x95cbec1b

08005ec8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d01c      	beq.n	8005f18 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005ef4:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff ff73 	bl	8005de4 <SAI_InterruptFlag>
 8005efe:	4603      	mov	r3, r0
 8005f00:	43d9      	mvns	r1, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7ff fe11 	bl	8005b40 <HAL_SAI_TxCpltCallback>
#endif
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff fe0d 	bl	8005b54 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005f6e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff ff6f 	bl	8005e54 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fdee 	bl	8005b68 <HAL_SAI_ErrorCallback>
#endif
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc2:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d00a      	beq.n	8005fe4 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff ff40 	bl	8005e54 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0208 	orr.w	r2, r2, #8
 8005fe2:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff fdb7 	bl	8005b68 <HAL_SAI_ErrorCallback>
#endif
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e095      	b.n	8006140 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d108      	bne.n	800602e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006024:	d009      	beq.n	800603a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	61da      	str	r2, [r3, #28]
 800602c:	e005      	b.n	800603a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fb f851 	bl	80010fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006070:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800607a:	d902      	bls.n	8006082 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e002      	b.n	8006088 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006086:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006090:	d007      	beq.n	80060a2 <HAL_SPI_Init+0xa0>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800609a:	d002      	beq.n	80060a2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e4:	ea42 0103 	orr.w	r1, r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	f003 0204 	and.w	r2, r3, #4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800611e:	ea42 0103 	orr.w	r1, r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10e      	bne.n	8006188 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d004      	beq.n	8006188 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
    return;
 8006186:	e0ce      	b.n	8006326 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <HAL_SPI_IRQHandler+0x5e>
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
    return;
 80061a4:	e0bf      	b.n	8006326 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <HAL_SPI_IRQHandler+0x7e>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80b0 	beq.w	8006326 <HAL_SPI_IRQHandler+0x1de>
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80aa 	beq.w	8006326 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d023      	beq.n	8006224 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d011      	beq.n	800620c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ec:	f043 0204 	orr.w	r2, r3, #4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	e00b      	b.n	8006224 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	693b      	ldr	r3, [r7, #16]
        return;
 8006222:	e080      	b.n	8006326 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d014      	beq.n	8006258 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006232:	f043 0201 	orr.w	r2, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006266:	f043 0208 	orr.w	r2, r3, #8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006280:	2b00      	cmp	r3, #0
 8006282:	d04f      	beq.n	8006324 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006292:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d104      	bne.n	80062b0 <HAL_SPI_IRQHandler+0x168>
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d034      	beq.n	800631a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0203 	bic.w	r2, r2, #3
 80062be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d011      	beq.n	80062ec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062cc:	4a17      	ldr	r2, [pc, #92]	@ (800632c <HAL_SPI_IRQHandler+0x1e4>)
 80062ce:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fb fc59 	bl	8001b8c <HAL_DMA_Abort_IT>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d016      	beq.n	8006322 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f8:	4a0c      	ldr	r2, [pc, #48]	@ (800632c <HAL_SPI_IRQHandler+0x1e4>)
 80062fa:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006300:	4618      	mov	r0, r3
 8006302:	f7fb fc43 	bl	8001b8c <HAL_DMA_Abort_IT>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006310:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006318:	e003      	b.n	8006322 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f808 	bl	8006330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006320:	e000      	b.n	8006324 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006322:	bf00      	nop
    return;
 8006324:	bf00      	nop
  }
}
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	08006345 	.word	0x08006345

08006330 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff ffe5 	bl	8006330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e040      	b.n	8006402 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fb f889 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2224      	movs	r2, #36	@ 0x24
 800639a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fe8f 	bl	80070d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fbd4 	bl	8006b68 <UART_SetConfig>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e01b      	b.n	8006402 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0201 	orr.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ff0e 	bl	800721c <UART_CheckIdleState>
 8006400:	4603      	mov	r3, r0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b08a      	sub	sp, #40	@ 0x28
 800640e:	af02      	add	r7, sp, #8
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800641e:	2b20      	cmp	r3, #32
 8006420:	d177      	bne.n	8006512 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_UART_Transmit+0x24>
 8006428:	88fb      	ldrh	r3, [r7, #6]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e070      	b.n	8006514 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2221      	movs	r2, #33	@ 0x21
 800643e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006440:	f7fb f930 	bl	80016a4 <HAL_GetTick>
 8006444:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	88fa      	ldrh	r2, [r7, #6]
 800644a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	88fa      	ldrh	r2, [r7, #6]
 8006452:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645e:	d108      	bne.n	8006472 <HAL_UART_Transmit+0x68>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	e003      	b.n	800647a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800647a:	e02f      	b.n	80064dc <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2200      	movs	r2, #0
 8006484:	2180      	movs	r1, #128	@ 0x80
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 ff70 	bl	800736c <UART_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e03b      	b.n	8006514 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	881a      	ldrh	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ae:	b292      	uxth	r2, r2
 80064b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	3302      	adds	r3, #2
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	e007      	b.n	80064ca <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	3301      	adds	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1c9      	bne.n	800647c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	2140      	movs	r1, #64	@ 0x40
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 ff3a 	bl	800736c <UART_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d004      	beq.n	8006508 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e005      	b.n	8006514 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e000      	b.n	8006514 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006512:	2302      	movs	r3, #2
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b0ba      	sub	sp, #232	@ 0xe8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006542:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006546:	f640 030f 	movw	r3, #2063	@ 0x80f
 800654a:	4013      	ands	r3, r2
 800654c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d115      	bne.n	8006584 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d009      	beq.n	8006584 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 82ca 	beq.w	8006b0e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
      }
      return;
 8006582:	e2c4      	b.n	8006b0e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8117 	beq.w	80067bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800658e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800659a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800659e:	4b85      	ldr	r3, [pc, #532]	@ (80067b4 <HAL_UART_IRQHandler+0x298>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 810a 	beq.w	80067bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <HAL_UART_IRQHandler+0xbc>
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ce:	f043 0201 	orr.w	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d011      	beq.n	8006608 <HAL_UART_IRQHandler+0xec>
 80065e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2202      	movs	r2, #2
 80065f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d011      	beq.n	8006638 <HAL_UART_IRQHandler+0x11c>
 8006614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2204      	movs	r2, #4
 8006626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800662e:	f043 0202 	orr.w	r2, r3, #2
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006654:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800666a:	f043 0208 	orr.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800667c:	2b00      	cmp	r3, #0
 800667e:	d012      	beq.n	80066a6 <HAL_UART_IRQHandler+0x18a>
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00c      	beq.n	80066a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8230 	beq.w	8006b12 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00d      	beq.n	80066da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ee:	2b40      	cmp	r3, #64	@ 0x40
 80066f0:	d005      	beq.n	80066fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d04f      	beq.n	800679e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fea1 	bl	8007446 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670e:	2b40      	cmp	r3, #64	@ 0x40
 8006710:	d141      	bne.n	8006796 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006728:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800672c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800673e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800674a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1d9      	bne.n	8006712 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006762:	2b00      	cmp	r3, #0
 8006764:	d013      	beq.n	800678e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800676a:	4a13      	ldr	r2, [pc, #76]	@ (80067b8 <HAL_UART_IRQHandler+0x29c>)
 800676c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006772:	4618      	mov	r0, r3
 8006774:	f7fb fa0a 	bl	8001b8c <HAL_DMA_Abort_IT>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d017      	beq.n	80067ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006788:	4610      	mov	r0, r2
 800678a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	e00f      	b.n	80067ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f9d4 	bl	8006b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	e00b      	b.n	80067ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9d0 	bl	8006b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679c:	e007      	b.n	80067ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9cc 	bl	8006b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80067ac:	e1b1      	b.n	8006b12 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ae:	bf00      	nop
    return;
 80067b0:	e1af      	b.n	8006b12 <HAL_UART_IRQHandler+0x5f6>
 80067b2:	bf00      	nop
 80067b4:	04000120 	.word	0x04000120
 80067b8:	0800750f 	.word	0x0800750f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	f040 816a 	bne.w	8006a9a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ca:	f003 0310 	and.w	r3, r3, #16
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 8163 	beq.w	8006a9a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 815c 	beq.w	8006a9a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2210      	movs	r2, #16
 80067e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f4:	2b40      	cmp	r3, #64	@ 0x40
 80067f6:	f040 80d4 	bne.w	80069a2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006806:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80ad 	beq.w	800696a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800681a:	429a      	cmp	r2, r3
 800681c:	f080 80a5 	bcs.w	800696a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006826:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	f040 8086 	bne.w	8006948 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006858:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006866:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800686a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006872:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800687e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1da      	bne.n	800683c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3308      	adds	r3, #8
 800688c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006896:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e1      	bne.n	8006886 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e3      	bne.n	80068c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006918:	f023 0310 	bic.w	r3, r3, #16
 800691c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800692a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800692c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006930:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e4      	bne.n	8006908 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006942:	4618      	mov	r0, r3
 8006944:	f7fb f8e4 	bl	8001b10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800695a:	b29b      	uxth	r3, r3
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	b29b      	uxth	r3, r3
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f8f4 	bl	8006b50 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006968:	e0d5      	b.n	8006b16 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006974:	429a      	cmp	r2, r3
 8006976:	f040 80ce 	bne.w	8006b16 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b20      	cmp	r3, #32
 8006988:	f040 80c5 	bne.w	8006b16 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8d8 	bl	8006b50 <HAL_UARTEx_RxEventCallback>
      return;
 80069a0:	e0b9      	b.n	8006b16 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80ab 	beq.w	8006b1a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80069c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80a6 	beq.w	8006b1a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e4      	bne.n	80069ce <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	623b      	str	r3, [r7, #32]
   return(result);
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	f023 0301 	bic.w	r3, r3, #1
 8006a1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3308      	adds	r3, #8
 8006a24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a28:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e3      	bne.n	8006a04 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f023 0310 	bic.w	r3, r3, #16
 8006a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a72:	61fb      	str	r3, [r7, #28]
 8006a74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	69b9      	ldr	r1, [r7, #24]
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e4      	bne.n	8006a50 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f85c 	bl	8006b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a98:	e03f      	b.n	8006b1a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x5a8>
 8006aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d008      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006aba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fd66 	bl	800758e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac2:	e02d      	b.n	8006b20 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00e      	beq.n	8006aee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01c      	beq.n	8006b1e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
    }
    return;
 8006aec:	e017      	b.n	8006b1e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d012      	beq.n	8006b20 <HAL_UART_IRQHandler+0x604>
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00c      	beq.n	8006b20 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fd17 	bl	800753a <UART_EndTransmit_IT>
    return;
 8006b0c:	e008      	b.n	8006b20 <HAL_UART_IRQHandler+0x604>
      return;
 8006b0e:	bf00      	nop
 8006b10:	e006      	b.n	8006b20 <HAL_UART_IRQHandler+0x604>
    return;
 8006b12:	bf00      	nop
 8006b14:	e004      	b.n	8006b20 <HAL_UART_IRQHandler+0x604>
      return;
 8006b16:	bf00      	nop
 8006b18:	e002      	b.n	8006b20 <HAL_UART_IRQHandler+0x604>
      return;
 8006b1a:	bf00      	nop
 8006b1c:	e000      	b.n	8006b20 <HAL_UART_IRQHandler+0x604>
    return;
 8006b1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b20:	37e8      	adds	r7, #232	@ 0xe8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop

08006b28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b6c:	b08a      	sub	sp, #40	@ 0x28
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4ba4      	ldr	r3, [pc, #656]	@ (8006e28 <UART_SetConfig+0x2c0>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a99      	ldr	r2, [pc, #612]	@ (8006e2c <UART_SetConfig+0x2c4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d004      	beq.n	8006bd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be4:	430a      	orrs	r2, r1
 8006be6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a90      	ldr	r2, [pc, #576]	@ (8006e30 <UART_SetConfig+0x2c8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d126      	bne.n	8006c40 <UART_SetConfig+0xd8>
 8006bf2:	4b90      	ldr	r3, [pc, #576]	@ (8006e34 <UART_SetConfig+0x2cc>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf8:	f003 0303 	and.w	r3, r3, #3
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d81b      	bhi.n	8006c38 <UART_SetConfig+0xd0>
 8006c00:	a201      	add	r2, pc, #4	@ (adr r2, 8006c08 <UART_SetConfig+0xa0>)
 8006c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c06:	bf00      	nop
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006c29 	.word	0x08006c29
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c1e:	e116      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006c20:	2302      	movs	r3, #2
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c26:	e112      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c2e:	e10e      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006c30:	2308      	movs	r3, #8
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c36:	e10a      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3e:	e106      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a7c      	ldr	r2, [pc, #496]	@ (8006e38 <UART_SetConfig+0x2d0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d138      	bne.n	8006cbc <UART_SetConfig+0x154>
 8006c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006e34 <UART_SetConfig+0x2cc>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c50:	f003 030c 	and.w	r3, r3, #12
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	d82d      	bhi.n	8006cb4 <UART_SetConfig+0x14c>
 8006c58:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <UART_SetConfig+0xf8>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c95 	.word	0x08006c95
 8006c64:	08006cb5 	.word	0x08006cb5
 8006c68:	08006cb5 	.word	0x08006cb5
 8006c6c:	08006cb5 	.word	0x08006cb5
 8006c70:	08006ca5 	.word	0x08006ca5
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	08006cb5 	.word	0x08006cb5
 8006c7c:	08006cb5 	.word	0x08006cb5
 8006c80:	08006c9d 	.word	0x08006c9d
 8006c84:	08006cb5 	.word	0x08006cb5
 8006c88:	08006cb5 	.word	0x08006cb5
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cad 	.word	0x08006cad
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c9a:	e0d8      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca2:	e0d4      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006caa:	e0d0      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006cac:	2308      	movs	r3, #8
 8006cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb2:	e0cc      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cba:	e0c8      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a5e      	ldr	r2, [pc, #376]	@ (8006e3c <UART_SetConfig+0x2d4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d125      	bne.n	8006d12 <UART_SetConfig+0x1aa>
 8006cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8006e34 <UART_SetConfig+0x2cc>)
 8006cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ccc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cd0:	2b30      	cmp	r3, #48	@ 0x30
 8006cd2:	d016      	beq.n	8006d02 <UART_SetConfig+0x19a>
 8006cd4:	2b30      	cmp	r3, #48	@ 0x30
 8006cd6:	d818      	bhi.n	8006d0a <UART_SetConfig+0x1a2>
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d00a      	beq.n	8006cf2 <UART_SetConfig+0x18a>
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d814      	bhi.n	8006d0a <UART_SetConfig+0x1a2>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <UART_SetConfig+0x182>
 8006ce4:	2b10      	cmp	r3, #16
 8006ce6:	d008      	beq.n	8006cfa <UART_SetConfig+0x192>
 8006ce8:	e00f      	b.n	8006d0a <UART_SetConfig+0x1a2>
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cf0:	e0ad      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cf8:	e0a9      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006cfa:	2304      	movs	r3, #4
 8006cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d00:	e0a5      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006d02:	2308      	movs	r3, #8
 8006d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d08:	e0a1      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006d0a:	2310      	movs	r3, #16
 8006d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d10:	e09d      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a4a      	ldr	r2, [pc, #296]	@ (8006e40 <UART_SetConfig+0x2d8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d125      	bne.n	8006d68 <UART_SetConfig+0x200>
 8006d1c:	4b45      	ldr	r3, [pc, #276]	@ (8006e34 <UART_SetConfig+0x2cc>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d28:	d016      	beq.n	8006d58 <UART_SetConfig+0x1f0>
 8006d2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d2c:	d818      	bhi.n	8006d60 <UART_SetConfig+0x1f8>
 8006d2e:	2b80      	cmp	r3, #128	@ 0x80
 8006d30:	d00a      	beq.n	8006d48 <UART_SetConfig+0x1e0>
 8006d32:	2b80      	cmp	r3, #128	@ 0x80
 8006d34:	d814      	bhi.n	8006d60 <UART_SetConfig+0x1f8>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <UART_SetConfig+0x1d8>
 8006d3a:	2b40      	cmp	r3, #64	@ 0x40
 8006d3c:	d008      	beq.n	8006d50 <UART_SetConfig+0x1e8>
 8006d3e:	e00f      	b.n	8006d60 <UART_SetConfig+0x1f8>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d46:	e082      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d4e:	e07e      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006d50:	2304      	movs	r3, #4
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d56:	e07a      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d5e:	e076      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d66:	e072      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a35      	ldr	r2, [pc, #212]	@ (8006e44 <UART_SetConfig+0x2dc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d12a      	bne.n	8006dc8 <UART_SetConfig+0x260>
 8006d72:	4b30      	ldr	r3, [pc, #192]	@ (8006e34 <UART_SetConfig+0x2cc>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d80:	d01a      	beq.n	8006db8 <UART_SetConfig+0x250>
 8006d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d86:	d81b      	bhi.n	8006dc0 <UART_SetConfig+0x258>
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d8c:	d00c      	beq.n	8006da8 <UART_SetConfig+0x240>
 8006d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d92:	d815      	bhi.n	8006dc0 <UART_SetConfig+0x258>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <UART_SetConfig+0x238>
 8006d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d9c:	d008      	beq.n	8006db0 <UART_SetConfig+0x248>
 8006d9e:	e00f      	b.n	8006dc0 <UART_SetConfig+0x258>
 8006da0:	2300      	movs	r3, #0
 8006da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006da6:	e052      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006da8:	2302      	movs	r3, #2
 8006daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dae:	e04e      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006db0:	2304      	movs	r3, #4
 8006db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006db6:	e04a      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006db8:	2308      	movs	r3, #8
 8006dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dbe:	e046      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc6:	e042      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a17      	ldr	r2, [pc, #92]	@ (8006e2c <UART_SetConfig+0x2c4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d13a      	bne.n	8006e48 <UART_SetConfig+0x2e0>
 8006dd2:	4b18      	ldr	r3, [pc, #96]	@ (8006e34 <UART_SetConfig+0x2cc>)
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ddc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de0:	d01a      	beq.n	8006e18 <UART_SetConfig+0x2b0>
 8006de2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de6:	d81b      	bhi.n	8006e20 <UART_SetConfig+0x2b8>
 8006de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dec:	d00c      	beq.n	8006e08 <UART_SetConfig+0x2a0>
 8006dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df2:	d815      	bhi.n	8006e20 <UART_SetConfig+0x2b8>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <UART_SetConfig+0x298>
 8006df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfc:	d008      	beq.n	8006e10 <UART_SetConfig+0x2a8>
 8006dfe:	e00f      	b.n	8006e20 <UART_SetConfig+0x2b8>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e06:	e022      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e0e:	e01e      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006e10:	2304      	movs	r3, #4
 8006e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e16:	e01a      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e1e:	e016      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e26:	e012      	b.n	8006e4e <UART_SetConfig+0x2e6>
 8006e28:	efff69f3 	.word	0xefff69f3
 8006e2c:	40008000 	.word	0x40008000
 8006e30:	40013800 	.word	0x40013800
 8006e34:	40021000 	.word	0x40021000
 8006e38:	40004400 	.word	0x40004400
 8006e3c:	40004800 	.word	0x40004800
 8006e40:	40004c00 	.word	0x40004c00
 8006e44:	40005000 	.word	0x40005000
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a9f      	ldr	r2, [pc, #636]	@ (80070d0 <UART_SetConfig+0x568>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d17a      	bne.n	8006f4e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d824      	bhi.n	8006eaa <UART_SetConfig+0x342>
 8006e60:	a201      	add	r2, pc, #4	@ (adr r2, 8006e68 <UART_SetConfig+0x300>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e8d 	.word	0x08006e8d
 8006e6c:	08006eab 	.word	0x08006eab
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006eab 	.word	0x08006eab
 8006e78:	08006e9b 	.word	0x08006e9b
 8006e7c:	08006eab 	.word	0x08006eab
 8006e80:	08006eab 	.word	0x08006eab
 8006e84:	08006eab 	.word	0x08006eab
 8006e88:	08006ea3 	.word	0x08006ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e8c:	f7fc fe54 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8006e90:	61f8      	str	r0, [r7, #28]
        break;
 8006e92:	e010      	b.n	8006eb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e94:	4b8f      	ldr	r3, [pc, #572]	@ (80070d4 <UART_SetConfig+0x56c>)
 8006e96:	61fb      	str	r3, [r7, #28]
        break;
 8006e98:	e00d      	b.n	8006eb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e9a:	f7fc fdb5 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8006e9e:	61f8      	str	r0, [r7, #28]
        break;
 8006ea0:	e009      	b.n	8006eb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ea6:	61fb      	str	r3, [r7, #28]
        break;
 8006ea8:	e005      	b.n	8006eb6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006eb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80fb 	beq.w	80070b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	4413      	add	r3, r2
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d305      	bcc.n	8006eda <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d903      	bls.n	8006ee2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ee0:	e0e8      	b.n	80070b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	461c      	mov	r4, r3
 8006ee8:	4615      	mov	r5, r2
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	022b      	lsls	r3, r5, #8
 8006ef4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ef8:	0222      	lsls	r2, r4, #8
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	6849      	ldr	r1, [r1, #4]
 8006efe:	0849      	lsrs	r1, r1, #1
 8006f00:	2000      	movs	r0, #0
 8006f02:	4688      	mov	r8, r1
 8006f04:	4681      	mov	r9, r0
 8006f06:	eb12 0a08 	adds.w	sl, r2, r8
 8006f0a:	eb43 0b09 	adc.w	fp, r3, r9
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f7f9 f9a6 	bl	8000270 <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4613      	mov	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f32:	d308      	bcc.n	8006f46 <UART_SetConfig+0x3de>
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f3a:	d204      	bcs.n	8006f46 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	60da      	str	r2, [r3, #12]
 8006f44:	e0b6      	b.n	80070b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f4c:	e0b2      	b.n	80070b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f56:	d15e      	bne.n	8007016 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d828      	bhi.n	8006fb2 <UART_SetConfig+0x44a>
 8006f60:	a201      	add	r2, pc, #4	@ (adr r2, 8006f68 <UART_SetConfig+0x400>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006f8d 	.word	0x08006f8d
 8006f6c:	08006f95 	.word	0x08006f95
 8006f70:	08006f9d 	.word	0x08006f9d
 8006f74:	08006fb3 	.word	0x08006fb3
 8006f78:	08006fa3 	.word	0x08006fa3
 8006f7c:	08006fb3 	.word	0x08006fb3
 8006f80:	08006fb3 	.word	0x08006fb3
 8006f84:	08006fb3 	.word	0x08006fb3
 8006f88:	08006fab 	.word	0x08006fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f8c:	f7fc fdd4 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8006f90:	61f8      	str	r0, [r7, #28]
        break;
 8006f92:	e014      	b.n	8006fbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f94:	f7fc fde6 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 8006f98:	61f8      	str	r0, [r7, #28]
        break;
 8006f9a:	e010      	b.n	8006fbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80070d4 <UART_SetConfig+0x56c>)
 8006f9e:	61fb      	str	r3, [r7, #28]
        break;
 8006fa0:	e00d      	b.n	8006fbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fa2:	f7fc fd31 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8006fa6:	61f8      	str	r0, [r7, #28]
        break;
 8006fa8:	e009      	b.n	8006fbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fae:	61fb      	str	r3, [r7, #28]
        break;
 8006fb0:	e005      	b.n	8006fbe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d077      	beq.n	80070b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	005a      	lsls	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	441a      	add	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b0f      	cmp	r3, #15
 8006fde:	d916      	bls.n	800700e <UART_SetConfig+0x4a6>
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe6:	d212      	bcs.n	800700e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f023 030f 	bic.w	r3, r3, #15
 8006ff0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	085b      	lsrs	r3, r3, #1
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	8afb      	ldrh	r3, [r7, #22]
 8007000:	4313      	orrs	r3, r2
 8007002:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	8afa      	ldrh	r2, [r7, #22]
 800700a:	60da      	str	r2, [r3, #12]
 800700c:	e052      	b.n	80070b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007014:	e04e      	b.n	80070b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007016:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800701a:	2b08      	cmp	r3, #8
 800701c:	d827      	bhi.n	800706e <UART_SetConfig+0x506>
 800701e:	a201      	add	r2, pc, #4	@ (adr r2, 8007024 <UART_SetConfig+0x4bc>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007049 	.word	0x08007049
 8007028:	08007051 	.word	0x08007051
 800702c:	08007059 	.word	0x08007059
 8007030:	0800706f 	.word	0x0800706f
 8007034:	0800705f 	.word	0x0800705f
 8007038:	0800706f 	.word	0x0800706f
 800703c:	0800706f 	.word	0x0800706f
 8007040:	0800706f 	.word	0x0800706f
 8007044:	08007067 	.word	0x08007067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007048:	f7fc fd76 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 800704c:	61f8      	str	r0, [r7, #28]
        break;
 800704e:	e014      	b.n	800707a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007050:	f7fc fd88 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 8007054:	61f8      	str	r0, [r7, #28]
        break;
 8007056:	e010      	b.n	800707a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007058:	4b1e      	ldr	r3, [pc, #120]	@ (80070d4 <UART_SetConfig+0x56c>)
 800705a:	61fb      	str	r3, [r7, #28]
        break;
 800705c:	e00d      	b.n	800707a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705e:	f7fc fcd3 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8007062:	61f8      	str	r0, [r7, #28]
        break;
 8007064:	e009      	b.n	800707a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800706a:	61fb      	str	r3, [r7, #28]
        break;
 800706c:	e005      	b.n	800707a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007078:	bf00      	nop
    }

    if (pclk != 0U)
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d019      	beq.n	80070b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	085a      	lsrs	r2, r3, #1
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	441a      	add	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b0f      	cmp	r3, #15
 8007098:	d909      	bls.n	80070ae <UART_SetConfig+0x546>
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a0:	d205      	bcs.n	80070ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60da      	str	r2, [r3, #12]
 80070ac:	e002      	b.n	80070b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80070c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3728      	adds	r7, #40	@ 0x28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ce:	bf00      	nop
 80070d0:	40008000 	.word	0x40008000
 80070d4:	00f42400 	.word	0x00f42400

080070d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01a      	beq.n	80071ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071d6:	d10a      	bne.n	80071ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b098      	sub	sp, #96	@ 0x60
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800722c:	f7fa fa3a 	bl	80016a4 <HAL_GetTick>
 8007230:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d12e      	bne.n	800729e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007240:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007248:	2200      	movs	r2, #0
 800724a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f88c 	bl	800736c <UART_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d021      	beq.n	800729e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800726e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007278:	647b      	str	r3, [r7, #68]	@ 0x44
 800727a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800727e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e6      	bne.n	800725a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e062      	b.n	8007364 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d149      	bne.n	8007340 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b4:	2200      	movs	r2, #0
 80072b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f856 	bl	800736c <UART_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d03c      	beq.n	8007340 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	623b      	str	r3, [r7, #32]
   return(result);
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	60fb      	str	r3, [r7, #12]
   return(result);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007318:	61fa      	str	r2, [r7, #28]
 800731a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	69b9      	ldr	r1, [r7, #24]
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	617b      	str	r3, [r7, #20]
   return(result);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e5      	bne.n	80072f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e011      	b.n	8007364 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2220      	movs	r2, #32
 800734a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3758      	adds	r7, #88	@ 0x58
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	4613      	mov	r3, r2
 800737a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737c:	e04f      	b.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007384:	d04b      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007386:	f7fa f98d 	bl	80016a4 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	429a      	cmp	r2, r3
 8007394:	d302      	bcc.n	800739c <UART_WaitOnFlagUntilTimeout+0x30>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e04e      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d037      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b80      	cmp	r3, #128	@ 0x80
 80073b2:	d034      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b40      	cmp	r3, #64	@ 0x40
 80073b8:	d031      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d110      	bne.n	80073ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2208      	movs	r2, #8
 80073ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f838 	bl	8007446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2208      	movs	r2, #8
 80073da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e029      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073f8:	d111      	bne.n	800741e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f81e 	bl	8007446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e00f      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4013      	ands	r3, r2
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	429a      	cmp	r2, r3
 800742c:	bf0c      	ite	eq
 800742e:	2301      	moveq	r3, #1
 8007430:	2300      	movne	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	461a      	mov	r2, r3
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	429a      	cmp	r2, r3
 800743a:	d0a0      	beq.n	800737e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007446:	b480      	push	{r7}
 8007448:	b095      	sub	sp, #84	@ 0x54
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800746c:	643b      	str	r3, [r7, #64]	@ 0x40
 800746e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3308      	adds	r3, #8
 8007486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	f023 0301 	bic.w	r3, r3, #1
 8007496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e5      	bne.n	8007480 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d118      	bne.n	80074ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f023 0310 	bic.w	r3, r3, #16
 80074d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6979      	ldr	r1, [r7, #20]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	613b      	str	r3, [r7, #16]
   return(result);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e6      	bne.n	80074bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007502:	bf00      	nop
 8007504:	3754      	adds	r7, #84	@ 0x54
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff fb05 	bl	8006b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b088      	sub	sp, #32
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007556:	61fb      	str	r3, [r7, #28]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6979      	ldr	r1, [r7, #20]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	613b      	str	r3, [r7, #16]
   return(result);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e6      	bne.n	8007542 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fad1 	bl	8006b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007586:	bf00      	nop
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	4603      	mov	r3, r0
 80075aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80075b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075b4:	2b84      	cmp	r3, #132	@ 0x84
 80075b6:	d005      	beq.n	80075c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80075b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	3303      	adds	r3, #3
 80075c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80075c4:	68fb      	ldr	r3, [r7, #12]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80075d6:	f000 fae5 	bl	8007ba4 <vTaskStartScheduler>
  
  return osOK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}

080075e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80075e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e2:	b089      	sub	sp, #36	@ 0x24
 80075e4:	af04      	add	r7, sp, #16
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d020      	beq.n	8007634 <osThreadCreate+0x54>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01c      	beq.n	8007634 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685c      	ldr	r4, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691e      	ldr	r6, [r3, #16]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff ffc8 	bl	80075a2 <makeFreeRtosPriority>
 8007612:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800761c:	9202      	str	r2, [sp, #8]
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	9100      	str	r1, [sp, #0]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	4632      	mov	r2, r6
 8007626:	4629      	mov	r1, r5
 8007628:	4620      	mov	r0, r4
 800762a:	f000 f8ed 	bl	8007808 <xTaskCreateStatic>
 800762e:	4603      	mov	r3, r0
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	e01c      	b.n	800766e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685c      	ldr	r4, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007640:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff ffaa 	bl	80075a2 <makeFreeRtosPriority>
 800764e:	4602      	mov	r2, r0
 8007650:	f107 030c 	add.w	r3, r7, #12
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	9200      	str	r2, [sp, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	4632      	mov	r2, r6
 800765c:	4629      	mov	r1, r5
 800765e:	4620      	mov	r0, r4
 8007660:	f000 f932 	bl	80078c8 <xTaskCreate>
 8007664:	4603      	mov	r3, r0
 8007666:	2b01      	cmp	r3, #1
 8007668:	d001      	beq.n	800766e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	e000      	b.n	8007670 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800766e:	68fb      	ldr	r3, [r7, #12]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007678 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <osDelay+0x16>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	e000      	b.n	8007690 <osDelay+0x18>
 800768e:	2301      	movs	r3, #1
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fa51 	bl	8007b38 <vTaskDelay>
  
  return osOK;
 8007696:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f103 0208 	add.w	r2, r3, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f103 0208 	add.w	r2, r3, #8
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f103 0208 	add.w	r2, r3, #8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	601a      	str	r2, [r3, #0]
}
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d103      	bne.n	8007762 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	e00c      	b.n	800777c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3308      	adds	r3, #8
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	e002      	b.n	8007770 <vListInsert+0x2e>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	429a      	cmp	r2, r3
 800777a:	d2f6      	bcs.n	800776a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]
}
 80077a8:	bf00      	nop
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6892      	ldr	r2, [r2, #8]
 80077ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6852      	ldr	r2, [r2, #4]
 80077d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d103      	bne.n	80077e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	1e5a      	subs	r2, r3, #1
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08e      	sub	sp, #56	@ 0x38
 800780c:	af04      	add	r7, sp, #16
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10b      	bne.n	8007834 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10b      	bne.n	8007852 <xTaskCreateStatic+0x4a>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	61fb      	str	r3, [r7, #28]
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	e7fd      	b.n	800784e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007852:	2354      	movs	r3, #84	@ 0x54
 8007854:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b54      	cmp	r3, #84	@ 0x54
 800785a:	d00b      	beq.n	8007874 <xTaskCreateStatic+0x6c>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	61bb      	str	r3, [r7, #24]
}
 800786e:	bf00      	nop
 8007870:	bf00      	nop
 8007872:	e7fd      	b.n	8007870 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007874:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01e      	beq.n	80078ba <xTaskCreateStatic+0xb2>
 800787c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01b      	beq.n	80078ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007884:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800788a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788e:	2202      	movs	r2, #2
 8007890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007894:	2300      	movs	r3, #0
 8007896:	9303      	str	r3, [sp, #12]
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	9302      	str	r3, [sp, #8]
 800789c:	f107 0314 	add.w	r3, r7, #20
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f850 	bl	8007952 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078b4:	f000 f8d6 	bl	8007a64 <prvAddNewTaskToReadyList>
 80078b8:	e001      	b.n	80078be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078be:	697b      	ldr	r3, [r7, #20]
	}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3728      	adds	r7, #40	@ 0x28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	@ 0x30
 80078cc:	af04      	add	r7, sp, #16
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078d8:	88fb      	ldrh	r3, [r7, #6]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fef3 	bl	80086c8 <pvPortMalloc>
 80078e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00e      	beq.n	8007908 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078ea:	2054      	movs	r0, #84	@ 0x54
 80078ec:	f000 feec 	bl	80086c8 <pvPortMalloc>
 80078f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80078fe:	e005      	b.n	800790c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007900:	6978      	ldr	r0, [r7, #20]
 8007902:	f000 ffaf 	bl	8008864 <vPortFree>
 8007906:	e001      	b.n	800790c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d017      	beq.n	8007942 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	2300      	movs	r3, #0
 800791e:	9303      	str	r3, [sp, #12]
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	9302      	str	r3, [sp, #8]
 8007924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f80e 	bl	8007952 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007936:	69f8      	ldr	r0, [r7, #28]
 8007938:	f000 f894 	bl	8007a64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800793c:	2301      	movs	r3, #1
 800793e:	61bb      	str	r3, [r7, #24]
 8007940:	e002      	b.n	8007948 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007942:	f04f 33ff 	mov.w	r3, #4294967295
 8007946:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007948:	69bb      	ldr	r3, [r7, #24]
	}
 800794a:	4618      	mov	r0, r3
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b088      	sub	sp, #32
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800796a:	3b01      	subs	r3, #1
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	f023 0307 	bic.w	r3, r3, #7
 8007978:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	617b      	str	r3, [r7, #20]
}
 8007996:	bf00      	nop
 8007998:	bf00      	nop
 800799a:	e7fd      	b.n	8007998 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01f      	beq.n	80079e2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079a2:	2300      	movs	r3, #0
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	e012      	b.n	80079ce <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	7819      	ldrb	r1, [r3, #0]
 80079b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	3334      	adds	r3, #52	@ 0x34
 80079b8:	460a      	mov	r2, r1
 80079ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d006      	beq.n	80079d6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	3301      	adds	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	2b0f      	cmp	r3, #15
 80079d2:	d9e9      	bls.n	80079a8 <prvInitialiseNewTask+0x56>
 80079d4:	e000      	b.n	80079d8 <prvInitialiseNewTask+0x86>
			{
				break;
 80079d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079e0:	e003      	b.n	80079ea <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d901      	bls.n	80079f4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079f0:	2306      	movs	r3, #6
 80079f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079fe:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	2200      	movs	r2, #0
 8007a04:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fe68 	bl	80076e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	3318      	adds	r3, #24
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fe63 	bl	80076e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a22:	f1c3 0207 	rsb	r2, r3, #7
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	2200      	movs	r2, #0
 8007a34:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	68f9      	ldr	r1, [r7, #12]
 8007a42:	69b8      	ldr	r0, [r7, #24]
 8007a44:	f000 fc2c 	bl	80082a0 <pxPortInitialiseStack>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a5a:	bf00      	nop
 8007a5c:	3720      	adds	r7, #32
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a6c:	f000 fd4c 	bl	8008508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a70:	4b2a      	ldr	r3, [pc, #168]	@ (8007b1c <prvAddNewTaskToReadyList+0xb8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	4a29      	ldr	r2, [pc, #164]	@ (8007b1c <prvAddNewTaskToReadyList+0xb8>)
 8007a78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a7a:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <prvAddNewTaskToReadyList+0xbc>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a82:	4a27      	ldr	r2, [pc, #156]	@ (8007b20 <prvAddNewTaskToReadyList+0xbc>)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a88:	4b24      	ldr	r3, [pc, #144]	@ (8007b1c <prvAddNewTaskToReadyList+0xb8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d110      	bne.n	8007ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a90:	f000 fac4 	bl	800801c <prvInitialiseTaskLists>
 8007a94:	e00d      	b.n	8007ab2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a96:	4b23      	ldr	r3, [pc, #140]	@ (8007b24 <prvAddNewTaskToReadyList+0xc0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a9e:	4b20      	ldr	r3, [pc, #128]	@ (8007b20 <prvAddNewTaskToReadyList+0xbc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d802      	bhi.n	8007ab2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007aac:	4a1c      	ldr	r2, [pc, #112]	@ (8007b20 <prvAddNewTaskToReadyList+0xbc>)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b28 <prvAddNewTaskToReadyList+0xc4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b28 <prvAddNewTaskToReadyList+0xc4>)
 8007aba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	4b19      	ldr	r3, [pc, #100]	@ (8007b2c <prvAddNewTaskToReadyList+0xc8>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	4a18      	ldr	r2, [pc, #96]	@ (8007b2c <prvAddNewTaskToReadyList+0xc8>)
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4a15      	ldr	r2, [pc, #84]	@ (8007b30 <prvAddNewTaskToReadyList+0xcc>)
 8007adc:	441a      	add	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	f7ff fe08 	bl	80076fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007aea:	f000 fd3f 	bl	800856c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007aee:	4b0d      	ldr	r3, [pc, #52]	@ (8007b24 <prvAddNewTaskToReadyList+0xc0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00e      	beq.n	8007b14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007af6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b20 <prvAddNewTaskToReadyList+0xbc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d207      	bcs.n	8007b14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b04:	4b0b      	ldr	r3, [pc, #44]	@ (8007b34 <prvAddNewTaskToReadyList+0xd0>)
 8007b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	200008c4 	.word	0x200008c4
 8007b20:	200007c4 	.word	0x200007c4
 8007b24:	200008d0 	.word	0x200008d0
 8007b28:	200008e0 	.word	0x200008e0
 8007b2c:	200008cc 	.word	0x200008cc
 8007b30:	200007c8 	.word	0x200007c8
 8007b34:	e000ed04 	.word	0xe000ed04

08007b38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d018      	beq.n	8007b7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b4a:	4b14      	ldr	r3, [pc, #80]	@ (8007b9c <vTaskDelay+0x64>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <vTaskDelay+0x32>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	60bb      	str	r3, [r7, #8]
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b6a:	f000 f87d 	bl	8007c68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fb2f 	bl	80081d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b76:	f000 f885 	bl	8007c84 <xTaskResumeAll>
 8007b7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d107      	bne.n	8007b92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007b82:	4b07      	ldr	r3, [pc, #28]	@ (8007ba0 <vTaskDelay+0x68>)
 8007b84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200008ec 	.word	0x200008ec
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	@ 0x28
 8007ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bb2:	463a      	mov	r2, r7
 8007bb4:	1d39      	adds	r1, r7, #4
 8007bb6:	f107 0308 	add.w	r3, r7, #8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7f8 fcf6 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	9202      	str	r2, [sp, #8]
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	460a      	mov	r2, r1
 8007bd2:	491f      	ldr	r1, [pc, #124]	@ (8007c50 <vTaskStartScheduler+0xac>)
 8007bd4:	481f      	ldr	r0, [pc, #124]	@ (8007c54 <vTaskStartScheduler+0xb0>)
 8007bd6:	f7ff fe17 	bl	8007808 <xTaskCreateStatic>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8007c58 <vTaskStartScheduler+0xb4>)
 8007bde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007be0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c58 <vTaskStartScheduler+0xb4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007be8:	2301      	movs	r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	e001      	b.n	8007bf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d116      	bne.n	8007c26 <vTaskStartScheduler+0x82>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	613b      	str	r3, [r7, #16]
}
 8007c0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c0c:	4b13      	ldr	r3, [pc, #76]	@ (8007c5c <vTaskStartScheduler+0xb8>)
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c14:	4b12      	ldr	r3, [pc, #72]	@ (8007c60 <vTaskStartScheduler+0xbc>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c1a:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <vTaskStartScheduler+0xc0>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c20:	f000 fbce 	bl	80083c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c24:	e00f      	b.n	8007c46 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2c:	d10b      	bne.n	8007c46 <vTaskStartScheduler+0xa2>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60fb      	str	r3, [r7, #12]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <vTaskStartScheduler+0x9e>
}
 8007c46:	bf00      	nop
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	08009ea8 	.word	0x08009ea8
 8007c54:	08007fed 	.word	0x08007fed
 8007c58:	200008e8 	.word	0x200008e8
 8007c5c:	200008e4 	.word	0x200008e4
 8007c60:	200008d0 	.word	0x200008d0
 8007c64:	200008c8 	.word	0x200008c8

08007c68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c6c:	4b04      	ldr	r3, [pc, #16]	@ (8007c80 <vTaskSuspendAll+0x18>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	4a03      	ldr	r2, [pc, #12]	@ (8007c80 <vTaskSuspendAll+0x18>)
 8007c74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c76:	bf00      	nop
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	200008ec 	.word	0x200008ec

08007c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c92:	4b42      	ldr	r3, [pc, #264]	@ (8007d9c <xTaskResumeAll+0x118>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	603b      	str	r3, [r7, #0]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cb2:	f000 fc29 	bl	8008508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cb6:	4b39      	ldr	r3, [pc, #228]	@ (8007d9c <xTaskResumeAll+0x118>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	4a37      	ldr	r2, [pc, #220]	@ (8007d9c <xTaskResumeAll+0x118>)
 8007cbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cc0:	4b36      	ldr	r3, [pc, #216]	@ (8007d9c <xTaskResumeAll+0x118>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d161      	bne.n	8007d8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cc8:	4b35      	ldr	r3, [pc, #212]	@ (8007da0 <xTaskResumeAll+0x11c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d05d      	beq.n	8007d8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cd0:	e02e      	b.n	8007d30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd2:	4b34      	ldr	r3, [pc, #208]	@ (8007da4 <xTaskResumeAll+0x120>)
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3318      	adds	r3, #24
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fd68 	bl	80077b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fd63 	bl	80077b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	409a      	lsls	r2, r3
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8007da8 <xTaskResumeAll+0x124>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8007da8 <xTaskResumeAll+0x124>)
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a27      	ldr	r2, [pc, #156]	@ (8007dac <xTaskResumeAll+0x128>)
 8007d0e:	441a      	add	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f7ff fcef 	bl	80076fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d20:	4b23      	ldr	r3, [pc, #140]	@ (8007db0 <xTaskResumeAll+0x12c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d302      	bcc.n	8007d30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d2a:	4b22      	ldr	r3, [pc, #136]	@ (8007db4 <xTaskResumeAll+0x130>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d30:	4b1c      	ldr	r3, [pc, #112]	@ (8007da4 <xTaskResumeAll+0x120>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1cc      	bne.n	8007cd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d3e:	f000 fa0b 	bl	8008158 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d42:	4b1d      	ldr	r3, [pc, #116]	@ (8007db8 <xTaskResumeAll+0x134>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d010      	beq.n	8007d70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d4e:	f000 f837 	bl	8007dc0 <xTaskIncrementTick>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d58:	4b16      	ldr	r3, [pc, #88]	@ (8007db4 <xTaskResumeAll+0x130>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f1      	bne.n	8007d4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d6a:	4b13      	ldr	r3, [pc, #76]	@ (8007db8 <xTaskResumeAll+0x134>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d70:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <xTaskResumeAll+0x130>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007dbc <xTaskResumeAll+0x138>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d8c:	f000 fbee 	bl	800856c <vPortExitCritical>

	return xAlreadyYielded;
 8007d90:	68bb      	ldr	r3, [r7, #8]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	200008ec 	.word	0x200008ec
 8007da0:	200008c4 	.word	0x200008c4
 8007da4:	20000884 	.word	0x20000884
 8007da8:	200008cc 	.word	0x200008cc
 8007dac:	200007c8 	.word	0x200007c8
 8007db0:	200007c4 	.word	0x200007c4
 8007db4:	200008d8 	.word	0x200008d8
 8007db8:	200008d4 	.word	0x200008d4
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dca:	4b4f      	ldr	r3, [pc, #316]	@ (8007f08 <xTaskIncrementTick+0x148>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f040 808f 	bne.w	8007ef2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8007f0c <xTaskIncrementTick+0x14c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8007f0c <xTaskIncrementTick+0x14c>)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d121      	bne.n	8007e2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007de8:	4b49      	ldr	r3, [pc, #292]	@ (8007f10 <xTaskIncrementTick+0x150>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	603b      	str	r3, [r7, #0]
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	e7fd      	b.n	8007e06 <xTaskIncrementTick+0x46>
 8007e0a:	4b41      	ldr	r3, [pc, #260]	@ (8007f10 <xTaskIncrementTick+0x150>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	4b40      	ldr	r3, [pc, #256]	@ (8007f14 <xTaskIncrementTick+0x154>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a3e      	ldr	r2, [pc, #248]	@ (8007f10 <xTaskIncrementTick+0x150>)
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	4a3e      	ldr	r2, [pc, #248]	@ (8007f14 <xTaskIncrementTick+0x154>)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8007f18 <xTaskIncrementTick+0x158>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3301      	adds	r3, #1
 8007e24:	4a3c      	ldr	r2, [pc, #240]	@ (8007f18 <xTaskIncrementTick+0x158>)
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	f000 f996 	bl	8008158 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f1c <xTaskIncrementTick+0x15c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d348      	bcc.n	8007ec8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e36:	4b36      	ldr	r3, [pc, #216]	@ (8007f10 <xTaskIncrementTick+0x150>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d104      	bne.n	8007e4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e40:	4b36      	ldr	r3, [pc, #216]	@ (8007f1c <xTaskIncrementTick+0x15c>)
 8007e42:	f04f 32ff 	mov.w	r2, #4294967295
 8007e46:	601a      	str	r2, [r3, #0]
					break;
 8007e48:	e03e      	b.n	8007ec8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4a:	4b31      	ldr	r3, [pc, #196]	@ (8007f10 <xTaskIncrementTick+0x150>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d203      	bcs.n	8007e6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e62:	4a2e      	ldr	r2, [pc, #184]	@ (8007f1c <xTaskIncrementTick+0x15c>)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e68:	e02e      	b.n	8007ec8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fca0 	bl	80077b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d004      	beq.n	8007e86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	3318      	adds	r3, #24
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff fc97 	bl	80077b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	409a      	lsls	r2, r3
 8007e8e:	4b24      	ldr	r3, [pc, #144]	@ (8007f20 <xTaskIncrementTick+0x160>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	4a22      	ldr	r2, [pc, #136]	@ (8007f20 <xTaskIncrementTick+0x160>)
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8007f24 <xTaskIncrementTick+0x164>)
 8007ea6:	441a      	add	r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f7ff fc23 	bl	80076fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f28 <xTaskIncrementTick+0x168>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d3b9      	bcc.n	8007e36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec6:	e7b6      	b.n	8007e36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ec8:	4b17      	ldr	r3, [pc, #92]	@ (8007f28 <xTaskIncrementTick+0x168>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ece:	4915      	ldr	r1, [pc, #84]	@ (8007f24 <xTaskIncrementTick+0x164>)
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d901      	bls.n	8007ee4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ee4:	4b11      	ldr	r3, [pc, #68]	@ (8007f2c <xTaskIncrementTick+0x16c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	e004      	b.n	8007efc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f30 <xTaskIncrementTick+0x170>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8007f30 <xTaskIncrementTick+0x170>)
 8007efa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007efc:	697b      	ldr	r3, [r7, #20]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	200008ec 	.word	0x200008ec
 8007f0c:	200008c8 	.word	0x200008c8
 8007f10:	2000087c 	.word	0x2000087c
 8007f14:	20000880 	.word	0x20000880
 8007f18:	200008dc 	.word	0x200008dc
 8007f1c:	200008e4 	.word	0x200008e4
 8007f20:	200008cc 	.word	0x200008cc
 8007f24:	200007c8 	.word	0x200007c8
 8007f28:	200007c4 	.word	0x200007c4
 8007f2c:	200008d8 	.word	0x200008d8
 8007f30:	200008d4 	.word	0x200008d4

08007f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f3a:	4b27      	ldr	r3, [pc, #156]	@ (8007fd8 <vTaskSwitchContext+0xa4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f42:	4b26      	ldr	r3, [pc, #152]	@ (8007fdc <vTaskSwitchContext+0xa8>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f48:	e040      	b.n	8007fcc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007f4a:	4b24      	ldr	r3, [pc, #144]	@ (8007fdc <vTaskSwitchContext+0xa8>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f50:	4b23      	ldr	r3, [pc, #140]	@ (8007fe0 <vTaskSwitchContext+0xac>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	fab3 f383 	clz	r3, r3
 8007f5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	f1c3 031f 	rsb	r3, r3, #31
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	491f      	ldr	r1, [pc, #124]	@ (8007fe4 <vTaskSwitchContext+0xb0>)
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10b      	bne.n	8007f92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	607b      	str	r3, [r7, #4]
}
 8007f8c:	bf00      	nop
 8007f8e:	bf00      	nop
 8007f90:	e7fd      	b.n	8007f8e <vTaskSwitchContext+0x5a>
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a11      	ldr	r2, [pc, #68]	@ (8007fe4 <vTaskSwitchContext+0xb0>)
 8007f9e:	4413      	add	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	605a      	str	r2, [r3, #4]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d104      	bne.n	8007fc2 <vTaskSwitchContext+0x8e>
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	4a07      	ldr	r2, [pc, #28]	@ (8007fe8 <vTaskSwitchContext+0xb4>)
 8007fca:	6013      	str	r3, [r2, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	200008ec 	.word	0x200008ec
 8007fdc:	200008d8 	.word	0x200008d8
 8007fe0:	200008cc 	.word	0x200008cc
 8007fe4:	200007c8 	.word	0x200007c8
 8007fe8:	200007c4 	.word	0x200007c4

08007fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ff4:	f000 f852 	bl	800809c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ff8:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <prvIdleTask+0x28>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d9f9      	bls.n	8007ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008000:	4b05      	ldr	r3, [pc, #20]	@ (8008018 <prvIdleTask+0x2c>)
 8008002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008010:	e7f0      	b.n	8007ff4 <prvIdleTask+0x8>
 8008012:	bf00      	nop
 8008014:	200007c8 	.word	0x200007c8
 8008018:	e000ed04 	.word	0xe000ed04

0800801c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
 8008026:	e00c      	b.n	8008042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4a12      	ldr	r2, [pc, #72]	@ (800807c <prvInitialiseTaskLists+0x60>)
 8008034:	4413      	add	r3, r2
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff fb32 	bl	80076a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3301      	adds	r3, #1
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b06      	cmp	r3, #6
 8008046:	d9ef      	bls.n	8008028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008048:	480d      	ldr	r0, [pc, #52]	@ (8008080 <prvInitialiseTaskLists+0x64>)
 800804a:	f7ff fb29 	bl	80076a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800804e:	480d      	ldr	r0, [pc, #52]	@ (8008084 <prvInitialiseTaskLists+0x68>)
 8008050:	f7ff fb26 	bl	80076a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008054:	480c      	ldr	r0, [pc, #48]	@ (8008088 <prvInitialiseTaskLists+0x6c>)
 8008056:	f7ff fb23 	bl	80076a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800805a:	480c      	ldr	r0, [pc, #48]	@ (800808c <prvInitialiseTaskLists+0x70>)
 800805c:	f7ff fb20 	bl	80076a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008060:	480b      	ldr	r0, [pc, #44]	@ (8008090 <prvInitialiseTaskLists+0x74>)
 8008062:	f7ff fb1d 	bl	80076a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008066:	4b0b      	ldr	r3, [pc, #44]	@ (8008094 <prvInitialiseTaskLists+0x78>)
 8008068:	4a05      	ldr	r2, [pc, #20]	@ (8008080 <prvInitialiseTaskLists+0x64>)
 800806a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800806c:	4b0a      	ldr	r3, [pc, #40]	@ (8008098 <prvInitialiseTaskLists+0x7c>)
 800806e:	4a05      	ldr	r2, [pc, #20]	@ (8008084 <prvInitialiseTaskLists+0x68>)
 8008070:	601a      	str	r2, [r3, #0]
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200007c8 	.word	0x200007c8
 8008080:	20000854 	.word	0x20000854
 8008084:	20000868 	.word	0x20000868
 8008088:	20000884 	.word	0x20000884
 800808c:	20000898 	.word	0x20000898
 8008090:	200008b0 	.word	0x200008b0
 8008094:	2000087c 	.word	0x2000087c
 8008098:	20000880 	.word	0x20000880

0800809c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080a2:	e019      	b.n	80080d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080a4:	f000 fa30 	bl	8008508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a8:	4b10      	ldr	r3, [pc, #64]	@ (80080ec <prvCheckTasksWaitingTermination+0x50>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fb7d 	bl	80077b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <prvCheckTasksWaitingTermination+0x54>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3b01      	subs	r3, #1
 80080c0:	4a0b      	ldr	r2, [pc, #44]	@ (80080f0 <prvCheckTasksWaitingTermination+0x54>)
 80080c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080c4:	4b0b      	ldr	r3, [pc, #44]	@ (80080f4 <prvCheckTasksWaitingTermination+0x58>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	4a0a      	ldr	r2, [pc, #40]	@ (80080f4 <prvCheckTasksWaitingTermination+0x58>)
 80080cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080ce:	f000 fa4d 	bl	800856c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f810 	bl	80080f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080d8:	4b06      	ldr	r3, [pc, #24]	@ (80080f4 <prvCheckTasksWaitingTermination+0x58>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e1      	bne.n	80080a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	20000898 	.word	0x20000898
 80080f0:	200008c4 	.word	0x200008c4
 80080f4:	200008ac 	.word	0x200008ac

080080f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008106:	2b00      	cmp	r3, #0
 8008108:	d108      	bne.n	800811c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fba8 	bl	8008864 <vPortFree>
				vPortFree( pxTCB );
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fba5 	bl	8008864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800811a:	e019      	b.n	8008150 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008122:	2b01      	cmp	r3, #1
 8008124:	d103      	bne.n	800812e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fb9c 	bl	8008864 <vPortFree>
	}
 800812c:	e010      	b.n	8008150 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008134:	2b02      	cmp	r3, #2
 8008136:	d00b      	beq.n	8008150 <prvDeleteTCB+0x58>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	60fb      	str	r3, [r7, #12]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <prvDeleteTCB+0x54>
	}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800815e:	4b0c      	ldr	r3, [pc, #48]	@ (8008190 <prvResetNextTaskUnblockTime+0x38>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d104      	bne.n	8008172 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008168:	4b0a      	ldr	r3, [pc, #40]	@ (8008194 <prvResetNextTaskUnblockTime+0x3c>)
 800816a:	f04f 32ff 	mov.w	r2, #4294967295
 800816e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008170:	e008      	b.n	8008184 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008172:	4b07      	ldr	r3, [pc, #28]	@ (8008190 <prvResetNextTaskUnblockTime+0x38>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	4a04      	ldr	r2, [pc, #16]	@ (8008194 <prvResetNextTaskUnblockTime+0x3c>)
 8008182:	6013      	str	r3, [r2, #0]
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	2000087c 	.word	0x2000087c
 8008194:	200008e4 	.word	0x200008e4

08008198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800819e:	4b0b      	ldr	r3, [pc, #44]	@ (80081cc <xTaskGetSchedulerState+0x34>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081a6:	2301      	movs	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	e008      	b.n	80081be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ac:	4b08      	ldr	r3, [pc, #32]	@ (80081d0 <xTaskGetSchedulerState+0x38>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081b4:	2302      	movs	r3, #2
 80081b6:	607b      	str	r3, [r7, #4]
 80081b8:	e001      	b.n	80081be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081be:	687b      	ldr	r3, [r7, #4]
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	200008d0 	.word	0x200008d0
 80081d0:	200008ec 	.word	0x200008ec

080081d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081de:	4b29      	ldr	r3, [pc, #164]	@ (8008284 <prvAddCurrentTaskToDelayedList+0xb0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081e4:	4b28      	ldr	r3, [pc, #160]	@ (8008288 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fae2 	bl	80077b4 <uxListRemove>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10b      	bne.n	800820e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80081f6:	4b24      	ldr	r3, [pc, #144]	@ (8008288 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	2201      	movs	r2, #1
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	43da      	mvns	r2, r3
 8008204:	4b21      	ldr	r3, [pc, #132]	@ (800828c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4013      	ands	r3, r2
 800820a:	4a20      	ldr	r2, [pc, #128]	@ (800828c <prvAddCurrentTaskToDelayedList+0xb8>)
 800820c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008214:	d10a      	bne.n	800822c <prvAddCurrentTaskToDelayedList+0x58>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d007      	beq.n	800822c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800821c:	4b1a      	ldr	r3, [pc, #104]	@ (8008288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3304      	adds	r3, #4
 8008222:	4619      	mov	r1, r3
 8008224:	481a      	ldr	r0, [pc, #104]	@ (8008290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008226:	f7ff fa68 	bl	80076fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800822a:	e026      	b.n	800827a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4413      	add	r3, r2
 8008232:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008234:	4b14      	ldr	r3, [pc, #80]	@ (8008288 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	429a      	cmp	r2, r3
 8008242:	d209      	bcs.n	8008258 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008244:	4b13      	ldr	r3, [pc, #76]	@ (8008294 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	4b0f      	ldr	r3, [pc, #60]	@ (8008288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3304      	adds	r3, #4
 800824e:	4619      	mov	r1, r3
 8008250:	4610      	mov	r0, r2
 8008252:	f7ff fa76 	bl	8007742 <vListInsert>
}
 8008256:	e010      	b.n	800827a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008258:	4b0f      	ldr	r3, [pc, #60]	@ (8008298 <prvAddCurrentTaskToDelayedList+0xc4>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	4b0a      	ldr	r3, [pc, #40]	@ (8008288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3304      	adds	r3, #4
 8008262:	4619      	mov	r1, r3
 8008264:	4610      	mov	r0, r2
 8008266:	f7ff fa6c 	bl	8007742 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800826a:	4b0c      	ldr	r3, [pc, #48]	@ (800829c <prvAddCurrentTaskToDelayedList+0xc8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	429a      	cmp	r2, r3
 8008272:	d202      	bcs.n	800827a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008274:	4a09      	ldr	r2, [pc, #36]	@ (800829c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6013      	str	r3, [r2, #0]
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	200008c8 	.word	0x200008c8
 8008288:	200007c4 	.word	0x200007c4
 800828c:	200008cc 	.word	0x200008cc
 8008290:	200008b0 	.word	0x200008b0
 8008294:	20000880 	.word	0x20000880
 8008298:	2000087c 	.word	0x2000087c
 800829c:	200008e4 	.word	0x200008e4

080082a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3b04      	subs	r3, #4
 80082b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80082b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3b04      	subs	r3, #4
 80082be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f023 0201 	bic.w	r2, r3, #1
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3b04      	subs	r3, #4
 80082ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008304 <pxPortInitialiseStack+0x64>)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3b14      	subs	r3, #20
 80082da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f06f 0202 	mvn.w	r2, #2
 80082ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3b20      	subs	r3, #32
 80082f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082f6:	68fb      	ldr	r3, [r7, #12]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	08008309 	.word	0x08008309

08008308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008312:	4b13      	ldr	r3, [pc, #76]	@ (8008360 <prvTaskExitError+0x58>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d00b      	beq.n	8008334 <prvTaskExitError+0x2c>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	60fb      	str	r3, [r7, #12]
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	e7fd      	b.n	8008330 <prvTaskExitError+0x28>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	60bb      	str	r3, [r7, #8]
}
 8008346:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008348:	bf00      	nop
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d0fc      	beq.n	800834a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	2000000c 	.word	0x2000000c
	...

08008370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008370:	4b07      	ldr	r3, [pc, #28]	@ (8008390 <pxCurrentTCBConst2>)
 8008372:	6819      	ldr	r1, [r3, #0]
 8008374:	6808      	ldr	r0, [r1, #0]
 8008376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	f380 8809 	msr	PSP, r0
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f04f 0000 	mov.w	r0, #0
 8008386:	f380 8811 	msr	BASEPRI, r0
 800838a:	4770      	bx	lr
 800838c:	f3af 8000 	nop.w

08008390 <pxCurrentTCBConst2>:
 8008390:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop

08008398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008398:	4808      	ldr	r0, [pc, #32]	@ (80083bc <prvPortStartFirstTask+0x24>)
 800839a:	6800      	ldr	r0, [r0, #0]
 800839c:	6800      	ldr	r0, [r0, #0]
 800839e:	f380 8808 	msr	MSP, r0
 80083a2:	f04f 0000 	mov.w	r0, #0
 80083a6:	f380 8814 	msr	CONTROL, r0
 80083aa:	b662      	cpsie	i
 80083ac:	b661      	cpsie	f
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	df00      	svc	0
 80083b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ba:	bf00      	nop
 80083bc:	e000ed08 	.word	0xe000ed08

080083c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083c6:	4b47      	ldr	r3, [pc, #284]	@ (80084e4 <xPortStartScheduler+0x124>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a47      	ldr	r2, [pc, #284]	@ (80084e8 <xPortStartScheduler+0x128>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d10b      	bne.n	80083e8 <xPortStartScheduler+0x28>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083e8:	4b3e      	ldr	r3, [pc, #248]	@ (80084e4 <xPortStartScheduler+0x124>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a3f      	ldr	r2, [pc, #252]	@ (80084ec <xPortStartScheduler+0x12c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d10b      	bne.n	800840a <xPortStartScheduler+0x4a>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	60fb      	str	r3, [r7, #12]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800840a:	4b39      	ldr	r3, [pc, #228]	@ (80084f0 <xPortStartScheduler+0x130>)
 800840c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	22ff      	movs	r2, #255	@ 0xff
 800841a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800842c:	b2da      	uxtb	r2, r3
 800842e:	4b31      	ldr	r3, [pc, #196]	@ (80084f4 <xPortStartScheduler+0x134>)
 8008430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008432:	4b31      	ldr	r3, [pc, #196]	@ (80084f8 <xPortStartScheduler+0x138>)
 8008434:	2207      	movs	r2, #7
 8008436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008438:	e009      	b.n	800844e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800843a:	4b2f      	ldr	r3, [pc, #188]	@ (80084f8 <xPortStartScheduler+0x138>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3b01      	subs	r3, #1
 8008440:	4a2d      	ldr	r2, [pc, #180]	@ (80084f8 <xPortStartScheduler+0x138>)
 8008442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	b2db      	uxtb	r3, r3
 800844c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008456:	2b80      	cmp	r3, #128	@ 0x80
 8008458:	d0ef      	beq.n	800843a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800845a:	4b27      	ldr	r3, [pc, #156]	@ (80084f8 <xPortStartScheduler+0x138>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f1c3 0307 	rsb	r3, r3, #7
 8008462:	2b04      	cmp	r3, #4
 8008464:	d00b      	beq.n	800847e <xPortStartScheduler+0xbe>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60bb      	str	r3, [r7, #8]
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	e7fd      	b.n	800847a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800847e:	4b1e      	ldr	r3, [pc, #120]	@ (80084f8 <xPortStartScheduler+0x138>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	4a1c      	ldr	r2, [pc, #112]	@ (80084f8 <xPortStartScheduler+0x138>)
 8008486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008488:	4b1b      	ldr	r3, [pc, #108]	@ (80084f8 <xPortStartScheduler+0x138>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008490:	4a19      	ldr	r2, [pc, #100]	@ (80084f8 <xPortStartScheduler+0x138>)
 8008492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	b2da      	uxtb	r2, r3
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800849c:	4b17      	ldr	r3, [pc, #92]	@ (80084fc <xPortStartScheduler+0x13c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a16      	ldr	r2, [pc, #88]	@ (80084fc <xPortStartScheduler+0x13c>)
 80084a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80084a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084a8:	4b14      	ldr	r3, [pc, #80]	@ (80084fc <xPortStartScheduler+0x13c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a13      	ldr	r2, [pc, #76]	@ (80084fc <xPortStartScheduler+0x13c>)
 80084ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80084b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084b4:	f000 f8da 	bl	800866c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084b8:	4b11      	ldr	r3, [pc, #68]	@ (8008500 <xPortStartScheduler+0x140>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084be:	f000 f8f9 	bl	80086b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084c2:	4b10      	ldr	r3, [pc, #64]	@ (8008504 <xPortStartScheduler+0x144>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008504 <xPortStartScheduler+0x144>)
 80084c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80084cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084ce:	f7ff ff63 	bl	8008398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084d2:	f7ff fd2f 	bl	8007f34 <vTaskSwitchContext>
	prvTaskExitError();
 80084d6:	f7ff ff17 	bl	8008308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	e000ed00 	.word	0xe000ed00
 80084e8:	410fc271 	.word	0x410fc271
 80084ec:	410fc270 	.word	0x410fc270
 80084f0:	e000e400 	.word	0xe000e400
 80084f4:	200008f0 	.word	0x200008f0
 80084f8:	200008f4 	.word	0x200008f4
 80084fc:	e000ed20 	.word	0xe000ed20
 8008500:	2000000c 	.word	0x2000000c
 8008504:	e000ef34 	.word	0xe000ef34

08008508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008522:	4b10      	ldr	r3, [pc, #64]	@ (8008564 <vPortEnterCritical+0x5c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	4a0e      	ldr	r2, [pc, #56]	@ (8008564 <vPortEnterCritical+0x5c>)
 800852a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800852c:	4b0d      	ldr	r3, [pc, #52]	@ (8008564 <vPortEnterCritical+0x5c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d110      	bne.n	8008556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008534:	4b0c      	ldr	r3, [pc, #48]	@ (8008568 <vPortEnterCritical+0x60>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00b      	beq.n	8008556 <vPortEnterCritical+0x4e>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	603b      	str	r3, [r7, #0]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <vPortEnterCritical+0x4a>
	}
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	2000000c 	.word	0x2000000c
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008572:	4b12      	ldr	r3, [pc, #72]	@ (80085bc <vPortExitCritical+0x50>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10b      	bne.n	8008592 <vPortExitCritical+0x26>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	607b      	str	r3, [r7, #4]
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	e7fd      	b.n	800858e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008592:	4b0a      	ldr	r3, [pc, #40]	@ (80085bc <vPortExitCritical+0x50>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3b01      	subs	r3, #1
 8008598:	4a08      	ldr	r2, [pc, #32]	@ (80085bc <vPortExitCritical+0x50>)
 800859a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800859c:	4b07      	ldr	r3, [pc, #28]	@ (80085bc <vPortExitCritical+0x50>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d105      	bne.n	80085b0 <vPortExitCritical+0x44>
 80085a4:	2300      	movs	r3, #0
 80085a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	2000000c 	.word	0x2000000c

080085c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085c0:	f3ef 8009 	mrs	r0, PSP
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	4b15      	ldr	r3, [pc, #84]	@ (8008620 <pxCurrentTCBConst>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	f01e 0f10 	tst.w	lr, #16
 80085d0:	bf08      	it	eq
 80085d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085da:	6010      	str	r0, [r2, #0]
 80085dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80085e4:	f380 8811 	msr	BASEPRI, r0
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f7ff fca0 	bl	8007f34 <vTaskSwitchContext>
 80085f4:	f04f 0000 	mov.w	r0, #0
 80085f8:	f380 8811 	msr	BASEPRI, r0
 80085fc:	bc09      	pop	{r0, r3}
 80085fe:	6819      	ldr	r1, [r3, #0]
 8008600:	6808      	ldr	r0, [r1, #0]
 8008602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008606:	f01e 0f10 	tst.w	lr, #16
 800860a:	bf08      	it	eq
 800860c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008610:	f380 8809 	msr	PSP, r0
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	f3af 8000 	nop.w

08008620 <pxCurrentTCBConst>:
 8008620:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop

08008628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	607b      	str	r3, [r7, #4]
}
 8008640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008642:	f7ff fbbd 	bl	8007dc0 <xTaskIncrementTick>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800864c:	4b06      	ldr	r3, [pc, #24]	@ (8008668 <xPortSysTickHandler+0x40>)
 800864e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	2300      	movs	r3, #0
 8008656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f383 8811 	msr	BASEPRI, r3
}
 800865e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008670:	4b0b      	ldr	r3, [pc, #44]	@ (80086a0 <vPortSetupTimerInterrupt+0x34>)
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008676:	4b0b      	ldr	r3, [pc, #44]	@ (80086a4 <vPortSetupTimerInterrupt+0x38>)
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800867c:	4b0a      	ldr	r3, [pc, #40]	@ (80086a8 <vPortSetupTimerInterrupt+0x3c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a0a      	ldr	r2, [pc, #40]	@ (80086ac <vPortSetupTimerInterrupt+0x40>)
 8008682:	fba2 2303 	umull	r2, r3, r2, r3
 8008686:	099b      	lsrs	r3, r3, #6
 8008688:	4a09      	ldr	r2, [pc, #36]	@ (80086b0 <vPortSetupTimerInterrupt+0x44>)
 800868a:	3b01      	subs	r3, #1
 800868c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800868e:	4b04      	ldr	r3, [pc, #16]	@ (80086a0 <vPortSetupTimerInterrupt+0x34>)
 8008690:	2207      	movs	r2, #7
 8008692:	601a      	str	r2, [r3, #0]
}
 8008694:	bf00      	nop
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	e000e010 	.word	0xe000e010
 80086a4:	e000e018 	.word	0xe000e018
 80086a8:	20000000 	.word	0x20000000
 80086ac:	10624dd3 	.word	0x10624dd3
 80086b0:	e000e014 	.word	0xe000e014

080086b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80086c4 <vPortEnableVFP+0x10>
 80086b8:	6801      	ldr	r1, [r0, #0]
 80086ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086be:	6001      	str	r1, [r0, #0]
 80086c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086c2:	bf00      	nop
 80086c4:	e000ed88 	.word	0xe000ed88

080086c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08a      	sub	sp, #40	@ 0x28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086d0:	2300      	movs	r3, #0
 80086d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086d4:	f7ff fac8 	bl	8007c68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086d8:	4b5c      	ldr	r3, [pc, #368]	@ (800884c <pvPortMalloc+0x184>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086e0:	f000 f924 	bl	800892c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086e4:	4b5a      	ldr	r3, [pc, #360]	@ (8008850 <pvPortMalloc+0x188>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f040 8095 	bne.w	800881c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01e      	beq.n	8008736 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80086f8:	2208      	movs	r2, #8
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	2b00      	cmp	r3, #0
 8008708:	d015      	beq.n	8008736 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f023 0307 	bic.w	r3, r3, #7
 8008710:	3308      	adds	r3, #8
 8008712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <pvPortMalloc+0x6e>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	617b      	str	r3, [r7, #20]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d06f      	beq.n	800881c <pvPortMalloc+0x154>
 800873c:	4b45      	ldr	r3, [pc, #276]	@ (8008854 <pvPortMalloc+0x18c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	429a      	cmp	r2, r3
 8008744:	d86a      	bhi.n	800881c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008746:	4b44      	ldr	r3, [pc, #272]	@ (8008858 <pvPortMalloc+0x190>)
 8008748:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800874a:	4b43      	ldr	r3, [pc, #268]	@ (8008858 <pvPortMalloc+0x190>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008750:	e004      	b.n	800875c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	429a      	cmp	r2, r3
 8008764:	d903      	bls.n	800876e <pvPortMalloc+0xa6>
 8008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1f1      	bne.n	8008752 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800876e:	4b37      	ldr	r3, [pc, #220]	@ (800884c <pvPortMalloc+0x184>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008774:	429a      	cmp	r2, r3
 8008776:	d051      	beq.n	800881c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2208      	movs	r2, #8
 800877e:	4413      	add	r3, r2
 8008780:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	2308      	movs	r3, #8
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	429a      	cmp	r2, r3
 8008798:	d920      	bls.n	80087dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800879a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <pvPortMalloc+0xfc>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	613b      	str	r3, [r7, #16]
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	e7fd      	b.n	80087c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	1ad2      	subs	r2, r2, r3
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087d6:	69b8      	ldr	r0, [r7, #24]
 80087d8:	f000 f90a 	bl	80089f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008854 <pvPortMalloc+0x18c>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008854 <pvPortMalloc+0x18c>)
 80087e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008854 <pvPortMalloc+0x18c>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b1b      	ldr	r3, [pc, #108]	@ (800885c <pvPortMalloc+0x194>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d203      	bcs.n	80087fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087f6:	4b17      	ldr	r3, [pc, #92]	@ (8008854 <pvPortMalloc+0x18c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a18      	ldr	r2, [pc, #96]	@ (800885c <pvPortMalloc+0x194>)
 80087fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	4b13      	ldr	r3, [pc, #76]	@ (8008850 <pvPortMalloc+0x188>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	431a      	orrs	r2, r3
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008812:	4b13      	ldr	r3, [pc, #76]	@ (8008860 <pvPortMalloc+0x198>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3301      	adds	r3, #1
 8008818:	4a11      	ldr	r2, [pc, #68]	@ (8008860 <pvPortMalloc+0x198>)
 800881a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800881c:	f7ff fa32 	bl	8007c84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00b      	beq.n	8008842 <pvPortMalloc+0x17a>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	60fb      	str	r3, [r7, #12]
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	e7fd      	b.n	800883e <pvPortMalloc+0x176>
	return pvReturn;
 8008842:	69fb      	ldr	r3, [r7, #28]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3728      	adds	r7, #40	@ 0x28
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200014b8 	.word	0x200014b8
 8008850:	200014cc 	.word	0x200014cc
 8008854:	200014bc 	.word	0x200014bc
 8008858:	200014b0 	.word	0x200014b0
 800885c:	200014c0 	.word	0x200014c0
 8008860:	200014c4 	.word	0x200014c4

08008864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d04f      	beq.n	8008916 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008876:	2308      	movs	r3, #8
 8008878:	425b      	negs	r3, r3
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4413      	add	r3, r2
 800887e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	4b25      	ldr	r3, [pc, #148]	@ (8008920 <vPortFree+0xbc>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4013      	ands	r3, r2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <vPortFree+0x46>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	60fb      	str	r3, [r7, #12]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <vPortFree+0x66>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60bb      	str	r3, [r7, #8]
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	e7fd      	b.n	80088c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	4b14      	ldr	r3, [pc, #80]	@ (8008920 <vPortFree+0xbc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4013      	ands	r3, r2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d01e      	beq.n	8008916 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d11a      	bne.n	8008916 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008920 <vPortFree+0xbc>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	43db      	mvns	r3, r3
 80088ea:	401a      	ands	r2, r3
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088f0:	f7ff f9ba 	bl	8007c68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008924 <vPortFree+0xc0>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4413      	add	r3, r2
 80088fe:	4a09      	ldr	r2, [pc, #36]	@ (8008924 <vPortFree+0xc0>)
 8008900:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008902:	6938      	ldr	r0, [r7, #16]
 8008904:	f000 f874 	bl	80089f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008908:	4b07      	ldr	r3, [pc, #28]	@ (8008928 <vPortFree+0xc4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	4a06      	ldr	r2, [pc, #24]	@ (8008928 <vPortFree+0xc4>)
 8008910:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008912:	f7ff f9b7 	bl	8007c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008916:	bf00      	nop
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	200014cc 	.word	0x200014cc
 8008924:	200014bc 	.word	0x200014bc
 8008928:	200014c8 	.word	0x200014c8

0800892c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008932:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008936:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008938:	4b27      	ldr	r3, [pc, #156]	@ (80089d8 <prvHeapInit+0xac>)
 800893a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00c      	beq.n	8008960 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3307      	adds	r3, #7
 800894a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0307 	bic.w	r3, r3, #7
 8008952:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	4a1f      	ldr	r2, [pc, #124]	@ (80089d8 <prvHeapInit+0xac>)
 800895c:	4413      	add	r3, r2
 800895e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008964:	4a1d      	ldr	r2, [pc, #116]	@ (80089dc <prvHeapInit+0xb0>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800896a:	4b1c      	ldr	r3, [pc, #112]	@ (80089dc <prvHeapInit+0xb0>)
 800896c:	2200      	movs	r2, #0
 800896e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4413      	add	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008978:	2208      	movs	r2, #8
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0307 	bic.w	r3, r3, #7
 8008986:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4a15      	ldr	r2, [pc, #84]	@ (80089e0 <prvHeapInit+0xb4>)
 800898c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800898e:	4b14      	ldr	r3, [pc, #80]	@ (80089e0 <prvHeapInit+0xb4>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2200      	movs	r2, #0
 8008994:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008996:	4b12      	ldr	r3, [pc, #72]	@ (80089e0 <prvHeapInit+0xb4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	1ad2      	subs	r2, r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089ac:	4b0c      	ldr	r3, [pc, #48]	@ (80089e0 <prvHeapInit+0xb4>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	4a0a      	ldr	r2, [pc, #40]	@ (80089e4 <prvHeapInit+0xb8>)
 80089ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4a09      	ldr	r2, [pc, #36]	@ (80089e8 <prvHeapInit+0xbc>)
 80089c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089c4:	4b09      	ldr	r3, [pc, #36]	@ (80089ec <prvHeapInit+0xc0>)
 80089c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80089ca:	601a      	str	r2, [r3, #0]
}
 80089cc:	bf00      	nop
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	200008f8 	.word	0x200008f8
 80089dc:	200014b0 	.word	0x200014b0
 80089e0:	200014b8 	.word	0x200014b8
 80089e4:	200014c0 	.word	0x200014c0
 80089e8:	200014bc 	.word	0x200014bc
 80089ec:	200014cc 	.word	0x200014cc

080089f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089f8:	4b28      	ldr	r3, [pc, #160]	@ (8008a9c <prvInsertBlockIntoFreeList+0xac>)
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	e002      	b.n	8008a04 <prvInsertBlockIntoFreeList+0x14>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d8f7      	bhi.n	80089fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	4413      	add	r3, r2
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d108      	bne.n	8008a32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	441a      	add	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	441a      	add	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d118      	bne.n	8008a78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <prvInsertBlockIntoFreeList+0xb0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d00d      	beq.n	8008a6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	441a      	add	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	e008      	b.n	8008a80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa0 <prvInsertBlockIntoFreeList+0xb0>)
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e003      	b.n	8008a80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d002      	beq.n	8008a8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a8e:	bf00      	nop
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	200014b0 	.word	0x200014b0
 8008aa0:	200014b8 	.word	0x200014b8

08008aa4 <std>:
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8008aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ab2:	6083      	str	r3, [r0, #8]
 8008ab4:	8181      	strh	r1, [r0, #12]
 8008ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ab8:	81c2      	strh	r2, [r0, #14]
 8008aba:	6183      	str	r3, [r0, #24]
 8008abc:	4619      	mov	r1, r3
 8008abe:	2208      	movs	r2, #8
 8008ac0:	305c      	adds	r0, #92	@ 0x5c
 8008ac2:	f000 f9f9 	bl	8008eb8 <memset>
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8008afc <std+0x58>)
 8008ac8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008aca:	4b0d      	ldr	r3, [pc, #52]	@ (8008b00 <std+0x5c>)
 8008acc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <std+0x60>)
 8008ad0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <std+0x64>)
 8008ad4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <std+0x68>)
 8008ad8:	6224      	str	r4, [r4, #32]
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d006      	beq.n	8008aec <std+0x48>
 8008ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ae2:	4294      	cmp	r4, r2
 8008ae4:	d002      	beq.n	8008aec <std+0x48>
 8008ae6:	33d0      	adds	r3, #208	@ 0xd0
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	d105      	bne.n	8008af8 <std+0x54>
 8008aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af4:	f000 ba58 	b.w	8008fa8 <__retarget_lock_init_recursive>
 8008af8:	bd10      	pop	{r4, pc}
 8008afa:	bf00      	nop
 8008afc:	08008d09 	.word	0x08008d09
 8008b00:	08008d2b 	.word	0x08008d2b
 8008b04:	08008d63 	.word	0x08008d63
 8008b08:	08008d87 	.word	0x08008d87
 8008b0c:	200014d0 	.word	0x200014d0

08008b10 <stdio_exit_handler>:
 8008b10:	4a02      	ldr	r2, [pc, #8]	@ (8008b1c <stdio_exit_handler+0xc>)
 8008b12:	4903      	ldr	r1, [pc, #12]	@ (8008b20 <stdio_exit_handler+0x10>)
 8008b14:	4803      	ldr	r0, [pc, #12]	@ (8008b24 <stdio_exit_handler+0x14>)
 8008b16:	f000 b869 	b.w	8008bec <_fwalk_sglue>
 8008b1a:	bf00      	nop
 8008b1c:	20000010 	.word	0x20000010
 8008b20:	08009849 	.word	0x08009849
 8008b24:	20000020 	.word	0x20000020

08008b28 <cleanup_stdio>:
 8008b28:	6841      	ldr	r1, [r0, #4]
 8008b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b5c <cleanup_stdio+0x34>)
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	b510      	push	{r4, lr}
 8008b30:	4604      	mov	r4, r0
 8008b32:	d001      	beq.n	8008b38 <cleanup_stdio+0x10>
 8008b34:	f000 fe88 	bl	8009848 <_fflush_r>
 8008b38:	68a1      	ldr	r1, [r4, #8]
 8008b3a:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <cleanup_stdio+0x38>)
 8008b3c:	4299      	cmp	r1, r3
 8008b3e:	d002      	beq.n	8008b46 <cleanup_stdio+0x1e>
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fe81 	bl	8009848 <_fflush_r>
 8008b46:	68e1      	ldr	r1, [r4, #12]
 8008b48:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <cleanup_stdio+0x3c>)
 8008b4a:	4299      	cmp	r1, r3
 8008b4c:	d004      	beq.n	8008b58 <cleanup_stdio+0x30>
 8008b4e:	4620      	mov	r0, r4
 8008b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b54:	f000 be78 	b.w	8009848 <_fflush_r>
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	bf00      	nop
 8008b5c:	200014d0 	.word	0x200014d0
 8008b60:	20001538 	.word	0x20001538
 8008b64:	200015a0 	.word	0x200015a0

08008b68 <global_stdio_init.part.0>:
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b98 <global_stdio_init.part.0+0x30>)
 8008b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8008b9c <global_stdio_init.part.0+0x34>)
 8008b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba0 <global_stdio_init.part.0+0x38>)
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	4620      	mov	r0, r4
 8008b74:	2200      	movs	r2, #0
 8008b76:	2104      	movs	r1, #4
 8008b78:	f7ff ff94 	bl	8008aa4 <std>
 8008b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b80:	2201      	movs	r2, #1
 8008b82:	2109      	movs	r1, #9
 8008b84:	f7ff ff8e 	bl	8008aa4 <std>
 8008b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b92:	2112      	movs	r1, #18
 8008b94:	f7ff bf86 	b.w	8008aa4 <std>
 8008b98:	20001608 	.word	0x20001608
 8008b9c:	200014d0 	.word	0x200014d0
 8008ba0:	08008b11 	.word	0x08008b11

08008ba4 <__sfp_lock_acquire>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	@ (8008bac <__sfp_lock_acquire+0x8>)
 8008ba6:	f000 ba00 	b.w	8008faa <__retarget_lock_acquire_recursive>
 8008baa:	bf00      	nop
 8008bac:	20001611 	.word	0x20001611

08008bb0 <__sfp_lock_release>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	@ (8008bb8 <__sfp_lock_release+0x8>)
 8008bb2:	f000 b9fb 	b.w	8008fac <__retarget_lock_release_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	20001611 	.word	0x20001611

08008bbc <__sinit>:
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	f7ff fff0 	bl	8008ba4 <__sfp_lock_acquire>
 8008bc4:	6a23      	ldr	r3, [r4, #32]
 8008bc6:	b11b      	cbz	r3, 8008bd0 <__sinit+0x14>
 8008bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bcc:	f7ff bff0 	b.w	8008bb0 <__sfp_lock_release>
 8008bd0:	4b04      	ldr	r3, [pc, #16]	@ (8008be4 <__sinit+0x28>)
 8008bd2:	6223      	str	r3, [r4, #32]
 8008bd4:	4b04      	ldr	r3, [pc, #16]	@ (8008be8 <__sinit+0x2c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1f5      	bne.n	8008bc8 <__sinit+0xc>
 8008bdc:	f7ff ffc4 	bl	8008b68 <global_stdio_init.part.0>
 8008be0:	e7f2      	b.n	8008bc8 <__sinit+0xc>
 8008be2:	bf00      	nop
 8008be4:	08008b29 	.word	0x08008b29
 8008be8:	20001608 	.word	0x20001608

08008bec <_fwalk_sglue>:
 8008bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	4688      	mov	r8, r1
 8008bf4:	4614      	mov	r4, r2
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8008c00:	d505      	bpl.n	8008c0e <_fwalk_sglue+0x22>
 8008c02:	6824      	ldr	r4, [r4, #0]
 8008c04:	2c00      	cmp	r4, #0
 8008c06:	d1f7      	bne.n	8008bf8 <_fwalk_sglue+0xc>
 8008c08:	4630      	mov	r0, r6
 8008c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c0e:	89ab      	ldrh	r3, [r5, #12]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d907      	bls.n	8008c24 <_fwalk_sglue+0x38>
 8008c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	d003      	beq.n	8008c24 <_fwalk_sglue+0x38>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4638      	mov	r0, r7
 8008c20:	47c0      	blx	r8
 8008c22:	4306      	orrs	r6, r0
 8008c24:	3568      	adds	r5, #104	@ 0x68
 8008c26:	e7e9      	b.n	8008bfc <_fwalk_sglue+0x10>

08008c28 <iprintf>:
 8008c28:	b40f      	push	{r0, r1, r2, r3}
 8008c2a:	b507      	push	{r0, r1, r2, lr}
 8008c2c:	4906      	ldr	r1, [pc, #24]	@ (8008c48 <iprintf+0x20>)
 8008c2e:	ab04      	add	r3, sp, #16
 8008c30:	6808      	ldr	r0, [r1, #0]
 8008c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c36:	6881      	ldr	r1, [r0, #8]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	f000 fadb 	bl	80091f4 <_vfiprintf_r>
 8008c3e:	b003      	add	sp, #12
 8008c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c44:	b004      	add	sp, #16
 8008c46:	4770      	bx	lr
 8008c48:	2000001c 	.word	0x2000001c

08008c4c <_puts_r>:
 8008c4c:	6a03      	ldr	r3, [r0, #32]
 8008c4e:	b570      	push	{r4, r5, r6, lr}
 8008c50:	6884      	ldr	r4, [r0, #8]
 8008c52:	4605      	mov	r5, r0
 8008c54:	460e      	mov	r6, r1
 8008c56:	b90b      	cbnz	r3, 8008c5c <_puts_r+0x10>
 8008c58:	f7ff ffb0 	bl	8008bbc <__sinit>
 8008c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c5e:	07db      	lsls	r3, r3, #31
 8008c60:	d405      	bmi.n	8008c6e <_puts_r+0x22>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	0598      	lsls	r0, r3, #22
 8008c66:	d402      	bmi.n	8008c6e <_puts_r+0x22>
 8008c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c6a:	f000 f99e 	bl	8008faa <__retarget_lock_acquire_recursive>
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	0719      	lsls	r1, r3, #28
 8008c72:	d502      	bpl.n	8008c7a <_puts_r+0x2e>
 8008c74:	6923      	ldr	r3, [r4, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d135      	bne.n	8008ce6 <_puts_r+0x9a>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f000 f8c5 	bl	8008e0c <__swsetup_r>
 8008c82:	b380      	cbz	r0, 8008ce6 <_puts_r+0x9a>
 8008c84:	f04f 35ff 	mov.w	r5, #4294967295
 8008c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c8a:	07da      	lsls	r2, r3, #31
 8008c8c:	d405      	bmi.n	8008c9a <_puts_r+0x4e>
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	059b      	lsls	r3, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_puts_r+0x4e>
 8008c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c96:	f000 f989 	bl	8008fac <__retarget_lock_release_recursive>
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	da04      	bge.n	8008cac <_puts_r+0x60>
 8008ca2:	69a2      	ldr	r2, [r4, #24]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	dc17      	bgt.n	8008cd8 <_puts_r+0x8c>
 8008ca8:	290a      	cmp	r1, #10
 8008caa:	d015      	beq.n	8008cd8 <_puts_r+0x8c>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	7019      	strb	r1, [r3, #0]
 8008cb4:	68a3      	ldr	r3, [r4, #8]
 8008cb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	60a3      	str	r3, [r4, #8]
 8008cbe:	2900      	cmp	r1, #0
 8008cc0:	d1ed      	bne.n	8008c9e <_puts_r+0x52>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	da11      	bge.n	8008cea <_puts_r+0x9e>
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	210a      	movs	r1, #10
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 f85f 	bl	8008d8e <__swbuf_r>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d0d7      	beq.n	8008c84 <_puts_r+0x38>
 8008cd4:	250a      	movs	r5, #10
 8008cd6:	e7d7      	b.n	8008c88 <_puts_r+0x3c>
 8008cd8:	4622      	mov	r2, r4
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f000 f857 	bl	8008d8e <__swbuf_r>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d1e7      	bne.n	8008cb4 <_puts_r+0x68>
 8008ce4:	e7ce      	b.n	8008c84 <_puts_r+0x38>
 8008ce6:	3e01      	subs	r6, #1
 8008ce8:	e7e4      	b.n	8008cb4 <_puts_r+0x68>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	220a      	movs	r2, #10
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	e7ee      	b.n	8008cd4 <_puts_r+0x88>
	...

08008cf8 <puts>:
 8008cf8:	4b02      	ldr	r3, [pc, #8]	@ (8008d04 <puts+0xc>)
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	f7ff bfa5 	b.w	8008c4c <_puts_r>
 8008d02:	bf00      	nop
 8008d04:	2000001c 	.word	0x2000001c

08008d08 <__sread>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 f8fc 	bl	8008f0c <_read_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	bfab      	itete	ge
 8008d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d1c:	181b      	addge	r3, r3, r0
 8008d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d22:	bfac      	ite	ge
 8008d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d26:	81a3      	strhlt	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__swrite>:
 8008d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2e:	461f      	mov	r7, r3
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	05db      	lsls	r3, r3, #23
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4616      	mov	r6, r2
 8008d3a:	d505      	bpl.n	8008d48 <__swrite+0x1e>
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	2302      	movs	r3, #2
 8008d42:	2200      	movs	r2, #0
 8008d44:	f000 f8d0 	bl	8008ee8 <_lseek_r>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	f000 b8e7 	b.w	8008f30 <_write_r>

08008d62 <__sseek>:
 8008d62:	b510      	push	{r4, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 f8bd 	bl	8008ee8 <_lseek_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	bf15      	itete	ne
 8008d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d7e:	81a3      	strheq	r3, [r4, #12]
 8008d80:	bf18      	it	ne
 8008d82:	81a3      	strhne	r3, [r4, #12]
 8008d84:	bd10      	pop	{r4, pc}

08008d86 <__sclose>:
 8008d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8a:	f000 b89d 	b.w	8008ec8 <_close_r>

08008d8e <__swbuf_r>:
 8008d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d90:	460e      	mov	r6, r1
 8008d92:	4614      	mov	r4, r2
 8008d94:	4605      	mov	r5, r0
 8008d96:	b118      	cbz	r0, 8008da0 <__swbuf_r+0x12>
 8008d98:	6a03      	ldr	r3, [r0, #32]
 8008d9a:	b90b      	cbnz	r3, 8008da0 <__swbuf_r+0x12>
 8008d9c:	f7ff ff0e 	bl	8008bbc <__sinit>
 8008da0:	69a3      	ldr	r3, [r4, #24]
 8008da2:	60a3      	str	r3, [r4, #8]
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	071a      	lsls	r2, r3, #28
 8008da8:	d501      	bpl.n	8008dae <__swbuf_r+0x20>
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	b943      	cbnz	r3, 8008dc0 <__swbuf_r+0x32>
 8008dae:	4621      	mov	r1, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 f82b 	bl	8008e0c <__swsetup_r>
 8008db6:	b118      	cbz	r0, 8008dc0 <__swbuf_r+0x32>
 8008db8:	f04f 37ff 	mov.w	r7, #4294967295
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	6922      	ldr	r2, [r4, #16]
 8008dc4:	1a98      	subs	r0, r3, r2
 8008dc6:	6963      	ldr	r3, [r4, #20]
 8008dc8:	b2f6      	uxtb	r6, r6
 8008dca:	4283      	cmp	r3, r0
 8008dcc:	4637      	mov	r7, r6
 8008dce:	dc05      	bgt.n	8008ddc <__swbuf_r+0x4e>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 fd38 	bl	8009848 <_fflush_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d1ed      	bne.n	8008db8 <__swbuf_r+0x2a>
 8008ddc:	68a3      	ldr	r3, [r4, #8]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	60a3      	str	r3, [r4, #8]
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	6022      	str	r2, [r4, #0]
 8008de8:	701e      	strb	r6, [r3, #0]
 8008dea:	6962      	ldr	r2, [r4, #20]
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d004      	beq.n	8008dfc <__swbuf_r+0x6e>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	07db      	lsls	r3, r3, #31
 8008df6:	d5e1      	bpl.n	8008dbc <__swbuf_r+0x2e>
 8008df8:	2e0a      	cmp	r6, #10
 8008dfa:	d1df      	bne.n	8008dbc <__swbuf_r+0x2e>
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 fd22 	bl	8009848 <_fflush_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d0d9      	beq.n	8008dbc <__swbuf_r+0x2e>
 8008e08:	e7d6      	b.n	8008db8 <__swbuf_r+0x2a>
	...

08008e0c <__swsetup_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4b29      	ldr	r3, [pc, #164]	@ (8008eb4 <__swsetup_r+0xa8>)
 8008e10:	4605      	mov	r5, r0
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	460c      	mov	r4, r1
 8008e16:	b118      	cbz	r0, 8008e20 <__swsetup_r+0x14>
 8008e18:	6a03      	ldr	r3, [r0, #32]
 8008e1a:	b90b      	cbnz	r3, 8008e20 <__swsetup_r+0x14>
 8008e1c:	f7ff fece 	bl	8008bbc <__sinit>
 8008e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e24:	0719      	lsls	r1, r3, #28
 8008e26:	d422      	bmi.n	8008e6e <__swsetup_r+0x62>
 8008e28:	06da      	lsls	r2, r3, #27
 8008e2a:	d407      	bmi.n	8008e3c <__swsetup_r+0x30>
 8008e2c:	2209      	movs	r2, #9
 8008e2e:	602a      	str	r2, [r5, #0]
 8008e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3a:	e033      	b.n	8008ea4 <__swsetup_r+0x98>
 8008e3c:	0758      	lsls	r0, r3, #29
 8008e3e:	d512      	bpl.n	8008e66 <__swsetup_r+0x5a>
 8008e40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e42:	b141      	cbz	r1, 8008e56 <__swsetup_r+0x4a>
 8008e44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	d002      	beq.n	8008e52 <__swsetup_r+0x46>
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f000 f8af 	bl	8008fb0 <_free_r>
 8008e52:	2300      	movs	r3, #0
 8008e54:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6063      	str	r3, [r4, #4]
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f043 0308 	orr.w	r3, r3, #8
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	b94b      	cbnz	r3, 8008e86 <__swsetup_r+0x7a>
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e7c:	d003      	beq.n	8008e86 <__swsetup_r+0x7a>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f000 fd2f 	bl	80098e4 <__smakebuf_r>
 8008e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8a:	f013 0201 	ands.w	r2, r3, #1
 8008e8e:	d00a      	beq.n	8008ea6 <__swsetup_r+0x9a>
 8008e90:	2200      	movs	r2, #0
 8008e92:	60a2      	str	r2, [r4, #8]
 8008e94:	6962      	ldr	r2, [r4, #20]
 8008e96:	4252      	negs	r2, r2
 8008e98:	61a2      	str	r2, [r4, #24]
 8008e9a:	6922      	ldr	r2, [r4, #16]
 8008e9c:	b942      	cbnz	r2, 8008eb0 <__swsetup_r+0xa4>
 8008e9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ea2:	d1c5      	bne.n	8008e30 <__swsetup_r+0x24>
 8008ea4:	bd38      	pop	{r3, r4, r5, pc}
 8008ea6:	0799      	lsls	r1, r3, #30
 8008ea8:	bf58      	it	pl
 8008eaa:	6962      	ldrpl	r2, [r4, #20]
 8008eac:	60a2      	str	r2, [r4, #8]
 8008eae:	e7f4      	b.n	8008e9a <__swsetup_r+0x8e>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e7f7      	b.n	8008ea4 <__swsetup_r+0x98>
 8008eb4:	2000001c 	.word	0x2000001c

08008eb8 <memset>:
 8008eb8:	4402      	add	r2, r0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d100      	bne.n	8008ec2 <memset+0xa>
 8008ec0:	4770      	bx	lr
 8008ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec6:	e7f9      	b.n	8008ebc <memset+0x4>

08008ec8 <_close_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	@ (8008ee4 <_close_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f8 fa3b 	bl	800134e <_close>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_close_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_close_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	2000160c 	.word	0x2000160c

08008ee8 <_lseek_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	@ (8008f08 <_lseek_r+0x20>)
 8008eec:	4604      	mov	r4, r0
 8008eee:	4608      	mov	r0, r1
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	602a      	str	r2, [r5, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f7f8 fa50 	bl	800139c <_lseek>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_lseek_r+0x1e>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_lseek_r+0x1e>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	2000160c 	.word	0x2000160c

08008f0c <_read_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d07      	ldr	r5, [pc, #28]	@ (8008f2c <_read_r+0x20>)
 8008f10:	4604      	mov	r4, r0
 8008f12:	4608      	mov	r0, r1
 8008f14:	4611      	mov	r1, r2
 8008f16:	2200      	movs	r2, #0
 8008f18:	602a      	str	r2, [r5, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f7f8 f9de 	bl	80012dc <_read>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_read_r+0x1e>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_read_r+0x1e>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	2000160c 	.word	0x2000160c

08008f30 <_write_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	@ (8008f50 <_write_r+0x20>)
 8008f34:	4604      	mov	r4, r0
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f7f8 f9e9 	bl	8001316 <_write>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_write_r+0x1e>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_write_r+0x1e>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	2000160c 	.word	0x2000160c

08008f54 <__errno>:
 8008f54:	4b01      	ldr	r3, [pc, #4]	@ (8008f5c <__errno+0x8>)
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	2000001c 	.word	0x2000001c

08008f60 <__libc_init_array>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	4d0d      	ldr	r5, [pc, #52]	@ (8008f98 <__libc_init_array+0x38>)
 8008f64:	4c0d      	ldr	r4, [pc, #52]	@ (8008f9c <__libc_init_array+0x3c>)
 8008f66:	1b64      	subs	r4, r4, r5
 8008f68:	10a4      	asrs	r4, r4, #2
 8008f6a:	2600      	movs	r6, #0
 8008f6c:	42a6      	cmp	r6, r4
 8008f6e:	d109      	bne.n	8008f84 <__libc_init_array+0x24>
 8008f70:	4d0b      	ldr	r5, [pc, #44]	@ (8008fa0 <__libc_init_array+0x40>)
 8008f72:	4c0c      	ldr	r4, [pc, #48]	@ (8008fa4 <__libc_init_array+0x44>)
 8008f74:	f000 fd24 	bl	80099c0 <_init>
 8008f78:	1b64      	subs	r4, r4, r5
 8008f7a:	10a4      	asrs	r4, r4, #2
 8008f7c:	2600      	movs	r6, #0
 8008f7e:	42a6      	cmp	r6, r4
 8008f80:	d105      	bne.n	8008f8e <__libc_init_array+0x2e>
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f88:	4798      	blx	r3
 8008f8a:	3601      	adds	r6, #1
 8008f8c:	e7ee      	b.n	8008f6c <__libc_init_array+0xc>
 8008f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f92:	4798      	blx	r3
 8008f94:	3601      	adds	r6, #1
 8008f96:	e7f2      	b.n	8008f7e <__libc_init_array+0x1e>
 8008f98:	08009f34 	.word	0x08009f34
 8008f9c:	08009f34 	.word	0x08009f34
 8008fa0:	08009f34 	.word	0x08009f34
 8008fa4:	08009f38 	.word	0x08009f38

08008fa8 <__retarget_lock_init_recursive>:
 8008fa8:	4770      	bx	lr

08008faa <__retarget_lock_acquire_recursive>:
 8008faa:	4770      	bx	lr

08008fac <__retarget_lock_release_recursive>:
 8008fac:	4770      	bx	lr
	...

08008fb0 <_free_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	d041      	beq.n	800903c <_free_r+0x8c>
 8008fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbc:	1f0c      	subs	r4, r1, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfb8      	it	lt
 8008fc2:	18e4      	addlt	r4, r4, r3
 8008fc4:	f000 f8e0 	bl	8009188 <__malloc_lock>
 8008fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009040 <_free_r+0x90>)
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	b933      	cbnz	r3, 8008fdc <_free_r+0x2c>
 8008fce:	6063      	str	r3, [r4, #4]
 8008fd0:	6014      	str	r4, [r2, #0]
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd8:	f000 b8dc 	b.w	8009194 <__malloc_unlock>
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d908      	bls.n	8008ff2 <_free_r+0x42>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	1821      	adds	r1, r4, r0
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	bf01      	itttt	eq
 8008fe8:	6819      	ldreq	r1, [r3, #0]
 8008fea:	685b      	ldreq	r3, [r3, #4]
 8008fec:	1809      	addeq	r1, r1, r0
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	e7ed      	b.n	8008fce <_free_r+0x1e>
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	b10b      	cbz	r3, 8008ffc <_free_r+0x4c>
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	d9fa      	bls.n	8008ff2 <_free_r+0x42>
 8008ffc:	6811      	ldr	r1, [r2, #0]
 8008ffe:	1850      	adds	r0, r2, r1
 8009000:	42a0      	cmp	r0, r4
 8009002:	d10b      	bne.n	800901c <_free_r+0x6c>
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	4401      	add	r1, r0
 8009008:	1850      	adds	r0, r2, r1
 800900a:	4283      	cmp	r3, r0
 800900c:	6011      	str	r1, [r2, #0]
 800900e:	d1e0      	bne.n	8008fd2 <_free_r+0x22>
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	6053      	str	r3, [r2, #4]
 8009016:	4408      	add	r0, r1
 8009018:	6010      	str	r0, [r2, #0]
 800901a:	e7da      	b.n	8008fd2 <_free_r+0x22>
 800901c:	d902      	bls.n	8009024 <_free_r+0x74>
 800901e:	230c      	movs	r3, #12
 8009020:	602b      	str	r3, [r5, #0]
 8009022:	e7d6      	b.n	8008fd2 <_free_r+0x22>
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	1821      	adds	r1, r4, r0
 8009028:	428b      	cmp	r3, r1
 800902a:	bf04      	itt	eq
 800902c:	6819      	ldreq	r1, [r3, #0]
 800902e:	685b      	ldreq	r3, [r3, #4]
 8009030:	6063      	str	r3, [r4, #4]
 8009032:	bf04      	itt	eq
 8009034:	1809      	addeq	r1, r1, r0
 8009036:	6021      	streq	r1, [r4, #0]
 8009038:	6054      	str	r4, [r2, #4]
 800903a:	e7ca      	b.n	8008fd2 <_free_r+0x22>
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	20001618 	.word	0x20001618

08009044 <sbrk_aligned>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	4e0f      	ldr	r6, [pc, #60]	@ (8009084 <sbrk_aligned+0x40>)
 8009048:	460c      	mov	r4, r1
 800904a:	6831      	ldr	r1, [r6, #0]
 800904c:	4605      	mov	r5, r0
 800904e:	b911      	cbnz	r1, 8009056 <sbrk_aligned+0x12>
 8009050:	f000 fca6 	bl	80099a0 <_sbrk_r>
 8009054:	6030      	str	r0, [r6, #0]
 8009056:	4621      	mov	r1, r4
 8009058:	4628      	mov	r0, r5
 800905a:	f000 fca1 	bl	80099a0 <_sbrk_r>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	d103      	bne.n	800906a <sbrk_aligned+0x26>
 8009062:	f04f 34ff 	mov.w	r4, #4294967295
 8009066:	4620      	mov	r0, r4
 8009068:	bd70      	pop	{r4, r5, r6, pc}
 800906a:	1cc4      	adds	r4, r0, #3
 800906c:	f024 0403 	bic.w	r4, r4, #3
 8009070:	42a0      	cmp	r0, r4
 8009072:	d0f8      	beq.n	8009066 <sbrk_aligned+0x22>
 8009074:	1a21      	subs	r1, r4, r0
 8009076:	4628      	mov	r0, r5
 8009078:	f000 fc92 	bl	80099a0 <_sbrk_r>
 800907c:	3001      	adds	r0, #1
 800907e:	d1f2      	bne.n	8009066 <sbrk_aligned+0x22>
 8009080:	e7ef      	b.n	8009062 <sbrk_aligned+0x1e>
 8009082:	bf00      	nop
 8009084:	20001614 	.word	0x20001614

08009088 <_malloc_r>:
 8009088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800908c:	1ccd      	adds	r5, r1, #3
 800908e:	f025 0503 	bic.w	r5, r5, #3
 8009092:	3508      	adds	r5, #8
 8009094:	2d0c      	cmp	r5, #12
 8009096:	bf38      	it	cc
 8009098:	250c      	movcc	r5, #12
 800909a:	2d00      	cmp	r5, #0
 800909c:	4606      	mov	r6, r0
 800909e:	db01      	blt.n	80090a4 <_malloc_r+0x1c>
 80090a0:	42a9      	cmp	r1, r5
 80090a2:	d904      	bls.n	80090ae <_malloc_r+0x26>
 80090a4:	230c      	movs	r3, #12
 80090a6:	6033      	str	r3, [r6, #0]
 80090a8:	2000      	movs	r0, #0
 80090aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009184 <_malloc_r+0xfc>
 80090b2:	f000 f869 	bl	8009188 <__malloc_lock>
 80090b6:	f8d8 3000 	ldr.w	r3, [r8]
 80090ba:	461c      	mov	r4, r3
 80090bc:	bb44      	cbnz	r4, 8009110 <_malloc_r+0x88>
 80090be:	4629      	mov	r1, r5
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7ff ffbf 	bl	8009044 <sbrk_aligned>
 80090c6:	1c43      	adds	r3, r0, #1
 80090c8:	4604      	mov	r4, r0
 80090ca:	d158      	bne.n	800917e <_malloc_r+0xf6>
 80090cc:	f8d8 4000 	ldr.w	r4, [r8]
 80090d0:	4627      	mov	r7, r4
 80090d2:	2f00      	cmp	r7, #0
 80090d4:	d143      	bne.n	800915e <_malloc_r+0xd6>
 80090d6:	2c00      	cmp	r4, #0
 80090d8:	d04b      	beq.n	8009172 <_malloc_r+0xea>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	4639      	mov	r1, r7
 80090de:	4630      	mov	r0, r6
 80090e0:	eb04 0903 	add.w	r9, r4, r3
 80090e4:	f000 fc5c 	bl	80099a0 <_sbrk_r>
 80090e8:	4581      	cmp	r9, r0
 80090ea:	d142      	bne.n	8009172 <_malloc_r+0xea>
 80090ec:	6821      	ldr	r1, [r4, #0]
 80090ee:	1a6d      	subs	r5, r5, r1
 80090f0:	4629      	mov	r1, r5
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7ff ffa6 	bl	8009044 <sbrk_aligned>
 80090f8:	3001      	adds	r0, #1
 80090fa:	d03a      	beq.n	8009172 <_malloc_r+0xea>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	442b      	add	r3, r5
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	f8d8 3000 	ldr.w	r3, [r8]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	bb62      	cbnz	r2, 8009164 <_malloc_r+0xdc>
 800910a:	f8c8 7000 	str.w	r7, [r8]
 800910e:	e00f      	b.n	8009130 <_malloc_r+0xa8>
 8009110:	6822      	ldr	r2, [r4, #0]
 8009112:	1b52      	subs	r2, r2, r5
 8009114:	d420      	bmi.n	8009158 <_malloc_r+0xd0>
 8009116:	2a0b      	cmp	r2, #11
 8009118:	d917      	bls.n	800914a <_malloc_r+0xc2>
 800911a:	1961      	adds	r1, r4, r5
 800911c:	42a3      	cmp	r3, r4
 800911e:	6025      	str	r5, [r4, #0]
 8009120:	bf18      	it	ne
 8009122:	6059      	strne	r1, [r3, #4]
 8009124:	6863      	ldr	r3, [r4, #4]
 8009126:	bf08      	it	eq
 8009128:	f8c8 1000 	streq.w	r1, [r8]
 800912c:	5162      	str	r2, [r4, r5]
 800912e:	604b      	str	r3, [r1, #4]
 8009130:	4630      	mov	r0, r6
 8009132:	f000 f82f 	bl	8009194 <__malloc_unlock>
 8009136:	f104 000b 	add.w	r0, r4, #11
 800913a:	1d23      	adds	r3, r4, #4
 800913c:	f020 0007 	bic.w	r0, r0, #7
 8009140:	1ac2      	subs	r2, r0, r3
 8009142:	bf1c      	itt	ne
 8009144:	1a1b      	subne	r3, r3, r0
 8009146:	50a3      	strne	r3, [r4, r2]
 8009148:	e7af      	b.n	80090aa <_malloc_r+0x22>
 800914a:	6862      	ldr	r2, [r4, #4]
 800914c:	42a3      	cmp	r3, r4
 800914e:	bf0c      	ite	eq
 8009150:	f8c8 2000 	streq.w	r2, [r8]
 8009154:	605a      	strne	r2, [r3, #4]
 8009156:	e7eb      	b.n	8009130 <_malloc_r+0xa8>
 8009158:	4623      	mov	r3, r4
 800915a:	6864      	ldr	r4, [r4, #4]
 800915c:	e7ae      	b.n	80090bc <_malloc_r+0x34>
 800915e:	463c      	mov	r4, r7
 8009160:	687f      	ldr	r7, [r7, #4]
 8009162:	e7b6      	b.n	80090d2 <_malloc_r+0x4a>
 8009164:	461a      	mov	r2, r3
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	42a3      	cmp	r3, r4
 800916a:	d1fb      	bne.n	8009164 <_malloc_r+0xdc>
 800916c:	2300      	movs	r3, #0
 800916e:	6053      	str	r3, [r2, #4]
 8009170:	e7de      	b.n	8009130 <_malloc_r+0xa8>
 8009172:	230c      	movs	r3, #12
 8009174:	6033      	str	r3, [r6, #0]
 8009176:	4630      	mov	r0, r6
 8009178:	f000 f80c 	bl	8009194 <__malloc_unlock>
 800917c:	e794      	b.n	80090a8 <_malloc_r+0x20>
 800917e:	6005      	str	r5, [r0, #0]
 8009180:	e7d6      	b.n	8009130 <_malloc_r+0xa8>
 8009182:	bf00      	nop
 8009184:	20001618 	.word	0x20001618

08009188 <__malloc_lock>:
 8009188:	4801      	ldr	r0, [pc, #4]	@ (8009190 <__malloc_lock+0x8>)
 800918a:	f7ff bf0e 	b.w	8008faa <__retarget_lock_acquire_recursive>
 800918e:	bf00      	nop
 8009190:	20001610 	.word	0x20001610

08009194 <__malloc_unlock>:
 8009194:	4801      	ldr	r0, [pc, #4]	@ (800919c <__malloc_unlock+0x8>)
 8009196:	f7ff bf09 	b.w	8008fac <__retarget_lock_release_recursive>
 800919a:	bf00      	nop
 800919c:	20001610 	.word	0x20001610

080091a0 <__sfputc_r>:
 80091a0:	6893      	ldr	r3, [r2, #8]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	b410      	push	{r4}
 80091a8:	6093      	str	r3, [r2, #8]
 80091aa:	da08      	bge.n	80091be <__sfputc_r+0x1e>
 80091ac:	6994      	ldr	r4, [r2, #24]
 80091ae:	42a3      	cmp	r3, r4
 80091b0:	db01      	blt.n	80091b6 <__sfputc_r+0x16>
 80091b2:	290a      	cmp	r1, #10
 80091b4:	d103      	bne.n	80091be <__sfputc_r+0x1e>
 80091b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ba:	f7ff bde8 	b.w	8008d8e <__swbuf_r>
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	1c58      	adds	r0, r3, #1
 80091c2:	6010      	str	r0, [r2, #0]
 80091c4:	7019      	strb	r1, [r3, #0]
 80091c6:	4608      	mov	r0, r1
 80091c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <__sfputs_r>:
 80091ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d0:	4606      	mov	r6, r0
 80091d2:	460f      	mov	r7, r1
 80091d4:	4614      	mov	r4, r2
 80091d6:	18d5      	adds	r5, r2, r3
 80091d8:	42ac      	cmp	r4, r5
 80091da:	d101      	bne.n	80091e0 <__sfputs_r+0x12>
 80091dc:	2000      	movs	r0, #0
 80091de:	e007      	b.n	80091f0 <__sfputs_r+0x22>
 80091e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e4:	463a      	mov	r2, r7
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff ffda 	bl	80091a0 <__sfputc_r>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d1f3      	bne.n	80091d8 <__sfputs_r+0xa>
 80091f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091f4 <_vfiprintf_r>:
 80091f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f8:	460d      	mov	r5, r1
 80091fa:	b09d      	sub	sp, #116	@ 0x74
 80091fc:	4614      	mov	r4, r2
 80091fe:	4698      	mov	r8, r3
 8009200:	4606      	mov	r6, r0
 8009202:	b118      	cbz	r0, 800920c <_vfiprintf_r+0x18>
 8009204:	6a03      	ldr	r3, [r0, #32]
 8009206:	b90b      	cbnz	r3, 800920c <_vfiprintf_r+0x18>
 8009208:	f7ff fcd8 	bl	8008bbc <__sinit>
 800920c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800920e:	07d9      	lsls	r1, r3, #31
 8009210:	d405      	bmi.n	800921e <_vfiprintf_r+0x2a>
 8009212:	89ab      	ldrh	r3, [r5, #12]
 8009214:	059a      	lsls	r2, r3, #22
 8009216:	d402      	bmi.n	800921e <_vfiprintf_r+0x2a>
 8009218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800921a:	f7ff fec6 	bl	8008faa <__retarget_lock_acquire_recursive>
 800921e:	89ab      	ldrh	r3, [r5, #12]
 8009220:	071b      	lsls	r3, r3, #28
 8009222:	d501      	bpl.n	8009228 <_vfiprintf_r+0x34>
 8009224:	692b      	ldr	r3, [r5, #16]
 8009226:	b99b      	cbnz	r3, 8009250 <_vfiprintf_r+0x5c>
 8009228:	4629      	mov	r1, r5
 800922a:	4630      	mov	r0, r6
 800922c:	f7ff fdee 	bl	8008e0c <__swsetup_r>
 8009230:	b170      	cbz	r0, 8009250 <_vfiprintf_r+0x5c>
 8009232:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009234:	07dc      	lsls	r4, r3, #31
 8009236:	d504      	bpl.n	8009242 <_vfiprintf_r+0x4e>
 8009238:	f04f 30ff 	mov.w	r0, #4294967295
 800923c:	b01d      	add	sp, #116	@ 0x74
 800923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	0598      	lsls	r0, r3, #22
 8009246:	d4f7      	bmi.n	8009238 <_vfiprintf_r+0x44>
 8009248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800924a:	f7ff feaf 	bl	8008fac <__retarget_lock_release_recursive>
 800924e:	e7f3      	b.n	8009238 <_vfiprintf_r+0x44>
 8009250:	2300      	movs	r3, #0
 8009252:	9309      	str	r3, [sp, #36]	@ 0x24
 8009254:	2320      	movs	r3, #32
 8009256:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800925a:	f8cd 800c 	str.w	r8, [sp, #12]
 800925e:	2330      	movs	r3, #48	@ 0x30
 8009260:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009410 <_vfiprintf_r+0x21c>
 8009264:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009268:	f04f 0901 	mov.w	r9, #1
 800926c:	4623      	mov	r3, r4
 800926e:	469a      	mov	sl, r3
 8009270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009274:	b10a      	cbz	r2, 800927a <_vfiprintf_r+0x86>
 8009276:	2a25      	cmp	r2, #37	@ 0x25
 8009278:	d1f9      	bne.n	800926e <_vfiprintf_r+0x7a>
 800927a:	ebba 0b04 	subs.w	fp, sl, r4
 800927e:	d00b      	beq.n	8009298 <_vfiprintf_r+0xa4>
 8009280:	465b      	mov	r3, fp
 8009282:	4622      	mov	r2, r4
 8009284:	4629      	mov	r1, r5
 8009286:	4630      	mov	r0, r6
 8009288:	f7ff ffa1 	bl	80091ce <__sfputs_r>
 800928c:	3001      	adds	r0, #1
 800928e:	f000 80a7 	beq.w	80093e0 <_vfiprintf_r+0x1ec>
 8009292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009294:	445a      	add	r2, fp
 8009296:	9209      	str	r2, [sp, #36]	@ 0x24
 8009298:	f89a 3000 	ldrb.w	r3, [sl]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 809f 	beq.w	80093e0 <_vfiprintf_r+0x1ec>
 80092a2:	2300      	movs	r3, #0
 80092a4:	f04f 32ff 	mov.w	r2, #4294967295
 80092a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ac:	f10a 0a01 	add.w	sl, sl, #1
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80092ba:	4654      	mov	r4, sl
 80092bc:	2205      	movs	r2, #5
 80092be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c2:	4853      	ldr	r0, [pc, #332]	@ (8009410 <_vfiprintf_r+0x21c>)
 80092c4:	f7f6 ff84 	bl	80001d0 <memchr>
 80092c8:	9a04      	ldr	r2, [sp, #16]
 80092ca:	b9d8      	cbnz	r0, 8009304 <_vfiprintf_r+0x110>
 80092cc:	06d1      	lsls	r1, r2, #27
 80092ce:	bf44      	itt	mi
 80092d0:	2320      	movmi	r3, #32
 80092d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092d6:	0713      	lsls	r3, r2, #28
 80092d8:	bf44      	itt	mi
 80092da:	232b      	movmi	r3, #43	@ 0x2b
 80092dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092e0:	f89a 3000 	ldrb.w	r3, [sl]
 80092e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e6:	d015      	beq.n	8009314 <_vfiprintf_r+0x120>
 80092e8:	9a07      	ldr	r2, [sp, #28]
 80092ea:	4654      	mov	r4, sl
 80092ec:	2000      	movs	r0, #0
 80092ee:	f04f 0c0a 	mov.w	ip, #10
 80092f2:	4621      	mov	r1, r4
 80092f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f8:	3b30      	subs	r3, #48	@ 0x30
 80092fa:	2b09      	cmp	r3, #9
 80092fc:	d94b      	bls.n	8009396 <_vfiprintf_r+0x1a2>
 80092fe:	b1b0      	cbz	r0, 800932e <_vfiprintf_r+0x13a>
 8009300:	9207      	str	r2, [sp, #28]
 8009302:	e014      	b.n	800932e <_vfiprintf_r+0x13a>
 8009304:	eba0 0308 	sub.w	r3, r0, r8
 8009308:	fa09 f303 	lsl.w	r3, r9, r3
 800930c:	4313      	orrs	r3, r2
 800930e:	9304      	str	r3, [sp, #16]
 8009310:	46a2      	mov	sl, r4
 8009312:	e7d2      	b.n	80092ba <_vfiprintf_r+0xc6>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	1d19      	adds	r1, r3, #4
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	9103      	str	r1, [sp, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfbb      	ittet	lt
 8009320:	425b      	neglt	r3, r3
 8009322:	f042 0202 	orrlt.w	r2, r2, #2
 8009326:	9307      	strge	r3, [sp, #28]
 8009328:	9307      	strlt	r3, [sp, #28]
 800932a:	bfb8      	it	lt
 800932c:	9204      	strlt	r2, [sp, #16]
 800932e:	7823      	ldrb	r3, [r4, #0]
 8009330:	2b2e      	cmp	r3, #46	@ 0x2e
 8009332:	d10a      	bne.n	800934a <_vfiprintf_r+0x156>
 8009334:	7863      	ldrb	r3, [r4, #1]
 8009336:	2b2a      	cmp	r3, #42	@ 0x2a
 8009338:	d132      	bne.n	80093a0 <_vfiprintf_r+0x1ac>
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	1d1a      	adds	r2, r3, #4
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	9203      	str	r2, [sp, #12]
 8009342:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009346:	3402      	adds	r4, #2
 8009348:	9305      	str	r3, [sp, #20]
 800934a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009420 <_vfiprintf_r+0x22c>
 800934e:	7821      	ldrb	r1, [r4, #0]
 8009350:	2203      	movs	r2, #3
 8009352:	4650      	mov	r0, sl
 8009354:	f7f6 ff3c 	bl	80001d0 <memchr>
 8009358:	b138      	cbz	r0, 800936a <_vfiprintf_r+0x176>
 800935a:	9b04      	ldr	r3, [sp, #16]
 800935c:	eba0 000a 	sub.w	r0, r0, sl
 8009360:	2240      	movs	r2, #64	@ 0x40
 8009362:	4082      	lsls	r2, r0
 8009364:	4313      	orrs	r3, r2
 8009366:	3401      	adds	r4, #1
 8009368:	9304      	str	r3, [sp, #16]
 800936a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936e:	4829      	ldr	r0, [pc, #164]	@ (8009414 <_vfiprintf_r+0x220>)
 8009370:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009374:	2206      	movs	r2, #6
 8009376:	f7f6 ff2b 	bl	80001d0 <memchr>
 800937a:	2800      	cmp	r0, #0
 800937c:	d03f      	beq.n	80093fe <_vfiprintf_r+0x20a>
 800937e:	4b26      	ldr	r3, [pc, #152]	@ (8009418 <_vfiprintf_r+0x224>)
 8009380:	bb1b      	cbnz	r3, 80093ca <_vfiprintf_r+0x1d6>
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	3307      	adds	r3, #7
 8009386:	f023 0307 	bic.w	r3, r3, #7
 800938a:	3308      	adds	r3, #8
 800938c:	9303      	str	r3, [sp, #12]
 800938e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009390:	443b      	add	r3, r7
 8009392:	9309      	str	r3, [sp, #36]	@ 0x24
 8009394:	e76a      	b.n	800926c <_vfiprintf_r+0x78>
 8009396:	fb0c 3202 	mla	r2, ip, r2, r3
 800939a:	460c      	mov	r4, r1
 800939c:	2001      	movs	r0, #1
 800939e:	e7a8      	b.n	80092f2 <_vfiprintf_r+0xfe>
 80093a0:	2300      	movs	r3, #0
 80093a2:	3401      	adds	r4, #1
 80093a4:	9305      	str	r3, [sp, #20]
 80093a6:	4619      	mov	r1, r3
 80093a8:	f04f 0c0a 	mov.w	ip, #10
 80093ac:	4620      	mov	r0, r4
 80093ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b2:	3a30      	subs	r2, #48	@ 0x30
 80093b4:	2a09      	cmp	r2, #9
 80093b6:	d903      	bls.n	80093c0 <_vfiprintf_r+0x1cc>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0c6      	beq.n	800934a <_vfiprintf_r+0x156>
 80093bc:	9105      	str	r1, [sp, #20]
 80093be:	e7c4      	b.n	800934a <_vfiprintf_r+0x156>
 80093c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c4:	4604      	mov	r4, r0
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7f0      	b.n	80093ac <_vfiprintf_r+0x1b8>
 80093ca:	ab03      	add	r3, sp, #12
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	462a      	mov	r2, r5
 80093d0:	4b12      	ldr	r3, [pc, #72]	@ (800941c <_vfiprintf_r+0x228>)
 80093d2:	a904      	add	r1, sp, #16
 80093d4:	4630      	mov	r0, r6
 80093d6:	f3af 8000 	nop.w
 80093da:	4607      	mov	r7, r0
 80093dc:	1c78      	adds	r0, r7, #1
 80093de:	d1d6      	bne.n	800938e <_vfiprintf_r+0x19a>
 80093e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093e2:	07d9      	lsls	r1, r3, #31
 80093e4:	d405      	bmi.n	80093f2 <_vfiprintf_r+0x1fe>
 80093e6:	89ab      	ldrh	r3, [r5, #12]
 80093e8:	059a      	lsls	r2, r3, #22
 80093ea:	d402      	bmi.n	80093f2 <_vfiprintf_r+0x1fe>
 80093ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ee:	f7ff fddd 	bl	8008fac <__retarget_lock_release_recursive>
 80093f2:	89ab      	ldrh	r3, [r5, #12]
 80093f4:	065b      	lsls	r3, r3, #25
 80093f6:	f53f af1f 	bmi.w	8009238 <_vfiprintf_r+0x44>
 80093fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093fc:	e71e      	b.n	800923c <_vfiprintf_r+0x48>
 80093fe:	ab03      	add	r3, sp, #12
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	462a      	mov	r2, r5
 8009404:	4b05      	ldr	r3, [pc, #20]	@ (800941c <_vfiprintf_r+0x228>)
 8009406:	a904      	add	r1, sp, #16
 8009408:	4630      	mov	r0, r6
 800940a:	f000 f879 	bl	8009500 <_printf_i>
 800940e:	e7e4      	b.n	80093da <_vfiprintf_r+0x1e6>
 8009410:	08009ef8 	.word	0x08009ef8
 8009414:	08009f02 	.word	0x08009f02
 8009418:	00000000 	.word	0x00000000
 800941c:	080091cf 	.word	0x080091cf
 8009420:	08009efe 	.word	0x08009efe

08009424 <_printf_common>:
 8009424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	4616      	mov	r6, r2
 800942a:	4698      	mov	r8, r3
 800942c:	688a      	ldr	r2, [r1, #8]
 800942e:	690b      	ldr	r3, [r1, #16]
 8009430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009434:	4293      	cmp	r3, r2
 8009436:	bfb8      	it	lt
 8009438:	4613      	movlt	r3, r2
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009440:	4607      	mov	r7, r0
 8009442:	460c      	mov	r4, r1
 8009444:	b10a      	cbz	r2, 800944a <_printf_common+0x26>
 8009446:	3301      	adds	r3, #1
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	0699      	lsls	r1, r3, #26
 800944e:	bf42      	ittt	mi
 8009450:	6833      	ldrmi	r3, [r6, #0]
 8009452:	3302      	addmi	r3, #2
 8009454:	6033      	strmi	r3, [r6, #0]
 8009456:	6825      	ldr	r5, [r4, #0]
 8009458:	f015 0506 	ands.w	r5, r5, #6
 800945c:	d106      	bne.n	800946c <_printf_common+0x48>
 800945e:	f104 0a19 	add.w	sl, r4, #25
 8009462:	68e3      	ldr	r3, [r4, #12]
 8009464:	6832      	ldr	r2, [r6, #0]
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	42ab      	cmp	r3, r5
 800946a:	dc26      	bgt.n	80094ba <_printf_common+0x96>
 800946c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	3b00      	subs	r3, #0
 8009474:	bf18      	it	ne
 8009476:	2301      	movne	r3, #1
 8009478:	0692      	lsls	r2, r2, #26
 800947a:	d42b      	bmi.n	80094d4 <_printf_common+0xb0>
 800947c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009480:	4641      	mov	r1, r8
 8009482:	4638      	mov	r0, r7
 8009484:	47c8      	blx	r9
 8009486:	3001      	adds	r0, #1
 8009488:	d01e      	beq.n	80094c8 <_printf_common+0xa4>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	6922      	ldr	r2, [r4, #16]
 800948e:	f003 0306 	and.w	r3, r3, #6
 8009492:	2b04      	cmp	r3, #4
 8009494:	bf02      	ittt	eq
 8009496:	68e5      	ldreq	r5, [r4, #12]
 8009498:	6833      	ldreq	r3, [r6, #0]
 800949a:	1aed      	subeq	r5, r5, r3
 800949c:	68a3      	ldr	r3, [r4, #8]
 800949e:	bf0c      	ite	eq
 80094a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094a4:	2500      	movne	r5, #0
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bfc4      	itt	gt
 80094aa:	1a9b      	subgt	r3, r3, r2
 80094ac:	18ed      	addgt	r5, r5, r3
 80094ae:	2600      	movs	r6, #0
 80094b0:	341a      	adds	r4, #26
 80094b2:	42b5      	cmp	r5, r6
 80094b4:	d11a      	bne.n	80094ec <_printf_common+0xc8>
 80094b6:	2000      	movs	r0, #0
 80094b8:	e008      	b.n	80094cc <_printf_common+0xa8>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4652      	mov	r2, sl
 80094be:	4641      	mov	r1, r8
 80094c0:	4638      	mov	r0, r7
 80094c2:	47c8      	blx	r9
 80094c4:	3001      	adds	r0, #1
 80094c6:	d103      	bne.n	80094d0 <_printf_common+0xac>
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295
 80094cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d0:	3501      	adds	r5, #1
 80094d2:	e7c6      	b.n	8009462 <_printf_common+0x3e>
 80094d4:	18e1      	adds	r1, r4, r3
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	2030      	movs	r0, #48	@ 0x30
 80094da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094de:	4422      	add	r2, r4
 80094e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094e8:	3302      	adds	r3, #2
 80094ea:	e7c7      	b.n	800947c <_printf_common+0x58>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4622      	mov	r2, r4
 80094f0:	4641      	mov	r1, r8
 80094f2:	4638      	mov	r0, r7
 80094f4:	47c8      	blx	r9
 80094f6:	3001      	adds	r0, #1
 80094f8:	d0e6      	beq.n	80094c8 <_printf_common+0xa4>
 80094fa:	3601      	adds	r6, #1
 80094fc:	e7d9      	b.n	80094b2 <_printf_common+0x8e>
	...

08009500 <_printf_i>:
 8009500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	7e0f      	ldrb	r7, [r1, #24]
 8009506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009508:	2f78      	cmp	r7, #120	@ 0x78
 800950a:	4691      	mov	r9, r2
 800950c:	4680      	mov	r8, r0
 800950e:	460c      	mov	r4, r1
 8009510:	469a      	mov	sl, r3
 8009512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009516:	d807      	bhi.n	8009528 <_printf_i+0x28>
 8009518:	2f62      	cmp	r7, #98	@ 0x62
 800951a:	d80a      	bhi.n	8009532 <_printf_i+0x32>
 800951c:	2f00      	cmp	r7, #0
 800951e:	f000 80d2 	beq.w	80096c6 <_printf_i+0x1c6>
 8009522:	2f58      	cmp	r7, #88	@ 0x58
 8009524:	f000 80b9 	beq.w	800969a <_printf_i+0x19a>
 8009528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800952c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009530:	e03a      	b.n	80095a8 <_printf_i+0xa8>
 8009532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009536:	2b15      	cmp	r3, #21
 8009538:	d8f6      	bhi.n	8009528 <_printf_i+0x28>
 800953a:	a101      	add	r1, pc, #4	@ (adr r1, 8009540 <_printf_i+0x40>)
 800953c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009540:	08009599 	.word	0x08009599
 8009544:	080095ad 	.word	0x080095ad
 8009548:	08009529 	.word	0x08009529
 800954c:	08009529 	.word	0x08009529
 8009550:	08009529 	.word	0x08009529
 8009554:	08009529 	.word	0x08009529
 8009558:	080095ad 	.word	0x080095ad
 800955c:	08009529 	.word	0x08009529
 8009560:	08009529 	.word	0x08009529
 8009564:	08009529 	.word	0x08009529
 8009568:	08009529 	.word	0x08009529
 800956c:	080096ad 	.word	0x080096ad
 8009570:	080095d7 	.word	0x080095d7
 8009574:	08009667 	.word	0x08009667
 8009578:	08009529 	.word	0x08009529
 800957c:	08009529 	.word	0x08009529
 8009580:	080096cf 	.word	0x080096cf
 8009584:	08009529 	.word	0x08009529
 8009588:	080095d7 	.word	0x080095d7
 800958c:	08009529 	.word	0x08009529
 8009590:	08009529 	.word	0x08009529
 8009594:	0800966f 	.word	0x0800966f
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	1d1a      	adds	r2, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6032      	str	r2, [r6, #0]
 80095a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095a8:	2301      	movs	r3, #1
 80095aa:	e09d      	b.n	80096e8 <_printf_i+0x1e8>
 80095ac:	6833      	ldr	r3, [r6, #0]
 80095ae:	6820      	ldr	r0, [r4, #0]
 80095b0:	1d19      	adds	r1, r3, #4
 80095b2:	6031      	str	r1, [r6, #0]
 80095b4:	0606      	lsls	r6, r0, #24
 80095b6:	d501      	bpl.n	80095bc <_printf_i+0xbc>
 80095b8:	681d      	ldr	r5, [r3, #0]
 80095ba:	e003      	b.n	80095c4 <_printf_i+0xc4>
 80095bc:	0645      	lsls	r5, r0, #25
 80095be:	d5fb      	bpl.n	80095b8 <_printf_i+0xb8>
 80095c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095c4:	2d00      	cmp	r5, #0
 80095c6:	da03      	bge.n	80095d0 <_printf_i+0xd0>
 80095c8:	232d      	movs	r3, #45	@ 0x2d
 80095ca:	426d      	negs	r5, r5
 80095cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095d0:	4859      	ldr	r0, [pc, #356]	@ (8009738 <_printf_i+0x238>)
 80095d2:	230a      	movs	r3, #10
 80095d4:	e011      	b.n	80095fa <_printf_i+0xfa>
 80095d6:	6821      	ldr	r1, [r4, #0]
 80095d8:	6833      	ldr	r3, [r6, #0]
 80095da:	0608      	lsls	r0, r1, #24
 80095dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80095e0:	d402      	bmi.n	80095e8 <_printf_i+0xe8>
 80095e2:	0649      	lsls	r1, r1, #25
 80095e4:	bf48      	it	mi
 80095e6:	b2ad      	uxthmi	r5, r5
 80095e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095ea:	4853      	ldr	r0, [pc, #332]	@ (8009738 <_printf_i+0x238>)
 80095ec:	6033      	str	r3, [r6, #0]
 80095ee:	bf14      	ite	ne
 80095f0:	230a      	movne	r3, #10
 80095f2:	2308      	moveq	r3, #8
 80095f4:	2100      	movs	r1, #0
 80095f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095fa:	6866      	ldr	r6, [r4, #4]
 80095fc:	60a6      	str	r6, [r4, #8]
 80095fe:	2e00      	cmp	r6, #0
 8009600:	bfa2      	ittt	ge
 8009602:	6821      	ldrge	r1, [r4, #0]
 8009604:	f021 0104 	bicge.w	r1, r1, #4
 8009608:	6021      	strge	r1, [r4, #0]
 800960a:	b90d      	cbnz	r5, 8009610 <_printf_i+0x110>
 800960c:	2e00      	cmp	r6, #0
 800960e:	d04b      	beq.n	80096a8 <_printf_i+0x1a8>
 8009610:	4616      	mov	r6, r2
 8009612:	fbb5 f1f3 	udiv	r1, r5, r3
 8009616:	fb03 5711 	mls	r7, r3, r1, r5
 800961a:	5dc7      	ldrb	r7, [r0, r7]
 800961c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009620:	462f      	mov	r7, r5
 8009622:	42bb      	cmp	r3, r7
 8009624:	460d      	mov	r5, r1
 8009626:	d9f4      	bls.n	8009612 <_printf_i+0x112>
 8009628:	2b08      	cmp	r3, #8
 800962a:	d10b      	bne.n	8009644 <_printf_i+0x144>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	07df      	lsls	r7, r3, #31
 8009630:	d508      	bpl.n	8009644 <_printf_i+0x144>
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	6861      	ldr	r1, [r4, #4]
 8009636:	4299      	cmp	r1, r3
 8009638:	bfde      	ittt	le
 800963a:	2330      	movle	r3, #48	@ 0x30
 800963c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009640:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009644:	1b92      	subs	r2, r2, r6
 8009646:	6122      	str	r2, [r4, #16]
 8009648:	f8cd a000 	str.w	sl, [sp]
 800964c:	464b      	mov	r3, r9
 800964e:	aa03      	add	r2, sp, #12
 8009650:	4621      	mov	r1, r4
 8009652:	4640      	mov	r0, r8
 8009654:	f7ff fee6 	bl	8009424 <_printf_common>
 8009658:	3001      	adds	r0, #1
 800965a:	d14a      	bne.n	80096f2 <_printf_i+0x1f2>
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	b004      	add	sp, #16
 8009662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	f043 0320 	orr.w	r3, r3, #32
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	4833      	ldr	r0, [pc, #204]	@ (800973c <_printf_i+0x23c>)
 8009670:	2778      	movs	r7, #120	@ 0x78
 8009672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	6831      	ldr	r1, [r6, #0]
 800967a:	061f      	lsls	r7, r3, #24
 800967c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009680:	d402      	bmi.n	8009688 <_printf_i+0x188>
 8009682:	065f      	lsls	r7, r3, #25
 8009684:	bf48      	it	mi
 8009686:	b2ad      	uxthmi	r5, r5
 8009688:	6031      	str	r1, [r6, #0]
 800968a:	07d9      	lsls	r1, r3, #31
 800968c:	bf44      	itt	mi
 800968e:	f043 0320 	orrmi.w	r3, r3, #32
 8009692:	6023      	strmi	r3, [r4, #0]
 8009694:	b11d      	cbz	r5, 800969e <_printf_i+0x19e>
 8009696:	2310      	movs	r3, #16
 8009698:	e7ac      	b.n	80095f4 <_printf_i+0xf4>
 800969a:	4827      	ldr	r0, [pc, #156]	@ (8009738 <_printf_i+0x238>)
 800969c:	e7e9      	b.n	8009672 <_printf_i+0x172>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	f023 0320 	bic.w	r3, r3, #32
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	e7f6      	b.n	8009696 <_printf_i+0x196>
 80096a8:	4616      	mov	r6, r2
 80096aa:	e7bd      	b.n	8009628 <_printf_i+0x128>
 80096ac:	6833      	ldr	r3, [r6, #0]
 80096ae:	6825      	ldr	r5, [r4, #0]
 80096b0:	6961      	ldr	r1, [r4, #20]
 80096b2:	1d18      	adds	r0, r3, #4
 80096b4:	6030      	str	r0, [r6, #0]
 80096b6:	062e      	lsls	r6, r5, #24
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	d501      	bpl.n	80096c0 <_printf_i+0x1c0>
 80096bc:	6019      	str	r1, [r3, #0]
 80096be:	e002      	b.n	80096c6 <_printf_i+0x1c6>
 80096c0:	0668      	lsls	r0, r5, #25
 80096c2:	d5fb      	bpl.n	80096bc <_printf_i+0x1bc>
 80096c4:	8019      	strh	r1, [r3, #0]
 80096c6:	2300      	movs	r3, #0
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	4616      	mov	r6, r2
 80096cc:	e7bc      	b.n	8009648 <_printf_i+0x148>
 80096ce:	6833      	ldr	r3, [r6, #0]
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	6032      	str	r2, [r6, #0]
 80096d4:	681e      	ldr	r6, [r3, #0]
 80096d6:	6862      	ldr	r2, [r4, #4]
 80096d8:	2100      	movs	r1, #0
 80096da:	4630      	mov	r0, r6
 80096dc:	f7f6 fd78 	bl	80001d0 <memchr>
 80096e0:	b108      	cbz	r0, 80096e6 <_printf_i+0x1e6>
 80096e2:	1b80      	subs	r0, r0, r6
 80096e4:	6060      	str	r0, [r4, #4]
 80096e6:	6863      	ldr	r3, [r4, #4]
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	2300      	movs	r3, #0
 80096ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096f0:	e7aa      	b.n	8009648 <_printf_i+0x148>
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	4632      	mov	r2, r6
 80096f6:	4649      	mov	r1, r9
 80096f8:	4640      	mov	r0, r8
 80096fa:	47d0      	blx	sl
 80096fc:	3001      	adds	r0, #1
 80096fe:	d0ad      	beq.n	800965c <_printf_i+0x15c>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	079b      	lsls	r3, r3, #30
 8009704:	d413      	bmi.n	800972e <_printf_i+0x22e>
 8009706:	68e0      	ldr	r0, [r4, #12]
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	4298      	cmp	r0, r3
 800970c:	bfb8      	it	lt
 800970e:	4618      	movlt	r0, r3
 8009710:	e7a6      	b.n	8009660 <_printf_i+0x160>
 8009712:	2301      	movs	r3, #1
 8009714:	4632      	mov	r2, r6
 8009716:	4649      	mov	r1, r9
 8009718:	4640      	mov	r0, r8
 800971a:	47d0      	blx	sl
 800971c:	3001      	adds	r0, #1
 800971e:	d09d      	beq.n	800965c <_printf_i+0x15c>
 8009720:	3501      	adds	r5, #1
 8009722:	68e3      	ldr	r3, [r4, #12]
 8009724:	9903      	ldr	r1, [sp, #12]
 8009726:	1a5b      	subs	r3, r3, r1
 8009728:	42ab      	cmp	r3, r5
 800972a:	dcf2      	bgt.n	8009712 <_printf_i+0x212>
 800972c:	e7eb      	b.n	8009706 <_printf_i+0x206>
 800972e:	2500      	movs	r5, #0
 8009730:	f104 0619 	add.w	r6, r4, #25
 8009734:	e7f5      	b.n	8009722 <_printf_i+0x222>
 8009736:	bf00      	nop
 8009738:	08009f09 	.word	0x08009f09
 800973c:	08009f1a 	.word	0x08009f1a

08009740 <__sflush_r>:
 8009740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	0716      	lsls	r6, r2, #28
 800974a:	4605      	mov	r5, r0
 800974c:	460c      	mov	r4, r1
 800974e:	d454      	bmi.n	80097fa <__sflush_r+0xba>
 8009750:	684b      	ldr	r3, [r1, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	dc02      	bgt.n	800975c <__sflush_r+0x1c>
 8009756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	dd48      	ble.n	80097ee <__sflush_r+0xae>
 800975c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800975e:	2e00      	cmp	r6, #0
 8009760:	d045      	beq.n	80097ee <__sflush_r+0xae>
 8009762:	2300      	movs	r3, #0
 8009764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009768:	682f      	ldr	r7, [r5, #0]
 800976a:	6a21      	ldr	r1, [r4, #32]
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	d030      	beq.n	80097d2 <__sflush_r+0x92>
 8009770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	0759      	lsls	r1, r3, #29
 8009776:	d505      	bpl.n	8009784 <__sflush_r+0x44>
 8009778:	6863      	ldr	r3, [r4, #4]
 800977a:	1ad2      	subs	r2, r2, r3
 800977c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800977e:	b10b      	cbz	r3, 8009784 <__sflush_r+0x44>
 8009780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009782:	1ad2      	subs	r2, r2, r3
 8009784:	2300      	movs	r3, #0
 8009786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009788:	6a21      	ldr	r1, [r4, #32]
 800978a:	4628      	mov	r0, r5
 800978c:	47b0      	blx	r6
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	d106      	bne.n	80097a2 <__sflush_r+0x62>
 8009794:	6829      	ldr	r1, [r5, #0]
 8009796:	291d      	cmp	r1, #29
 8009798:	d82b      	bhi.n	80097f2 <__sflush_r+0xb2>
 800979a:	4a2a      	ldr	r2, [pc, #168]	@ (8009844 <__sflush_r+0x104>)
 800979c:	410a      	asrs	r2, r1
 800979e:	07d6      	lsls	r6, r2, #31
 80097a0:	d427      	bmi.n	80097f2 <__sflush_r+0xb2>
 80097a2:	2200      	movs	r2, #0
 80097a4:	6062      	str	r2, [r4, #4]
 80097a6:	04d9      	lsls	r1, r3, #19
 80097a8:	6922      	ldr	r2, [r4, #16]
 80097aa:	6022      	str	r2, [r4, #0]
 80097ac:	d504      	bpl.n	80097b8 <__sflush_r+0x78>
 80097ae:	1c42      	adds	r2, r0, #1
 80097b0:	d101      	bne.n	80097b6 <__sflush_r+0x76>
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	b903      	cbnz	r3, 80097b8 <__sflush_r+0x78>
 80097b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80097b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ba:	602f      	str	r7, [r5, #0]
 80097bc:	b1b9      	cbz	r1, 80097ee <__sflush_r+0xae>
 80097be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097c2:	4299      	cmp	r1, r3
 80097c4:	d002      	beq.n	80097cc <__sflush_r+0x8c>
 80097c6:	4628      	mov	r0, r5
 80097c8:	f7ff fbf2 	bl	8008fb0 <_free_r>
 80097cc:	2300      	movs	r3, #0
 80097ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80097d0:	e00d      	b.n	80097ee <__sflush_r+0xae>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4628      	mov	r0, r5
 80097d6:	47b0      	blx	r6
 80097d8:	4602      	mov	r2, r0
 80097da:	1c50      	adds	r0, r2, #1
 80097dc:	d1c9      	bne.n	8009772 <__sflush_r+0x32>
 80097de:	682b      	ldr	r3, [r5, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0c6      	beq.n	8009772 <__sflush_r+0x32>
 80097e4:	2b1d      	cmp	r3, #29
 80097e6:	d001      	beq.n	80097ec <__sflush_r+0xac>
 80097e8:	2b16      	cmp	r3, #22
 80097ea:	d11e      	bne.n	800982a <__sflush_r+0xea>
 80097ec:	602f      	str	r7, [r5, #0]
 80097ee:	2000      	movs	r0, #0
 80097f0:	e022      	b.n	8009838 <__sflush_r+0xf8>
 80097f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f6:	b21b      	sxth	r3, r3
 80097f8:	e01b      	b.n	8009832 <__sflush_r+0xf2>
 80097fa:	690f      	ldr	r7, [r1, #16]
 80097fc:	2f00      	cmp	r7, #0
 80097fe:	d0f6      	beq.n	80097ee <__sflush_r+0xae>
 8009800:	0793      	lsls	r3, r2, #30
 8009802:	680e      	ldr	r6, [r1, #0]
 8009804:	bf08      	it	eq
 8009806:	694b      	ldreq	r3, [r1, #20]
 8009808:	600f      	str	r7, [r1, #0]
 800980a:	bf18      	it	ne
 800980c:	2300      	movne	r3, #0
 800980e:	eba6 0807 	sub.w	r8, r6, r7
 8009812:	608b      	str	r3, [r1, #8]
 8009814:	f1b8 0f00 	cmp.w	r8, #0
 8009818:	dde9      	ble.n	80097ee <__sflush_r+0xae>
 800981a:	6a21      	ldr	r1, [r4, #32]
 800981c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800981e:	4643      	mov	r3, r8
 8009820:	463a      	mov	r2, r7
 8009822:	4628      	mov	r0, r5
 8009824:	47b0      	blx	r6
 8009826:	2800      	cmp	r0, #0
 8009828:	dc08      	bgt.n	800983c <__sflush_r+0xfc>
 800982a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800982e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800983c:	4407      	add	r7, r0
 800983e:	eba8 0800 	sub.w	r8, r8, r0
 8009842:	e7e7      	b.n	8009814 <__sflush_r+0xd4>
 8009844:	dfbffffe 	.word	0xdfbffffe

08009848 <_fflush_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	690b      	ldr	r3, [r1, #16]
 800984c:	4605      	mov	r5, r0
 800984e:	460c      	mov	r4, r1
 8009850:	b913      	cbnz	r3, 8009858 <_fflush_r+0x10>
 8009852:	2500      	movs	r5, #0
 8009854:	4628      	mov	r0, r5
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	b118      	cbz	r0, 8009862 <_fflush_r+0x1a>
 800985a:	6a03      	ldr	r3, [r0, #32]
 800985c:	b90b      	cbnz	r3, 8009862 <_fflush_r+0x1a>
 800985e:	f7ff f9ad 	bl	8008bbc <__sinit>
 8009862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0f3      	beq.n	8009852 <_fflush_r+0xa>
 800986a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800986c:	07d0      	lsls	r0, r2, #31
 800986e:	d404      	bmi.n	800987a <_fflush_r+0x32>
 8009870:	0599      	lsls	r1, r3, #22
 8009872:	d402      	bmi.n	800987a <_fflush_r+0x32>
 8009874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009876:	f7ff fb98 	bl	8008faa <__retarget_lock_acquire_recursive>
 800987a:	4628      	mov	r0, r5
 800987c:	4621      	mov	r1, r4
 800987e:	f7ff ff5f 	bl	8009740 <__sflush_r>
 8009882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009884:	07da      	lsls	r2, r3, #31
 8009886:	4605      	mov	r5, r0
 8009888:	d4e4      	bmi.n	8009854 <_fflush_r+0xc>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	059b      	lsls	r3, r3, #22
 800988e:	d4e1      	bmi.n	8009854 <_fflush_r+0xc>
 8009890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009892:	f7ff fb8b 	bl	8008fac <__retarget_lock_release_recursive>
 8009896:	e7dd      	b.n	8009854 <_fflush_r+0xc>

08009898 <__swhatbuf_r>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	460c      	mov	r4, r1
 800989c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a0:	2900      	cmp	r1, #0
 80098a2:	b096      	sub	sp, #88	@ 0x58
 80098a4:	4615      	mov	r5, r2
 80098a6:	461e      	mov	r6, r3
 80098a8:	da0d      	bge.n	80098c6 <__swhatbuf_r+0x2e>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098b0:	f04f 0100 	mov.w	r1, #0
 80098b4:	bf14      	ite	ne
 80098b6:	2340      	movne	r3, #64	@ 0x40
 80098b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098bc:	2000      	movs	r0, #0
 80098be:	6031      	str	r1, [r6, #0]
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	b016      	add	sp, #88	@ 0x58
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
 80098c6:	466a      	mov	r2, sp
 80098c8:	f000 f848 	bl	800995c <_fstat_r>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	dbec      	blt.n	80098aa <__swhatbuf_r+0x12>
 80098d0:	9901      	ldr	r1, [sp, #4]
 80098d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098da:	4259      	negs	r1, r3
 80098dc:	4159      	adcs	r1, r3
 80098de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098e2:	e7eb      	b.n	80098bc <__swhatbuf_r+0x24>

080098e4 <__smakebuf_r>:
 80098e4:	898b      	ldrh	r3, [r1, #12]
 80098e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098e8:	079d      	lsls	r5, r3, #30
 80098ea:	4606      	mov	r6, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	d507      	bpl.n	8009900 <__smakebuf_r+0x1c>
 80098f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	2301      	movs	r3, #1
 80098fa:	6163      	str	r3, [r4, #20]
 80098fc:	b003      	add	sp, #12
 80098fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009900:	ab01      	add	r3, sp, #4
 8009902:	466a      	mov	r2, sp
 8009904:	f7ff ffc8 	bl	8009898 <__swhatbuf_r>
 8009908:	9f00      	ldr	r7, [sp, #0]
 800990a:	4605      	mov	r5, r0
 800990c:	4639      	mov	r1, r7
 800990e:	4630      	mov	r0, r6
 8009910:	f7ff fbba 	bl	8009088 <_malloc_r>
 8009914:	b948      	cbnz	r0, 800992a <__smakebuf_r+0x46>
 8009916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991a:	059a      	lsls	r2, r3, #22
 800991c:	d4ee      	bmi.n	80098fc <__smakebuf_r+0x18>
 800991e:	f023 0303 	bic.w	r3, r3, #3
 8009922:	f043 0302 	orr.w	r3, r3, #2
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	e7e2      	b.n	80098f0 <__smakebuf_r+0xc>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	6020      	str	r0, [r4, #0]
 800992e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009932:	81a3      	strh	r3, [r4, #12]
 8009934:	9b01      	ldr	r3, [sp, #4]
 8009936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800993a:	b15b      	cbz	r3, 8009954 <__smakebuf_r+0x70>
 800993c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009940:	4630      	mov	r0, r6
 8009942:	f000 f81d 	bl	8009980 <_isatty_r>
 8009946:	b128      	cbz	r0, 8009954 <__smakebuf_r+0x70>
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	f023 0303 	bic.w	r3, r3, #3
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	431d      	orrs	r5, r3
 8009958:	81a5      	strh	r5, [r4, #12]
 800995a:	e7cf      	b.n	80098fc <__smakebuf_r+0x18>

0800995c <_fstat_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d07      	ldr	r5, [pc, #28]	@ (800997c <_fstat_r+0x20>)
 8009960:	2300      	movs	r3, #0
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	4611      	mov	r1, r2
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	f7f7 fcfc 	bl	8001366 <_fstat>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d102      	bne.n	8009978 <_fstat_r+0x1c>
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	b103      	cbz	r3, 8009978 <_fstat_r+0x1c>
 8009976:	6023      	str	r3, [r4, #0]
 8009978:	bd38      	pop	{r3, r4, r5, pc}
 800997a:	bf00      	nop
 800997c:	2000160c 	.word	0x2000160c

08009980 <_isatty_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d06      	ldr	r5, [pc, #24]	@ (800999c <_isatty_r+0x1c>)
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	f7f7 fcfb 	bl	8001386 <_isatty>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_isatty_r+0x1a>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_isatty_r+0x1a>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	2000160c 	.word	0x2000160c

080099a0 <_sbrk_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d06      	ldr	r5, [pc, #24]	@ (80099bc <_sbrk_r+0x1c>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	602b      	str	r3, [r5, #0]
 80099ac:	f7f7 fd04 	bl	80013b8 <_sbrk>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d102      	bne.n	80099ba <_sbrk_r+0x1a>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	b103      	cbz	r3, 80099ba <_sbrk_r+0x1a>
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	2000160c 	.word	0x2000160c

080099c0 <_init>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	bf00      	nop
 80099c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c6:	bc08      	pop	{r3}
 80099c8:	469e      	mov	lr, r3
 80099ca:	4770      	bx	lr

080099cc <_fini>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr
