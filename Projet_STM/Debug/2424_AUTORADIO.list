
2424_AUTORADIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006afc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006c8c  08006c8c  00007c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e34  08006e34  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e34  08006e34  00007e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e3c  08006e3c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e3c  08006e3c  00007e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e40  08006e40  00007e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006e44  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b8  2000006c  08006eb0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001524  08006eb0  00008524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122b3  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a9  00000000  00000000  0001a34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c09  00000000  00000000  0001e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dce  00000000  00000000  0001f1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139b8  00000000  00000000  00047faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f233b  00000000  00000000  0005b967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014dca2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000483c  00000000  00000000  0014dce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00152524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c74 	.word	0x08006c74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006c74 	.word	0x08006c74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000008c 	.word	0x2000008c
 8000590:	200000e0 	.word	0x200000e0

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 ff86 	bl	80044c2 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08006c98 	.word	0x08006c98
 80005c8:	20000088 	.word	0x20000088

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f003 ffc0 	bl	800455a <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f000 fff1 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <MX_GPIO_Init+0xc8>)
 8000676:	f000 fe39 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f000 fe2a 	bl	80012ec <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	@ 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <__io_putchar+0x20>)
 80006ba:	f002 fb47 	bl	8002d4c <HAL_UART_Transmit>

	return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000640 	.word	0x20000640

080006cc <fonction>:

int fonction(int argc, char ** argv)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 80006d6:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <fonction+0x1c>)
 80006d8:	f005 fa7e 	bl	8005bd8 <puts>

	return 0;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	08006cb4 	.word	0x08006cb4

080006ec <ShellTask>:
void ShellTask(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    shell_init();
 80006f4:	f000 f952 	bl	800099c <shell_init>
    shell_add('f', fonction, "fonction inutile");
 80006f8:	4a08      	ldr	r2, [pc, #32]	@ (800071c <ShellTask+0x30>)
 80006fa:	4909      	ldr	r1, [pc, #36]	@ (8000720 <ShellTask+0x34>)
 80006fc:	2066      	movs	r0, #102	@ 0x66
 80006fe:	f000 f96f 	bl	80009e0 <shell_add>

    printf("Shell démarré. Tapez vos commandes :\r\n");
 8000702:	4808      	ldr	r0, [pc, #32]	@ (8000724 <ShellTask+0x38>)
 8000704:	f005 fa68 	bl	8005bd8 <puts>
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_char, 1); // Activer les interruptions UART
 8000708:	2201      	movs	r2, #1
 800070a:	4907      	ldr	r1, [pc, #28]	@ (8000728 <ShellTask+0x3c>)
 800070c:	4807      	ldr	r0, [pc, #28]	@ (800072c <ShellTask+0x40>)
 800070e:	f002 fba7 	bl	8002e60 <HAL_UART_Receive_IT>

    while (1)
    {
        osDelay(1); // Tâche en veille, tout est géré par les interruptions
 8000712:	2001      	movs	r0, #1
 8000714:	f003 ff21 	bl	800455a <osDelay>
 8000718:	e7fb      	b.n	8000712 <ShellTask+0x26>
 800071a:	bf00      	nop
 800071c:	08006cd0 	.word	0x08006cd0
 8000720:	080006cd 	.word	0x080006cd
 8000724:	08006ce4 	.word	0x08006ce4
 8000728:	200002e4 	.word	0x200002e4
 800072c:	20000640 	.word	0x20000640

08000730 <HAL_UART_RxCpltCallback>:
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)  // Vérifiez que l'interruption provient de l'UART2
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a24      	ldr	r2, [pc, #144]	@ (80007d0 <HAL_UART_RxCpltCallback+0xa0>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d141      	bne.n	80007c6 <HAL_UART_RxCpltCallback+0x96>
    {
        static char cmd_buffer[BUFFER_SIZE];
        static uint16_t pos = 0;

        if (rx_char == '\r')  // Si l'utilisateur appuie sur Entrée
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <HAL_UART_RxCpltCallback+0xa4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b0d      	cmp	r3, #13
 8000748:	d110      	bne.n	800076c <HAL_UART_RxCpltCallback+0x3c>
        {
            cmd_buffer[pos] = '\0';  // Terminer la commande
 800074a:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <HAL_UART_RxCpltCallback+0xa8>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <HAL_UART_RxCpltCallback+0xac>)
 8000752:	2100      	movs	r1, #0
 8000754:	5499      	strb	r1, [r3, r2]
            printf("\r\nCommande reçue : %s\r\n", cmd_buffer);
 8000756:	4921      	ldr	r1, [pc, #132]	@ (80007dc <HAL_UART_RxCpltCallback+0xac>)
 8000758:	4821      	ldr	r0, [pc, #132]	@ (80007e0 <HAL_UART_RxCpltCallback+0xb0>)
 800075a:	f005 f9d5 	bl	8005b08 <iprintf>
            shell_exec(cmd_buffer);  // Exécuter la commande via le Shell
 800075e:	481f      	ldr	r0, [pc, #124]	@ (80007dc <HAL_UART_RxCpltCallback+0xac>)
 8000760:	f000 f97c 	bl	8000a5c <shell_exec>
            pos = 0;  // Réinitialiser le buffer
 8000764:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <HAL_UART_RxCpltCallback+0xa8>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	e027      	b.n	80007bc <HAL_UART_RxCpltCallback+0x8c>
        }
        else if (rx_char == '\b')  // Gestion du retour arrière
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <HAL_UART_RxCpltCallback+0xa4>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b08      	cmp	r3, #8
 8000772:	d10d      	bne.n	8000790 <HAL_UART_RxCpltCallback+0x60>
        {
            if (pos > 0)
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <HAL_UART_RxCpltCallback+0xa8>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d01f      	beq.n	80007bc <HAL_UART_RxCpltCallback+0x8c>
            {
                pos--;  // Supprimer le dernier caractère
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <HAL_UART_RxCpltCallback+0xa8>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	3b01      	subs	r3, #1
 8000782:	b29a      	uxth	r2, r3
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_UART_RxCpltCallback+0xa8>)
 8000786:	801a      	strh	r2, [r3, #0]
                printf("\b \b");  // Effacer le caractère sur le terminal
 8000788:	4816      	ldr	r0, [pc, #88]	@ (80007e4 <HAL_UART_RxCpltCallback+0xb4>)
 800078a:	f005 f9bd 	bl	8005b08 <iprintf>
 800078e:	e015      	b.n	80007bc <HAL_UART_RxCpltCallback+0x8c>
            }
        }
        else if (pos < BUFFER_SIZE - 1)  // Ajouter le caractère au buffer
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <HAL_UART_RxCpltCallback+0xa8>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	2b26      	cmp	r3, #38	@ 0x26
 8000796:	d811      	bhi.n	80007bc <HAL_UART_RxCpltCallback+0x8c>
        {
            cmd_buffer[pos++] = rx_char;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_UART_RxCpltCallback+0xa8>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	b291      	uxth	r1, r2
 80007a0:	4a0d      	ldr	r2, [pc, #52]	@ (80007d8 <HAL_UART_RxCpltCallback+0xa8>)
 80007a2:	8011      	strh	r1, [r2, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <HAL_UART_RxCpltCallback+0xa4>)
 80007a8:	7819      	ldrb	r1, [r3, #0]
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_UART_RxCpltCallback+0xac>)
 80007ac:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart2, (uint8_t *)&rx_char, 1, HAL_MAX_DELAY);  // Écho sur le terminal
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	2201      	movs	r2, #1
 80007b4:	4907      	ldr	r1, [pc, #28]	@ (80007d4 <HAL_UART_RxCpltCallback+0xa4>)
 80007b6:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <HAL_UART_RxCpltCallback+0xb8>)
 80007b8:	f002 fac8 	bl	8002d4c <HAL_UART_Transmit>
        }

        // Relancer la réception pour le prochain caractère
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_char, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	4905      	ldr	r1, [pc, #20]	@ (80007d4 <HAL_UART_RxCpltCallback+0xa4>)
 80007c0:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <HAL_UART_RxCpltCallback+0xb8>)
 80007c2:	f002 fb4d 	bl	8002e60 <HAL_UART_Receive_IT>
    }
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40004400 	.word	0x40004400
 80007d4:	200002e4 	.word	0x200002e4
 80007d8:	200002e6 	.word	0x200002e6
 80007dc:	200002e8 	.word	0x200002e8
 80007e0:	08006d0c 	.word	0x08006d0c
 80007e4:	08006d28 	.word	0x08006d28
 80007e8:	20000640 	.word	0x20000640

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fb6f 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f827 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f7ff feef 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007fe:	f000 faab 	bl	8000d58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	if (xTaskCreate(ShellTask, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <main+0x4c>)
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2301      	movs	r3, #1
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000810:	490a      	ldr	r1, [pc, #40]	@ (800083c <main+0x50>)
 8000812:	480b      	ldr	r0, [pc, #44]	@ (8000840 <main+0x54>)
 8000814:	f003 ffc9 	bl	80047aa <xTaskCreate>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	d004      	beq.n	8000828 <main+0x3c>
	{
		printf("Error creating task shell\r\n");
 800081e:	4809      	ldr	r0, [pc, #36]	@ (8000844 <main+0x58>)
 8000820:	f005 f9da 	bl	8005bd8 <puts>
		Error_Handler();
 8000824:	f000 f861 	bl	80008ea <Error_Handler>
	}
	vTaskStartScheduler();
 8000828:	f004 f92c 	bl	8004a84 <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800082c:	f7ff feb2 	bl	8000594 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000830:	f003 fe40 	bl	80044b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <main+0x48>
 8000838:	200002e0 	.word	0x200002e0
 800083c:	08006d2c 	.word	0x08006d2c
 8000840:	080006ed 	.word	0x080006ed
 8000844:	08006d34 	.word	0x08006d34

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b096      	sub	sp, #88	@ 0x58
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2244      	movs	r2, #68	@ 0x44
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fad2 	bl	8005e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800086a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800086e:	f000 ff0d 	bl	800168c <HAL_PWREx_ControlVoltageScaling>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000878:	f000 f837 	bl	80008ea <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000884:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2310      	movs	r3, #16
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088e:	2302      	movs	r3, #2
 8000890:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000896:	230a      	movs	r3, #10
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800089a:	2307      	movs	r3, #7
 800089c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800089e:	2302      	movs	r3, #2
 80008a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 ff44 	bl	8001738 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008b6:	f000 f818 	bl	80008ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2303      	movs	r3, #3
 80008c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	2104      	movs	r1, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fb0c 	bl	8001ef0 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008de:	f000 f804 	bl	80008ea <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3758      	adds	r7, #88	@ 0x58
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ee:	b672      	cpsid	i
}
 80008f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <Error_Handler+0x8>
	...

080008f8 <uart_write>:
	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, HAL_MAX_DELAY);

	return c;
}

static int uart_write(char * s, uint16_t size) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000904:	887a      	ldrh	r2, [r7, #2]
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	4803      	ldr	r0, [pc, #12]	@ (800091c <uart_write+0x24>)
 800090e:	f002 fa1d 	bl	8002d4c <HAL_UART_Transmit>
	return size;
 8000912:	887b      	ldrh	r3, [r7, #2]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000640 	.word	0x20000640

08000920 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af02      	add	r7, sp, #8
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e022      	b.n	8000976 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000930:	4916      	ldr	r1, [pc, #88]	@ (800098c <sh_help+0x6c>)
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	440b      	add	r3, r1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	4912      	ldr	r1, [pc, #72]	@ (800098c <sh_help+0x6c>)
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	4613      	mov	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4413      	add	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	440b      	add	r3, r1
 8000950:	3308      	adds	r3, #8
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	4603      	mov	r3, r0
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <sh_help+0x70>)
 800095a:	2128      	movs	r1, #40	@ 0x28
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <sh_help+0x74>)
 800095e:	f005 f943 	bl	8005be8 <sniprintf>
 8000962:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	b29b      	uxth	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	480a      	ldr	r0, [pc, #40]	@ (8000994 <sh_help+0x74>)
 800096c:	f7ff ffc4 	bl	80008f8 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <sh_help+0x78>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbd7      	blt.n	8000930 <sh_help+0x10>
	}

	return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000314 	.word	0x20000314
 8000990:	08006d50 	.word	0x08006d50
 8000994:	20000614 	.word	0x20000614
 8000998:	20000310 	.word	0x20000310

0800099c <shell_init>:

void shell_init() {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	int size = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <shell_init+0x34>)
 80009a8:	2128      	movs	r1, #40	@ 0x28
 80009aa:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <shell_init+0x38>)
 80009ac:	f005 f91c 	bl	8005be8 <sniprintf>
 80009b0:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <shell_init+0x38>)
 80009ba:	f7ff ff9d 	bl	80008f8 <uart_write>

	shell_add('h', sh_help, "Help");
 80009be:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <shell_init+0x3c>)
 80009c0:	4906      	ldr	r1, [pc, #24]	@ (80009dc <shell_init+0x40>)
 80009c2:	2068      	movs	r0, #104	@ 0x68
 80009c4:	f000 f80c 	bl	80009e0 <shell_add>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	08006d5c 	.word	0x08006d5c
 80009d4:	20000614 	.word	0x20000614
 80009d8:	08006d84 	.word	0x08006d84
 80009dc:	08000921 	.word	0x08000921

080009e0 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <shell_add+0x74>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80009f4:	dc26      	bgt.n	8000a44 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <shell_add+0x74>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4917      	ldr	r1, [pc, #92]	@ (8000a58 <shell_add+0x78>)
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	440b      	add	r3, r1
 8000a06:	7bfa      	ldrb	r2, [r7, #15]
 8000a08:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <shell_add+0x74>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4912      	ldr	r1, [pc, #72]	@ (8000a58 <shell_add+0x78>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	440b      	add	r3, r1
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <shell_add+0x74>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	490c      	ldr	r1, [pc, #48]	@ (8000a58 <shell_add+0x78>)
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	440b      	add	r3, r1
 8000a30:	3308      	adds	r3, #8
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <shell_add+0x74>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a05      	ldr	r2, [pc, #20]	@ (8000a54 <shell_add+0x74>)
 8000a3e:	6013      	str	r3, [r2, #0]
		return 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	e001      	b.n	8000a48 <shell_add+0x68>
	}

	return -1;
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	20000310 	.word	0x20000310
 8000a58:	20000314 	.word	0x20000314

08000a5c <shell_exec>:

int shell_exec(char * buf) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b090      	sub	sp, #64	@ 0x40
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a70:	e040      	b.n	8000af4 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8000a72:	492d      	ldr	r1, [pc, #180]	@ (8000b28 <shell_exec+0xcc>)
 8000a74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d131      	bne.n	8000aee <shell_exec+0x92>
			argc = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a96:	e013      	b.n	8000ac0 <shell_exec+0x64>
				if(*p == ' ') {
 8000a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	d10c      	bne.n	8000aba <shell_exec+0x5e>
					*p = '\0';
 8000aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000aae:	3201      	adds	r2, #1
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	3340      	adds	r3, #64	@ 0x40
 8000ab4:	443b      	add	r3, r7
 8000ab6:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000abc:	3301      	adds	r3, #1
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <shell_exec+0x72>
 8000ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aca:	2b07      	cmp	r3, #7
 8000acc:	dde4      	ble.n	8000a98 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8000ace:	4916      	ldr	r1, [pc, #88]	@ (8000b28 <shell_exec+0xcc>)
 8000ad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	440b      	add	r3, r1
 8000adc:	3304      	adds	r3, #4
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f107 020c 	add.w	r2, r7, #12
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000ae8:	4798      	blx	r3
 8000aea:	4603      	mov	r3, r0
 8000aec:	e017      	b.n	8000b1e <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000af0:	3301      	adds	r3, #1
 8000af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <shell_exec+0xd0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000afa:	429a      	cmp	r2, r3
 8000afc:	dbb9      	blt.n	8000a72 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000afe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b02:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <shell_exec+0xd4>)
 8000b04:	2128      	movs	r1, #40	@ 0x28
 8000b06:	480b      	ldr	r0, [pc, #44]	@ (8000b34 <shell_exec+0xd8>)
 8000b08:	f005 f86e 	bl	8005be8 <sniprintf>
 8000b0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8000b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4619      	mov	r1, r3
 8000b14:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <shell_exec+0xd8>)
 8000b16:	f7ff feef 	bl	80008f8 <uart_write>
	return -1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3740      	adds	r7, #64	@ 0x40
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000314 	.word	0x20000314
 8000b2c:	20000310 	.word	0x20000310
 8000b30:	08006d8c 	.word	0x08006d8c
 8000b34:	20000614 	.word	0x20000614

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b42:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	210f      	movs	r1, #15
 8000b72:	f06f 0001 	mvn.w	r0, #1
 8000b76:	f000 fb04 	bl	8001182 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f9e3 	bl	8000f8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bc6:	f004 fa57 	bl	8005078 <xTaskGetSchedulerState>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d001      	beq.n	8000bd4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bd0:	f004 fc9a 	bl	8005508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <USART2_IRQHandler+0x10>)
 8000bde:	f002 f98b 	bl	8002ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000640 	.word	0x20000640

08000bec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00a      	b.n	8000c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfe:	f3af 8000 	nop.w
 8000c02:	4601      	mov	r1, r0
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf0      	blt.n	8000bfe <_read+0x12>
  }

  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	e009      	b.n	8000c4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fd31 	bl	80006a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dbf1      	blt.n	8000c38 <_write+0x12>
  }
  return len;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_close>:

int _close(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c86:	605a      	str	r2, [r3, #4]
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_isatty>:

int _isatty(int file)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f005 f8d0 	bl	8005e9c <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20018000 	.word	0x20018000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	2000063c 	.word	0x2000063c
 8000d30:	20001528 	.word	0x20001528

08000d34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d5e:	4a15      	ldr	r2, [pc, #84]	@ (8000db4 <MX_USART2_UART_Init+0x5c>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d9c:	f001 ff88 	bl	8002cb0 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000da6:	f7ff fda0 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000640 	.word	0x20000640
 8000db4:	40004400 	.word	0x40004400

08000db8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0ac      	sub	sp, #176	@ 0xb0
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2288      	movs	r2, #136	@ 0x88
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 f811 	bl	8005e00 <memset>
  if(uartHandle->Instance==USART2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a25      	ldr	r2, [pc, #148]	@ (8000e78 <HAL_UART_MspInit+0xc0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d143      	bne.n	8000e70 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fa9f 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e00:	f7ff fd73 	bl	80008ea <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e08:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	4a16      	ldr	r2, [pc, #88]	@ (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000e34:	230c      	movs	r3, #12
 8000e36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f000 fa46 	bl	80012ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2105      	movs	r1, #5
 8000e64:	2026      	movs	r0, #38	@ 0x26
 8000e66:	f000 f98c 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6a:	2026      	movs	r0, #38	@ 0x26
 8000e6c:	f000 f9a5 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e70:	bf00      	nop
 8000e72:	37b0      	adds	r7, #176	@ 0xb0
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	40021000 	.word	0x40021000

08000e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e84:	f7ff ff56 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	@ (8000ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <LoopForever+0xe>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <LoopForever+0x16>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eae:	f004 fffb 	bl	8005ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb2:	f7ff fc9b 	bl	80007ec <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ec4:	08006e44 	.word	0x08006e44
  ldr r2, =_sbss
 8000ec8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ecc:	20001524 	.word	0x20001524

08000ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_2_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <HAL_Init+0x3c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <HAL_Init+0x3c>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eea:	2003      	movs	r0, #3
 8000eec:	f000 f93e 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef0:	200f      	movs	r0, #15
 8000ef2:	f000 f80f 	bl	8000f14 <HAL_InitTick>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	e001      	b.n	8000f06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f02:	f7ff fe19 	bl	8000b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40022000 	.word	0x40022000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d023      	beq.n	8000f70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f28:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <HAL_InitTick+0x70>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <HAL_InitTick+0x6c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f949 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10f      	bne.n	8000f6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d809      	bhi.n	8000f64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f913 	bl	8001182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <HAL_InitTick+0x74>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e004      	b.n	8000f74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e001      	b.n	8000f74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	200006c8 	.word	0x200006c8

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200006c8 	.word	0x200006c8

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	@ (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	@ (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	@ 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d008      	beq.n	8001218 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2204      	movs	r2, #4
 800120a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e022      	b.n	800125e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 020e 	bic.w	r2, r2, #14
 8001226:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123c:	f003 021c 	and.w	r2, r3, #28
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d005      	beq.n	800128e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2204      	movs	r2, #4
 8001286:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e029      	b.n	80012e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020e 	bic.w	r2, r2, #14
 800129c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f003 021c 	and.w	r2, r3, #28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	4798      	blx	r3
    }
  }
  return status;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fa:	e17f      	b.n	80015fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	4013      	ands	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8171 	beq.w	80015f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b01      	cmp	r3, #1
 800131e:	d005      	beq.n	800132c <HAL_GPIO_Init+0x40>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d130      	bne.n	800138e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001362:	2201      	movs	r2, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f003 0201 	and.w	r2, r3, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b03      	cmp	r3, #3
 8001398:	d118      	bne.n	80013cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013a0:	2201      	movs	r2, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f003 0201 	and.w	r2, r3, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d017      	beq.n	8001408 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d123      	bne.n	800145c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	6939      	ldr	r1, [r7, #16]
 8001458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80ac 	beq.w	80015f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b5f      	ldr	r3, [pc, #380]	@ (800161c <HAL_GPIO_Init+0x330>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a2:	4a5e      	ldr	r2, [pc, #376]	@ (800161c <HAL_GPIO_Init+0x330>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014aa:	4b5c      	ldr	r3, [pc, #368]	@ (800161c <HAL_GPIO_Init+0x330>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001620 <HAL_GPIO_Init+0x334>)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x242>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001624 <HAL_GPIO_Init+0x338>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x23e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001628 <HAL_GPIO_Init+0x33c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x23a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4d      	ldr	r2, [pc, #308]	@ (800162c <HAL_GPIO_Init+0x340>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x236>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001630 <HAL_GPIO_Init+0x344>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x232>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4b      	ldr	r2, [pc, #300]	@ (8001634 <HAL_GPIO_Init+0x348>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	@ (8001638 <HAL_GPIO_Init+0x34c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x22a>
 8001512:	2306      	movs	r3, #6
 8001514:	e00c      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001516:	2307      	movs	r3, #7
 8001518:	e00a      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800151a:	2305      	movs	r3, #5
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800151e:	2304      	movs	r3, #4
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800152e:	2300      	movs	r3, #0
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001540:	4937      	ldr	r1, [pc, #220]	@ (8001620 <HAL_GPIO_Init+0x334>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800154e:	4b3b      	ldr	r3, [pc, #236]	@ (800163c <HAL_GPIO_Init+0x350>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001572:	4a32      	ldr	r2, [pc, #200]	@ (800163c <HAL_GPIO_Init+0x350>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001578:	4b30      	ldr	r3, [pc, #192]	@ (800163c <HAL_GPIO_Init+0x350>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800159c:	4a27      	ldr	r2, [pc, #156]	@ (800163c <HAL_GPIO_Init+0x350>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015a2:	4b26      	ldr	r3, [pc, #152]	@ (800163c <HAL_GPIO_Init+0x350>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c6:	4a1d      	ldr	r2, [pc, #116]	@ (800163c <HAL_GPIO_Init+0x350>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_GPIO_Init+0x350>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f0:	4a12      	ldr	r2, [pc, #72]	@ (800163c <HAL_GPIO_Init+0x350>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa22 f303 	lsr.w	r3, r2, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f ae78 	bne.w	80012fc <HAL_GPIO_Init+0x10>
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800
 800162c:	48000c00 	.word	0x48000c00
 8001630:	48001000 	.word	0x48001000
 8001634:	48001400 	.word	0x48001400
 8001638:	48001800 	.word	0x48001800
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800165c:	e002      	b.n	8001664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <HAL_PWREx_GetVoltageRange+0x18>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40007000 	.word	0x40007000

0800168c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800169a:	d130      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800169c:	4b23      	ldr	r3, [pc, #140]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016a8:	d038      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016b2:	4a1e      	ldr	r2, [pc, #120]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2232      	movs	r2, #50	@ 0x32
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d0:	e002      	b.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e4:	d102      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f2      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f8:	d110      	bne.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e00f      	b.n	800171e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800170a:	d007      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001714:	4a05      	ldr	r2, [pc, #20]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800171a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40007000 	.word	0x40007000
 8001730:	20000000 	.word	0x20000000
 8001734:	431bde83 	.word	0x431bde83

08001738 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e3ca      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174a:	4b97      	ldr	r3, [pc, #604]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001754:	4b94      	ldr	r3, [pc, #592]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80e4 	beq.w	8001934 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <HAL_RCC_OscConfig+0x4a>
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	f040 808b 	bne.w	8001890 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b01      	cmp	r3, #1
 800177e:	f040 8087 	bne.w	8001890 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001782:	4b89      	ldr	r3, [pc, #548]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x62>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e3a2      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4b82      	ldr	r3, [pc, #520]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_RCC_OscConfig+0x7c>
 80017aa:	4b7f      	ldr	r3, [pc, #508]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017b2:	e005      	b.n	80017c0 <HAL_RCC_OscConfig+0x88>
 80017b4:	4b7c      	ldr	r3, [pc, #496]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d223      	bcs.n	800180c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fd55 	bl	8002278 <RCC_SetFlashLatencyFromMSIRange>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e383      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d8:	4b73      	ldr	r3, [pc, #460]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a72      	ldr	r2, [pc, #456]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b70      	ldr	r3, [pc, #448]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	496d      	ldr	r1, [pc, #436]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f6:	4b6c      	ldr	r3, [pc, #432]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	4968      	ldr	r1, [pc, #416]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
 800180a:	e025      	b.n	8001858 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180c:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a65      	ldr	r2, [pc, #404]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b63      	ldr	r3, [pc, #396]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4960      	ldr	r1, [pc, #384]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182a:	4b5f      	ldr	r3, [pc, #380]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	495b      	ldr	r1, [pc, #364]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fd15 	bl	8002278 <RCC_SetFlashLatencyFromMSIRange>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e343      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001858:	f000 fc4a 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b52      	ldr	r3, [pc, #328]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	4950      	ldr	r1, [pc, #320]	@ (80019ac <HAL_RCC_OscConfig+0x274>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	4a4e      	ldr	r2, [pc, #312]	@ (80019b0 <HAL_RCC_OscConfig+0x278>)
 8001876:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001878:	4b4e      	ldr	r3, [pc, #312]	@ (80019b4 <HAL_RCC_OscConfig+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb49 	bl	8000f14 <HAL_InitTick>
 8001882:	4603      	mov	r3, r0
 8001884:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d052      	beq.n	8001932 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	e327      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d032      	beq.n	80018fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001898:	4b43      	ldr	r3, [pc, #268]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a42      	ldr	r2, [pc, #264]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb86 	bl	8000fb4 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ac:	f7ff fb82 	bl	8000fb4 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e310      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018be:	4b3a      	ldr	r3, [pc, #232]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a36      	ldr	r2, [pc, #216]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b34      	ldr	r3, [pc, #208]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4931      	ldr	r1, [pc, #196]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e8:	4b2f      	ldr	r3, [pc, #188]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	492c      	ldr	r1, [pc, #176]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
 80018fc:	e01a      	b.n	8001934 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a29      	ldr	r2, [pc, #164]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190a:	f7ff fb53 	bl	8000fb4 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001912:	f7ff fb4f 	bl	8000fb4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e2dd      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001924:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x1da>
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001932:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d074      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b08      	cmp	r3, #8
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x21a>
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b0c      	cmp	r3, #12
 800194a:	d10e      	bne.n	800196a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d10b      	bne.n	800196a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d064      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d160      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e2ba      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x24a>
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e026      	b.n	80019d0 <HAL_RCC_OscConfig+0x298>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800198a:	d115      	bne.n	80019b8 <HAL_RCC_OscConfig+0x280>
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001992:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a02      	ldr	r2, [pc, #8]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e014      	b.n	80019d0 <HAL_RCC_OscConfig+0x298>
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08006db8 	.word	0x08006db8
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004
 80019b8:	4ba0      	ldr	r3, [pc, #640]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a9f      	ldr	r2, [pc, #636]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b9d      	ldr	r3, [pc, #628]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a9c      	ldr	r2, [pc, #624]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff faec 	bl	8000fb4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fae8 	bl	8000fb4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e276      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f2:	4b92      	ldr	r3, [pc, #584]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x2a8>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fad8 	bl	8000fb4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fad4 	bl	8000fb4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e262      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	4b88      	ldr	r3, [pc, #544]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2d0>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d060      	beq.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_OscConfig+0x310>
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d119      	bne.n	8001a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d116      	bne.n	8001a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a48:	4b7c      	ldr	r3, [pc, #496]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x328>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e23f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b76      	ldr	r3, [pc, #472]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	4973      	ldr	r1, [pc, #460]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a74:	e040      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d023      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fa93 	bl	8000fb4 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fa8f 	bl	8000fb4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e21d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa4:	4b65      	ldr	r3, [pc, #404]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b62      	ldr	r3, [pc, #392]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	495f      	ldr	r1, [pc, #380]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
 8001ac4:	e018      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a5c      	ldr	r2, [pc, #368]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa6f 	bl	8000fb4 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff fa6b 	bl	8000fb4 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1f9      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aec:	4b53      	ldr	r3, [pc, #332]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d03c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b12:	4a4a      	ldr	r2, [pc, #296]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fa4a 	bl	8000fb4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fa46 	bl	8000fb4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1d4      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b36:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ef      	beq.n	8001b24 <HAL_RCC_OscConfig+0x3ec>
 8001b44:	e01b      	b.n	8001b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b46:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff fa2d 	bl	8000fb4 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fa29 	bl	8000fb4 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1b7      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b70:	4b32      	ldr	r3, [pc, #200]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ef      	bne.n	8001b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80a6 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b90:	4b2a      	ldr	r3, [pc, #168]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10d      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	4b27      	ldr	r3, [pc, #156]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	4a26      	ldr	r2, [pc, #152]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba8:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb8:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d118      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f9f0 	bl	8000fb4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd8:	f7ff f9ec 	bl	8000fb4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e17a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_RCC_OscConfig+0x508>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4d8>
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c04:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c0e:	e029      	b.n	8001c64 <HAL_RCC_OscConfig+0x52c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d115      	bne.n	8001c44 <HAL_RCC_OscConfig+0x50c>
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c1e:	4a07      	ldr	r2, [pc, #28]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c2e:	4a03      	ldr	r2, [pc, #12]	@ (8001c3c <HAL_RCC_OscConfig+0x504>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x52c>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	4b9c      	ldr	r3, [pc, #624]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4a:	4a9b      	ldr	r2, [pc, #620]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c54:	4b98      	ldr	r3, [pc, #608]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5a:	4a97      	ldr	r2, [pc, #604]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d016      	beq.n	8001c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f9a2 	bl	8000fb4 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7ff f99e 	bl	8000fb4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e12a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ed      	beq.n	8001c74 <HAL_RCC_OscConfig+0x53c>
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f98b 	bl	8000fb4 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f987 	bl	8000fb4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e113      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ed      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b7a      	ldr	r3, [pc, #488]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	4a79      	ldr	r2, [pc, #484]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80fe 	beq.w	8001ede <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	f040 80d0 	bne.w	8001e8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cec:	4b72      	ldr	r3, [pc, #456]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d130      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d127      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11f      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d2c:	2a07      	cmp	r2, #7
 8001d2e:	bf14      	ite	ne
 8001d30:	2201      	movne	r2, #1
 8001d32:	2200      	moveq	r2, #0
 8001d34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d113      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	3b01      	subs	r3, #1
 8001d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d06e      	beq.n	8001e40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	d069      	beq.n	8001e3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d68:	4b53      	ldr	r3, [pc, #332]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d74:	4b50      	ldr	r3, [pc, #320]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0ad      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d84:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d90:	f7ff f910 	bl	8000fb4 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff f90c 	bl	8000fb4 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e09a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001daa:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db6:	4b40      	ldr	r3, [pc, #256]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <HAL_RCC_OscConfig+0x784>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dc6:	3a01      	subs	r2, #1
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dd0:	0212      	lsls	r2, r2, #8
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dd8:	0852      	lsrs	r2, r2, #1
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	0552      	lsls	r2, r2, #21
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001de4:	0852      	lsrs	r2, r2, #1
 8001de6:	3a01      	subs	r2, #1
 8001de8:	0652      	lsls	r2, r2, #25
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001df0:	0912      	lsrs	r2, r2, #4
 8001df2:	0452      	lsls	r2, r2, #17
 8001df4:	430a      	orrs	r2, r1
 8001df6:	4930      	ldr	r1, [pc, #192]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e08:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e14:	f7ff f8ce 	bl	8000fb4 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f8ca 	bl	8000fb4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e058      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3a:	e050      	b.n	8001ede <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e04f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e40:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d148      	bne.n	8001ede <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e64:	f7ff f8a6 	bl	8000fb4 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f8a2 	bl	8000fb4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e030      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x734>
 8001e8a:	e028      	b.n	8001ede <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d023      	beq.n	8001eda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a08      	ldr	r2, [pc, #32]	@ (8001eb8 <HAL_RCC_OscConfig+0x780>)
 8001e98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f889 	bl	8000fb4 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea4:	e00c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff f885 	bl	8000fb4 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d905      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e013      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_RCC_OscConfig+0x7b0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ec      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_RCC_OscConfig+0x7b0>)
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	4905      	ldr	r1, [pc, #20]	@ (8001ee8 <HAL_RCC_OscConfig+0x7b0>)
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_RCC_OscConfig+0x7b4>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60cb      	str	r3, [r1, #12]
 8001ed8:	e001      	b.n	8001ede <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	feeefffc 	.word	0xfeeefffc

08001ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0e7      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b72      	ldr	r3, [pc, #456]	@ (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	4970      	ldr	r1, [pc, #448]	@ (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b6e      	ldr	r3, [pc, #440]	@ (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0cf      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4b66      	ldr	r3, [pc, #408]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d908      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b63      	ldr	r3, [pc, #396]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4960      	ldr	r1, [pc, #384]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d04c      	beq.n	8002008 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	4b5a      	ldr	r3, [pc, #360]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d121      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0a6      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	4b54      	ldr	r3, [pc, #336]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d115      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e09a      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e08e      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e086      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b46      	ldr	r3, [pc, #280]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4943      	ldr	r1, [pc, #268]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd8:	f7fe ffec 	bl	8000fb4 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe ffe8 	bl	8000fb4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e06e      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d010      	beq.n	8002036 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002020:	429a      	cmp	r2, r3
 8002022:	d208      	bcs.n	8002036 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b2e      	ldr	r3, [pc, #184]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	492b      	ldr	r1, [pc, #172]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002036:	4b29      	ldr	r3, [pc, #164]	@ (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d210      	bcs.n	8002066 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002044:	4b25      	ldr	r3, [pc, #148]	@ (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 0207 	bic.w	r2, r3, #7
 800204c:	4923      	ldr	r1, [pc, #140]	@ (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002054:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_RCC_ClockConfig+0x1ec>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e036      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4918      	ldr	r1, [pc, #96]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d009      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002090:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4910      	ldr	r1, [pc, #64]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020a4:	f000 f824 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	490b      	ldr	r1, [pc, #44]	@ (80020e4 <HAL_RCC_ClockConfig+0x1f4>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 80020c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020c4:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_RCC_ClockConfig+0x1fc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe ff23 	bl	8000f14 <HAL_InitTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80020d2:	7afb      	ldrb	r3, [r7, #11]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08006db8 	.word	0x08006db8
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fe:	4b3e      	ldr	r3, [pc, #248]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002108:	4b3b      	ldr	r3, [pc, #236]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x34>
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d121      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d11e      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002124:	4b34      	ldr	r3, [pc, #208]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002130:	4b31      	ldr	r3, [pc, #196]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e005      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002140:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800214c:	4a2b      	ldr	r2, [pc, #172]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d102      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x110>)
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e004      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d101      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002174:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x114>)
 8002176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d134      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800217e:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0xa6>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d003      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0xac>
 8002194:	e005      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x110>)
 8002198:	617b      	str	r3, [r7, #20]
      break;
 800219a:	e005      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x114>)
 800219e:	617b      	str	r3, [r7, #20]
      break;
 80021a0:	e002      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	617b      	str	r3, [r7, #20]
      break;
 80021a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	3301      	adds	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	fb03 f202 	mul.w	r2, r3, r2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	0e5b      	lsrs	r3, r3, #25
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	3301      	adds	r3, #1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021e8:	69bb      	ldr	r3, [r7, #24]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08006dd0 	.word	0x08006dd0
 8002200:	00f42400 	.word	0x00f42400
 8002204:	007a1200 	.word	0x007a1200

08002208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000000 	.word	0x20000000

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002224:	f7ff fff0 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4904      	ldr	r1, [pc, #16]	@ (8002248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	08006dc8 	.word	0x08006dc8

0800224c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002250:	f7ff ffda 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4904      	ldr	r1, [pc, #16]	@ (8002274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	08006dc8 	.word	0x08006dc8

08002278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002284:	4b2a      	ldr	r3, [pc, #168]	@ (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002290:	f7ff f9ee 	bl	8001670 <HAL_PWREx_GetVoltageRange>
 8002294:	6178      	str	r0, [r7, #20]
 8002296:	e014      	b.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b25      	ldr	r3, [pc, #148]	@ (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	4a24      	ldr	r2, [pc, #144]	@ (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a4:	4b22      	ldr	r3, [pc, #136]	@ (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022b0:	f7ff f9de 	bl	8001670 <HAL_PWREx_GetVoltageRange>
 80022b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c8:	d10b      	bne.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b80      	cmp	r3, #128	@ 0x80
 80022ce:	d919      	bls.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80022d4:	d902      	bls.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022d6:	2302      	movs	r3, #2
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e013      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022dc:	2301      	movs	r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e010      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b80      	cmp	r3, #128	@ 0x80
 80022e6:	d902      	bls.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022e8:	2303      	movs	r3, #3
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e00a      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b80      	cmp	r3, #128	@ 0x80
 80022f2:	d102      	bne.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f4:	2302      	movs	r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e004      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b70      	cmp	r3, #112	@ 0x70
 80022fe:	d101      	bne.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 0207 	bic.w	r2, r3, #7
 800230c:	4909      	ldr	r1, [pc, #36]	@ (8002334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002314:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	40022000 	.word	0x40022000

08002338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002340:	2300      	movs	r3, #0
 8002342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002344:	2300      	movs	r3, #0
 8002346:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002350:	2b00      	cmp	r3, #0
 8002352:	d041      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002358:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800235c:	d02a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800235e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002362:	d824      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002364:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800236a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800236e:	d81e      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002378:	d010      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800237a:	e018      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800237c:	4b86      	ldr	r3, [pc, #536]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a85      	ldr	r2, [pc, #532]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002386:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002388:	e015      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fabb 	bl	800290c <RCCEx_PLLSAI1_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800239a:	e00c      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3320      	adds	r3, #32
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fba6 	bl	8002af4 <RCCEx_PLLSAI2_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ac:	e003      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	74fb      	strb	r3, [r7, #19]
      break;
 80023b2:	e000      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023bc:	4b76      	ldr	r3, [pc, #472]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023ca:	4973      	ldr	r1, [pc, #460]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023d2:	e001      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d041      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023ec:	d02a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023f2:	d824      	bhi.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023f8:	d008      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023fe:	d81e      	bhi.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002408:	d010      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800240a:	e018      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800240c:	4b62      	ldr	r3, [pc, #392]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a61      	ldr	r2, [pc, #388]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002416:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002418:	e015      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fa73 	bl	800290c <RCCEx_PLLSAI1_Config>
 8002426:	4603      	mov	r3, r0
 8002428:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800242a:	e00c      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3320      	adds	r3, #32
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fb5e 	bl	8002af4 <RCCEx_PLLSAI2_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800243c:	e003      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	74fb      	strb	r3, [r7, #19]
      break;
 8002442:	e000      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800244c:	4b52      	ldr	r3, [pc, #328]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800245a:	494f      	ldr	r1, [pc, #316]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002462:	e001      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80a0 	beq.w	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800247a:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00d      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	4a40      	ldr	r2, [pc, #256]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	@ 0x58
 800249c:	4b3e      	ldr	r3, [pc, #248]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ac:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3a      	ldr	r2, [pc, #232]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fd7c 	bl	8000fb4 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024be:	e009      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c0:	f7fe fd78 	bl	8000fb4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d902      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	74fb      	strb	r3, [r7, #19]
        break;
 80024d2:	e005      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024d4:	4b31      	ldr	r3, [pc, #196]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ef      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d15c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01f      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	d019      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002504:	4b24      	ldr	r3, [pc, #144]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800250e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002510:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002516:	4a20      	ldr	r2, [pc, #128]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002520:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002530:	4a19      	ldr	r2, [pc, #100]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7fe fd37 	bl	8000fb4 <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002548:	e00b      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe fd33 	bl	8000fb4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d902      	bls.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	74fb      	strb	r3, [r7, #19]
            break;
 8002560:	e006      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ec      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002576:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002586:	4904      	ldr	r1, [pc, #16]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800258e:	e009      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
 8002594:	e006      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a4:	7c7b      	ldrb	r3, [r7, #17]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	4a9d      	ldr	r2, [pc, #628]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025c2:	4b98      	ldr	r3, [pc, #608]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c8:	f023 0203 	bic.w	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	4994      	ldr	r1, [pc, #592]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ea:	f023 020c 	bic.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f2:	498c      	ldr	r1, [pc, #560]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002606:	4b87      	ldr	r3, [pc, #540]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	4983      	ldr	r1, [pc, #524]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002628:	4b7e      	ldr	r3, [pc, #504]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	497b      	ldr	r1, [pc, #492]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800264a:	4b76      	ldr	r3, [pc, #472]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002650:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002658:	4972      	ldr	r1, [pc, #456]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800266c:	4b6d      	ldr	r3, [pc, #436]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002672:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267a:	496a      	ldr	r1, [pc, #424]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800268e:	4b65      	ldr	r3, [pc, #404]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002694:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	4961      	ldr	r1, [pc, #388]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026be:	4959      	ldr	r1, [pc, #356]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d2:	4b54      	ldr	r3, [pc, #336]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e0:	4950      	ldr	r1, [pc, #320]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002702:	4948      	ldr	r1, [pc, #288]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002716:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	493f      	ldr	r1, [pc, #252]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d028      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002738:	4b3a      	ldr	r3, [pc, #232]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002746:	4937      	ldr	r1, [pc, #220]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002756:	d106      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002758:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a31      	ldr	r2, [pc, #196]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002762:	60d3      	str	r3, [r2, #12]
 8002764:	e011      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800276a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800276e:	d10c      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	2101      	movs	r1, #1
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f8c8 	bl	800290c <RCCEx_PLLSAI1_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d028      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002796:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a4:	491f      	ldr	r1, [pc, #124]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027b4:	d106      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c0:	60d3      	str	r3, [r2, #12]
 80027c2:	e011      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2101      	movs	r1, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 f899 	bl	800290c <RCCEx_PLLSAI1_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02b      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002802:	4908      	ldr	r1, [pc, #32]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002812:	d109      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002814:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a02      	ldr	r2, [pc, #8]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800281e:	60d3      	str	r3, [r2, #12]
 8002820:	e014      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002830:	d10c      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f000 f867 	bl	800290c <RCCEx_PLLSAI1_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02f      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002866:	4928      	ldr	r1, [pc, #160]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002876:	d10d      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	2102      	movs	r1, #2
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f844 	bl	800290c <RCCEx_PLLSAI1_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d014      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	74bb      	strb	r3, [r7, #18]
 8002892:	e011      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3320      	adds	r3, #32
 80028a2:	2102      	movs	r1, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f925 	bl	8002af4 <RCCEx_PLLSAI2_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028c4:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028d2:	490d      	ldr	r1, [pc, #52]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028e6:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028f6:	4904      	ldr	r1, [pc, #16]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000

0800290c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800291a:	4b75      	ldr	r3, [pc, #468]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d018      	beq.n	8002958 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002926:	4b72      	ldr	r3, [pc, #456]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0203 	and.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d10d      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
       ||
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800293e:	4b6c      	ldr	r3, [pc, #432]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
       ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d047      	beq.n	80029e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e044      	b.n	80029e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d018      	beq.n	8002992 <RCCEx_PLLSAI1_Config+0x86>
 8002960:	2b03      	cmp	r3, #3
 8002962:	d825      	bhi.n	80029b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002964:	2b01      	cmp	r3, #1
 8002966:	d002      	beq.n	800296e <RCCEx_PLLSAI1_Config+0x62>
 8002968:	2b02      	cmp	r3, #2
 800296a:	d009      	beq.n	8002980 <RCCEx_PLLSAI1_Config+0x74>
 800296c:	e020      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800296e:	4b60      	ldr	r3, [pc, #384]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11d      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297e:	e01a      	b.n	80029b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002980:	4b5b      	ldr	r3, [pc, #364]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d116      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002990:	e013      	b.n	80029ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002992:	4b57      	ldr	r3, [pc, #348]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800299e:	4b54      	ldr	r3, [pc, #336]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ae:	e006      	b.n	80029be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      break;
 80029b4:	e004      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b6:	bf00      	nop
 80029b8:	e002      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ba:	bf00      	nop
 80029bc:	e000      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029be:	bf00      	nop
    }

    if(status == HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029c6:	4b4a      	ldr	r3, [pc, #296]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	430b      	orrs	r3, r1
 80029dc:	4944      	ldr	r1, [pc, #272]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d17d      	bne.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029e8:	4b41      	ldr	r3, [pc, #260]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a40      	ldr	r2, [pc, #256]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f4:	f7fe fade 	bl	8000fb4 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029fa:	e009      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029fc:	f7fe fada 	bl	8000fb4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d902      	bls.n	8002a10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a0e:	e005      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a10:	4b37      	ldr	r3, [pc, #220]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ef      	bne.n	80029fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d160      	bne.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d111      	bne.n	8002a4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a28:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	0211      	lsls	r1, r2, #8
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	0912      	lsrs	r2, r2, #4
 8002a40:	0452      	lsls	r2, r2, #17
 8002a42:	430a      	orrs	r2, r1
 8002a44:	492a      	ldr	r1, [pc, #168]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	610b      	str	r3, [r1, #16]
 8002a4a:	e027      	b.n	8002a9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d112      	bne.n	8002a78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a52:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a5a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	0211      	lsls	r1, r2, #8
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6912      	ldr	r2, [r2, #16]
 8002a68:	0852      	lsrs	r2, r2, #1
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0552      	lsls	r2, r2, #21
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	491f      	ldr	r1, [pc, #124]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	610b      	str	r3, [r1, #16]
 8002a76:	e011      	b.n	8002a9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a78:	4b1d      	ldr	r3, [pc, #116]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6892      	ldr	r2, [r2, #8]
 8002a88:	0211      	lsls	r1, r2, #8
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6952      	ldr	r2, [r2, #20]
 8002a8e:	0852      	lsrs	r2, r2, #1
 8002a90:	3a01      	subs	r2, #1
 8002a92:	0652      	lsls	r2, r2, #25
 8002a94:	430a      	orrs	r2, r1
 8002a96:	4916      	ldr	r1, [pc, #88]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a9c:	4b14      	ldr	r3, [pc, #80]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fa84 	bl	8000fb4 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aae:	e009      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ab0:	f7fe fa80 	bl	8000fb4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d902      	bls.n	8002ac4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ac2:	e005      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ef      	beq.n	8002ab0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4904      	ldr	r1, [pc, #16]	@ (8002af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b02:	4b6a      	ldr	r3, [pc, #424]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b0e:	4b67      	ldr	r3, [pc, #412]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d10d      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
       ||
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b26:	4b61      	ldr	r3, [pc, #388]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
       ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d047      	beq.n	8002bca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	e044      	b.n	8002bca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d018      	beq.n	8002b7a <RCCEx_PLLSAI2_Config+0x86>
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d825      	bhi.n	8002b98 <RCCEx_PLLSAI2_Config+0xa4>
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d002      	beq.n	8002b56 <RCCEx_PLLSAI2_Config+0x62>
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d009      	beq.n	8002b68 <RCCEx_PLLSAI2_Config+0x74>
 8002b54:	e020      	b.n	8002b98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b56:	4b55      	ldr	r3, [pc, #340]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11d      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b66:	e01a      	b.n	8002b9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b68:	4b50      	ldr	r3, [pc, #320]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d116      	bne.n	8002ba2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b78:	e013      	b.n	8002ba2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b86:	4b49      	ldr	r3, [pc, #292]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b96:	e006      	b.n	8002ba6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e004      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bae:	4b3f      	ldr	r3, [pc, #252]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	4939      	ldr	r1, [pc, #228]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d167      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bd0:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a35      	ldr	r2, [pc, #212]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe f9ea 	bl	8000fb4 <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002be2:	e009      	b.n	8002bf8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002be4:	f7fe f9e6 	bl	8000fb4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf6:	e005      	b.n	8002c04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ef      	bne.n	8002be4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d14a      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c10:	4b26      	ldr	r3, [pc, #152]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6892      	ldr	r2, [r2, #8]
 8002c20:	0211      	lsls	r1, r2, #8
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68d2      	ldr	r2, [r2, #12]
 8002c26:	0912      	lsrs	r2, r2, #4
 8002c28:	0452      	lsls	r2, r2, #17
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	491f      	ldr	r1, [pc, #124]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	614b      	str	r3, [r1, #20]
 8002c32:	e011      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c34:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	0211      	lsls	r1, r2, #8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6912      	ldr	r2, [r2, #16]
 8002c4a:	0852      	lsrs	r2, r2, #1
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0652      	lsls	r2, r2, #25
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4916      	ldr	r1, [pc, #88]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe f9a6 	bl	8000fb4 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c6a:	e009      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c6c:	f7fe f9a2 	bl	8000fb4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c7e:	e005      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c80:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4904      	ldr	r1, [pc, #16]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e040      	b.n	8002d44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe f870 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	@ 0x24
 8002cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fedc 	bl	8003ab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fc21 	bl	8003544 <UART_SetConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e01b      	b.n	8002d44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 ff5b 	bl	8003bf8 <UART_CheckIdleState>
 8002d42:	4603      	mov	r3, r0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	@ 0x28
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d177      	bne.n	8002e54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_UART_Transmit+0x24>
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e070      	b.n	8002e56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2221      	movs	r2, #33	@ 0x21
 8002d80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d82:	f7fe f917 	bl	8000fb4 <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da0:	d108      	bne.n	8002db4 <HAL_UART_Transmit+0x68>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d104      	bne.n	8002db4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e003      	b.n	8002dbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dbc:	e02f      	b.n	8002e1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	@ 0x80
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 ffbd 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e03b      	b.n	8002e56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df0:	b292      	uxth	r2, r2
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	3302      	adds	r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e007      	b.n	8002e0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1c9      	bne.n	8002dbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2140      	movs	r1, #64	@ 0x40
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 ff87 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e005      	b.n	8002e56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e000      	b.n	8002e56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e54:	2302      	movs	r3, #2
  }
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	@ 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d137      	bne.n	8002ee8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_Receive_IT+0x24>
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e030      	b.n	8002eea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <HAL_UART_Receive_IT+0x94>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d01f      	beq.n	8002ed8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	6a3a      	ldr	r2, [r7, #32]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e6      	bne.n	8002ea6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 ffa0 	bl	8003e24 <UART_Start_Receive_IT>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	e000      	b.n	8002eea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3728      	adds	r7, #40	@ 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40008000 	.word	0x40008000

08002ef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0ba      	sub	sp, #232	@ 0xe8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002f22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002f26:	4013      	ands	r3, r2
 8002f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d115      	bne.n	8002f60 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00f      	beq.n	8002f60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 82ca 	beq.w	80034ea <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
      }
      return;
 8002f5e:	e2c4      	b.n	80034ea <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8117 	beq.w	8003198 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002f7a:	4b85      	ldr	r3, [pc, #532]	@ (8003190 <HAL_UART_IRQHandler+0x298>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 810a 	beq.w	8003198 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d011      	beq.n	8002fb4 <HAL_UART_IRQHandler+0xbc>
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <HAL_UART_IRQHandler+0xec>
 8002fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fda:	f043 0204 	orr.w	r2, r3, #4
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d011      	beq.n	8003014 <HAL_UART_IRQHandler+0x11c>
 8002ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2204      	movs	r2, #4
 8003002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800300a:	f043 0202 	orr.w	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d017      	beq.n	8003050 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800302c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003030:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2208      	movs	r2, #8
 800303e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003046:	f043 0208 	orr.w	r2, r3, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003058:	2b00      	cmp	r3, #0
 800305a:	d012      	beq.n	8003082 <HAL_UART_IRQHandler+0x18a>
 800305c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003060:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00c      	beq.n	8003082 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8230 	beq.w	80034ee <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800308e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800309a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ca:	2b40      	cmp	r3, #64	@ 0x40
 80030cc:	d005      	beq.n	80030da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04f      	beq.n	800317a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 ff68 	bl	8003fb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ea:	2b40      	cmp	r3, #64	@ 0x40
 80030ec:	d141      	bne.n	8003172 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3308      	adds	r3, #8
 80030f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800310c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3308      	adds	r3, #8
 8003116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800311a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003146:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <HAL_UART_IRQHandler+0x29c>)
 8003148:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe f88b 	bl	800126a <HAL_DMA_Abort_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d017      	beq.n	800318a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003164:	4610      	mov	r0, r2
 8003166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00f      	b.n	800318a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9d4 	bl	8003518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e00b      	b.n	800318a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9d0 	bl	8003518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e007      	b.n	800318a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9cc 	bl	8003518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003188:	e1b1      	b.n	80034ee <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318a:	bf00      	nop
    return;
 800318c:	e1af      	b.n	80034ee <HAL_UART_IRQHandler+0x5f6>
 800318e:	bf00      	nop
 8003190:	04000120 	.word	0x04000120
 8003194:	08004079 	.word	0x08004079

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319c:	2b01      	cmp	r3, #1
 800319e:	f040 816a 	bne.w	8003476 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8163 	beq.w	8003476 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 815c 	beq.w	8003476 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2210      	movs	r2, #16
 80031c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d0:	2b40      	cmp	r3, #64	@ 0x40
 80031d2:	f040 80d4 	bne.w	800337e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80ad 	beq.w	8003346 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f080 80a5 	bcs.w	8003346 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003202:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 8086 	bne.w	8003324 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800322c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003234:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003246:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800324e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800325a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1da      	bne.n	8003218 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3308      	adds	r3, #8
 8003268:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3308      	adds	r3, #8
 8003282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003286:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800328a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800328e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e1      	bne.n	8003262 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3308      	adds	r3, #8
 80032a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3308      	adds	r3, #8
 80032be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e3      	bne.n	800329e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80032f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f4:	f023 0310 	bic.w	r3, r3, #16
 80032f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003306:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003308:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800330c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e4      	bne.n	80032e4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd ff65 	bl	80011ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003336:	b29b      	uxth	r3, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	b29b      	uxth	r3, r3
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8f4 	bl	800352c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003344:	e0d5      	b.n	80034f2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800334c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003350:	429a      	cmp	r2, r3
 8003352:	f040 80ce 	bne.w	80034f2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b20      	cmp	r3, #32
 8003364:	f040 80c5 	bne.w	80034f2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8d8 	bl	800352c <HAL_UARTEx_RxEventCallback>
      return;
 800337c:	e0b9      	b.n	80034f2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800338a:	b29b      	uxth	r3, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80ab 	beq.w	80034f6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80033a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a6 	beq.w	80034f6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e4      	bne.n	80033aa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	623b      	str	r3, [r7, #32]
   return(result);
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3308      	adds	r3, #8
 8003400:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003404:	633a      	str	r2, [r7, #48]	@ 0x30
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800340a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e3      	bne.n	80033e0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	60fb      	str	r3, [r7, #12]
   return(result);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f023 0310 	bic.w	r3, r3, #16
 8003440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	617b      	str	r3, [r7, #20]
   return(result);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e4      	bne.n	800342c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f85c 	bl	800352c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003474:	e03f      	b.n	80034f6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00e      	beq.n	80034a0 <HAL_UART_IRQHandler+0x5a8>
 8003482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003496:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 ffe9 	bl	8004470 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800349e:	e02d      	b.n	80034fc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00e      	beq.n	80034ca <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01c      	beq.n	80034fa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
    }
    return;
 80034c8:	e017      	b.n	80034fa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d012      	beq.n	80034fc <HAL_UART_IRQHandler+0x604>
 80034d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fdde 	bl	80040a4 <UART_EndTransmit_IT>
    return;
 80034e8:	e008      	b.n	80034fc <HAL_UART_IRQHandler+0x604>
      return;
 80034ea:	bf00      	nop
 80034ec:	e006      	b.n	80034fc <HAL_UART_IRQHandler+0x604>
    return;
 80034ee:	bf00      	nop
 80034f0:	e004      	b.n	80034fc <HAL_UART_IRQHandler+0x604>
      return;
 80034f2:	bf00      	nop
 80034f4:	e002      	b.n	80034fc <HAL_UART_IRQHandler+0x604>
      return;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <HAL_UART_IRQHandler+0x604>
    return;
 80034fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80034fc:	37e8      	adds	r7, #232	@ 0xe8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop

08003504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b08a      	sub	sp, #40	@ 0x28
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4313      	orrs	r3, r2
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4ba4      	ldr	r3, [pc, #656]	@ (8003804 <UART_SetConfig+0x2c0>)
 8003574:	4013      	ands	r3, r2
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800357c:	430b      	orrs	r3, r1
 800357e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a99      	ldr	r2, [pc, #612]	@ (8003808 <UART_SetConfig+0x2c4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ac:	4313      	orrs	r3, r2
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a90      	ldr	r2, [pc, #576]	@ (800380c <UART_SetConfig+0x2c8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d126      	bne.n	800361c <UART_SetConfig+0xd8>
 80035ce:	4b90      	ldr	r3, [pc, #576]	@ (8003810 <UART_SetConfig+0x2cc>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d81b      	bhi.n	8003614 <UART_SetConfig+0xd0>
 80035dc:	a201      	add	r2, pc, #4	@ (adr r2, 80035e4 <UART_SetConfig+0xa0>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	08003605 	.word	0x08003605
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	0800360d 	.word	0x0800360d
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fa:	e116      	b.n	800382a <UART_SetConfig+0x2e6>
 80035fc:	2302      	movs	r3, #2
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003602:	e112      	b.n	800382a <UART_SetConfig+0x2e6>
 8003604:	2304      	movs	r3, #4
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e10e      	b.n	800382a <UART_SetConfig+0x2e6>
 800360c:	2308      	movs	r3, #8
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e10a      	b.n	800382a <UART_SetConfig+0x2e6>
 8003614:	2310      	movs	r3, #16
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361a:	e106      	b.n	800382a <UART_SetConfig+0x2e6>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7c      	ldr	r2, [pc, #496]	@ (8003814 <UART_SetConfig+0x2d0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d138      	bne.n	8003698 <UART_SetConfig+0x154>
 8003626:	4b7a      	ldr	r3, [pc, #488]	@ (8003810 <UART_SetConfig+0x2cc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d82d      	bhi.n	8003690 <UART_SetConfig+0x14c>
 8003634:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <UART_SetConfig+0xf8>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003671 	.word	0x08003671
 8003640:	08003691 	.word	0x08003691
 8003644:	08003691 	.word	0x08003691
 8003648:	08003691 	.word	0x08003691
 800364c:	08003681 	.word	0x08003681
 8003650:	08003691 	.word	0x08003691
 8003654:	08003691 	.word	0x08003691
 8003658:	08003691 	.word	0x08003691
 800365c:	08003679 	.word	0x08003679
 8003660:	08003691 	.word	0x08003691
 8003664:	08003691 	.word	0x08003691
 8003668:	08003691 	.word	0x08003691
 800366c:	08003689 	.word	0x08003689
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003676:	e0d8      	b.n	800382a <UART_SetConfig+0x2e6>
 8003678:	2302      	movs	r3, #2
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367e:	e0d4      	b.n	800382a <UART_SetConfig+0x2e6>
 8003680:	2304      	movs	r3, #4
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003686:	e0d0      	b.n	800382a <UART_SetConfig+0x2e6>
 8003688:	2308      	movs	r3, #8
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368e:	e0cc      	b.n	800382a <UART_SetConfig+0x2e6>
 8003690:	2310      	movs	r3, #16
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003696:	e0c8      	b.n	800382a <UART_SetConfig+0x2e6>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5e      	ldr	r2, [pc, #376]	@ (8003818 <UART_SetConfig+0x2d4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d125      	bne.n	80036ee <UART_SetConfig+0x1aa>
 80036a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003810 <UART_SetConfig+0x2cc>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036ac:	2b30      	cmp	r3, #48	@ 0x30
 80036ae:	d016      	beq.n	80036de <UART_SetConfig+0x19a>
 80036b0:	2b30      	cmp	r3, #48	@ 0x30
 80036b2:	d818      	bhi.n	80036e6 <UART_SetConfig+0x1a2>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d00a      	beq.n	80036ce <UART_SetConfig+0x18a>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d814      	bhi.n	80036e6 <UART_SetConfig+0x1a2>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <UART_SetConfig+0x182>
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d008      	beq.n	80036d6 <UART_SetConfig+0x192>
 80036c4:	e00f      	b.n	80036e6 <UART_SetConfig+0x1a2>
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036cc:	e0ad      	b.n	800382a <UART_SetConfig+0x2e6>
 80036ce:	2302      	movs	r3, #2
 80036d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d4:	e0a9      	b.n	800382a <UART_SetConfig+0x2e6>
 80036d6:	2304      	movs	r3, #4
 80036d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036dc:	e0a5      	b.n	800382a <UART_SetConfig+0x2e6>
 80036de:	2308      	movs	r3, #8
 80036e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e4:	e0a1      	b.n	800382a <UART_SetConfig+0x2e6>
 80036e6:	2310      	movs	r3, #16
 80036e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ec:	e09d      	b.n	800382a <UART_SetConfig+0x2e6>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a4a      	ldr	r2, [pc, #296]	@ (800381c <UART_SetConfig+0x2d8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d125      	bne.n	8003744 <UART_SetConfig+0x200>
 80036f8:	4b45      	ldr	r3, [pc, #276]	@ (8003810 <UART_SetConfig+0x2cc>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003702:	2bc0      	cmp	r3, #192	@ 0xc0
 8003704:	d016      	beq.n	8003734 <UART_SetConfig+0x1f0>
 8003706:	2bc0      	cmp	r3, #192	@ 0xc0
 8003708:	d818      	bhi.n	800373c <UART_SetConfig+0x1f8>
 800370a:	2b80      	cmp	r3, #128	@ 0x80
 800370c:	d00a      	beq.n	8003724 <UART_SetConfig+0x1e0>
 800370e:	2b80      	cmp	r3, #128	@ 0x80
 8003710:	d814      	bhi.n	800373c <UART_SetConfig+0x1f8>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <UART_SetConfig+0x1d8>
 8003716:	2b40      	cmp	r3, #64	@ 0x40
 8003718:	d008      	beq.n	800372c <UART_SetConfig+0x1e8>
 800371a:	e00f      	b.n	800373c <UART_SetConfig+0x1f8>
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003722:	e082      	b.n	800382a <UART_SetConfig+0x2e6>
 8003724:	2302      	movs	r3, #2
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372a:	e07e      	b.n	800382a <UART_SetConfig+0x2e6>
 800372c:	2304      	movs	r3, #4
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003732:	e07a      	b.n	800382a <UART_SetConfig+0x2e6>
 8003734:	2308      	movs	r3, #8
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373a:	e076      	b.n	800382a <UART_SetConfig+0x2e6>
 800373c:	2310      	movs	r3, #16
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003742:	e072      	b.n	800382a <UART_SetConfig+0x2e6>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a35      	ldr	r2, [pc, #212]	@ (8003820 <UART_SetConfig+0x2dc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d12a      	bne.n	80037a4 <UART_SetConfig+0x260>
 800374e:	4b30      	ldr	r3, [pc, #192]	@ (8003810 <UART_SetConfig+0x2cc>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003758:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800375c:	d01a      	beq.n	8003794 <UART_SetConfig+0x250>
 800375e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003762:	d81b      	bhi.n	800379c <UART_SetConfig+0x258>
 8003764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003768:	d00c      	beq.n	8003784 <UART_SetConfig+0x240>
 800376a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800376e:	d815      	bhi.n	800379c <UART_SetConfig+0x258>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <UART_SetConfig+0x238>
 8003774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003778:	d008      	beq.n	800378c <UART_SetConfig+0x248>
 800377a:	e00f      	b.n	800379c <UART_SetConfig+0x258>
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003782:	e052      	b.n	800382a <UART_SetConfig+0x2e6>
 8003784:	2302      	movs	r3, #2
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800378a:	e04e      	b.n	800382a <UART_SetConfig+0x2e6>
 800378c:	2304      	movs	r3, #4
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003792:	e04a      	b.n	800382a <UART_SetConfig+0x2e6>
 8003794:	2308      	movs	r3, #8
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379a:	e046      	b.n	800382a <UART_SetConfig+0x2e6>
 800379c:	2310      	movs	r3, #16
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a2:	e042      	b.n	800382a <UART_SetConfig+0x2e6>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a17      	ldr	r2, [pc, #92]	@ (8003808 <UART_SetConfig+0x2c4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d13a      	bne.n	8003824 <UART_SetConfig+0x2e0>
 80037ae:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <UART_SetConfig+0x2cc>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037bc:	d01a      	beq.n	80037f4 <UART_SetConfig+0x2b0>
 80037be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037c2:	d81b      	bhi.n	80037fc <UART_SetConfig+0x2b8>
 80037c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c8:	d00c      	beq.n	80037e4 <UART_SetConfig+0x2a0>
 80037ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ce:	d815      	bhi.n	80037fc <UART_SetConfig+0x2b8>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <UART_SetConfig+0x298>
 80037d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d8:	d008      	beq.n	80037ec <UART_SetConfig+0x2a8>
 80037da:	e00f      	b.n	80037fc <UART_SetConfig+0x2b8>
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e2:	e022      	b.n	800382a <UART_SetConfig+0x2e6>
 80037e4:	2302      	movs	r3, #2
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ea:	e01e      	b.n	800382a <UART_SetConfig+0x2e6>
 80037ec:	2304      	movs	r3, #4
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f2:	e01a      	b.n	800382a <UART_SetConfig+0x2e6>
 80037f4:	2308      	movs	r3, #8
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fa:	e016      	b.n	800382a <UART_SetConfig+0x2e6>
 80037fc:	2310      	movs	r3, #16
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003802:	e012      	b.n	800382a <UART_SetConfig+0x2e6>
 8003804:	efff69f3 	.word	0xefff69f3
 8003808:	40008000 	.word	0x40008000
 800380c:	40013800 	.word	0x40013800
 8003810:	40021000 	.word	0x40021000
 8003814:	40004400 	.word	0x40004400
 8003818:	40004800 	.word	0x40004800
 800381c:	40004c00 	.word	0x40004c00
 8003820:	40005000 	.word	0x40005000
 8003824:	2310      	movs	r3, #16
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a9f      	ldr	r2, [pc, #636]	@ (8003aac <UART_SetConfig+0x568>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d17a      	bne.n	800392a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003834:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003838:	2b08      	cmp	r3, #8
 800383a:	d824      	bhi.n	8003886 <UART_SetConfig+0x342>
 800383c:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <UART_SetConfig+0x300>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003869 	.word	0x08003869
 8003848:	08003887 	.word	0x08003887
 800384c:	08003871 	.word	0x08003871
 8003850:	08003887 	.word	0x08003887
 8003854:	08003877 	.word	0x08003877
 8003858:	08003887 	.word	0x08003887
 800385c:	08003887 	.word	0x08003887
 8003860:	08003887 	.word	0x08003887
 8003864:	0800387f 	.word	0x0800387f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003868:	f7fe fcda 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 800386c:	61f8      	str	r0, [r7, #28]
        break;
 800386e:	e010      	b.n	8003892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003870:	4b8f      	ldr	r3, [pc, #572]	@ (8003ab0 <UART_SetConfig+0x56c>)
 8003872:	61fb      	str	r3, [r7, #28]
        break;
 8003874:	e00d      	b.n	8003892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003876:	f7fe fc3b 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 800387a:	61f8      	str	r0, [r7, #28]
        break;
 800387c:	e009      	b.n	8003892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003882:	61fb      	str	r3, [r7, #28]
        break;
 8003884:	e005      	b.n	8003892 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80fb 	beq.w	8003a90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d305      	bcc.n	80038b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d903      	bls.n	80038be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038bc:	e0e8      	b.n	8003a90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2200      	movs	r2, #0
 80038c2:	461c      	mov	r4, r3
 80038c4:	4615      	mov	r5, r2
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	022b      	lsls	r3, r5, #8
 80038d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038d4:	0222      	lsls	r2, r4, #8
 80038d6:	68f9      	ldr	r1, [r7, #12]
 80038d8:	6849      	ldr	r1, [r1, #4]
 80038da:	0849      	lsrs	r1, r1, #1
 80038dc:	2000      	movs	r0, #0
 80038de:	4688      	mov	r8, r1
 80038e0:	4681      	mov	r9, r0
 80038e2:	eb12 0a08 	adds.w	sl, r2, r8
 80038e6:	eb43 0b09 	adc.w	fp, r3, r9
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f8:	4650      	mov	r0, sl
 80038fa:	4659      	mov	r1, fp
 80038fc:	f7fc fcb8 	bl	8000270 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4613      	mov	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800390e:	d308      	bcc.n	8003922 <UART_SetConfig+0x3de>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003916:	d204      	bcs.n	8003922 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	e0b6      	b.n	8003a90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003928:	e0b2      	b.n	8003a90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003932:	d15e      	bne.n	80039f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003934:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003938:	2b08      	cmp	r3, #8
 800393a:	d828      	bhi.n	800398e <UART_SetConfig+0x44a>
 800393c:	a201      	add	r2, pc, #4	@ (adr r2, 8003944 <UART_SetConfig+0x400>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7fe fc5a 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 800396c:	61f8      	str	r0, [r7, #28]
        break;
 800396e:	e014      	b.n	800399a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7fe fc6c 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8003974:	61f8      	str	r0, [r7, #28]
        break;
 8003976:	e010      	b.n	800399a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab0 <UART_SetConfig+0x56c>)
 800397a:	61fb      	str	r3, [r7, #28]
        break;
 800397c:	e00d      	b.n	800399a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7fe fbb7 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8003982:	61f8      	str	r0, [r7, #28]
        break;
 8003984:	e009      	b.n	800399a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800398a:	61fb      	str	r3, [r7, #28]
        break;
 800398c:	e005      	b.n	800399a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d077      	beq.n	8003a90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005a      	lsls	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	441a      	add	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d916      	bls.n	80039ea <UART_SetConfig+0x4a6>
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c2:	d212      	bcs.n	80039ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	b29a      	uxth	r2, r3
 80039da:	8afb      	ldrh	r3, [r7, #22]
 80039dc:	4313      	orrs	r3, r2
 80039de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	8afa      	ldrh	r2, [r7, #22]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e052      	b.n	8003a90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039f0:	e04e      	b.n	8003a90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d827      	bhi.n	8003a4a <UART_SetConfig+0x506>
 80039fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <UART_SetConfig+0x4bc>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fbfc 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003a28:	61f8      	str	r0, [r7, #28]
        break;
 8003a2a:	e014      	b.n	8003a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe fc0e 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8003a30:	61f8      	str	r0, [r7, #28]
        break;
 8003a32:	e010      	b.n	8003a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab0 <UART_SetConfig+0x56c>)
 8003a36:	61fb      	str	r3, [r7, #28]
        break;
 8003a38:	e00d      	b.n	8003a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe fb59 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61f8      	str	r0, [r7, #28]
        break;
 8003a40:	e009      	b.n	8003a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a46:	61fb      	str	r3, [r7, #28]
        break;
 8003a48:	e005      	b.n	8003a56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a54:	bf00      	nop
    }

    if (pclk != 0U)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d019      	beq.n	8003a90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	085a      	lsrs	r2, r3, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	441a      	add	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	d909      	bls.n	8003a8a <UART_SetConfig+0x546>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7c:	d205      	bcs.n	8003a8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	e002      	b.n	8003a90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3728      	adds	r7, #40	@ 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aaa:	bf00      	nop
 8003aac:	40008000 	.word	0x40008000
 8003ab0:	00f42400 	.word	0x00f42400

08003ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01a      	beq.n	8003bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bb2:	d10a      	bne.n	8003bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b098      	sub	sp, #96	@ 0x60
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c08:	f7fd f9d4 	bl	8000fb4 <HAL_GetTick>
 8003c0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d12e      	bne.n	8003c7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f88c 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d021      	beq.n	8003c7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e6      	bne.n	8003c36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e062      	b.n	8003d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d149      	bne.n	8003d1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f856 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d03c      	beq.n	8003d1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	623b      	str	r3, [r7, #32]
   return(result);
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf4:	61fa      	str	r2, [r7, #28]
 8003cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	69b9      	ldr	r1, [r7, #24]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	617b      	str	r3, [r7, #20]
   return(result);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e5      	bne.n	8003cd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e011      	b.n	8003d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3758      	adds	r7, #88	@ 0x58
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d58:	e04f      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d04b      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fd f927 	bl	8000fb4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e04e      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d037      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b80      	cmp	r3, #128	@ 0x80
 8003d8e:	d034      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d031      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d110      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2208      	movs	r2, #8
 8003daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f8ff 	bl	8003fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2208      	movs	r2, #8
 8003db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e029      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd4:	d111      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f8e5 	bl	8003fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d0a0      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b097      	sub	sp, #92	@ 0x5c
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e56:	d10e      	bne.n	8003e76 <UART_Start_Receive_IT+0x52>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <UART_Start_Receive_IT+0x48>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e6a:	e02d      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	22ff      	movs	r2, #255	@ 0xff
 8003e70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e74:	e028      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10d      	bne.n	8003e9a <UART_Start_Receive_IT+0x76>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <UART_Start_Receive_IT+0x6c>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	22ff      	movs	r2, #255	@ 0xff
 8003e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e8e:	e01b      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	227f      	movs	r2, #127	@ 0x7f
 8003e94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e98:	e016      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea2:	d10d      	bne.n	8003ec0 <UART_Start_Receive_IT+0x9c>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <UART_Start_Receive_IT+0x92>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	227f      	movs	r2, #127	@ 0x7f
 8003eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003eb4:	e008      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	223f      	movs	r2, #63	@ 0x3f
 8003eba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ebe:	e003      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2222      	movs	r2, #34	@ 0x22
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3308      	adds	r3, #8
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ef8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003efa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003efe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e5      	bne.n	8003ed8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f14:	d107      	bne.n	8003f26 <UART_Start_Receive_IT+0x102>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a21      	ldr	r2, [pc, #132]	@ (8003fa8 <UART_Start_Receive_IT+0x184>)
 8003f22:	669a      	str	r2, [r3, #104]	@ 0x68
 8003f24:	e002      	b.n	8003f2c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a20      	ldr	r2, [pc, #128]	@ (8003fac <UART_Start_Receive_IT+0x188>)
 8003f2a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d019      	beq.n	8003f68 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f54:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e6      	bne.n	8003f34 <UART_Start_Receive_IT+0x110>
 8003f66:	e018      	b.n	8003f9a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	613b      	str	r3, [r7, #16]
   return(result);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f043 0320 	orr.w	r3, r3, #32
 8003f7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	69f9      	ldr	r1, [r7, #28]
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e6      	bne.n	8003f68 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	375c      	adds	r7, #92	@ 0x5c
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	080042b5 	.word	0x080042b5
 8003fac:	080040f9 	.word	0x080040f9

08003fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b095      	sub	sp, #84	@ 0x54
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e6      	bne.n	8003fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800400a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800400c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e5      	bne.n	8003fea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	2b01      	cmp	r3, #1
 8004024:	d118      	bne.n	8004058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	60bb      	str	r3, [r7, #8]
   return(result);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f023 0310 	bic.w	r3, r3, #16
 800403a:	647b      	str	r3, [r7, #68]	@ 0x44
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6979      	ldr	r1, [r7, #20]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	613b      	str	r3, [r7, #16]
   return(result);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e6      	bne.n	8004026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800406c:	bf00      	nop
 800406e:	3754      	adds	r7, #84	@ 0x54
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff fa3e 	bl	8003518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e6      	bne.n	80040ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fa0a 	bl	8003504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f0:	bf00      	nop
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b09c      	sub	sp, #112	@ 0x70
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004106:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004110:	2b22      	cmp	r3, #34	@ 0x22
 8004112:	f040 80be 	bne.w	8004292 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800411c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004120:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004124:	b2d9      	uxtb	r1, r3
 8004126:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800412a:	b2da      	uxtb	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004130:	400a      	ands	r2, r1
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 80a3 	bne.w	80042a6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800416e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800417e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004180:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004184:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800418c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e6      	bne.n	8004160 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3308      	adds	r3, #8
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a34      	ldr	r2, [pc, #208]	@ (80042b0 <UART_RxISR_8BIT+0x1b8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01f      	beq.n	8004224 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004206:	663b      	str	r3, [r7, #96]	@ 0x60
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
 8004212:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e6      	bne.n	80041f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004228:	2b01      	cmp	r3, #1
 800422a:	d12e      	bne.n	800428a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0310 	bic.w	r3, r3, #16
 8004246:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	617b      	str	r3, [r7, #20]
   return(result);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b10      	cmp	r3, #16
 8004270:	d103      	bne.n	800427a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2210      	movs	r2, #16
 8004278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff f952 	bl	800352c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004288:	e00d      	b.n	80042a6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc fa50 	bl	8000730 <HAL_UART_RxCpltCallback>
}
 8004290:	e009      	b.n	80042a6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	8b1b      	ldrh	r3, [r3, #24]
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0208 	orr.w	r2, r2, #8
 80042a2:	b292      	uxth	r2, r2
 80042a4:	831a      	strh	r2, [r3, #24]
}
 80042a6:	bf00      	nop
 80042a8:	3770      	adds	r7, #112	@ 0x70
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40008000 	.word	0x40008000

080042b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b09c      	sub	sp, #112	@ 0x70
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042cc:	2b22      	cmp	r3, #34	@ 0x22
 80042ce:	f040 80be 	bne.w	800444e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80042e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80042ea:	4013      	ands	r3, r2
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 80a3 	bne.w	8004462 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800432a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004330:	667b      	str	r3, [r7, #100]	@ 0x64
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800433a:	657b      	str	r3, [r7, #84]	@ 0x54
 800433c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004340:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e6      	bne.n	800431c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	663b      	str	r3, [r7, #96]	@ 0x60
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3308      	adds	r3, #8
 800436c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800436e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a34      	ldr	r2, [pc, #208]	@ (800446c <UART_RxISR_16BIT+0x1b8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01f      	beq.n	80043e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e6      	bne.n	80043ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d12e      	bne.n	8004446 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f023 0310 	bic.w	r3, r3, #16
 8004402:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	613b      	str	r3, [r7, #16]
   return(result);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b10      	cmp	r3, #16
 800442c:	d103      	bne.n	8004436 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2210      	movs	r2, #16
 8004434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff f874 	bl	800352c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004444:	e00d      	b.n	8004462 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc f972 	bl	8000730 <HAL_UART_RxCpltCallback>
}
 800444c:	e009      	b.n	8004462 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	8b1b      	ldrh	r3, [r3, #24]
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0208 	orr.w	r2, r2, #8
 800445e:	b292      	uxth	r2, r2
 8004460:	831a      	strh	r2, [r3, #24]
}
 8004462:	bf00      	nop
 8004464:	3770      	adds	r7, #112	@ 0x70
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40008000 	.word	0x40008000

08004470 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004496:	2b84      	cmp	r3, #132	@ 0x84
 8004498:	d005      	beq.n	80044a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800449a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	3303      	adds	r3, #3
 80044a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044a6:	68fb      	ldr	r3, [r7, #12]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044b8:	f000 fae4 	bl	8004a84 <vTaskStartScheduler>
  
  return osOK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c4:	b089      	sub	sp, #36	@ 0x24
 80044c6:	af04      	add	r7, sp, #16
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <osThreadCreate+0x54>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01c      	beq.n	8004516 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685c      	ldr	r4, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691e      	ldr	r6, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ffc8 	bl	8004484 <makeFreeRtosPriority>
 80044f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044fe:	9202      	str	r2, [sp, #8]
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	9100      	str	r1, [sp, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	4632      	mov	r2, r6
 8004508:	4629      	mov	r1, r5
 800450a:	4620      	mov	r0, r4
 800450c:	f000 f8ed 	bl	80046ea <xTaskCreateStatic>
 8004510:	4603      	mov	r3, r0
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e01c      	b.n	8004550 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685c      	ldr	r4, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004522:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff ffaa 	bl	8004484 <makeFreeRtosPriority>
 8004530:	4602      	mov	r2, r0
 8004532:	f107 030c 	add.w	r3, r7, #12
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	9200      	str	r2, [sp, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	4632      	mov	r2, r6
 800453e:	4629      	mov	r1, r5
 8004540:	4620      	mov	r0, r4
 8004542:	f000 f932 	bl	80047aa <xTaskCreate>
 8004546:	4603      	mov	r3, r0
 8004548:	2b01      	cmp	r3, #1
 800454a:	d001      	beq.n	8004550 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800454c:	2300      	movs	r3, #0
 800454e:	e000      	b.n	8004552 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004550:	68fb      	ldr	r3, [r7, #12]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800455a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <osDelay+0x16>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	e000      	b.n	8004572 <osDelay+0x18>
 8004570:	2301      	movs	r3, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fa50 	bl	8004a18 <vTaskDelay>
  
  return osOK;
 8004578:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f103 0208 	add.w	r2, r3, #8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f103 0208 	add.w	r2, r3, #8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f103 0208 	add.w	r2, r3, #8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d103      	bne.n	8004644 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	e00c      	b.n	800465e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3308      	adds	r3, #8
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e002      	b.n	8004652 <vListInsert+0x2e>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	d2f6      	bcs.n	800464c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6892      	ldr	r2, [r2, #8]
 80046ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6852      	ldr	r2, [r2, #4]
 80046b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d103      	bne.n	80046ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	1e5a      	subs	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b08e      	sub	sp, #56	@ 0x38
 80046ee:	af04      	add	r7, sp, #16
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10b      	bne.n	8004716 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	e7fd      	b.n	8004712 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <xTaskCreateStatic+0x4a>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	61fb      	str	r3, [r7, #28]
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004734:	2354      	movs	r3, #84	@ 0x54
 8004736:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b54      	cmp	r3, #84	@ 0x54
 800473c:	d00b      	beq.n	8004756 <xTaskCreateStatic+0x6c>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	61bb      	str	r3, [r7, #24]
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	e7fd      	b.n	8004752 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004756:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01e      	beq.n	800479c <xTaskCreateStatic+0xb2>
 800475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01b      	beq.n	800479c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	2202      	movs	r2, #2
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004776:	2300      	movs	r3, #0
 8004778:	9303      	str	r3, [sp, #12]
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	9302      	str	r3, [sp, #8]
 800477e:	f107 0314 	add.w	r3, r7, #20
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f850 	bl	8004834 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004794:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004796:	f000 f8d5 	bl	8004944 <prvAddNewTaskToReadyList>
 800479a:	e001      	b.n	80047a0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047a0:	697b      	ldr	r3, [r7, #20]
	}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3728      	adds	r7, #40	@ 0x28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b08c      	sub	sp, #48	@ 0x30
 80047ae:	af04      	add	r7, sp, #16
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fef2 	bl	80055a8 <pvPortMalloc>
 80047c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00e      	beq.n	80047ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047cc:	2054      	movs	r0, #84	@ 0x54
 80047ce:	f000 feeb 	bl	80055a8 <pvPortMalloc>
 80047d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e0:	e005      	b.n	80047ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f000 ffae 	bl	8005744 <vPortFree>
 80047e8:	e001      	b.n	80047ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d017      	beq.n	8004824 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	2300      	movs	r3, #0
 8004800:	9303      	str	r3, [sp, #12]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	9302      	str	r3, [sp, #8]
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f80e 	bl	8004834 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004818:	69f8      	ldr	r0, [r7, #28]
 800481a:	f000 f893 	bl	8004944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800481e:	2301      	movs	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e002      	b.n	800482a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004824:	f04f 33ff 	mov.w	r3, #4294967295
 8004828:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800482a:	69bb      	ldr	r3, [r7, #24]
	}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800484c:	3b01      	subs	r3, #1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f023 0307 	bic.w	r3, r3, #7
 800485a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	617b      	str	r3, [r7, #20]
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01f      	beq.n	80048c4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e012      	b.n	80048b0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	7819      	ldrb	r1, [r3, #0]
 8004892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	3334      	adds	r3, #52	@ 0x34
 800489a:	460a      	mov	r2, r1
 800489c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d006      	beq.n	80048b8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3301      	adds	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	d9e9      	bls.n	800488a <prvInitialiseNewTask+0x56>
 80048b6:	e000      	b.n	80048ba <prvInitialiseNewTask+0x86>
			{
				break;
 80048b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048c2:	e003      	b.n	80048cc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d901      	bls.n	80048d6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048d2:	2306      	movs	r3, #6
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	2200      	movs	r2, #0
 80048e6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	3304      	adds	r3, #4
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fe68 	bl	80045c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	3318      	adds	r3, #24
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fe63 	bl	80045c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004900:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	f1c3 0207 	rsb	r2, r3, #7
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004910:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	2200      	movs	r2, #0
 8004916:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	69b8      	ldr	r0, [r7, #24]
 8004926:	f000 fc2b 	bl	8005180 <pxPortInitialiseStack>
 800492a:	4602      	mov	r2, r0
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800493a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800493c:	bf00      	nop
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800494c:	f000 fd4c 	bl	80053e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004950:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <prvAddNewTaskToReadyList+0xb8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	4a29      	ldr	r2, [pc, #164]	@ (80049fc <prvAddNewTaskToReadyList+0xb8>)
 8004958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800495a:	4b29      	ldr	r3, [pc, #164]	@ (8004a00 <prvAddNewTaskToReadyList+0xbc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004962:	4a27      	ldr	r2, [pc, #156]	@ (8004a00 <prvAddNewTaskToReadyList+0xbc>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004968:	4b24      	ldr	r3, [pc, #144]	@ (80049fc <prvAddNewTaskToReadyList+0xb8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d110      	bne.n	8004992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004970:	f000 fac4 	bl	8004efc <prvInitialiseTaskLists>
 8004974:	e00d      	b.n	8004992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004976:	4b23      	ldr	r3, [pc, #140]	@ (8004a04 <prvAddNewTaskToReadyList+0xc0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800497e:	4b20      	ldr	r3, [pc, #128]	@ (8004a00 <prvAddNewTaskToReadyList+0xbc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	429a      	cmp	r2, r3
 800498a:	d802      	bhi.n	8004992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800498c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a00 <prvAddNewTaskToReadyList+0xbc>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004992:	4b1d      	ldr	r3, [pc, #116]	@ (8004a08 <prvAddNewTaskToReadyList+0xc4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	4a1b      	ldr	r2, [pc, #108]	@ (8004a08 <prvAddNewTaskToReadyList+0xc4>)
 800499a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	2201      	movs	r2, #1
 80049a2:	409a      	lsls	r2, r3
 80049a4:	4b19      	ldr	r3, [pc, #100]	@ (8004a0c <prvAddNewTaskToReadyList+0xc8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <prvAddNewTaskToReadyList+0xc8>)
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <prvAddNewTaskToReadyList+0xcc>)
 80049bc:	441a      	add	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7ff fe09 	bl	80045dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049ca:	f000 fd3f 	bl	800544c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <prvAddNewTaskToReadyList+0xc0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00e      	beq.n	80049f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a00 <prvAddNewTaskToReadyList+0xbc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d207      	bcs.n	80049f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <prvAddNewTaskToReadyList+0xd0>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	200007cc 	.word	0x200007cc
 8004a00:	200006cc 	.word	0x200006cc
 8004a04:	200007d8 	.word	0x200007d8
 8004a08:	200007e8 	.word	0x200007e8
 8004a0c:	200007d4 	.word	0x200007d4
 8004a10:	200006d0 	.word	0x200006d0
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d018      	beq.n	8004a5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a2a:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <vTaskDelay+0x64>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <vTaskDelay+0x32>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60bb      	str	r3, [r7, #8]
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a4a:	f000 f87d 	bl	8004b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fb2f 	bl	80050b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a56:	f000 f885 	bl	8004b64 <xTaskResumeAll>
 8004a5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a62:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <vTaskDelay+0x68>)
 8004a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	200007f4 	.word	0x200007f4
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	@ 0x28
 8004a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a92:	463a      	mov	r2, r7
 8004a94:	1d39      	adds	r1, r7, #4
 8004a96:	f107 0308 	add.w	r3, r7, #8
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fb fd60 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	9202      	str	r2, [sp, #8]
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	460a      	mov	r2, r1
 8004ab2:	491f      	ldr	r1, [pc, #124]	@ (8004b30 <vTaskStartScheduler+0xac>)
 8004ab4:	481f      	ldr	r0, [pc, #124]	@ (8004b34 <vTaskStartScheduler+0xb0>)
 8004ab6:	f7ff fe18 	bl	80046ea <xTaskCreateStatic>
 8004aba:	4603      	mov	r3, r0
 8004abc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <vTaskStartScheduler+0xb4>)
 8004abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b38 <vTaskStartScheduler+0xb4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e001      	b.n	8004ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d116      	bne.n	8004b06 <vTaskStartScheduler+0x82>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	613b      	str	r3, [r7, #16]
}
 8004aea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004aec:	4b13      	ldr	r3, [pc, #76]	@ (8004b3c <vTaskStartScheduler+0xb8>)
 8004aee:	f04f 32ff 	mov.w	r2, #4294967295
 8004af2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <vTaskStartScheduler+0xbc>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004afa:	4b12      	ldr	r3, [pc, #72]	@ (8004b44 <vTaskStartScheduler+0xc0>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b00:	f000 fbce 	bl	80052a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b04:	e00f      	b.n	8004b26 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d10b      	bne.n	8004b26 <vTaskStartScheduler+0xa2>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	60fb      	str	r3, [r7, #12]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <vTaskStartScheduler+0x9e>
}
 8004b26:	bf00      	nop
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	08006db0 	.word	0x08006db0
 8004b34:	08004ecd 	.word	0x08004ecd
 8004b38:	200007f0 	.word	0x200007f0
 8004b3c:	200007ec 	.word	0x200007ec
 8004b40:	200007d8 	.word	0x200007d8
 8004b44:	200007d0 	.word	0x200007d0

08004b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b4c:	4b04      	ldr	r3, [pc, #16]	@ (8004b60 <vTaskSuspendAll+0x18>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	4a03      	ldr	r2, [pc, #12]	@ (8004b60 <vTaskSuspendAll+0x18>)
 8004b54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	200007f4 	.word	0x200007f4

08004b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b72:	4b42      	ldr	r3, [pc, #264]	@ (8004c7c <xTaskResumeAll+0x118>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	603b      	str	r3, [r7, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	e7fd      	b.n	8004b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b92:	f000 fc29 	bl	80053e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b96:	4b39      	ldr	r3, [pc, #228]	@ (8004c7c <xTaskResumeAll+0x118>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	4a37      	ldr	r2, [pc, #220]	@ (8004c7c <xTaskResumeAll+0x118>)
 8004b9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba0:	4b36      	ldr	r3, [pc, #216]	@ (8004c7c <xTaskResumeAll+0x118>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d161      	bne.n	8004c6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ba8:	4b35      	ldr	r3, [pc, #212]	@ (8004c80 <xTaskResumeAll+0x11c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05d      	beq.n	8004c6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bb0:	e02e      	b.n	8004c10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb2:	4b34      	ldr	r3, [pc, #208]	@ (8004c84 <xTaskResumeAll+0x120>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3318      	adds	r3, #24
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fd69 	bl	8004696 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fd64 	bl	8004696 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004c88 <xTaskResumeAll+0x124>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8004c88 <xTaskResumeAll+0x124>)
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4a27      	ldr	r2, [pc, #156]	@ (8004c8c <xTaskResumeAll+0x128>)
 8004bee:	441a      	add	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f7ff fcf0 	bl	80045dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c00:	4b23      	ldr	r3, [pc, #140]	@ (8004c90 <xTaskResumeAll+0x12c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c0a:	4b22      	ldr	r3, [pc, #136]	@ (8004c94 <xTaskResumeAll+0x130>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c10:	4b1c      	ldr	r3, [pc, #112]	@ (8004c84 <xTaskResumeAll+0x120>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1cc      	bne.n	8004bb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c1e:	f000 fa0b 	bl	8005038 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c22:	4b1d      	ldr	r3, [pc, #116]	@ (8004c98 <xTaskResumeAll+0x134>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d010      	beq.n	8004c50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c2e:	f000 f837 	bl	8004ca0 <xTaskIncrementTick>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c38:	4b16      	ldr	r3, [pc, #88]	@ (8004c94 <xTaskResumeAll+0x130>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f1      	bne.n	8004c2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c4a:	4b13      	ldr	r3, [pc, #76]	@ (8004c98 <xTaskResumeAll+0x134>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c50:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <xTaskResumeAll+0x130>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <xTaskResumeAll+0x138>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c6c:	f000 fbee 	bl	800544c <vPortExitCritical>

	return xAlreadyYielded;
 8004c70:	68bb      	ldr	r3, [r7, #8]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200007f4 	.word	0x200007f4
 8004c80:	200007cc 	.word	0x200007cc
 8004c84:	2000078c 	.word	0x2000078c
 8004c88:	200007d4 	.word	0x200007d4
 8004c8c:	200006d0 	.word	0x200006d0
 8004c90:	200006cc 	.word	0x200006cc
 8004c94:	200007e0 	.word	0x200007e0
 8004c98:	200007dc 	.word	0x200007dc
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004caa:	4b4f      	ldr	r3, [pc, #316]	@ (8004de8 <xTaskIncrementTick+0x148>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 808f 	bne.w	8004dd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8004dec <xTaskIncrementTick+0x14c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8004dec <xTaskIncrementTick+0x14c>)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d121      	bne.n	8004d0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cc8:	4b49      	ldr	r3, [pc, #292]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	603b      	str	r3, [r7, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xTaskIncrementTick+0x46>
 8004cea:	4b41      	ldr	r3, [pc, #260]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	4b40      	ldr	r3, [pc, #256]	@ (8004df4 <xTaskIncrementTick+0x154>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8004df4 <xTaskIncrementTick+0x154>)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004df8 <xTaskIncrementTick+0x158>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a3c      	ldr	r2, [pc, #240]	@ (8004df8 <xTaskIncrementTick+0x158>)
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	f000 f996 	bl	8005038 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004dfc <xTaskIncrementTick+0x15c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d348      	bcc.n	8004da8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d16:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d20:	4b36      	ldr	r3, [pc, #216]	@ (8004dfc <xTaskIncrementTick+0x15c>)
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	601a      	str	r2, [r3, #0]
					break;
 8004d28:	e03e      	b.n	8004da8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2a:	4b31      	ldr	r3, [pc, #196]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d203      	bcs.n	8004d4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d42:	4a2e      	ldr	r2, [pc, #184]	@ (8004dfc <xTaskIncrementTick+0x15c>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d48:	e02e      	b.n	8004da8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fca1 	bl	8004696 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	3318      	adds	r3, #24
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fc98 	bl	8004696 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	4b24      	ldr	r3, [pc, #144]	@ (8004e00 <xTaskIncrementTick+0x160>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	4a22      	ldr	r2, [pc, #136]	@ (8004e00 <xTaskIncrementTick+0x160>)
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <xTaskIncrementTick+0x164>)
 8004d86:	441a      	add	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f7ff fc24 	bl	80045dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d98:	4b1b      	ldr	r3, [pc, #108]	@ (8004e08 <xTaskIncrementTick+0x168>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d3b9      	bcc.n	8004d16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004da2:	2301      	movs	r3, #1
 8004da4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004da6:	e7b6      	b.n	8004d16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004da8:	4b17      	ldr	r3, [pc, #92]	@ (8004e08 <xTaskIncrementTick+0x168>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dae:	4915      	ldr	r1, [pc, #84]	@ (8004e04 <xTaskIncrementTick+0x164>)
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d901      	bls.n	8004dc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004dc4:	4b11      	ldr	r3, [pc, #68]	@ (8004e0c <xTaskIncrementTick+0x16c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d007      	beq.n	8004ddc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e004      	b.n	8004ddc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <xTaskIncrementTick+0x170>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e10 <xTaskIncrementTick+0x170>)
 8004dda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ddc:	697b      	ldr	r3, [r7, #20]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200007f4 	.word	0x200007f4
 8004dec:	200007d0 	.word	0x200007d0
 8004df0:	20000784 	.word	0x20000784
 8004df4:	20000788 	.word	0x20000788
 8004df8:	200007e4 	.word	0x200007e4
 8004dfc:	200007ec 	.word	0x200007ec
 8004e00:	200007d4 	.word	0x200007d4
 8004e04:	200006d0 	.word	0x200006d0
 8004e08:	200006cc 	.word	0x200006cc
 8004e0c:	200007e0 	.word	0x200007e0
 8004e10:	200007dc 	.word	0x200007dc

08004e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <vTaskSwitchContext+0xa4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e22:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <vTaskSwitchContext+0xa8>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e28:	e040      	b.n	8004eac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <vTaskSwitchContext+0xa8>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e30:	4b23      	ldr	r3, [pc, #140]	@ (8004ec0 <vTaskSwitchContext+0xac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	fab3 f383 	clz	r3, r3
 8004e3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e3e:	7afb      	ldrb	r3, [r7, #11]
 8004e40:	f1c3 031f 	rsb	r3, r3, #31
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	491f      	ldr	r1, [pc, #124]	@ (8004ec4 <vTaskSwitchContext+0xb0>)
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	607b      	str	r3, [r7, #4]
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <vTaskSwitchContext+0x5a>
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4a11      	ldr	r2, [pc, #68]	@ (8004ec4 <vTaskSwitchContext+0xb0>)
 8004e7e:	4413      	add	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	3308      	adds	r3, #8
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d104      	bne.n	8004ea2 <vTaskSwitchContext+0x8e>
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a07      	ldr	r2, [pc, #28]	@ (8004ec8 <vTaskSwitchContext+0xb4>)
 8004eaa:	6013      	str	r3, [r2, #0]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	200007f4 	.word	0x200007f4
 8004ebc:	200007e0 	.word	0x200007e0
 8004ec0:	200007d4 	.word	0x200007d4
 8004ec4:	200006d0 	.word	0x200006d0
 8004ec8:	200006cc 	.word	0x200006cc

08004ecc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ed4:	f000 f852 	bl	8004f7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ed8:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <prvIdleTask+0x28>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d9f9      	bls.n	8004ed4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <prvIdleTask+0x2c>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ef0:	e7f0      	b.n	8004ed4 <prvIdleTask+0x8>
 8004ef2:	bf00      	nop
 8004ef4:	200006d0 	.word	0x200006d0
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	e00c      	b.n	8004f22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4a12      	ldr	r2, [pc, #72]	@ (8004f5c <prvInitialiseTaskLists+0x60>)
 8004f14:	4413      	add	r3, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fb33 	bl	8004582 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d9ef      	bls.n	8004f08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f28:	480d      	ldr	r0, [pc, #52]	@ (8004f60 <prvInitialiseTaskLists+0x64>)
 8004f2a:	f7ff fb2a 	bl	8004582 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f2e:	480d      	ldr	r0, [pc, #52]	@ (8004f64 <prvInitialiseTaskLists+0x68>)
 8004f30:	f7ff fb27 	bl	8004582 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f34:	480c      	ldr	r0, [pc, #48]	@ (8004f68 <prvInitialiseTaskLists+0x6c>)
 8004f36:	f7ff fb24 	bl	8004582 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f3a:	480c      	ldr	r0, [pc, #48]	@ (8004f6c <prvInitialiseTaskLists+0x70>)
 8004f3c:	f7ff fb21 	bl	8004582 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f40:	480b      	ldr	r0, [pc, #44]	@ (8004f70 <prvInitialiseTaskLists+0x74>)
 8004f42:	f7ff fb1e 	bl	8004582 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <prvInitialiseTaskLists+0x78>)
 8004f48:	4a05      	ldr	r2, [pc, #20]	@ (8004f60 <prvInitialiseTaskLists+0x64>)
 8004f4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <prvInitialiseTaskLists+0x7c>)
 8004f4e:	4a05      	ldr	r2, [pc, #20]	@ (8004f64 <prvInitialiseTaskLists+0x68>)
 8004f50:	601a      	str	r2, [r3, #0]
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	200006d0 	.word	0x200006d0
 8004f60:	2000075c 	.word	0x2000075c
 8004f64:	20000770 	.word	0x20000770
 8004f68:	2000078c 	.word	0x2000078c
 8004f6c:	200007a0 	.word	0x200007a0
 8004f70:	200007b8 	.word	0x200007b8
 8004f74:	20000784 	.word	0x20000784
 8004f78:	20000788 	.word	0x20000788

08004f7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f82:	e019      	b.n	8004fb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f84:	f000 fa30 	bl	80053e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f88:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <prvCheckTasksWaitingTermination+0x50>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fb7e 	bl	8004696 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <prvCheckTasksWaitingTermination+0x54>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd0 <prvCheckTasksWaitingTermination+0x54>)
 8004fa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <prvCheckTasksWaitingTermination+0x58>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd4 <prvCheckTasksWaitingTermination+0x58>)
 8004fac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fae:	f000 fa4d 	bl	800544c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f810 	bl	8004fd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fb8:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <prvCheckTasksWaitingTermination+0x58>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e1      	bne.n	8004f84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	200007a0 	.word	0x200007a0
 8004fd0:	200007cc 	.word	0x200007cc
 8004fd4:	200007b4 	.word	0x200007b4

08004fd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d108      	bne.n	8004ffc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fba8 	bl	8005744 <vPortFree>
				vPortFree( pxTCB );
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fba5 	bl	8005744 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ffa:	e019      	b.n	8005030 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005002:	2b01      	cmp	r3, #1
 8005004:	d103      	bne.n	800500e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fb9c 	bl	8005744 <vPortFree>
	}
 800500c:	e010      	b.n	8005030 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005014:	2b02      	cmp	r3, #2
 8005016:	d00b      	beq.n	8005030 <prvDeleteTCB+0x58>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60fb      	str	r3, [r7, #12]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <prvDeleteTCB+0x54>
	}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800503e:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <prvResetNextTaskUnblockTime+0x38>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005048:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <prvResetNextTaskUnblockTime+0x3c>)
 800504a:	f04f 32ff 	mov.w	r2, #4294967295
 800504e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005050:	e008      	b.n	8005064 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <prvResetNextTaskUnblockTime+0x38>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <prvResetNextTaskUnblockTime+0x3c>)
 8005062:	6013      	str	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20000784 	.word	0x20000784
 8005074:	200007ec 	.word	0x200007ec

08005078 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800507e:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <xTaskGetSchedulerState+0x34>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005086:	2301      	movs	r3, #1
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	e008      	b.n	800509e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508c:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <xTaskGetSchedulerState+0x38>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005094:	2302      	movs	r3, #2
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	e001      	b.n	800509e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800509a:	2300      	movs	r3, #0
 800509c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800509e:	687b      	ldr	r3, [r7, #4]
	}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	200007d8 	.word	0x200007d8
 80050b0:	200007f4 	.word	0x200007f4

080050b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050be:	4b29      	ldr	r3, [pc, #164]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c4:	4b28      	ldr	r3, [pc, #160]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fae3 	bl	8004696 <uxListRemove>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050d6:	4b24      	ldr	r3, [pc, #144]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	2201      	movs	r2, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4013      	ands	r3, r2
 80050ea:	4a20      	ldr	r2, [pc, #128]	@ (800516c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d10a      	bne.n	800510c <prvAddCurrentTaskToDelayedList+0x58>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	481a      	ldr	r0, [pc, #104]	@ (8005170 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005106:	f7ff fa69 	bl	80045dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800510a:	e026      	b.n	800515a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005114:	4b14      	ldr	r3, [pc, #80]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	429a      	cmp	r2, r3
 8005122:	d209      	bcs.n	8005138 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005124:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b0f      	ldr	r3, [pc, #60]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7ff fa77 	bl	8004624 <vListInsert>
}
 8005136:	e010      	b.n	800515a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005138:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xc4>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b0a      	ldr	r3, [pc, #40]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f7ff fa6d 	bl	8004624 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800514a:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <prvAddCurrentTaskToDelayedList+0xc8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	d202      	bcs.n	800515a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005154:	4a09      	ldr	r2, [pc, #36]	@ (800517c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6013      	str	r3, [r2, #0]
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	200007d0 	.word	0x200007d0
 8005168:	200006cc 	.word	0x200006cc
 800516c:	200007d4 	.word	0x200007d4
 8005170:	200007b8 	.word	0x200007b8
 8005174:	20000788 	.word	0x20000788
 8005178:	20000784 	.word	0x20000784
 800517c:	200007ec 	.word	0x200007ec

08005180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3b04      	subs	r3, #4
 8005190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3b04      	subs	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f023 0201 	bic.w	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b04      	subs	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051b0:	4a0c      	ldr	r2, [pc, #48]	@ (80051e4 <pxPortInitialiseStack+0x64>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b14      	subs	r3, #20
 80051ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3b04      	subs	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f06f 0202 	mvn.w	r2, #2
 80051ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3b20      	subs	r3, #32
 80051d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	080051e9 	.word	0x080051e9

080051e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051f2:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <prvTaskExitError+0x58>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d00b      	beq.n	8005214 <prvTaskExitError+0x2c>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <prvTaskExitError+0x28>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60bb      	str	r3, [r7, #8]
}
 8005226:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005228:	bf00      	nop
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0fc      	beq.n	800522a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	2000000c 	.word	0x2000000c
	...

08005250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <pxCurrentTCBConst2>)
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6808      	ldr	r0, [r1, #0]
 8005256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	f380 8809 	msr	PSP, r0
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8811 	msr	BASEPRI, r0
 800526a:	4770      	bx	lr
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst2>:
 8005270:	200006cc 	.word	0x200006cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005278:	4808      	ldr	r0, [pc, #32]	@ (800529c <prvPortStartFirstTask+0x24>)
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f380 8808 	msr	MSP, r0
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8814 	msr	CONTROL, r0
 800528a:	b662      	cpsie	i
 800528c:	b661      	cpsie	f
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	df00      	svc	0
 8005298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800529a:	bf00      	nop
 800529c:	e000ed08 	.word	0xe000ed08

080052a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052a6:	4b47      	ldr	r3, [pc, #284]	@ (80053c4 <xPortStartScheduler+0x124>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a47      	ldr	r2, [pc, #284]	@ (80053c8 <xPortStartScheduler+0x128>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d10b      	bne.n	80052c8 <xPortStartScheduler+0x28>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	613b      	str	r3, [r7, #16]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052c8:	4b3e      	ldr	r3, [pc, #248]	@ (80053c4 <xPortStartScheduler+0x124>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3f      	ldr	r2, [pc, #252]	@ (80053cc <xPortStartScheduler+0x12c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10b      	bne.n	80052ea <xPortStartScheduler+0x4a>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	60fb      	str	r3, [r7, #12]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052ea:	4b39      	ldr	r3, [pc, #228]	@ (80053d0 <xPortStartScheduler+0x130>)
 80052ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	22ff      	movs	r2, #255	@ 0xff
 80052fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800530c:	b2da      	uxtb	r2, r3
 800530e:	4b31      	ldr	r3, [pc, #196]	@ (80053d4 <xPortStartScheduler+0x134>)
 8005310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005312:	4b31      	ldr	r3, [pc, #196]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005314:	2207      	movs	r2, #7
 8005316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005318:	e009      	b.n	800532e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800531a:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <xPortStartScheduler+0x138>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3b01      	subs	r3, #1
 8005320:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005336:	2b80      	cmp	r3, #128	@ 0x80
 8005338:	d0ef      	beq.n	800531a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800533a:	4b27      	ldr	r3, [pc, #156]	@ (80053d8 <xPortStartScheduler+0x138>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f1c3 0307 	rsb	r3, r3, #7
 8005342:	2b04      	cmp	r3, #4
 8005344:	d00b      	beq.n	800535e <xPortStartScheduler+0xbe>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60bb      	str	r3, [r7, #8]
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800535e:	4b1e      	ldr	r3, [pc, #120]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	4a1c      	ldr	r2, [pc, #112]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <xPortStartScheduler+0x138>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005370:	4a19      	ldr	r2, [pc, #100]	@ (80053d8 <xPortStartScheduler+0x138>)
 8005372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800537c:	4b17      	ldr	r3, [pc, #92]	@ (80053dc <xPortStartScheduler+0x13c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a16      	ldr	r2, [pc, #88]	@ (80053dc <xPortStartScheduler+0x13c>)
 8005382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005388:	4b14      	ldr	r3, [pc, #80]	@ (80053dc <xPortStartScheduler+0x13c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a13      	ldr	r2, [pc, #76]	@ (80053dc <xPortStartScheduler+0x13c>)
 800538e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005394:	f000 f8da 	bl	800554c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005398:	4b11      	ldr	r3, [pc, #68]	@ (80053e0 <xPortStartScheduler+0x140>)
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800539e:	f000 f8f9 	bl	8005594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053a2:	4b10      	ldr	r3, [pc, #64]	@ (80053e4 <xPortStartScheduler+0x144>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a0f      	ldr	r2, [pc, #60]	@ (80053e4 <xPortStartScheduler+0x144>)
 80053a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80053ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053ae:	f7ff ff63 	bl	8005278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053b2:	f7ff fd2f 	bl	8004e14 <vTaskSwitchContext>
	prvTaskExitError();
 80053b6:	f7ff ff17 	bl	80051e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	e000ed00 	.word	0xe000ed00
 80053c8:	410fc271 	.word	0x410fc271
 80053cc:	410fc270 	.word	0x410fc270
 80053d0:	e000e400 	.word	0xe000e400
 80053d4:	200007f8 	.word	0x200007f8
 80053d8:	200007fc 	.word	0x200007fc
 80053dc:	e000ed20 	.word	0xe000ed20
 80053e0:	2000000c 	.word	0x2000000c
 80053e4:	e000ef34 	.word	0xe000ef34

080053e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
}
 8005400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005402:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <vPortEnterCritical+0x5c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	4a0e      	ldr	r2, [pc, #56]	@ (8005444 <vPortEnterCritical+0x5c>)
 800540a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800540c:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <vPortEnterCritical+0x5c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d110      	bne.n	8005436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <vPortEnterCritical+0x60>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <vPortEnterCritical+0x4e>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	603b      	str	r3, [r7, #0]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <vPortEnterCritical+0x4a>
	}
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005452:	4b12      	ldr	r3, [pc, #72]	@ (800549c <vPortExitCritical+0x50>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <vPortExitCritical+0x26>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	607b      	str	r3, [r7, #4]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005472:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <vPortExitCritical+0x50>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	4a08      	ldr	r2, [pc, #32]	@ (800549c <vPortExitCritical+0x50>)
 800547a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800547c:	4b07      	ldr	r3, [pc, #28]	@ (800549c <vPortExitCritical+0x50>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d105      	bne.n	8005490 <vPortExitCritical+0x44>
 8005484:	2300      	movs	r3, #0
 8005486:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800548e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	2000000c 	.word	0x2000000c

080054a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054a0:	f3ef 8009 	mrs	r0, PSP
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <pxCurrentTCBConst>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f01e 0f10 	tst.w	lr, #16
 80054b0:	bf08      	it	eq
 80054b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	6010      	str	r0, [r2, #0]
 80054bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054c4:	f380 8811 	msr	BASEPRI, r0
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f7ff fca0 	bl	8004e14 <vTaskSwitchContext>
 80054d4:	f04f 0000 	mov.w	r0, #0
 80054d8:	f380 8811 	msr	BASEPRI, r0
 80054dc:	bc09      	pop	{r0, r3}
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	6808      	ldr	r0, [r1, #0]
 80054e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e6:	f01e 0f10 	tst.w	lr, #16
 80054ea:	bf08      	it	eq
 80054ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054f0:	f380 8809 	msr	PSP, r0
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	f3af 8000 	nop.w

08005500 <pxCurrentTCBConst>:
 8005500:	200006cc 	.word	0x200006cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop

08005508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005522:	f7ff fbbd 	bl	8004ca0 <xTaskIncrementTick>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800552c:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <xPortSysTickHandler+0x40>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005556:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <vPortSetupTimerInterrupt+0x38>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800555c:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <vPortSetupTimerInterrupt+0x3c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <vPortSetupTimerInterrupt+0x40>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <vPortSetupTimerInterrupt+0x44>)
 800556a:	3b01      	subs	r3, #1
 800556c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800556e:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010
 8005584:	e000e018 	.word	0xe000e018
 8005588:	20000000 	.word	0x20000000
 800558c:	10624dd3 	.word	0x10624dd3
 8005590:	e000e014 	.word	0xe000e014

08005594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80055a4 <vPortEnableVFP+0x10>
 8005598:	6801      	ldr	r1, [r0, #0]
 800559a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800559e:	6001      	str	r1, [r0, #0]
 80055a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055a2:	bf00      	nop
 80055a4:	e000ed88 	.word	0xe000ed88

080055a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	@ 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055b4:	f7ff fac8 	bl	8004b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055b8:	4b5c      	ldr	r3, [pc, #368]	@ (800572c <pvPortMalloc+0x184>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055c0:	f000 f924 	bl	800580c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005730 <pvPortMalloc+0x188>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f040 8095 	bne.w	80056fc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01e      	beq.n	8005616 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055d8:	2208      	movs	r2, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4413      	add	r3, r2
 80055de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d015      	beq.n	8005616 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f023 0307 	bic.w	r3, r3, #7
 80055f0:	3308      	adds	r3, #8
 80055f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <pvPortMalloc+0x6e>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	617b      	str	r3, [r7, #20]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d06f      	beq.n	80056fc <pvPortMalloc+0x154>
 800561c:	4b45      	ldr	r3, [pc, #276]	@ (8005734 <pvPortMalloc+0x18c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d86a      	bhi.n	80056fc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005626:	4b44      	ldr	r3, [pc, #272]	@ (8005738 <pvPortMalloc+0x190>)
 8005628:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800562a:	4b43      	ldr	r3, [pc, #268]	@ (8005738 <pvPortMalloc+0x190>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005630:	e004      	b.n	800563c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d903      	bls.n	800564e <pvPortMalloc+0xa6>
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f1      	bne.n	8005632 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800564e:	4b37      	ldr	r3, [pc, #220]	@ (800572c <pvPortMalloc+0x184>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005654:	429a      	cmp	r2, r3
 8005656:	d051      	beq.n	80056fc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2208      	movs	r2, #8
 800565e:	4413      	add	r3, r2
 8005660:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	2308      	movs	r3, #8
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	429a      	cmp	r2, r3
 8005678:	d920      	bls.n	80056bc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800567a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <pvPortMalloc+0xfc>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	613b      	str	r3, [r7, #16]
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056b6:	69b8      	ldr	r0, [r7, #24]
 80056b8:	f000 f90a 	bl	80058d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005734 <pvPortMalloc+0x18c>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005734 <pvPortMalloc+0x18c>)
 80056c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005734 <pvPortMalloc+0x18c>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <pvPortMalloc+0x194>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d203      	bcs.n	80056de <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056d6:	4b17      	ldr	r3, [pc, #92]	@ (8005734 <pvPortMalloc+0x18c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a18      	ldr	r2, [pc, #96]	@ (800573c <pvPortMalloc+0x194>)
 80056dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	4b13      	ldr	r3, [pc, #76]	@ (8005730 <pvPortMalloc+0x188>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056f2:	4b13      	ldr	r3, [pc, #76]	@ (8005740 <pvPortMalloc+0x198>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	4a11      	ldr	r2, [pc, #68]	@ (8005740 <pvPortMalloc+0x198>)
 80056fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056fc:	f7ff fa32 	bl	8004b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <pvPortMalloc+0x17a>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60fb      	str	r3, [r7, #12]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <pvPortMalloc+0x176>
	return pvReturn;
 8005722:	69fb      	ldr	r3, [r7, #28]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3728      	adds	r7, #40	@ 0x28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	200013c0 	.word	0x200013c0
 8005730:	200013d4 	.word	0x200013d4
 8005734:	200013c4 	.word	0x200013c4
 8005738:	200013b8 	.word	0x200013b8
 800573c:	200013c8 	.word	0x200013c8
 8005740:	200013cc 	.word	0x200013cc

08005744 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d04f      	beq.n	80057f6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005756:	2308      	movs	r3, #8
 8005758:	425b      	negs	r3, r3
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	4b25      	ldr	r3, [pc, #148]	@ (8005800 <vPortFree+0xbc>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <vPortFree+0x46>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60fb      	str	r3, [r7, #12]
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	e7fd      	b.n	8005786 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <vPortFree+0x66>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	60bb      	str	r3, [r7, #8]
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	e7fd      	b.n	80057a6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	4b14      	ldr	r3, [pc, #80]	@ (8005800 <vPortFree+0xbc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01e      	beq.n	80057f6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11a      	bne.n	80057f6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005800 <vPortFree+0xbc>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	401a      	ands	r2, r3
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057d0:	f7ff f9ba 	bl	8004b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <vPortFree+0xc0>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4413      	add	r3, r2
 80057de:	4a09      	ldr	r2, [pc, #36]	@ (8005804 <vPortFree+0xc0>)
 80057e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057e2:	6938      	ldr	r0, [r7, #16]
 80057e4:	f000 f874 	bl	80058d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057e8:	4b07      	ldr	r3, [pc, #28]	@ (8005808 <vPortFree+0xc4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3301      	adds	r3, #1
 80057ee:	4a06      	ldr	r2, [pc, #24]	@ (8005808 <vPortFree+0xc4>)
 80057f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057f2:	f7ff f9b7 	bl	8004b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057f6:	bf00      	nop
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	200013d4 	.word	0x200013d4
 8005804:	200013c4 	.word	0x200013c4
 8005808:	200013d0 	.word	0x200013d0

0800580c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005812:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005816:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005818:	4b27      	ldr	r3, [pc, #156]	@ (80058b8 <prvHeapInit+0xac>)
 800581a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00c      	beq.n	8005840 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3307      	adds	r3, #7
 800582a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0307 	bic.w	r3, r3, #7
 8005832:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	4a1f      	ldr	r2, [pc, #124]	@ (80058b8 <prvHeapInit+0xac>)
 800583c:	4413      	add	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005844:	4a1d      	ldr	r2, [pc, #116]	@ (80058bc <prvHeapInit+0xb0>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800584a:	4b1c      	ldr	r3, [pc, #112]	@ (80058bc <prvHeapInit+0xb0>)
 800584c:	2200      	movs	r2, #0
 800584e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4413      	add	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005858:	2208      	movs	r2, #8
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0307 	bic.w	r3, r3, #7
 8005866:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4a15      	ldr	r2, [pc, #84]	@ (80058c0 <prvHeapInit+0xb4>)
 800586c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800586e:	4b14      	ldr	r3, [pc, #80]	@ (80058c0 <prvHeapInit+0xb4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005876:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <prvHeapInit+0xb4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800588c:	4b0c      	ldr	r3, [pc, #48]	@ (80058c0 <prvHeapInit+0xb4>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <prvHeapInit+0xb8>)
 800589a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a09      	ldr	r2, [pc, #36]	@ (80058c8 <prvHeapInit+0xbc>)
 80058a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058a4:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <prvHeapInit+0xc0>)
 80058a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058aa:	601a      	str	r2, [r3, #0]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20000800 	.word	0x20000800
 80058bc:	200013b8 	.word	0x200013b8
 80058c0:	200013c0 	.word	0x200013c0
 80058c4:	200013c8 	.word	0x200013c8
 80058c8:	200013c4 	.word	0x200013c4
 80058cc:	200013d4 	.word	0x200013d4

080058d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058d8:	4b28      	ldr	r3, [pc, #160]	@ (800597c <prvInsertBlockIntoFreeList+0xac>)
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e002      	b.n	80058e4 <prvInsertBlockIntoFreeList+0x14>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d8f7      	bhi.n	80058de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d108      	bne.n	8005912 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	441a      	add	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	441a      	add	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d118      	bne.n	8005958 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b15      	ldr	r3, [pc, #84]	@ (8005980 <prvInsertBlockIntoFreeList+0xb0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d00d      	beq.n	800594e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	441a      	add	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e008      	b.n	8005960 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800594e:	4b0c      	ldr	r3, [pc, #48]	@ (8005980 <prvInsertBlockIntoFreeList+0xb0>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e003      	b.n	8005960 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d002      	beq.n	800596e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	200013b8 	.word	0x200013b8
 8005980:	200013c0 	.word	0x200013c0

08005984 <std>:
 8005984:	2300      	movs	r3, #0
 8005986:	b510      	push	{r4, lr}
 8005988:	4604      	mov	r4, r0
 800598a:	e9c0 3300 	strd	r3, r3, [r0]
 800598e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005992:	6083      	str	r3, [r0, #8]
 8005994:	8181      	strh	r1, [r0, #12]
 8005996:	6643      	str	r3, [r0, #100]	@ 0x64
 8005998:	81c2      	strh	r2, [r0, #14]
 800599a:	6183      	str	r3, [r0, #24]
 800599c:	4619      	mov	r1, r3
 800599e:	2208      	movs	r2, #8
 80059a0:	305c      	adds	r0, #92	@ 0x5c
 80059a2:	f000 fa2d 	bl	8005e00 <memset>
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <std+0x58>)
 80059a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80059aa:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <std+0x5c>)
 80059ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <std+0x60>)
 80059b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059b2:	4b0d      	ldr	r3, [pc, #52]	@ (80059e8 <std+0x64>)
 80059b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <std+0x68>)
 80059b8:	6224      	str	r4, [r4, #32]
 80059ba:	429c      	cmp	r4, r3
 80059bc:	d006      	beq.n	80059cc <std+0x48>
 80059be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059c2:	4294      	cmp	r4, r2
 80059c4:	d002      	beq.n	80059cc <std+0x48>
 80059c6:	33d0      	adds	r3, #208	@ 0xd0
 80059c8:	429c      	cmp	r4, r3
 80059ca:	d105      	bne.n	80059d8 <std+0x54>
 80059cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d4:	f000 ba8c 	b.w	8005ef0 <__retarget_lock_init_recursive>
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	bf00      	nop
 80059dc:	08005c51 	.word	0x08005c51
 80059e0:	08005c73 	.word	0x08005c73
 80059e4:	08005cab 	.word	0x08005cab
 80059e8:	08005ccf 	.word	0x08005ccf
 80059ec:	200013d8 	.word	0x200013d8

080059f0 <stdio_exit_handler>:
 80059f0:	4a02      	ldr	r2, [pc, #8]	@ (80059fc <stdio_exit_handler+0xc>)
 80059f2:	4903      	ldr	r1, [pc, #12]	@ (8005a00 <stdio_exit_handler+0x10>)
 80059f4:	4803      	ldr	r0, [pc, #12]	@ (8005a04 <stdio_exit_handler+0x14>)
 80059f6:	f000 b869 	b.w	8005acc <_fwalk_sglue>
 80059fa:	bf00      	nop
 80059fc:	20000010 	.word	0x20000010
 8005a00:	08006a5d 	.word	0x08006a5d
 8005a04:	20000020 	.word	0x20000020

08005a08 <cleanup_stdio>:
 8005a08:	6841      	ldr	r1, [r0, #4]
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <cleanup_stdio+0x34>)
 8005a0c:	4299      	cmp	r1, r3
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	4604      	mov	r4, r0
 8005a12:	d001      	beq.n	8005a18 <cleanup_stdio+0x10>
 8005a14:	f001 f822 	bl	8006a5c <_fflush_r>
 8005a18:	68a1      	ldr	r1, [r4, #8]
 8005a1a:	4b09      	ldr	r3, [pc, #36]	@ (8005a40 <cleanup_stdio+0x38>)
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	d002      	beq.n	8005a26 <cleanup_stdio+0x1e>
 8005a20:	4620      	mov	r0, r4
 8005a22:	f001 f81b 	bl	8006a5c <_fflush_r>
 8005a26:	68e1      	ldr	r1, [r4, #12]
 8005a28:	4b06      	ldr	r3, [pc, #24]	@ (8005a44 <cleanup_stdio+0x3c>)
 8005a2a:	4299      	cmp	r1, r3
 8005a2c:	d004      	beq.n	8005a38 <cleanup_stdio+0x30>
 8005a2e:	4620      	mov	r0, r4
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	f001 b812 	b.w	8006a5c <_fflush_r>
 8005a38:	bd10      	pop	{r4, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200013d8 	.word	0x200013d8
 8005a40:	20001440 	.word	0x20001440
 8005a44:	200014a8 	.word	0x200014a8

08005a48 <global_stdio_init.part.0>:
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <global_stdio_init.part.0+0x30>)
 8005a4c:	4c0b      	ldr	r4, [pc, #44]	@ (8005a7c <global_stdio_init.part.0+0x34>)
 8005a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a80 <global_stdio_init.part.0+0x38>)
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	4620      	mov	r0, r4
 8005a54:	2200      	movs	r2, #0
 8005a56:	2104      	movs	r1, #4
 8005a58:	f7ff ff94 	bl	8005984 <std>
 8005a5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a60:	2201      	movs	r2, #1
 8005a62:	2109      	movs	r1, #9
 8005a64:	f7ff ff8e 	bl	8005984 <std>
 8005a68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a72:	2112      	movs	r1, #18
 8005a74:	f7ff bf86 	b.w	8005984 <std>
 8005a78:	20001510 	.word	0x20001510
 8005a7c:	200013d8 	.word	0x200013d8
 8005a80:	080059f1 	.word	0x080059f1

08005a84 <__sfp_lock_acquire>:
 8005a84:	4801      	ldr	r0, [pc, #4]	@ (8005a8c <__sfp_lock_acquire+0x8>)
 8005a86:	f000 ba34 	b.w	8005ef2 <__retarget_lock_acquire_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	20001519 	.word	0x20001519

08005a90 <__sfp_lock_release>:
 8005a90:	4801      	ldr	r0, [pc, #4]	@ (8005a98 <__sfp_lock_release+0x8>)
 8005a92:	f000 ba2f 	b.w	8005ef4 <__retarget_lock_release_recursive>
 8005a96:	bf00      	nop
 8005a98:	20001519 	.word	0x20001519

08005a9c <__sinit>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	f7ff fff0 	bl	8005a84 <__sfp_lock_acquire>
 8005aa4:	6a23      	ldr	r3, [r4, #32]
 8005aa6:	b11b      	cbz	r3, 8005ab0 <__sinit+0x14>
 8005aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aac:	f7ff bff0 	b.w	8005a90 <__sfp_lock_release>
 8005ab0:	4b04      	ldr	r3, [pc, #16]	@ (8005ac4 <__sinit+0x28>)
 8005ab2:	6223      	str	r3, [r4, #32]
 8005ab4:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <__sinit+0x2c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f5      	bne.n	8005aa8 <__sinit+0xc>
 8005abc:	f7ff ffc4 	bl	8005a48 <global_stdio_init.part.0>
 8005ac0:	e7f2      	b.n	8005aa8 <__sinit+0xc>
 8005ac2:	bf00      	nop
 8005ac4:	08005a09 	.word	0x08005a09
 8005ac8:	20001510 	.word	0x20001510

08005acc <_fwalk_sglue>:
 8005acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	4688      	mov	r8, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005adc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ae0:	d505      	bpl.n	8005aee <_fwalk_sglue+0x22>
 8005ae2:	6824      	ldr	r4, [r4, #0]
 8005ae4:	2c00      	cmp	r4, #0
 8005ae6:	d1f7      	bne.n	8005ad8 <_fwalk_sglue+0xc>
 8005ae8:	4630      	mov	r0, r6
 8005aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aee:	89ab      	ldrh	r3, [r5, #12]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d907      	bls.n	8005b04 <_fwalk_sglue+0x38>
 8005af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005af8:	3301      	adds	r3, #1
 8005afa:	d003      	beq.n	8005b04 <_fwalk_sglue+0x38>
 8005afc:	4629      	mov	r1, r5
 8005afe:	4638      	mov	r0, r7
 8005b00:	47c0      	blx	r8
 8005b02:	4306      	orrs	r6, r0
 8005b04:	3568      	adds	r5, #104	@ 0x68
 8005b06:	e7e9      	b.n	8005adc <_fwalk_sglue+0x10>

08005b08 <iprintf>:
 8005b08:	b40f      	push	{r0, r1, r2, r3}
 8005b0a:	b507      	push	{r0, r1, r2, lr}
 8005b0c:	4906      	ldr	r1, [pc, #24]	@ (8005b28 <iprintf+0x20>)
 8005b0e:	ab04      	add	r3, sp, #16
 8005b10:	6808      	ldr	r0, [r1, #0]
 8005b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b16:	6881      	ldr	r1, [r0, #8]
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	f000 fc75 	bl	8006408 <_vfiprintf_r>
 8005b1e:	b003      	add	sp, #12
 8005b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b24:	b004      	add	sp, #16
 8005b26:	4770      	bx	lr
 8005b28:	2000001c 	.word	0x2000001c

08005b2c <_puts_r>:
 8005b2c:	6a03      	ldr	r3, [r0, #32]
 8005b2e:	b570      	push	{r4, r5, r6, lr}
 8005b30:	6884      	ldr	r4, [r0, #8]
 8005b32:	4605      	mov	r5, r0
 8005b34:	460e      	mov	r6, r1
 8005b36:	b90b      	cbnz	r3, 8005b3c <_puts_r+0x10>
 8005b38:	f7ff ffb0 	bl	8005a9c <__sinit>
 8005b3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b3e:	07db      	lsls	r3, r3, #31
 8005b40:	d405      	bmi.n	8005b4e <_puts_r+0x22>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	0598      	lsls	r0, r3, #22
 8005b46:	d402      	bmi.n	8005b4e <_puts_r+0x22>
 8005b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b4a:	f000 f9d2 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	0719      	lsls	r1, r3, #28
 8005b52:	d502      	bpl.n	8005b5a <_puts_r+0x2e>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d135      	bne.n	8005bc6 <_puts_r+0x9a>
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 f8f9 	bl	8005d54 <__swsetup_r>
 8005b62:	b380      	cbz	r0, 8005bc6 <_puts_r+0x9a>
 8005b64:	f04f 35ff 	mov.w	r5, #4294967295
 8005b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b6a:	07da      	lsls	r2, r3, #31
 8005b6c:	d405      	bmi.n	8005b7a <_puts_r+0x4e>
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	059b      	lsls	r3, r3, #22
 8005b72:	d402      	bmi.n	8005b7a <_puts_r+0x4e>
 8005b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b76:	f000 f9bd 	bl	8005ef4 <__retarget_lock_release_recursive>
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da04      	bge.n	8005b8c <_puts_r+0x60>
 8005b82:	69a2      	ldr	r2, [r4, #24]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	dc17      	bgt.n	8005bb8 <_puts_r+0x8c>
 8005b88:	290a      	cmp	r1, #10
 8005b8a:	d015      	beq.n	8005bb8 <_puts_r+0x8c>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	7019      	strb	r1, [r3, #0]
 8005b94:	68a3      	ldr	r3, [r4, #8]
 8005b96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	60a3      	str	r3, [r4, #8]
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	d1ed      	bne.n	8005b7e <_puts_r+0x52>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	da11      	bge.n	8005bca <_puts_r+0x9e>
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	210a      	movs	r1, #10
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 f893 	bl	8005cd6 <__swbuf_r>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d0d7      	beq.n	8005b64 <_puts_r+0x38>
 8005bb4:	250a      	movs	r5, #10
 8005bb6:	e7d7      	b.n	8005b68 <_puts_r+0x3c>
 8005bb8:	4622      	mov	r2, r4
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f000 f88b 	bl	8005cd6 <__swbuf_r>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d1e7      	bne.n	8005b94 <_puts_r+0x68>
 8005bc4:	e7ce      	b.n	8005b64 <_puts_r+0x38>
 8005bc6:	3e01      	subs	r6, #1
 8005bc8:	e7e4      	b.n	8005b94 <_puts_r+0x68>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	6022      	str	r2, [r4, #0]
 8005bd0:	220a      	movs	r2, #10
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	e7ee      	b.n	8005bb4 <_puts_r+0x88>
	...

08005bd8 <puts>:
 8005bd8:	4b02      	ldr	r3, [pc, #8]	@ (8005be4 <puts+0xc>)
 8005bda:	4601      	mov	r1, r0
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	f7ff bfa5 	b.w	8005b2c <_puts_r>
 8005be2:	bf00      	nop
 8005be4:	2000001c 	.word	0x2000001c

08005be8 <sniprintf>:
 8005be8:	b40c      	push	{r2, r3}
 8005bea:	b530      	push	{r4, r5, lr}
 8005bec:	4b17      	ldr	r3, [pc, #92]	@ (8005c4c <sniprintf+0x64>)
 8005bee:	1e0c      	subs	r4, r1, #0
 8005bf0:	681d      	ldr	r5, [r3, #0]
 8005bf2:	b09d      	sub	sp, #116	@ 0x74
 8005bf4:	da08      	bge.n	8005c08 <sniprintf+0x20>
 8005bf6:	238b      	movs	r3, #139	@ 0x8b
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfe:	b01d      	add	sp, #116	@ 0x74
 8005c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c04:	b002      	add	sp, #8
 8005c06:	4770      	bx	lr
 8005c08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c10:	bf14      	ite	ne
 8005c12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c16:	4623      	moveq	r3, r4
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	9307      	str	r3, [sp, #28]
 8005c1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c20:	9002      	str	r0, [sp, #8]
 8005c22:	9006      	str	r0, [sp, #24]
 8005c24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c2a:	ab21      	add	r3, sp, #132	@ 0x84
 8005c2c:	a902      	add	r1, sp, #8
 8005c2e:	4628      	mov	r0, r5
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	f000 fac3 	bl	80061bc <_svfiprintf_r>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	bfbc      	itt	lt
 8005c3a:	238b      	movlt	r3, #139	@ 0x8b
 8005c3c:	602b      	strlt	r3, [r5, #0]
 8005c3e:	2c00      	cmp	r4, #0
 8005c40:	d0dd      	beq.n	8005bfe <sniprintf+0x16>
 8005c42:	9b02      	ldr	r3, [sp, #8]
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e7d9      	b.n	8005bfe <sniprintf+0x16>
 8005c4a:	bf00      	nop
 8005c4c:	2000001c 	.word	0x2000001c

08005c50 <__sread>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	460c      	mov	r4, r1
 8005c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c58:	f000 f8fc 	bl	8005e54 <_read_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	bfab      	itete	ge
 8005c60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c62:	89a3      	ldrhlt	r3, [r4, #12]
 8005c64:	181b      	addge	r3, r3, r0
 8005c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c6a:	bfac      	ite	ge
 8005c6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c6e:	81a3      	strhlt	r3, [r4, #12]
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <__swrite>:
 8005c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c76:	461f      	mov	r7, r3
 8005c78:	898b      	ldrh	r3, [r1, #12]
 8005c7a:	05db      	lsls	r3, r3, #23
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	4616      	mov	r6, r2
 8005c82:	d505      	bpl.n	8005c90 <__swrite+0x1e>
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	2302      	movs	r3, #2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f000 f8d0 	bl	8005e30 <_lseek_r>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	f000 b8e7 	b.w	8005e78 <_write_r>

08005caa <__sseek>:
 8005caa:	b510      	push	{r4, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb2:	f000 f8bd 	bl	8005e30 <_lseek_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	bf15      	itete	ne
 8005cbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cc6:	81a3      	strheq	r3, [r4, #12]
 8005cc8:	bf18      	it	ne
 8005cca:	81a3      	strhne	r3, [r4, #12]
 8005ccc:	bd10      	pop	{r4, pc}

08005cce <__sclose>:
 8005cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd2:	f000 b89d 	b.w	8005e10 <_close_r>

08005cd6 <__swbuf_r>:
 8005cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd8:	460e      	mov	r6, r1
 8005cda:	4614      	mov	r4, r2
 8005cdc:	4605      	mov	r5, r0
 8005cde:	b118      	cbz	r0, 8005ce8 <__swbuf_r+0x12>
 8005ce0:	6a03      	ldr	r3, [r0, #32]
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <__swbuf_r+0x12>
 8005ce4:	f7ff feda 	bl	8005a9c <__sinit>
 8005ce8:	69a3      	ldr	r3, [r4, #24]
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	071a      	lsls	r2, r3, #28
 8005cf0:	d501      	bpl.n	8005cf6 <__swbuf_r+0x20>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	b943      	cbnz	r3, 8005d08 <__swbuf_r+0x32>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 f82b 	bl	8005d54 <__swsetup_r>
 8005cfe:	b118      	cbz	r0, 8005d08 <__swbuf_r+0x32>
 8005d00:	f04f 37ff 	mov.w	r7, #4294967295
 8005d04:	4638      	mov	r0, r7
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	6922      	ldr	r2, [r4, #16]
 8005d0c:	1a98      	subs	r0, r3, r2
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	b2f6      	uxtb	r6, r6
 8005d12:	4283      	cmp	r3, r0
 8005d14:	4637      	mov	r7, r6
 8005d16:	dc05      	bgt.n	8005d24 <__swbuf_r+0x4e>
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 fe9e 	bl	8006a5c <_fflush_r>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d1ed      	bne.n	8005d00 <__swbuf_r+0x2a>
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	6022      	str	r2, [r4, #0]
 8005d30:	701e      	strb	r6, [r3, #0]
 8005d32:	6962      	ldr	r2, [r4, #20]
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d004      	beq.n	8005d44 <__swbuf_r+0x6e>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	07db      	lsls	r3, r3, #31
 8005d3e:	d5e1      	bpl.n	8005d04 <__swbuf_r+0x2e>
 8005d40:	2e0a      	cmp	r6, #10
 8005d42:	d1df      	bne.n	8005d04 <__swbuf_r+0x2e>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 fe88 	bl	8006a5c <_fflush_r>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d0d9      	beq.n	8005d04 <__swbuf_r+0x2e>
 8005d50:	e7d6      	b.n	8005d00 <__swbuf_r+0x2a>
	...

08005d54 <__swsetup_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4b29      	ldr	r3, [pc, #164]	@ (8005dfc <__swsetup_r+0xa8>)
 8005d58:	4605      	mov	r5, r0
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	b118      	cbz	r0, 8005d68 <__swsetup_r+0x14>
 8005d60:	6a03      	ldr	r3, [r0, #32]
 8005d62:	b90b      	cbnz	r3, 8005d68 <__swsetup_r+0x14>
 8005d64:	f7ff fe9a 	bl	8005a9c <__sinit>
 8005d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6c:	0719      	lsls	r1, r3, #28
 8005d6e:	d422      	bmi.n	8005db6 <__swsetup_r+0x62>
 8005d70:	06da      	lsls	r2, r3, #27
 8005d72:	d407      	bmi.n	8005d84 <__swsetup_r+0x30>
 8005d74:	2209      	movs	r2, #9
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d82:	e033      	b.n	8005dec <__swsetup_r+0x98>
 8005d84:	0758      	lsls	r0, r3, #29
 8005d86:	d512      	bpl.n	8005dae <__swsetup_r+0x5a>
 8005d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d8a:	b141      	cbz	r1, 8005d9e <__swsetup_r+0x4a>
 8005d8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d90:	4299      	cmp	r1, r3
 8005d92:	d002      	beq.n	8005d9a <__swsetup_r+0x46>
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f8bd 	bl	8005f14 <_free_r>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	2300      	movs	r3, #0
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f043 0308 	orr.w	r3, r3, #8
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	b94b      	cbnz	r3, 8005dce <__swsetup_r+0x7a>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc4:	d003      	beq.n	8005dce <__swsetup_r+0x7a>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 fe95 	bl	8006af8 <__smakebuf_r>
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	f013 0201 	ands.w	r2, r3, #1
 8005dd6:	d00a      	beq.n	8005dee <__swsetup_r+0x9a>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	60a2      	str	r2, [r4, #8]
 8005ddc:	6962      	ldr	r2, [r4, #20]
 8005dde:	4252      	negs	r2, r2
 8005de0:	61a2      	str	r2, [r4, #24]
 8005de2:	6922      	ldr	r2, [r4, #16]
 8005de4:	b942      	cbnz	r2, 8005df8 <__swsetup_r+0xa4>
 8005de6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dea:	d1c5      	bne.n	8005d78 <__swsetup_r+0x24>
 8005dec:	bd38      	pop	{r3, r4, r5, pc}
 8005dee:	0799      	lsls	r1, r3, #30
 8005df0:	bf58      	it	pl
 8005df2:	6962      	ldrpl	r2, [r4, #20]
 8005df4:	60a2      	str	r2, [r4, #8]
 8005df6:	e7f4      	b.n	8005de2 <__swsetup_r+0x8e>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e7f7      	b.n	8005dec <__swsetup_r+0x98>
 8005dfc:	2000001c 	.word	0x2000001c

08005e00 <memset>:
 8005e00:	4402      	add	r2, r0
 8005e02:	4603      	mov	r3, r0
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d100      	bne.n	8005e0a <memset+0xa>
 8005e08:	4770      	bx	lr
 8005e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0e:	e7f9      	b.n	8005e04 <memset+0x4>

08005e10 <_close_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d06      	ldr	r5, [pc, #24]	@ (8005e2c <_close_r+0x1c>)
 8005e14:	2300      	movs	r3, #0
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	f7fa ff1f 	bl	8000c5e <_close>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_close_r+0x1a>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_close_r+0x1a>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20001514 	.word	0x20001514

08005e30 <_lseek_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d07      	ldr	r5, [pc, #28]	@ (8005e50 <_lseek_r+0x20>)
 8005e34:	4604      	mov	r4, r0
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fa ff34 	bl	8000cac <_lseek>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_lseek_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_lseek_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20001514 	.word	0x20001514

08005e54 <_read_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d07      	ldr	r5, [pc, #28]	@ (8005e74 <_read_r+0x20>)
 8005e58:	4604      	mov	r4, r0
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fa fec2 	bl	8000bec <_read>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_read_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_read_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	20001514 	.word	0x20001514

08005e78 <_write_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d07      	ldr	r5, [pc, #28]	@ (8005e98 <_write_r+0x20>)
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	4608      	mov	r0, r1
 8005e80:	4611      	mov	r1, r2
 8005e82:	2200      	movs	r2, #0
 8005e84:	602a      	str	r2, [r5, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f7fa fecd 	bl	8000c26 <_write>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_write_r+0x1e>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_write_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	20001514 	.word	0x20001514

08005e9c <__errno>:
 8005e9c:	4b01      	ldr	r3, [pc, #4]	@ (8005ea4 <__errno+0x8>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	2000001c 	.word	0x2000001c

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8005ee0 <__libc_init_array+0x38>)
 8005eac:	4c0d      	ldr	r4, [pc, #52]	@ (8005ee4 <__libc_init_array+0x3c>)
 8005eae:	1b64      	subs	r4, r4, r5
 8005eb0:	10a4      	asrs	r4, r4, #2
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	42a6      	cmp	r6, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8005ee8 <__libc_init_array+0x40>)
 8005eba:	4c0c      	ldr	r4, [pc, #48]	@ (8005eec <__libc_init_array+0x44>)
 8005ebc:	f000 feda 	bl	8006c74 <_init>
 8005ec0:	1b64      	subs	r4, r4, r5
 8005ec2:	10a4      	asrs	r4, r4, #2
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	42a6      	cmp	r6, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed0:	4798      	blx	r3
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eda:	4798      	blx	r3
 8005edc:	3601      	adds	r6, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	08006e3c 	.word	0x08006e3c
 8005ee4:	08006e3c 	.word	0x08006e3c
 8005ee8:	08006e3c 	.word	0x08006e3c
 8005eec:	08006e40 	.word	0x08006e40

08005ef0 <__retarget_lock_init_recursive>:
 8005ef0:	4770      	bx	lr

08005ef2 <__retarget_lock_acquire_recursive>:
 8005ef2:	4770      	bx	lr

08005ef4 <__retarget_lock_release_recursive>:
 8005ef4:	4770      	bx	lr

08005ef6 <memcpy>:
 8005ef6:	440a      	add	r2, r1
 8005ef8:	4291      	cmp	r1, r2
 8005efa:	f100 33ff 	add.w	r3, r0, #4294967295
 8005efe:	d100      	bne.n	8005f02 <memcpy+0xc>
 8005f00:	4770      	bx	lr
 8005f02:	b510      	push	{r4, lr}
 8005f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f0c:	4291      	cmp	r1, r2
 8005f0e:	d1f9      	bne.n	8005f04 <memcpy+0xe>
 8005f10:	bd10      	pop	{r4, pc}
	...

08005f14 <_free_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4605      	mov	r5, r0
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	d041      	beq.n	8005fa0 <_free_r+0x8c>
 8005f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f20:	1f0c      	subs	r4, r1, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bfb8      	it	lt
 8005f26:	18e4      	addlt	r4, r4, r3
 8005f28:	f000 f8e0 	bl	80060ec <__malloc_lock>
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa4 <_free_r+0x90>)
 8005f2e:	6813      	ldr	r3, [r2, #0]
 8005f30:	b933      	cbnz	r3, 8005f40 <_free_r+0x2c>
 8005f32:	6063      	str	r3, [r4, #4]
 8005f34:	6014      	str	r4, [r2, #0]
 8005f36:	4628      	mov	r0, r5
 8005f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f3c:	f000 b8dc 	b.w	80060f8 <__malloc_unlock>
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d908      	bls.n	8005f56 <_free_r+0x42>
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	1821      	adds	r1, r4, r0
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	bf01      	itttt	eq
 8005f4c:	6819      	ldreq	r1, [r3, #0]
 8005f4e:	685b      	ldreq	r3, [r3, #4]
 8005f50:	1809      	addeq	r1, r1, r0
 8005f52:	6021      	streq	r1, [r4, #0]
 8005f54:	e7ed      	b.n	8005f32 <_free_r+0x1e>
 8005f56:	461a      	mov	r2, r3
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	b10b      	cbz	r3, 8005f60 <_free_r+0x4c>
 8005f5c:	42a3      	cmp	r3, r4
 8005f5e:	d9fa      	bls.n	8005f56 <_free_r+0x42>
 8005f60:	6811      	ldr	r1, [r2, #0]
 8005f62:	1850      	adds	r0, r2, r1
 8005f64:	42a0      	cmp	r0, r4
 8005f66:	d10b      	bne.n	8005f80 <_free_r+0x6c>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	4401      	add	r1, r0
 8005f6c:	1850      	adds	r0, r2, r1
 8005f6e:	4283      	cmp	r3, r0
 8005f70:	6011      	str	r1, [r2, #0]
 8005f72:	d1e0      	bne.n	8005f36 <_free_r+0x22>
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	6053      	str	r3, [r2, #4]
 8005f7a:	4408      	add	r0, r1
 8005f7c:	6010      	str	r0, [r2, #0]
 8005f7e:	e7da      	b.n	8005f36 <_free_r+0x22>
 8005f80:	d902      	bls.n	8005f88 <_free_r+0x74>
 8005f82:	230c      	movs	r3, #12
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	e7d6      	b.n	8005f36 <_free_r+0x22>
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	1821      	adds	r1, r4, r0
 8005f8c:	428b      	cmp	r3, r1
 8005f8e:	bf04      	itt	eq
 8005f90:	6819      	ldreq	r1, [r3, #0]
 8005f92:	685b      	ldreq	r3, [r3, #4]
 8005f94:	6063      	str	r3, [r4, #4]
 8005f96:	bf04      	itt	eq
 8005f98:	1809      	addeq	r1, r1, r0
 8005f9a:	6021      	streq	r1, [r4, #0]
 8005f9c:	6054      	str	r4, [r2, #4]
 8005f9e:	e7ca      	b.n	8005f36 <_free_r+0x22>
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20001520 	.word	0x20001520

08005fa8 <sbrk_aligned>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	4e0f      	ldr	r6, [pc, #60]	@ (8005fe8 <sbrk_aligned+0x40>)
 8005fac:	460c      	mov	r4, r1
 8005fae:	6831      	ldr	r1, [r6, #0]
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	b911      	cbnz	r1, 8005fba <sbrk_aligned+0x12>
 8005fb4:	f000 fe18 	bl	8006be8 <_sbrk_r>
 8005fb8:	6030      	str	r0, [r6, #0]
 8005fba:	4621      	mov	r1, r4
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 fe13 	bl	8006be8 <_sbrk_r>
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	d103      	bne.n	8005fce <sbrk_aligned+0x26>
 8005fc6:	f04f 34ff 	mov.w	r4, #4294967295
 8005fca:	4620      	mov	r0, r4
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	1cc4      	adds	r4, r0, #3
 8005fd0:	f024 0403 	bic.w	r4, r4, #3
 8005fd4:	42a0      	cmp	r0, r4
 8005fd6:	d0f8      	beq.n	8005fca <sbrk_aligned+0x22>
 8005fd8:	1a21      	subs	r1, r4, r0
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 fe04 	bl	8006be8 <_sbrk_r>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d1f2      	bne.n	8005fca <sbrk_aligned+0x22>
 8005fe4:	e7ef      	b.n	8005fc6 <sbrk_aligned+0x1e>
 8005fe6:	bf00      	nop
 8005fe8:	2000151c 	.word	0x2000151c

08005fec <_malloc_r>:
 8005fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff0:	1ccd      	adds	r5, r1, #3
 8005ff2:	f025 0503 	bic.w	r5, r5, #3
 8005ff6:	3508      	adds	r5, #8
 8005ff8:	2d0c      	cmp	r5, #12
 8005ffa:	bf38      	it	cc
 8005ffc:	250c      	movcc	r5, #12
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	4606      	mov	r6, r0
 8006002:	db01      	blt.n	8006008 <_malloc_r+0x1c>
 8006004:	42a9      	cmp	r1, r5
 8006006:	d904      	bls.n	8006012 <_malloc_r+0x26>
 8006008:	230c      	movs	r3, #12
 800600a:	6033      	str	r3, [r6, #0]
 800600c:	2000      	movs	r0, #0
 800600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060e8 <_malloc_r+0xfc>
 8006016:	f000 f869 	bl	80060ec <__malloc_lock>
 800601a:	f8d8 3000 	ldr.w	r3, [r8]
 800601e:	461c      	mov	r4, r3
 8006020:	bb44      	cbnz	r4, 8006074 <_malloc_r+0x88>
 8006022:	4629      	mov	r1, r5
 8006024:	4630      	mov	r0, r6
 8006026:	f7ff ffbf 	bl	8005fa8 <sbrk_aligned>
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	4604      	mov	r4, r0
 800602e:	d158      	bne.n	80060e2 <_malloc_r+0xf6>
 8006030:	f8d8 4000 	ldr.w	r4, [r8]
 8006034:	4627      	mov	r7, r4
 8006036:	2f00      	cmp	r7, #0
 8006038:	d143      	bne.n	80060c2 <_malloc_r+0xd6>
 800603a:	2c00      	cmp	r4, #0
 800603c:	d04b      	beq.n	80060d6 <_malloc_r+0xea>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	4639      	mov	r1, r7
 8006042:	4630      	mov	r0, r6
 8006044:	eb04 0903 	add.w	r9, r4, r3
 8006048:	f000 fdce 	bl	8006be8 <_sbrk_r>
 800604c:	4581      	cmp	r9, r0
 800604e:	d142      	bne.n	80060d6 <_malloc_r+0xea>
 8006050:	6821      	ldr	r1, [r4, #0]
 8006052:	1a6d      	subs	r5, r5, r1
 8006054:	4629      	mov	r1, r5
 8006056:	4630      	mov	r0, r6
 8006058:	f7ff ffa6 	bl	8005fa8 <sbrk_aligned>
 800605c:	3001      	adds	r0, #1
 800605e:	d03a      	beq.n	80060d6 <_malloc_r+0xea>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	442b      	add	r3, r5
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	f8d8 3000 	ldr.w	r3, [r8]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	bb62      	cbnz	r2, 80060c8 <_malloc_r+0xdc>
 800606e:	f8c8 7000 	str.w	r7, [r8]
 8006072:	e00f      	b.n	8006094 <_malloc_r+0xa8>
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	1b52      	subs	r2, r2, r5
 8006078:	d420      	bmi.n	80060bc <_malloc_r+0xd0>
 800607a:	2a0b      	cmp	r2, #11
 800607c:	d917      	bls.n	80060ae <_malloc_r+0xc2>
 800607e:	1961      	adds	r1, r4, r5
 8006080:	42a3      	cmp	r3, r4
 8006082:	6025      	str	r5, [r4, #0]
 8006084:	bf18      	it	ne
 8006086:	6059      	strne	r1, [r3, #4]
 8006088:	6863      	ldr	r3, [r4, #4]
 800608a:	bf08      	it	eq
 800608c:	f8c8 1000 	streq.w	r1, [r8]
 8006090:	5162      	str	r2, [r4, r5]
 8006092:	604b      	str	r3, [r1, #4]
 8006094:	4630      	mov	r0, r6
 8006096:	f000 f82f 	bl	80060f8 <__malloc_unlock>
 800609a:	f104 000b 	add.w	r0, r4, #11
 800609e:	1d23      	adds	r3, r4, #4
 80060a0:	f020 0007 	bic.w	r0, r0, #7
 80060a4:	1ac2      	subs	r2, r0, r3
 80060a6:	bf1c      	itt	ne
 80060a8:	1a1b      	subne	r3, r3, r0
 80060aa:	50a3      	strne	r3, [r4, r2]
 80060ac:	e7af      	b.n	800600e <_malloc_r+0x22>
 80060ae:	6862      	ldr	r2, [r4, #4]
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	bf0c      	ite	eq
 80060b4:	f8c8 2000 	streq.w	r2, [r8]
 80060b8:	605a      	strne	r2, [r3, #4]
 80060ba:	e7eb      	b.n	8006094 <_malloc_r+0xa8>
 80060bc:	4623      	mov	r3, r4
 80060be:	6864      	ldr	r4, [r4, #4]
 80060c0:	e7ae      	b.n	8006020 <_malloc_r+0x34>
 80060c2:	463c      	mov	r4, r7
 80060c4:	687f      	ldr	r7, [r7, #4]
 80060c6:	e7b6      	b.n	8006036 <_malloc_r+0x4a>
 80060c8:	461a      	mov	r2, r3
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	42a3      	cmp	r3, r4
 80060ce:	d1fb      	bne.n	80060c8 <_malloc_r+0xdc>
 80060d0:	2300      	movs	r3, #0
 80060d2:	6053      	str	r3, [r2, #4]
 80060d4:	e7de      	b.n	8006094 <_malloc_r+0xa8>
 80060d6:	230c      	movs	r3, #12
 80060d8:	6033      	str	r3, [r6, #0]
 80060da:	4630      	mov	r0, r6
 80060dc:	f000 f80c 	bl	80060f8 <__malloc_unlock>
 80060e0:	e794      	b.n	800600c <_malloc_r+0x20>
 80060e2:	6005      	str	r5, [r0, #0]
 80060e4:	e7d6      	b.n	8006094 <_malloc_r+0xa8>
 80060e6:	bf00      	nop
 80060e8:	20001520 	.word	0x20001520

080060ec <__malloc_lock>:
 80060ec:	4801      	ldr	r0, [pc, #4]	@ (80060f4 <__malloc_lock+0x8>)
 80060ee:	f7ff bf00 	b.w	8005ef2 <__retarget_lock_acquire_recursive>
 80060f2:	bf00      	nop
 80060f4:	20001518 	.word	0x20001518

080060f8 <__malloc_unlock>:
 80060f8:	4801      	ldr	r0, [pc, #4]	@ (8006100 <__malloc_unlock+0x8>)
 80060fa:	f7ff befb 	b.w	8005ef4 <__retarget_lock_release_recursive>
 80060fe:	bf00      	nop
 8006100:	20001518 	.word	0x20001518

08006104 <__ssputs_r>:
 8006104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	688e      	ldr	r6, [r1, #8]
 800610a:	461f      	mov	r7, r3
 800610c:	42be      	cmp	r6, r7
 800610e:	680b      	ldr	r3, [r1, #0]
 8006110:	4682      	mov	sl, r0
 8006112:	460c      	mov	r4, r1
 8006114:	4690      	mov	r8, r2
 8006116:	d82d      	bhi.n	8006174 <__ssputs_r+0x70>
 8006118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800611c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006120:	d026      	beq.n	8006170 <__ssputs_r+0x6c>
 8006122:	6965      	ldr	r5, [r4, #20]
 8006124:	6909      	ldr	r1, [r1, #16]
 8006126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800612a:	eba3 0901 	sub.w	r9, r3, r1
 800612e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006132:	1c7b      	adds	r3, r7, #1
 8006134:	444b      	add	r3, r9
 8006136:	106d      	asrs	r5, r5, #1
 8006138:	429d      	cmp	r5, r3
 800613a:	bf38      	it	cc
 800613c:	461d      	movcc	r5, r3
 800613e:	0553      	lsls	r3, r2, #21
 8006140:	d527      	bpl.n	8006192 <__ssputs_r+0x8e>
 8006142:	4629      	mov	r1, r5
 8006144:	f7ff ff52 	bl	8005fec <_malloc_r>
 8006148:	4606      	mov	r6, r0
 800614a:	b360      	cbz	r0, 80061a6 <__ssputs_r+0xa2>
 800614c:	6921      	ldr	r1, [r4, #16]
 800614e:	464a      	mov	r2, r9
 8006150:	f7ff fed1 	bl	8005ef6 <memcpy>
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800615a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	6126      	str	r6, [r4, #16]
 8006162:	6165      	str	r5, [r4, #20]
 8006164:	444e      	add	r6, r9
 8006166:	eba5 0509 	sub.w	r5, r5, r9
 800616a:	6026      	str	r6, [r4, #0]
 800616c:	60a5      	str	r5, [r4, #8]
 800616e:	463e      	mov	r6, r7
 8006170:	42be      	cmp	r6, r7
 8006172:	d900      	bls.n	8006176 <__ssputs_r+0x72>
 8006174:	463e      	mov	r6, r7
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	4632      	mov	r2, r6
 800617a:	4641      	mov	r1, r8
 800617c:	f000 fcf8 	bl	8006b70 <memmove>
 8006180:	68a3      	ldr	r3, [r4, #8]
 8006182:	1b9b      	subs	r3, r3, r6
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	4433      	add	r3, r6
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	2000      	movs	r0, #0
 800618e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006192:	462a      	mov	r2, r5
 8006194:	f000 fd38 	bl	8006c08 <_realloc_r>
 8006198:	4606      	mov	r6, r0
 800619a:	2800      	cmp	r0, #0
 800619c:	d1e0      	bne.n	8006160 <__ssputs_r+0x5c>
 800619e:	6921      	ldr	r1, [r4, #16]
 80061a0:	4650      	mov	r0, sl
 80061a2:	f7ff feb7 	bl	8005f14 <_free_r>
 80061a6:	230c      	movs	r3, #12
 80061a8:	f8ca 3000 	str.w	r3, [sl]
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	e7e9      	b.n	800618e <__ssputs_r+0x8a>
	...

080061bc <_svfiprintf_r>:
 80061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	4698      	mov	r8, r3
 80061c2:	898b      	ldrh	r3, [r1, #12]
 80061c4:	061b      	lsls	r3, r3, #24
 80061c6:	b09d      	sub	sp, #116	@ 0x74
 80061c8:	4607      	mov	r7, r0
 80061ca:	460d      	mov	r5, r1
 80061cc:	4614      	mov	r4, r2
 80061ce:	d510      	bpl.n	80061f2 <_svfiprintf_r+0x36>
 80061d0:	690b      	ldr	r3, [r1, #16]
 80061d2:	b973      	cbnz	r3, 80061f2 <_svfiprintf_r+0x36>
 80061d4:	2140      	movs	r1, #64	@ 0x40
 80061d6:	f7ff ff09 	bl	8005fec <_malloc_r>
 80061da:	6028      	str	r0, [r5, #0]
 80061dc:	6128      	str	r0, [r5, #16]
 80061de:	b930      	cbnz	r0, 80061ee <_svfiprintf_r+0x32>
 80061e0:	230c      	movs	r3, #12
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	b01d      	add	sp, #116	@ 0x74
 80061ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ee:	2340      	movs	r3, #64	@ 0x40
 80061f0:	616b      	str	r3, [r5, #20]
 80061f2:	2300      	movs	r3, #0
 80061f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f6:	2320      	movs	r3, #32
 80061f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006200:	2330      	movs	r3, #48	@ 0x30
 8006202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063a0 <_svfiprintf_r+0x1e4>
 8006206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800620a:	f04f 0901 	mov.w	r9, #1
 800620e:	4623      	mov	r3, r4
 8006210:	469a      	mov	sl, r3
 8006212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006216:	b10a      	cbz	r2, 800621c <_svfiprintf_r+0x60>
 8006218:	2a25      	cmp	r2, #37	@ 0x25
 800621a:	d1f9      	bne.n	8006210 <_svfiprintf_r+0x54>
 800621c:	ebba 0b04 	subs.w	fp, sl, r4
 8006220:	d00b      	beq.n	800623a <_svfiprintf_r+0x7e>
 8006222:	465b      	mov	r3, fp
 8006224:	4622      	mov	r2, r4
 8006226:	4629      	mov	r1, r5
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff ff6b 	bl	8006104 <__ssputs_r>
 800622e:	3001      	adds	r0, #1
 8006230:	f000 80a7 	beq.w	8006382 <_svfiprintf_r+0x1c6>
 8006234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006236:	445a      	add	r2, fp
 8006238:	9209      	str	r2, [sp, #36]	@ 0x24
 800623a:	f89a 3000 	ldrb.w	r3, [sl]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 809f 	beq.w	8006382 <_svfiprintf_r+0x1c6>
 8006244:	2300      	movs	r3, #0
 8006246:	f04f 32ff 	mov.w	r2, #4294967295
 800624a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800624e:	f10a 0a01 	add.w	sl, sl, #1
 8006252:	9304      	str	r3, [sp, #16]
 8006254:	9307      	str	r3, [sp, #28]
 8006256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800625a:	931a      	str	r3, [sp, #104]	@ 0x68
 800625c:	4654      	mov	r4, sl
 800625e:	2205      	movs	r2, #5
 8006260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006264:	484e      	ldr	r0, [pc, #312]	@ (80063a0 <_svfiprintf_r+0x1e4>)
 8006266:	f7f9 ffb3 	bl	80001d0 <memchr>
 800626a:	9a04      	ldr	r2, [sp, #16]
 800626c:	b9d8      	cbnz	r0, 80062a6 <_svfiprintf_r+0xea>
 800626e:	06d0      	lsls	r0, r2, #27
 8006270:	bf44      	itt	mi
 8006272:	2320      	movmi	r3, #32
 8006274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006278:	0711      	lsls	r1, r2, #28
 800627a:	bf44      	itt	mi
 800627c:	232b      	movmi	r3, #43	@ 0x2b
 800627e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006282:	f89a 3000 	ldrb.w	r3, [sl]
 8006286:	2b2a      	cmp	r3, #42	@ 0x2a
 8006288:	d015      	beq.n	80062b6 <_svfiprintf_r+0xfa>
 800628a:	9a07      	ldr	r2, [sp, #28]
 800628c:	4654      	mov	r4, sl
 800628e:	2000      	movs	r0, #0
 8006290:	f04f 0c0a 	mov.w	ip, #10
 8006294:	4621      	mov	r1, r4
 8006296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800629a:	3b30      	subs	r3, #48	@ 0x30
 800629c:	2b09      	cmp	r3, #9
 800629e:	d94b      	bls.n	8006338 <_svfiprintf_r+0x17c>
 80062a0:	b1b0      	cbz	r0, 80062d0 <_svfiprintf_r+0x114>
 80062a2:	9207      	str	r2, [sp, #28]
 80062a4:	e014      	b.n	80062d0 <_svfiprintf_r+0x114>
 80062a6:	eba0 0308 	sub.w	r3, r0, r8
 80062aa:	fa09 f303 	lsl.w	r3, r9, r3
 80062ae:	4313      	orrs	r3, r2
 80062b0:	9304      	str	r3, [sp, #16]
 80062b2:	46a2      	mov	sl, r4
 80062b4:	e7d2      	b.n	800625c <_svfiprintf_r+0xa0>
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	1d19      	adds	r1, r3, #4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	9103      	str	r1, [sp, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bfbb      	ittet	lt
 80062c2:	425b      	neglt	r3, r3
 80062c4:	f042 0202 	orrlt.w	r2, r2, #2
 80062c8:	9307      	strge	r3, [sp, #28]
 80062ca:	9307      	strlt	r3, [sp, #28]
 80062cc:	bfb8      	it	lt
 80062ce:	9204      	strlt	r2, [sp, #16]
 80062d0:	7823      	ldrb	r3, [r4, #0]
 80062d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80062d4:	d10a      	bne.n	80062ec <_svfiprintf_r+0x130>
 80062d6:	7863      	ldrb	r3, [r4, #1]
 80062d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80062da:	d132      	bne.n	8006342 <_svfiprintf_r+0x186>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	1d1a      	adds	r2, r3, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	9203      	str	r2, [sp, #12]
 80062e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062e8:	3402      	adds	r4, #2
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80063b0 <_svfiprintf_r+0x1f4>
 80062f0:	7821      	ldrb	r1, [r4, #0]
 80062f2:	2203      	movs	r2, #3
 80062f4:	4650      	mov	r0, sl
 80062f6:	f7f9 ff6b 	bl	80001d0 <memchr>
 80062fa:	b138      	cbz	r0, 800630c <_svfiprintf_r+0x150>
 80062fc:	9b04      	ldr	r3, [sp, #16]
 80062fe:	eba0 000a 	sub.w	r0, r0, sl
 8006302:	2240      	movs	r2, #64	@ 0x40
 8006304:	4082      	lsls	r2, r0
 8006306:	4313      	orrs	r3, r2
 8006308:	3401      	adds	r4, #1
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006310:	4824      	ldr	r0, [pc, #144]	@ (80063a4 <_svfiprintf_r+0x1e8>)
 8006312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006316:	2206      	movs	r2, #6
 8006318:	f7f9 ff5a 	bl	80001d0 <memchr>
 800631c:	2800      	cmp	r0, #0
 800631e:	d036      	beq.n	800638e <_svfiprintf_r+0x1d2>
 8006320:	4b21      	ldr	r3, [pc, #132]	@ (80063a8 <_svfiprintf_r+0x1ec>)
 8006322:	bb1b      	cbnz	r3, 800636c <_svfiprintf_r+0x1b0>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	3307      	adds	r3, #7
 8006328:	f023 0307 	bic.w	r3, r3, #7
 800632c:	3308      	adds	r3, #8
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006332:	4433      	add	r3, r6
 8006334:	9309      	str	r3, [sp, #36]	@ 0x24
 8006336:	e76a      	b.n	800620e <_svfiprintf_r+0x52>
 8006338:	fb0c 3202 	mla	r2, ip, r2, r3
 800633c:	460c      	mov	r4, r1
 800633e:	2001      	movs	r0, #1
 8006340:	e7a8      	b.n	8006294 <_svfiprintf_r+0xd8>
 8006342:	2300      	movs	r3, #0
 8006344:	3401      	adds	r4, #1
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	4619      	mov	r1, r3
 800634a:	f04f 0c0a 	mov.w	ip, #10
 800634e:	4620      	mov	r0, r4
 8006350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006354:	3a30      	subs	r2, #48	@ 0x30
 8006356:	2a09      	cmp	r2, #9
 8006358:	d903      	bls.n	8006362 <_svfiprintf_r+0x1a6>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0c6      	beq.n	80062ec <_svfiprintf_r+0x130>
 800635e:	9105      	str	r1, [sp, #20]
 8006360:	e7c4      	b.n	80062ec <_svfiprintf_r+0x130>
 8006362:	fb0c 2101 	mla	r1, ip, r1, r2
 8006366:	4604      	mov	r4, r0
 8006368:	2301      	movs	r3, #1
 800636a:	e7f0      	b.n	800634e <_svfiprintf_r+0x192>
 800636c:	ab03      	add	r3, sp, #12
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	462a      	mov	r2, r5
 8006372:	4b0e      	ldr	r3, [pc, #56]	@ (80063ac <_svfiprintf_r+0x1f0>)
 8006374:	a904      	add	r1, sp, #16
 8006376:	4638      	mov	r0, r7
 8006378:	f3af 8000 	nop.w
 800637c:	1c42      	adds	r2, r0, #1
 800637e:	4606      	mov	r6, r0
 8006380:	d1d6      	bne.n	8006330 <_svfiprintf_r+0x174>
 8006382:	89ab      	ldrh	r3, [r5, #12]
 8006384:	065b      	lsls	r3, r3, #25
 8006386:	f53f af2d 	bmi.w	80061e4 <_svfiprintf_r+0x28>
 800638a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800638c:	e72c      	b.n	80061e8 <_svfiprintf_r+0x2c>
 800638e:	ab03      	add	r3, sp, #12
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	462a      	mov	r2, r5
 8006394:	4b05      	ldr	r3, [pc, #20]	@ (80063ac <_svfiprintf_r+0x1f0>)
 8006396:	a904      	add	r1, sp, #16
 8006398:	4638      	mov	r0, r7
 800639a:	f000 f9bb 	bl	8006714 <_printf_i>
 800639e:	e7ed      	b.n	800637c <_svfiprintf_r+0x1c0>
 80063a0:	08006e00 	.word	0x08006e00
 80063a4:	08006e0a 	.word	0x08006e0a
 80063a8:	00000000 	.word	0x00000000
 80063ac:	08006105 	.word	0x08006105
 80063b0:	08006e06 	.word	0x08006e06

080063b4 <__sfputc_r>:
 80063b4:	6893      	ldr	r3, [r2, #8]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	b410      	push	{r4}
 80063bc:	6093      	str	r3, [r2, #8]
 80063be:	da08      	bge.n	80063d2 <__sfputc_r+0x1e>
 80063c0:	6994      	ldr	r4, [r2, #24]
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	db01      	blt.n	80063ca <__sfputc_r+0x16>
 80063c6:	290a      	cmp	r1, #10
 80063c8:	d103      	bne.n	80063d2 <__sfputc_r+0x1e>
 80063ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063ce:	f7ff bc82 	b.w	8005cd6 <__swbuf_r>
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	1c58      	adds	r0, r3, #1
 80063d6:	6010      	str	r0, [r2, #0]
 80063d8:	7019      	strb	r1, [r3, #0]
 80063da:	4608      	mov	r0, r1
 80063dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <__sfputs_r>:
 80063e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e4:	4606      	mov	r6, r0
 80063e6:	460f      	mov	r7, r1
 80063e8:	4614      	mov	r4, r2
 80063ea:	18d5      	adds	r5, r2, r3
 80063ec:	42ac      	cmp	r4, r5
 80063ee:	d101      	bne.n	80063f4 <__sfputs_r+0x12>
 80063f0:	2000      	movs	r0, #0
 80063f2:	e007      	b.n	8006404 <__sfputs_r+0x22>
 80063f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f8:	463a      	mov	r2, r7
 80063fa:	4630      	mov	r0, r6
 80063fc:	f7ff ffda 	bl	80063b4 <__sfputc_r>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d1f3      	bne.n	80063ec <__sfputs_r+0xa>
 8006404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006408 <_vfiprintf_r>:
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	460d      	mov	r5, r1
 800640e:	b09d      	sub	sp, #116	@ 0x74
 8006410:	4614      	mov	r4, r2
 8006412:	4698      	mov	r8, r3
 8006414:	4606      	mov	r6, r0
 8006416:	b118      	cbz	r0, 8006420 <_vfiprintf_r+0x18>
 8006418:	6a03      	ldr	r3, [r0, #32]
 800641a:	b90b      	cbnz	r3, 8006420 <_vfiprintf_r+0x18>
 800641c:	f7ff fb3e 	bl	8005a9c <__sinit>
 8006420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006422:	07d9      	lsls	r1, r3, #31
 8006424:	d405      	bmi.n	8006432 <_vfiprintf_r+0x2a>
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	059a      	lsls	r2, r3, #22
 800642a:	d402      	bmi.n	8006432 <_vfiprintf_r+0x2a>
 800642c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800642e:	f7ff fd60 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	071b      	lsls	r3, r3, #28
 8006436:	d501      	bpl.n	800643c <_vfiprintf_r+0x34>
 8006438:	692b      	ldr	r3, [r5, #16]
 800643a:	b99b      	cbnz	r3, 8006464 <_vfiprintf_r+0x5c>
 800643c:	4629      	mov	r1, r5
 800643e:	4630      	mov	r0, r6
 8006440:	f7ff fc88 	bl	8005d54 <__swsetup_r>
 8006444:	b170      	cbz	r0, 8006464 <_vfiprintf_r+0x5c>
 8006446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006448:	07dc      	lsls	r4, r3, #31
 800644a:	d504      	bpl.n	8006456 <_vfiprintf_r+0x4e>
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	b01d      	add	sp, #116	@ 0x74
 8006452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006456:	89ab      	ldrh	r3, [r5, #12]
 8006458:	0598      	lsls	r0, r3, #22
 800645a:	d4f7      	bmi.n	800644c <_vfiprintf_r+0x44>
 800645c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800645e:	f7ff fd49 	bl	8005ef4 <__retarget_lock_release_recursive>
 8006462:	e7f3      	b.n	800644c <_vfiprintf_r+0x44>
 8006464:	2300      	movs	r3, #0
 8006466:	9309      	str	r3, [sp, #36]	@ 0x24
 8006468:	2320      	movs	r3, #32
 800646a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800646e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006472:	2330      	movs	r3, #48	@ 0x30
 8006474:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006624 <_vfiprintf_r+0x21c>
 8006478:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800647c:	f04f 0901 	mov.w	r9, #1
 8006480:	4623      	mov	r3, r4
 8006482:	469a      	mov	sl, r3
 8006484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006488:	b10a      	cbz	r2, 800648e <_vfiprintf_r+0x86>
 800648a:	2a25      	cmp	r2, #37	@ 0x25
 800648c:	d1f9      	bne.n	8006482 <_vfiprintf_r+0x7a>
 800648e:	ebba 0b04 	subs.w	fp, sl, r4
 8006492:	d00b      	beq.n	80064ac <_vfiprintf_r+0xa4>
 8006494:	465b      	mov	r3, fp
 8006496:	4622      	mov	r2, r4
 8006498:	4629      	mov	r1, r5
 800649a:	4630      	mov	r0, r6
 800649c:	f7ff ffa1 	bl	80063e2 <__sfputs_r>
 80064a0:	3001      	adds	r0, #1
 80064a2:	f000 80a7 	beq.w	80065f4 <_vfiprintf_r+0x1ec>
 80064a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064a8:	445a      	add	r2, fp
 80064aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80064ac:	f89a 3000 	ldrb.w	r3, [sl]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 809f 	beq.w	80065f4 <_vfiprintf_r+0x1ec>
 80064b6:	2300      	movs	r3, #0
 80064b8:	f04f 32ff 	mov.w	r2, #4294967295
 80064bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064c0:	f10a 0a01 	add.w	sl, sl, #1
 80064c4:	9304      	str	r3, [sp, #16]
 80064c6:	9307      	str	r3, [sp, #28]
 80064c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80064ce:	4654      	mov	r4, sl
 80064d0:	2205      	movs	r2, #5
 80064d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d6:	4853      	ldr	r0, [pc, #332]	@ (8006624 <_vfiprintf_r+0x21c>)
 80064d8:	f7f9 fe7a 	bl	80001d0 <memchr>
 80064dc:	9a04      	ldr	r2, [sp, #16]
 80064de:	b9d8      	cbnz	r0, 8006518 <_vfiprintf_r+0x110>
 80064e0:	06d1      	lsls	r1, r2, #27
 80064e2:	bf44      	itt	mi
 80064e4:	2320      	movmi	r3, #32
 80064e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ea:	0713      	lsls	r3, r2, #28
 80064ec:	bf44      	itt	mi
 80064ee:	232b      	movmi	r3, #43	@ 0x2b
 80064f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064f4:	f89a 3000 	ldrb.w	r3, [sl]
 80064f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064fa:	d015      	beq.n	8006528 <_vfiprintf_r+0x120>
 80064fc:	9a07      	ldr	r2, [sp, #28]
 80064fe:	4654      	mov	r4, sl
 8006500:	2000      	movs	r0, #0
 8006502:	f04f 0c0a 	mov.w	ip, #10
 8006506:	4621      	mov	r1, r4
 8006508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800650c:	3b30      	subs	r3, #48	@ 0x30
 800650e:	2b09      	cmp	r3, #9
 8006510:	d94b      	bls.n	80065aa <_vfiprintf_r+0x1a2>
 8006512:	b1b0      	cbz	r0, 8006542 <_vfiprintf_r+0x13a>
 8006514:	9207      	str	r2, [sp, #28]
 8006516:	e014      	b.n	8006542 <_vfiprintf_r+0x13a>
 8006518:	eba0 0308 	sub.w	r3, r0, r8
 800651c:	fa09 f303 	lsl.w	r3, r9, r3
 8006520:	4313      	orrs	r3, r2
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	46a2      	mov	sl, r4
 8006526:	e7d2      	b.n	80064ce <_vfiprintf_r+0xc6>
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	1d19      	adds	r1, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	9103      	str	r1, [sp, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	bfbb      	ittet	lt
 8006534:	425b      	neglt	r3, r3
 8006536:	f042 0202 	orrlt.w	r2, r2, #2
 800653a:	9307      	strge	r3, [sp, #28]
 800653c:	9307      	strlt	r3, [sp, #28]
 800653e:	bfb8      	it	lt
 8006540:	9204      	strlt	r2, [sp, #16]
 8006542:	7823      	ldrb	r3, [r4, #0]
 8006544:	2b2e      	cmp	r3, #46	@ 0x2e
 8006546:	d10a      	bne.n	800655e <_vfiprintf_r+0x156>
 8006548:	7863      	ldrb	r3, [r4, #1]
 800654a:	2b2a      	cmp	r3, #42	@ 0x2a
 800654c:	d132      	bne.n	80065b4 <_vfiprintf_r+0x1ac>
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	1d1a      	adds	r2, r3, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	9203      	str	r2, [sp, #12]
 8006556:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800655a:	3402      	adds	r4, #2
 800655c:	9305      	str	r3, [sp, #20]
 800655e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006634 <_vfiprintf_r+0x22c>
 8006562:	7821      	ldrb	r1, [r4, #0]
 8006564:	2203      	movs	r2, #3
 8006566:	4650      	mov	r0, sl
 8006568:	f7f9 fe32 	bl	80001d0 <memchr>
 800656c:	b138      	cbz	r0, 800657e <_vfiprintf_r+0x176>
 800656e:	9b04      	ldr	r3, [sp, #16]
 8006570:	eba0 000a 	sub.w	r0, r0, sl
 8006574:	2240      	movs	r2, #64	@ 0x40
 8006576:	4082      	lsls	r2, r0
 8006578:	4313      	orrs	r3, r2
 800657a:	3401      	adds	r4, #1
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006582:	4829      	ldr	r0, [pc, #164]	@ (8006628 <_vfiprintf_r+0x220>)
 8006584:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006588:	2206      	movs	r2, #6
 800658a:	f7f9 fe21 	bl	80001d0 <memchr>
 800658e:	2800      	cmp	r0, #0
 8006590:	d03f      	beq.n	8006612 <_vfiprintf_r+0x20a>
 8006592:	4b26      	ldr	r3, [pc, #152]	@ (800662c <_vfiprintf_r+0x224>)
 8006594:	bb1b      	cbnz	r3, 80065de <_vfiprintf_r+0x1d6>
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	3307      	adds	r3, #7
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	3308      	adds	r3, #8
 80065a0:	9303      	str	r3, [sp, #12]
 80065a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a4:	443b      	add	r3, r7
 80065a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a8:	e76a      	b.n	8006480 <_vfiprintf_r+0x78>
 80065aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80065ae:	460c      	mov	r4, r1
 80065b0:	2001      	movs	r0, #1
 80065b2:	e7a8      	b.n	8006506 <_vfiprintf_r+0xfe>
 80065b4:	2300      	movs	r3, #0
 80065b6:	3401      	adds	r4, #1
 80065b8:	9305      	str	r3, [sp, #20]
 80065ba:	4619      	mov	r1, r3
 80065bc:	f04f 0c0a 	mov.w	ip, #10
 80065c0:	4620      	mov	r0, r4
 80065c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c6:	3a30      	subs	r2, #48	@ 0x30
 80065c8:	2a09      	cmp	r2, #9
 80065ca:	d903      	bls.n	80065d4 <_vfiprintf_r+0x1cc>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0c6      	beq.n	800655e <_vfiprintf_r+0x156>
 80065d0:	9105      	str	r1, [sp, #20]
 80065d2:	e7c4      	b.n	800655e <_vfiprintf_r+0x156>
 80065d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d8:	4604      	mov	r4, r0
 80065da:	2301      	movs	r3, #1
 80065dc:	e7f0      	b.n	80065c0 <_vfiprintf_r+0x1b8>
 80065de:	ab03      	add	r3, sp, #12
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	462a      	mov	r2, r5
 80065e4:	4b12      	ldr	r3, [pc, #72]	@ (8006630 <_vfiprintf_r+0x228>)
 80065e6:	a904      	add	r1, sp, #16
 80065e8:	4630      	mov	r0, r6
 80065ea:	f3af 8000 	nop.w
 80065ee:	4607      	mov	r7, r0
 80065f0:	1c78      	adds	r0, r7, #1
 80065f2:	d1d6      	bne.n	80065a2 <_vfiprintf_r+0x19a>
 80065f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065f6:	07d9      	lsls	r1, r3, #31
 80065f8:	d405      	bmi.n	8006606 <_vfiprintf_r+0x1fe>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	059a      	lsls	r2, r3, #22
 80065fe:	d402      	bmi.n	8006606 <_vfiprintf_r+0x1fe>
 8006600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006602:	f7ff fc77 	bl	8005ef4 <__retarget_lock_release_recursive>
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	065b      	lsls	r3, r3, #25
 800660a:	f53f af1f 	bmi.w	800644c <_vfiprintf_r+0x44>
 800660e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006610:	e71e      	b.n	8006450 <_vfiprintf_r+0x48>
 8006612:	ab03      	add	r3, sp, #12
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	462a      	mov	r2, r5
 8006618:	4b05      	ldr	r3, [pc, #20]	@ (8006630 <_vfiprintf_r+0x228>)
 800661a:	a904      	add	r1, sp, #16
 800661c:	4630      	mov	r0, r6
 800661e:	f000 f879 	bl	8006714 <_printf_i>
 8006622:	e7e4      	b.n	80065ee <_vfiprintf_r+0x1e6>
 8006624:	08006e00 	.word	0x08006e00
 8006628:	08006e0a 	.word	0x08006e0a
 800662c:	00000000 	.word	0x00000000
 8006630:	080063e3 	.word	0x080063e3
 8006634:	08006e06 	.word	0x08006e06

08006638 <_printf_common>:
 8006638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663c:	4616      	mov	r6, r2
 800663e:	4698      	mov	r8, r3
 8006640:	688a      	ldr	r2, [r1, #8]
 8006642:	690b      	ldr	r3, [r1, #16]
 8006644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006648:	4293      	cmp	r3, r2
 800664a:	bfb8      	it	lt
 800664c:	4613      	movlt	r3, r2
 800664e:	6033      	str	r3, [r6, #0]
 8006650:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006654:	4607      	mov	r7, r0
 8006656:	460c      	mov	r4, r1
 8006658:	b10a      	cbz	r2, 800665e <_printf_common+0x26>
 800665a:	3301      	adds	r3, #1
 800665c:	6033      	str	r3, [r6, #0]
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	0699      	lsls	r1, r3, #26
 8006662:	bf42      	ittt	mi
 8006664:	6833      	ldrmi	r3, [r6, #0]
 8006666:	3302      	addmi	r3, #2
 8006668:	6033      	strmi	r3, [r6, #0]
 800666a:	6825      	ldr	r5, [r4, #0]
 800666c:	f015 0506 	ands.w	r5, r5, #6
 8006670:	d106      	bne.n	8006680 <_printf_common+0x48>
 8006672:	f104 0a19 	add.w	sl, r4, #25
 8006676:	68e3      	ldr	r3, [r4, #12]
 8006678:	6832      	ldr	r2, [r6, #0]
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	42ab      	cmp	r3, r5
 800667e:	dc26      	bgt.n	80066ce <_printf_common+0x96>
 8006680:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	3b00      	subs	r3, #0
 8006688:	bf18      	it	ne
 800668a:	2301      	movne	r3, #1
 800668c:	0692      	lsls	r2, r2, #26
 800668e:	d42b      	bmi.n	80066e8 <_printf_common+0xb0>
 8006690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006694:	4641      	mov	r1, r8
 8006696:	4638      	mov	r0, r7
 8006698:	47c8      	blx	r9
 800669a:	3001      	adds	r0, #1
 800669c:	d01e      	beq.n	80066dc <_printf_common+0xa4>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	6922      	ldr	r2, [r4, #16]
 80066a2:	f003 0306 	and.w	r3, r3, #6
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	bf02      	ittt	eq
 80066aa:	68e5      	ldreq	r5, [r4, #12]
 80066ac:	6833      	ldreq	r3, [r6, #0]
 80066ae:	1aed      	subeq	r5, r5, r3
 80066b0:	68a3      	ldr	r3, [r4, #8]
 80066b2:	bf0c      	ite	eq
 80066b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b8:	2500      	movne	r5, #0
 80066ba:	4293      	cmp	r3, r2
 80066bc:	bfc4      	itt	gt
 80066be:	1a9b      	subgt	r3, r3, r2
 80066c0:	18ed      	addgt	r5, r5, r3
 80066c2:	2600      	movs	r6, #0
 80066c4:	341a      	adds	r4, #26
 80066c6:	42b5      	cmp	r5, r6
 80066c8:	d11a      	bne.n	8006700 <_printf_common+0xc8>
 80066ca:	2000      	movs	r0, #0
 80066cc:	e008      	b.n	80066e0 <_printf_common+0xa8>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4652      	mov	r2, sl
 80066d2:	4641      	mov	r1, r8
 80066d4:	4638      	mov	r0, r7
 80066d6:	47c8      	blx	r9
 80066d8:	3001      	adds	r0, #1
 80066da:	d103      	bne.n	80066e4 <_printf_common+0xac>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e4:	3501      	adds	r5, #1
 80066e6:	e7c6      	b.n	8006676 <_printf_common+0x3e>
 80066e8:	18e1      	adds	r1, r4, r3
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	2030      	movs	r0, #48	@ 0x30
 80066ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066f2:	4422      	add	r2, r4
 80066f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066fc:	3302      	adds	r3, #2
 80066fe:	e7c7      	b.n	8006690 <_printf_common+0x58>
 8006700:	2301      	movs	r3, #1
 8006702:	4622      	mov	r2, r4
 8006704:	4641      	mov	r1, r8
 8006706:	4638      	mov	r0, r7
 8006708:	47c8      	blx	r9
 800670a:	3001      	adds	r0, #1
 800670c:	d0e6      	beq.n	80066dc <_printf_common+0xa4>
 800670e:	3601      	adds	r6, #1
 8006710:	e7d9      	b.n	80066c6 <_printf_common+0x8e>
	...

08006714 <_printf_i>:
 8006714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	7e0f      	ldrb	r7, [r1, #24]
 800671a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800671c:	2f78      	cmp	r7, #120	@ 0x78
 800671e:	4691      	mov	r9, r2
 8006720:	4680      	mov	r8, r0
 8006722:	460c      	mov	r4, r1
 8006724:	469a      	mov	sl, r3
 8006726:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800672a:	d807      	bhi.n	800673c <_printf_i+0x28>
 800672c:	2f62      	cmp	r7, #98	@ 0x62
 800672e:	d80a      	bhi.n	8006746 <_printf_i+0x32>
 8006730:	2f00      	cmp	r7, #0
 8006732:	f000 80d2 	beq.w	80068da <_printf_i+0x1c6>
 8006736:	2f58      	cmp	r7, #88	@ 0x58
 8006738:	f000 80b9 	beq.w	80068ae <_printf_i+0x19a>
 800673c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006740:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006744:	e03a      	b.n	80067bc <_printf_i+0xa8>
 8006746:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800674a:	2b15      	cmp	r3, #21
 800674c:	d8f6      	bhi.n	800673c <_printf_i+0x28>
 800674e:	a101      	add	r1, pc, #4	@ (adr r1, 8006754 <_printf_i+0x40>)
 8006750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006754:	080067ad 	.word	0x080067ad
 8006758:	080067c1 	.word	0x080067c1
 800675c:	0800673d 	.word	0x0800673d
 8006760:	0800673d 	.word	0x0800673d
 8006764:	0800673d 	.word	0x0800673d
 8006768:	0800673d 	.word	0x0800673d
 800676c:	080067c1 	.word	0x080067c1
 8006770:	0800673d 	.word	0x0800673d
 8006774:	0800673d 	.word	0x0800673d
 8006778:	0800673d 	.word	0x0800673d
 800677c:	0800673d 	.word	0x0800673d
 8006780:	080068c1 	.word	0x080068c1
 8006784:	080067eb 	.word	0x080067eb
 8006788:	0800687b 	.word	0x0800687b
 800678c:	0800673d 	.word	0x0800673d
 8006790:	0800673d 	.word	0x0800673d
 8006794:	080068e3 	.word	0x080068e3
 8006798:	0800673d 	.word	0x0800673d
 800679c:	080067eb 	.word	0x080067eb
 80067a0:	0800673d 	.word	0x0800673d
 80067a4:	0800673d 	.word	0x0800673d
 80067a8:	08006883 	.word	0x08006883
 80067ac:	6833      	ldr	r3, [r6, #0]
 80067ae:	1d1a      	adds	r2, r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6032      	str	r2, [r6, #0]
 80067b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067bc:	2301      	movs	r3, #1
 80067be:	e09d      	b.n	80068fc <_printf_i+0x1e8>
 80067c0:	6833      	ldr	r3, [r6, #0]
 80067c2:	6820      	ldr	r0, [r4, #0]
 80067c4:	1d19      	adds	r1, r3, #4
 80067c6:	6031      	str	r1, [r6, #0]
 80067c8:	0606      	lsls	r6, r0, #24
 80067ca:	d501      	bpl.n	80067d0 <_printf_i+0xbc>
 80067cc:	681d      	ldr	r5, [r3, #0]
 80067ce:	e003      	b.n	80067d8 <_printf_i+0xc4>
 80067d0:	0645      	lsls	r5, r0, #25
 80067d2:	d5fb      	bpl.n	80067cc <_printf_i+0xb8>
 80067d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067d8:	2d00      	cmp	r5, #0
 80067da:	da03      	bge.n	80067e4 <_printf_i+0xd0>
 80067dc:	232d      	movs	r3, #45	@ 0x2d
 80067de:	426d      	negs	r5, r5
 80067e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067e4:	4859      	ldr	r0, [pc, #356]	@ (800694c <_printf_i+0x238>)
 80067e6:	230a      	movs	r3, #10
 80067e8:	e011      	b.n	800680e <_printf_i+0xfa>
 80067ea:	6821      	ldr	r1, [r4, #0]
 80067ec:	6833      	ldr	r3, [r6, #0]
 80067ee:	0608      	lsls	r0, r1, #24
 80067f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80067f4:	d402      	bmi.n	80067fc <_printf_i+0xe8>
 80067f6:	0649      	lsls	r1, r1, #25
 80067f8:	bf48      	it	mi
 80067fa:	b2ad      	uxthmi	r5, r5
 80067fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80067fe:	4853      	ldr	r0, [pc, #332]	@ (800694c <_printf_i+0x238>)
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	bf14      	ite	ne
 8006804:	230a      	movne	r3, #10
 8006806:	2308      	moveq	r3, #8
 8006808:	2100      	movs	r1, #0
 800680a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800680e:	6866      	ldr	r6, [r4, #4]
 8006810:	60a6      	str	r6, [r4, #8]
 8006812:	2e00      	cmp	r6, #0
 8006814:	bfa2      	ittt	ge
 8006816:	6821      	ldrge	r1, [r4, #0]
 8006818:	f021 0104 	bicge.w	r1, r1, #4
 800681c:	6021      	strge	r1, [r4, #0]
 800681e:	b90d      	cbnz	r5, 8006824 <_printf_i+0x110>
 8006820:	2e00      	cmp	r6, #0
 8006822:	d04b      	beq.n	80068bc <_printf_i+0x1a8>
 8006824:	4616      	mov	r6, r2
 8006826:	fbb5 f1f3 	udiv	r1, r5, r3
 800682a:	fb03 5711 	mls	r7, r3, r1, r5
 800682e:	5dc7      	ldrb	r7, [r0, r7]
 8006830:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006834:	462f      	mov	r7, r5
 8006836:	42bb      	cmp	r3, r7
 8006838:	460d      	mov	r5, r1
 800683a:	d9f4      	bls.n	8006826 <_printf_i+0x112>
 800683c:	2b08      	cmp	r3, #8
 800683e:	d10b      	bne.n	8006858 <_printf_i+0x144>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	07df      	lsls	r7, r3, #31
 8006844:	d508      	bpl.n	8006858 <_printf_i+0x144>
 8006846:	6923      	ldr	r3, [r4, #16]
 8006848:	6861      	ldr	r1, [r4, #4]
 800684a:	4299      	cmp	r1, r3
 800684c:	bfde      	ittt	le
 800684e:	2330      	movle	r3, #48	@ 0x30
 8006850:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006854:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006858:	1b92      	subs	r2, r2, r6
 800685a:	6122      	str	r2, [r4, #16]
 800685c:	f8cd a000 	str.w	sl, [sp]
 8006860:	464b      	mov	r3, r9
 8006862:	aa03      	add	r2, sp, #12
 8006864:	4621      	mov	r1, r4
 8006866:	4640      	mov	r0, r8
 8006868:	f7ff fee6 	bl	8006638 <_printf_common>
 800686c:	3001      	adds	r0, #1
 800686e:	d14a      	bne.n	8006906 <_printf_i+0x1f2>
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	b004      	add	sp, #16
 8006876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	f043 0320 	orr.w	r3, r3, #32
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	4833      	ldr	r0, [pc, #204]	@ (8006950 <_printf_i+0x23c>)
 8006884:	2778      	movs	r7, #120	@ 0x78
 8006886:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	6831      	ldr	r1, [r6, #0]
 800688e:	061f      	lsls	r7, r3, #24
 8006890:	f851 5b04 	ldr.w	r5, [r1], #4
 8006894:	d402      	bmi.n	800689c <_printf_i+0x188>
 8006896:	065f      	lsls	r7, r3, #25
 8006898:	bf48      	it	mi
 800689a:	b2ad      	uxthmi	r5, r5
 800689c:	6031      	str	r1, [r6, #0]
 800689e:	07d9      	lsls	r1, r3, #31
 80068a0:	bf44      	itt	mi
 80068a2:	f043 0320 	orrmi.w	r3, r3, #32
 80068a6:	6023      	strmi	r3, [r4, #0]
 80068a8:	b11d      	cbz	r5, 80068b2 <_printf_i+0x19e>
 80068aa:	2310      	movs	r3, #16
 80068ac:	e7ac      	b.n	8006808 <_printf_i+0xf4>
 80068ae:	4827      	ldr	r0, [pc, #156]	@ (800694c <_printf_i+0x238>)
 80068b0:	e7e9      	b.n	8006886 <_printf_i+0x172>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	f023 0320 	bic.w	r3, r3, #32
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	e7f6      	b.n	80068aa <_printf_i+0x196>
 80068bc:	4616      	mov	r6, r2
 80068be:	e7bd      	b.n	800683c <_printf_i+0x128>
 80068c0:	6833      	ldr	r3, [r6, #0]
 80068c2:	6825      	ldr	r5, [r4, #0]
 80068c4:	6961      	ldr	r1, [r4, #20]
 80068c6:	1d18      	adds	r0, r3, #4
 80068c8:	6030      	str	r0, [r6, #0]
 80068ca:	062e      	lsls	r6, r5, #24
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	d501      	bpl.n	80068d4 <_printf_i+0x1c0>
 80068d0:	6019      	str	r1, [r3, #0]
 80068d2:	e002      	b.n	80068da <_printf_i+0x1c6>
 80068d4:	0668      	lsls	r0, r5, #25
 80068d6:	d5fb      	bpl.n	80068d0 <_printf_i+0x1bc>
 80068d8:	8019      	strh	r1, [r3, #0]
 80068da:	2300      	movs	r3, #0
 80068dc:	6123      	str	r3, [r4, #16]
 80068de:	4616      	mov	r6, r2
 80068e0:	e7bc      	b.n	800685c <_printf_i+0x148>
 80068e2:	6833      	ldr	r3, [r6, #0]
 80068e4:	1d1a      	adds	r2, r3, #4
 80068e6:	6032      	str	r2, [r6, #0]
 80068e8:	681e      	ldr	r6, [r3, #0]
 80068ea:	6862      	ldr	r2, [r4, #4]
 80068ec:	2100      	movs	r1, #0
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7f9 fc6e 	bl	80001d0 <memchr>
 80068f4:	b108      	cbz	r0, 80068fa <_printf_i+0x1e6>
 80068f6:	1b80      	subs	r0, r0, r6
 80068f8:	6060      	str	r0, [r4, #4]
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	6123      	str	r3, [r4, #16]
 80068fe:	2300      	movs	r3, #0
 8006900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006904:	e7aa      	b.n	800685c <_printf_i+0x148>
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	4632      	mov	r2, r6
 800690a:	4649      	mov	r1, r9
 800690c:	4640      	mov	r0, r8
 800690e:	47d0      	blx	sl
 8006910:	3001      	adds	r0, #1
 8006912:	d0ad      	beq.n	8006870 <_printf_i+0x15c>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	079b      	lsls	r3, r3, #30
 8006918:	d413      	bmi.n	8006942 <_printf_i+0x22e>
 800691a:	68e0      	ldr	r0, [r4, #12]
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	4298      	cmp	r0, r3
 8006920:	bfb8      	it	lt
 8006922:	4618      	movlt	r0, r3
 8006924:	e7a6      	b.n	8006874 <_printf_i+0x160>
 8006926:	2301      	movs	r3, #1
 8006928:	4632      	mov	r2, r6
 800692a:	4649      	mov	r1, r9
 800692c:	4640      	mov	r0, r8
 800692e:	47d0      	blx	sl
 8006930:	3001      	adds	r0, #1
 8006932:	d09d      	beq.n	8006870 <_printf_i+0x15c>
 8006934:	3501      	adds	r5, #1
 8006936:	68e3      	ldr	r3, [r4, #12]
 8006938:	9903      	ldr	r1, [sp, #12]
 800693a:	1a5b      	subs	r3, r3, r1
 800693c:	42ab      	cmp	r3, r5
 800693e:	dcf2      	bgt.n	8006926 <_printf_i+0x212>
 8006940:	e7eb      	b.n	800691a <_printf_i+0x206>
 8006942:	2500      	movs	r5, #0
 8006944:	f104 0619 	add.w	r6, r4, #25
 8006948:	e7f5      	b.n	8006936 <_printf_i+0x222>
 800694a:	bf00      	nop
 800694c:	08006e11 	.word	0x08006e11
 8006950:	08006e22 	.word	0x08006e22

08006954 <__sflush_r>:
 8006954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695c:	0716      	lsls	r6, r2, #28
 800695e:	4605      	mov	r5, r0
 8006960:	460c      	mov	r4, r1
 8006962:	d454      	bmi.n	8006a0e <__sflush_r+0xba>
 8006964:	684b      	ldr	r3, [r1, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	dc02      	bgt.n	8006970 <__sflush_r+0x1c>
 800696a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	dd48      	ble.n	8006a02 <__sflush_r+0xae>
 8006970:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006972:	2e00      	cmp	r6, #0
 8006974:	d045      	beq.n	8006a02 <__sflush_r+0xae>
 8006976:	2300      	movs	r3, #0
 8006978:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800697c:	682f      	ldr	r7, [r5, #0]
 800697e:	6a21      	ldr	r1, [r4, #32]
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	d030      	beq.n	80069e6 <__sflush_r+0x92>
 8006984:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	0759      	lsls	r1, r3, #29
 800698a:	d505      	bpl.n	8006998 <__sflush_r+0x44>
 800698c:	6863      	ldr	r3, [r4, #4]
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006992:	b10b      	cbz	r3, 8006998 <__sflush_r+0x44>
 8006994:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	2300      	movs	r3, #0
 800699a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800699c:	6a21      	ldr	r1, [r4, #32]
 800699e:	4628      	mov	r0, r5
 80069a0:	47b0      	blx	r6
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	d106      	bne.n	80069b6 <__sflush_r+0x62>
 80069a8:	6829      	ldr	r1, [r5, #0]
 80069aa:	291d      	cmp	r1, #29
 80069ac:	d82b      	bhi.n	8006a06 <__sflush_r+0xb2>
 80069ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006a58 <__sflush_r+0x104>)
 80069b0:	410a      	asrs	r2, r1
 80069b2:	07d6      	lsls	r6, r2, #31
 80069b4:	d427      	bmi.n	8006a06 <__sflush_r+0xb2>
 80069b6:	2200      	movs	r2, #0
 80069b8:	6062      	str	r2, [r4, #4]
 80069ba:	04d9      	lsls	r1, r3, #19
 80069bc:	6922      	ldr	r2, [r4, #16]
 80069be:	6022      	str	r2, [r4, #0]
 80069c0:	d504      	bpl.n	80069cc <__sflush_r+0x78>
 80069c2:	1c42      	adds	r2, r0, #1
 80069c4:	d101      	bne.n	80069ca <__sflush_r+0x76>
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	b903      	cbnz	r3, 80069cc <__sflush_r+0x78>
 80069ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80069cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069ce:	602f      	str	r7, [r5, #0]
 80069d0:	b1b9      	cbz	r1, 8006a02 <__sflush_r+0xae>
 80069d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069d6:	4299      	cmp	r1, r3
 80069d8:	d002      	beq.n	80069e0 <__sflush_r+0x8c>
 80069da:	4628      	mov	r0, r5
 80069dc:	f7ff fa9a 	bl	8005f14 <_free_r>
 80069e0:	2300      	movs	r3, #0
 80069e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80069e4:	e00d      	b.n	8006a02 <__sflush_r+0xae>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b0      	blx	r6
 80069ec:	4602      	mov	r2, r0
 80069ee:	1c50      	adds	r0, r2, #1
 80069f0:	d1c9      	bne.n	8006986 <__sflush_r+0x32>
 80069f2:	682b      	ldr	r3, [r5, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c6      	beq.n	8006986 <__sflush_r+0x32>
 80069f8:	2b1d      	cmp	r3, #29
 80069fa:	d001      	beq.n	8006a00 <__sflush_r+0xac>
 80069fc:	2b16      	cmp	r3, #22
 80069fe:	d11e      	bne.n	8006a3e <__sflush_r+0xea>
 8006a00:	602f      	str	r7, [r5, #0]
 8006a02:	2000      	movs	r0, #0
 8006a04:	e022      	b.n	8006a4c <__sflush_r+0xf8>
 8006a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a0a:	b21b      	sxth	r3, r3
 8006a0c:	e01b      	b.n	8006a46 <__sflush_r+0xf2>
 8006a0e:	690f      	ldr	r7, [r1, #16]
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	d0f6      	beq.n	8006a02 <__sflush_r+0xae>
 8006a14:	0793      	lsls	r3, r2, #30
 8006a16:	680e      	ldr	r6, [r1, #0]
 8006a18:	bf08      	it	eq
 8006a1a:	694b      	ldreq	r3, [r1, #20]
 8006a1c:	600f      	str	r7, [r1, #0]
 8006a1e:	bf18      	it	ne
 8006a20:	2300      	movne	r3, #0
 8006a22:	eba6 0807 	sub.w	r8, r6, r7
 8006a26:	608b      	str	r3, [r1, #8]
 8006a28:	f1b8 0f00 	cmp.w	r8, #0
 8006a2c:	dde9      	ble.n	8006a02 <__sflush_r+0xae>
 8006a2e:	6a21      	ldr	r1, [r4, #32]
 8006a30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a32:	4643      	mov	r3, r8
 8006a34:	463a      	mov	r2, r7
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b0      	blx	r6
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	dc08      	bgt.n	8006a50 <__sflush_r+0xfc>
 8006a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a50:	4407      	add	r7, r0
 8006a52:	eba8 0800 	sub.w	r8, r8, r0
 8006a56:	e7e7      	b.n	8006a28 <__sflush_r+0xd4>
 8006a58:	dfbffffe 	.word	0xdfbffffe

08006a5c <_fflush_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	690b      	ldr	r3, [r1, #16]
 8006a60:	4605      	mov	r5, r0
 8006a62:	460c      	mov	r4, r1
 8006a64:	b913      	cbnz	r3, 8006a6c <_fflush_r+0x10>
 8006a66:	2500      	movs	r5, #0
 8006a68:	4628      	mov	r0, r5
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	b118      	cbz	r0, 8006a76 <_fflush_r+0x1a>
 8006a6e:	6a03      	ldr	r3, [r0, #32]
 8006a70:	b90b      	cbnz	r3, 8006a76 <_fflush_r+0x1a>
 8006a72:	f7ff f813 	bl	8005a9c <__sinit>
 8006a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0f3      	beq.n	8006a66 <_fflush_r+0xa>
 8006a7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a80:	07d0      	lsls	r0, r2, #31
 8006a82:	d404      	bmi.n	8006a8e <_fflush_r+0x32>
 8006a84:	0599      	lsls	r1, r3, #22
 8006a86:	d402      	bmi.n	8006a8e <_fflush_r+0x32>
 8006a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a8a:	f7ff fa32 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 8006a8e:	4628      	mov	r0, r5
 8006a90:	4621      	mov	r1, r4
 8006a92:	f7ff ff5f 	bl	8006954 <__sflush_r>
 8006a96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a98:	07da      	lsls	r2, r3, #31
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	d4e4      	bmi.n	8006a68 <_fflush_r+0xc>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	059b      	lsls	r3, r3, #22
 8006aa2:	d4e1      	bmi.n	8006a68 <_fflush_r+0xc>
 8006aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aa6:	f7ff fa25 	bl	8005ef4 <__retarget_lock_release_recursive>
 8006aaa:	e7dd      	b.n	8006a68 <_fflush_r+0xc>

08006aac <__swhatbuf_r>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	460c      	mov	r4, r1
 8006ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab4:	2900      	cmp	r1, #0
 8006ab6:	b096      	sub	sp, #88	@ 0x58
 8006ab8:	4615      	mov	r5, r2
 8006aba:	461e      	mov	r6, r3
 8006abc:	da0d      	bge.n	8006ada <__swhatbuf_r+0x2e>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ac4:	f04f 0100 	mov.w	r1, #0
 8006ac8:	bf14      	ite	ne
 8006aca:	2340      	movne	r3, #64	@ 0x40
 8006acc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	6031      	str	r1, [r6, #0]
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	b016      	add	sp, #88	@ 0x58
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	466a      	mov	r2, sp
 8006adc:	f000 f862 	bl	8006ba4 <_fstat_r>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	dbec      	blt.n	8006abe <__swhatbuf_r+0x12>
 8006ae4:	9901      	ldr	r1, [sp, #4]
 8006ae6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006aea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006aee:	4259      	negs	r1, r3
 8006af0:	4159      	adcs	r1, r3
 8006af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006af6:	e7eb      	b.n	8006ad0 <__swhatbuf_r+0x24>

08006af8 <__smakebuf_r>:
 8006af8:	898b      	ldrh	r3, [r1, #12]
 8006afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006afc:	079d      	lsls	r5, r3, #30
 8006afe:	4606      	mov	r6, r0
 8006b00:	460c      	mov	r4, r1
 8006b02:	d507      	bpl.n	8006b14 <__smakebuf_r+0x1c>
 8006b04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	6123      	str	r3, [r4, #16]
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	6163      	str	r3, [r4, #20]
 8006b10:	b003      	add	sp, #12
 8006b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b14:	ab01      	add	r3, sp, #4
 8006b16:	466a      	mov	r2, sp
 8006b18:	f7ff ffc8 	bl	8006aac <__swhatbuf_r>
 8006b1c:	9f00      	ldr	r7, [sp, #0]
 8006b1e:	4605      	mov	r5, r0
 8006b20:	4639      	mov	r1, r7
 8006b22:	4630      	mov	r0, r6
 8006b24:	f7ff fa62 	bl	8005fec <_malloc_r>
 8006b28:	b948      	cbnz	r0, 8006b3e <__smakebuf_r+0x46>
 8006b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2e:	059a      	lsls	r2, r3, #22
 8006b30:	d4ee      	bmi.n	8006b10 <__smakebuf_r+0x18>
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	f043 0302 	orr.w	r3, r3, #2
 8006b3a:	81a3      	strh	r3, [r4, #12]
 8006b3c:	e7e2      	b.n	8006b04 <__smakebuf_r+0xc>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	6020      	str	r0, [r4, #0]
 8006b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b46:	81a3      	strh	r3, [r4, #12]
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b4e:	b15b      	cbz	r3, 8006b68 <__smakebuf_r+0x70>
 8006b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b54:	4630      	mov	r0, r6
 8006b56:	f000 f837 	bl	8006bc8 <_isatty_r>
 8006b5a:	b128      	cbz	r0, 8006b68 <__smakebuf_r+0x70>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	431d      	orrs	r5, r3
 8006b6c:	81a5      	strh	r5, [r4, #12]
 8006b6e:	e7cf      	b.n	8006b10 <__smakebuf_r+0x18>

08006b70 <memmove>:
 8006b70:	4288      	cmp	r0, r1
 8006b72:	b510      	push	{r4, lr}
 8006b74:	eb01 0402 	add.w	r4, r1, r2
 8006b78:	d902      	bls.n	8006b80 <memmove+0x10>
 8006b7a:	4284      	cmp	r4, r0
 8006b7c:	4623      	mov	r3, r4
 8006b7e:	d807      	bhi.n	8006b90 <memmove+0x20>
 8006b80:	1e43      	subs	r3, r0, #1
 8006b82:	42a1      	cmp	r1, r4
 8006b84:	d008      	beq.n	8006b98 <memmove+0x28>
 8006b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b8e:	e7f8      	b.n	8006b82 <memmove+0x12>
 8006b90:	4402      	add	r2, r0
 8006b92:	4601      	mov	r1, r0
 8006b94:	428a      	cmp	r2, r1
 8006b96:	d100      	bne.n	8006b9a <memmove+0x2a>
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ba2:	e7f7      	b.n	8006b94 <memmove+0x24>

08006ba4 <_fstat_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d07      	ldr	r5, [pc, #28]	@ (8006bc4 <_fstat_r+0x20>)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	f7fa f860 	bl	8000c76 <_fstat>
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	d102      	bne.n	8006bc0 <_fstat_r+0x1c>
 8006bba:	682b      	ldr	r3, [r5, #0]
 8006bbc:	b103      	cbz	r3, 8006bc0 <_fstat_r+0x1c>
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20001514 	.word	0x20001514

08006bc8 <_isatty_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d06      	ldr	r5, [pc, #24]	@ (8006be4 <_isatty_r+0x1c>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	602b      	str	r3, [r5, #0]
 8006bd4:	f7fa f85f 	bl	8000c96 <_isatty>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_isatty_r+0x1a>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_isatty_r+0x1a>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	20001514 	.word	0x20001514

08006be8 <_sbrk_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4d06      	ldr	r5, [pc, #24]	@ (8006c04 <_sbrk_r+0x1c>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	f7fa f868 	bl	8000cc8 <_sbrk>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_sbrk_r+0x1a>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_sbrk_r+0x1a>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	20001514 	.word	0x20001514

08006c08 <_realloc_r>:
 8006c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	4615      	mov	r5, r2
 8006c10:	460c      	mov	r4, r1
 8006c12:	b921      	cbnz	r1, 8006c1e <_realloc_r+0x16>
 8006c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c18:	4611      	mov	r1, r2
 8006c1a:	f7ff b9e7 	b.w	8005fec <_malloc_r>
 8006c1e:	b92a      	cbnz	r2, 8006c2c <_realloc_r+0x24>
 8006c20:	f7ff f978 	bl	8005f14 <_free_r>
 8006c24:	2400      	movs	r4, #0
 8006c26:	4620      	mov	r0, r4
 8006c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c2c:	f000 f81a 	bl	8006c64 <_malloc_usable_size_r>
 8006c30:	4285      	cmp	r5, r0
 8006c32:	4606      	mov	r6, r0
 8006c34:	d802      	bhi.n	8006c3c <_realloc_r+0x34>
 8006c36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c3a:	d8f4      	bhi.n	8006c26 <_realloc_r+0x1e>
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4640      	mov	r0, r8
 8006c40:	f7ff f9d4 	bl	8005fec <_malloc_r>
 8006c44:	4607      	mov	r7, r0
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d0ec      	beq.n	8006c24 <_realloc_r+0x1c>
 8006c4a:	42b5      	cmp	r5, r6
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	4621      	mov	r1, r4
 8006c50:	bf28      	it	cs
 8006c52:	4632      	movcs	r2, r6
 8006c54:	f7ff f94f 	bl	8005ef6 <memcpy>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	f7ff f95a 	bl	8005f14 <_free_r>
 8006c60:	463c      	mov	r4, r7
 8006c62:	e7e0      	b.n	8006c26 <_realloc_r+0x1e>

08006c64 <_malloc_usable_size_r>:
 8006c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c68:	1f18      	subs	r0, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bfbc      	itt	lt
 8006c6e:	580b      	ldrlt	r3, [r1, r0]
 8006c70:	18c0      	addlt	r0, r0, r3
 8006c72:	4770      	bx	lr

08006c74 <_init>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr

08006c80 <_fini>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr
